!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], false, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function r(e,r){for(var n=e.split(".");n.length;)r=r[n.shift()];return r}function n(n){if("string"==typeof n)return r(n,e);if(!(n instanceof Array))throw new Error("Global exports must be a string or array.");for(var t={},o=!0,f=0;f<n.length;f++){var i=r(n[f],e);o&&(t["default"]=i,o=!1),t[n[f].split(".").pop()]=i}return t}function t(r){if(Object.keys)Object.keys(e).forEach(r);else for(var n in e)a.call(e,n)&&r(n)}function o(r){t(function(n){if(-1==l.call(s,n)){try{var t=e[n]}catch(o){s.push(n)}r(n,t)}})}var f,i=$__System,a=Object.prototype.hasOwnProperty,l=Array.prototype.indexOf||function(e){for(var r=0,n=this.length;n>r;r++)if(this[r]===e)return r;return-1},s=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];i.set("@@global-helpers",i.newModule({prepareGlobal:function(r,t,i){var a=e.define;e.define=void 0;var l;if(i){l={};for(var s in i)l[s]=e[s],e[s]=i[s]}return t||(f={},o(function(e,r){f[e]=r})),function(){var r;if(t)r=n(t);else{r={};var i,s;o(function(e,n){f[e]!==n&&"undefined"!=typeof n&&(r[e]=n,"undefined"!=typeof i?s||i===n||(s=!0):i=n)}),r=s?r:i}if(l)for(var u in l)e[u]=l[u];return e.define=a,r}}}))}("undefined"!=typeof self?self:global);
$__System.registerDynamic('2', ['3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();
    })(this, function () {
      'use strict';

      var Zone$1 = function (global) {
        if (global.Zone) {
          throw new Error('Zone already loaded.');
        }
        var Zone = function () {
          function Zone(parent, zoneSpec) {
            this._properties = null;
            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
          }
          Zone.assertZonePatched = function () {
            if (global.Promise !== ZoneAwarePromise) {
              throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' + 'has been overwritten.\n' + 'Most likely cause is that a Promise polyfill has been loaded ' + 'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' + 'If you must load one, do so before loading zone.js.)');
            }
          };
          Object.defineProperty(Zone, "current", {
            get: function () {
              return _currentZone;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Zone, "currentTask", {
            get: function () {
              return _currentTask;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Zone.prototype, "parent", {
            get: function () {
              return this._parent;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Zone.prototype, "name", {
            get: function () {
              return this._name;
            },
            enumerable: true,
            configurable: true
          });
          Zone.prototype.get = function (key) {
            var zone = this.getZoneWith(key);
            if (zone) return zone._properties[key];
          };
          Zone.prototype.getZoneWith = function (key) {
            var current = this;
            while (current) {
              if (current._properties.hasOwnProperty(key)) {
                return current;
              }
              current = current._parent;
            }
            return null;
          };
          Zone.prototype.fork = function (zoneSpec) {
            if (!zoneSpec) throw new Error('ZoneSpec required!');
            return this._zoneDelegate.fork(this, zoneSpec);
          };
          Zone.prototype.wrap = function (callback, source) {
            if (typeof callback !== 'function') {
              throw new Error('Expecting function got: ' + callback);
            }
            var _callback = this._zoneDelegate.intercept(this, callback, source);
            var zone = this;
            return function () {
              return zone.runGuarded(_callback, this, arguments, source);
            };
          };
          Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) {
              applyThis = null;
            }
            if (applyArgs === void 0) {
              applyArgs = null;
            }
            if (source === void 0) {
              source = null;
            }
            var oldZone = _currentZone;
            _currentZone = this;
            try {
              return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
            } finally {
              _currentZone = oldZone;
            }
          };
          Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) {
              applyThis = null;
            }
            if (applyArgs === void 0) {
              applyArgs = null;
            }
            if (source === void 0) {
              source = null;
            }
            var oldZone = _currentZone;
            _currentZone = this;
            try {
              try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
              } catch (error) {
                if (this._zoneDelegate.handleError(this, error)) {
                  throw error;
                }
              }
            } finally {
              _currentZone = oldZone;
            }
          };
          Zone.prototype.runTask = function (task, applyThis, applyArgs) {
            task.runCount++;
            if (task.zone != this) throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name + '; Execution: ' + this.name + ')');
            var previousTask = _currentTask;
            _currentTask = task;
            var oldZone = _currentZone;
            _currentZone = this;
            try {
              if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
                task.cancelFn = null;
              }
              try {
                return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
              } catch (error) {
                if (this._zoneDelegate.handleError(this, error)) {
                  throw error;
                }
              }
            } finally {
              _currentZone = oldZone;
              _currentTask = previousTask;
            }
          };
          Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
          };
          Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
          };
          Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
          };
          Zone.prototype.cancelTask = function (task) {
            var value = this._zoneDelegate.cancelTask(this, task);
            task.runCount = -1;
            task.cancelFn = null;
            return value;
          };
          Zone.__symbol__ = __symbol__;
          return Zone;
        }();
        var ZoneDelegate = function () {
          function ZoneDelegate(zone, parentDelegate, zoneSpec) {
            this._taskCounts = {
              microTask: 0,
              macroTask: 0,
              eventTask: 0
            };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
            this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
          }
          ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
          };
          ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
            return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) : callback;
          };
          ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
          };
          ZoneDelegate.prototype.handleError = function (targetZone, error) {
            return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) : true;
          };
          ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
            try {
              if (this._scheduleTaskZS) {
                return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
              } else if (task.scheduleFn) {
                task.scheduleFn(task);
              } else if (task.type == 'microTask') {
                scheduleMicroTask(task);
              } else {
                throw new Error('Task is missing scheduleFn.');
              }
              return task;
            } finally {
              if (targetZone == this.zone) {
                this._updateTaskCount(task.type, 1);
              }
            }
          };
          ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
            try {
              return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
            } finally {
              if (targetZone == this.zone && task.type != 'eventTask' && !(task.data && task.data.isPeriodic)) {
                this._updateTaskCount(task.type, -1);
              }
            }
          };
          ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
            var value;
            if (this._cancelTaskZS) {
              value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
            } else if (!task.cancelFn) {
              throw new Error('Task does not support cancellation, or is already canceled.');
            } else {
              value = task.cancelFn(task);
            }
            if (targetZone == this.zone) {
              this._updateTaskCount(task.type, -1);
            }
            return value;
          };
          ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
            return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
          };
          ZoneDelegate.prototype._updateTaskCount = function (type, count) {
            var counts = this._taskCounts;
            var prev = counts[type];
            var next = counts[type] = prev + count;
            if (next < 0) {
              throw new Error('More tasks executed then were scheduled.');
            }
            if (prev == 0 || next == 0) {
              var isEmpty = {
                microTask: counts.microTask > 0,
                macroTask: counts.macroTask > 0,
                eventTask: counts.eventTask > 0,
                change: type
              };
              try {
                this.hasTask(this.zone, isEmpty);
              } finally {
                if (this._parentDelegate) {
                  this._parentDelegate._updateTaskCount(type, count);
                }
              }
            }
          };
          return ZoneDelegate;
        }();
        var ZoneTask = function () {
          function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
            this.runCount = 0;
            this.type = type;
            this.zone = zone;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;
            this.callback = callback;
            var self = this;
            this.invoke = function () {
              _numberOfNestedTaskFrames++;
              try {
                return zone.runTask(self, this, arguments);
              } finally {
                if (_numberOfNestedTaskFrames == 1) {
                  drainMicroTaskQueue();
                }
                _numberOfNestedTaskFrames--;
              }
            };
          }
          ZoneTask.prototype.toString = function () {
            if (this.data && typeof this.data.handleId !== 'undefined') {
              return this.data.handleId;
            } else {
              return Object.prototype.toString.call(this);
            }
          };
          return ZoneTask;
        }();
        function __symbol__(name) {
          return '__zone_symbol__' + name;
        }
        var symbolSetTimeout = __symbol__('setTimeout');
        var symbolPromise = __symbol__('Promise');
        var symbolThen = __symbol__('then');
        var _currentZone = new Zone(null, null);
        var _currentTask = null;
        var _microTaskQueue = [];
        var _isDrainingMicrotaskQueue = false;
        var _uncaughtPromiseErrors = [];
        var _numberOfNestedTaskFrames = 0;
        function scheduleQueueDrain() {
          if (_numberOfNestedTaskFrames == 0 && _microTaskQueue.length == 0) {
            if (global[symbolPromise]) {
              global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
            } else {
              global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
          }
        }
        function scheduleMicroTask(task) {
          scheduleQueueDrain();
          _microTaskQueue.push(task);
        }
        function consoleError(e) {
          var rejection = e && e.rejection;
          if (rejection) {
            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
          }
          console.error(e);
        }
        function drainMicroTaskQueue() {
          if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;
            while (_microTaskQueue.length) {
              var queue = _microTaskQueue;
              _microTaskQueue = [];
              for (var i = 0; i < queue.length; i++) {
                var task = queue[i];
                try {
                  task.zone.runTask(task, null, null);
                } catch (e) {
                  consoleError(e);
                }
              }
            }
            while (_uncaughtPromiseErrors.length) {
              var _loop_1 = function () {
                var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
                try {
                  uncaughtPromiseError.zone.runGuarded(function () {
                    throw uncaughtPromiseError;
                  });
                } catch (e) {
                  consoleError(e);
                }
              };
              while (_uncaughtPromiseErrors.length) {
                _loop_1();
              }
            }
            _isDrainingMicrotaskQueue = false;
          }
        }
        function isThenable(value) {
          return value && value.then;
        }
        function forwardResolution(value) {
          return value;
        }
        function forwardRejection(rejection) {
          return ZoneAwarePromise.reject(rejection);
        }
        var symbolState = __symbol__('state');
        var symbolValue = __symbol__('value');
        var source = 'Promise.then';
        var UNRESOLVED = null;
        var RESOLVED = true;
        var REJECTED = false;
        var REJECTED_NO_CATCH = 0;
        function makeResolver(promise, state) {
          return function (v) {
            resolvePromise(promise, state, v);
          };
        }
        function resolvePromise(promise, state, value) {
          if (promise[symbolState] === UNRESOLVED) {
            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
              clearRejectedNoCatch(value);
              resolvePromise(promise, value[symbolState], value[symbolValue]);
            } else if (isThenable(value)) {
              value.then(makeResolver(promise, state), makeResolver(promise, false));
            } else {
              promise[symbolState] = state;
              var queue = promise[symbolValue];
              promise[symbolValue] = value;
              for (var i = 0; i < queue.length;) {
                scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
              }
              if (queue.length == 0 && state == REJECTED) {
                promise[symbolState] = REJECTED_NO_CATCH;
                try {
                  throw new Error('Uncaught (in promise): ' + value + (value && value.stack ? '\n' + value.stack : ''));
                } catch (e) {
                  var error_1 = e;
                  error_1.rejection = value;
                  error_1.promise = promise;
                  error_1.zone = Zone.current;
                  error_1.task = Zone.currentTask;
                  _uncaughtPromiseErrors.push(error_1);
                  scheduleQueueDrain();
                }
              }
            }
          }
          return promise;
        }
        function clearRejectedNoCatch(promise) {
          if (promise[symbolState] === REJECTED_NO_CATCH) {
            promise[symbolState] = REJECTED;
            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
              if (promise === _uncaughtPromiseErrors[i].promise) {
                _uncaughtPromiseErrors.splice(i, 1);
                break;
              }
            }
          }
        }
        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
          clearRejectedNoCatch(promise);
          var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
          zone.scheduleMicroTask(source, function () {
            try {
              resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
            } catch (error) {
              resolvePromise(chainPromise, false, error);
            }
          });
        }
        var ZoneAwarePromise = function () {
          function ZoneAwarePromise(executor) {
            var promise = this;
            if (!(promise instanceof ZoneAwarePromise)) {
              throw new Error('Must be an instanceof Promise.');
            }
            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = [];
            try {
              executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            } catch (e) {
              resolvePromise(promise, false, e);
            }
          }
          ZoneAwarePromise.resolve = function (value) {
            return resolvePromise(new this(null), RESOLVED, value);
          };
          ZoneAwarePromise.reject = function (error) {
            return resolvePromise(new this(null), REJECTED, error);
          };
          ZoneAwarePromise.race = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) {
              _a = [res, rej], resolve = _a[0], reject = _a[1];
              var _a;
            });
            function onResolve(value) {
              promise && (promise = null || resolve(value));
            }
            function onReject(error) {
              promise && (promise = null || reject(error));
            }
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
              var value = values_1[_i];
              if (!isThenable(value)) {
                value = this.resolve(value);
              }
              value.then(onResolve, onReject);
            }
            return promise;
          };
          ZoneAwarePromise.all = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) {
              resolve = res;
              reject = rej;
            });
            var count = 0;
            var resolvedValues = [];
            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
              var value = values_2[_i];
              if (!isThenable(value)) {
                value = this.resolve(value);
              }
              value.then(function (index) {
                return function (value) {
                  resolvedValues[index] = value;
                  count--;
                  if (!count) {
                    resolve(resolvedValues);
                  }
                };
              }(count), reject);
              count++;
            }
            if (!count) resolve(resolvedValues);
            return promise;
          };
          ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
            var chainPromise = new this.constructor(null);
            var zone = Zone.current;
            if (this[symbolState] == UNRESOLVED) {
              this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
            } else {
              scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
            }
            return chainPromise;
          };
          ZoneAwarePromise.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
          };
          return ZoneAwarePromise;
        }();
        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
        ZoneAwarePromise['race'] = ZoneAwarePromise.race;
        ZoneAwarePromise['all'] = ZoneAwarePromise.all;
        var NativePromise = global[__symbol__('Promise')] = global.Promise;
        global.Promise = ZoneAwarePromise;
        function patchThen(NativePromise) {
          var NativePromiseProtototype = NativePromise.prototype;
          var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] = NativePromiseProtototype.then;
          NativePromiseProtototype.then = function (onResolve, onReject) {
            var nativePromise = this;
            return new ZoneAwarePromise(function (resolve, reject) {
              NativePromiseThen.call(nativePromise, resolve, reject);
            }).then(onResolve, onReject);
          };
        }
        if (NativePromise) {
          patchThen(NativePromise);
          if (typeof global['fetch'] !== 'undefined') {
            var fetchPromise = void 0;
            try {
              fetchPromise = global['fetch']();
            } catch (e) {
              fetchPromise = global['fetch']('about:blank');
            }
            fetchPromise.then(function () {
              return null;
            }, function () {
              return null;
            });
            if (fetchPromise.constructor != NativePromise && fetchPromise.constructor != ZoneAwarePromise) {
              patchThen(fetchPromise.constructor);
            }
          }
        }
        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
        return global.Zone = Zone;
      }(typeof window === 'object' && window || typeof self === 'object' && self || global);
      var zoneSymbol = Zone['__symbol__'];
      var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
      function bindArguments(args, source) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (typeof args[i] === 'function') {
            args[i] = Zone.current.wrap(args[i], source + '_' + i);
          }
        }
        return args;
      }
      function patchPrototype(prototype, fnNames) {
        var source = prototype.constructor['name'];
        var _loop_1 = function (i) {
          var name_1 = fnNames[i];
          var delegate = prototype[name_1];
          if (delegate) {
            prototype[name_1] = function (delegate) {
              return function () {
                return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
              };
            }(delegate);
          }
        };
        for (var i = 0; i < fnNames.length; i++) {
          _loop_1(i);
        }
      }
      var isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
      var isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
      var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
      function patchProperty(obj, prop) {
        var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
          enumerable: true,
          configurable: true
        };
        delete desc.writable;
        delete desc.value;
        var eventName = prop.substr(2);
        var _prop = '_' + prop;
        desc.set = function (fn) {
          if (this[_prop]) {
            this.removeEventListener(eventName, this[_prop]);
          }
          if (typeof fn === 'function') {
            var wrapFn = function (event) {
              var result;
              result = fn.apply(this, arguments);
              if (result != undefined && !result) event.preventDefault();
            };
            this[_prop] = wrapFn;
            this.addEventListener(eventName, wrapFn, false);
          } else {
            this[_prop] = null;
          }
        };
        desc.get = function () {
          return this[_prop] || null;
        };
        Object.defineProperty(obj, prop, desc);
      }
      function patchOnProperties(obj, properties) {
        var onProperties = [];
        for (var prop in obj) {
          if (prop.substr(0, 2) == 'on') {
            onProperties.push(prop);
          }
        }
        for (var j = 0; j < onProperties.length; j++) {
          patchProperty(obj, onProperties[j]);
        }
        if (properties) {
          for (var i = 0; i < properties.length; i++) {
            patchProperty(obj, 'on' + properties[i]);
          }
        }
      }
      var EVENT_TASKS = zoneSymbol('eventTasks');
      var ADD_EVENT_LISTENER = 'addEventListener';
      var REMOVE_EVENT_LISTENER = 'removeEventListener';
      function findExistingRegisteredTask(target, handler, name, capture, remove) {
        var eventTasks = target[EVENT_TASKS];
        if (eventTasks) {
          for (var i = 0; i < eventTasks.length; i++) {
            var eventTask = eventTasks[i];
            var data = eventTask.data;
            if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
              if (remove) {
                eventTasks.splice(i, 1);
              }
              return eventTask;
            }
          }
        }
        return null;
      }
      function attachRegisteredEvent(target, eventTask) {
        var eventTasks = target[EVENT_TASKS];
        if (!eventTasks) {
          eventTasks = target[EVENT_TASKS] = [];
        }
        eventTasks.push(eventTask);
      }
      function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates) {
        if (useCapturingParam === void 0) {
          useCapturingParam = true;
        }
        if (allowDuplicates === void 0) {
          allowDuplicates = false;
        }
        var addFnSymbol = zoneSymbol(addFnName);
        var removeFnSymbol = zoneSymbol(removeFnName);
        var defaultUseCapturing = useCapturingParam ? false : undefined;
        function scheduleEventListener(eventTask) {
          var meta = eventTask.data;
          attachRegisteredEvent(meta.target, eventTask);
          return meta.target[addFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
        }
        function cancelEventListener(eventTask) {
          var meta = eventTask.data;
          findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
          meta.target[removeFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
        }
        return function zoneAwareAddListener(self, args) {
          var eventName = args[0];
          var handler = args[1];
          var useCapturing = args[2] || defaultUseCapturing;
          var target = self || _global$1;
          var delegate = null;
          if (typeof handler == 'function') {
            delegate = handler;
          } else if (handler && handler.handleEvent) {
            delegate = function (event) {
              return handler.handleEvent(event);
            };
          }
          var validZoneHandler = false;
          try {
            validZoneHandler = handler && handler.toString() === '[object FunctionWrapper]';
          } catch (e) {
            return;
          }
          if (!delegate || validZoneHandler) {
            return target[addFnSymbol](eventName, handler, useCapturing);
          }
          if (!allowDuplicates) {
            var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
            if (eventTask) {
              return target[addFnSymbol](eventName, eventTask.invoke, useCapturing);
            }
          }
          var zone = Zone.current;
          var source = target.constructor['name'] + '.' + addFnName + ':' + eventName;
          var data = {
            target: target,
            eventName: eventName,
            name: eventName,
            useCapturing: useCapturing,
            handler: handler
          };
          zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
        };
      }
      function makeZoneAwareRemoveListener(fnName, useCapturingParam) {
        if (useCapturingParam === void 0) {
          useCapturingParam = true;
        }
        var symbol = zoneSymbol(fnName);
        var defaultUseCapturing = useCapturingParam ? false : undefined;
        return function zoneAwareRemoveListener(self, args) {
          var eventName = args[0];
          var handler = args[1];
          var useCapturing = args[2] || defaultUseCapturing;
          var target = self || _global$1;
          var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
          if (eventTask) {
            eventTask.zone.cancelTask(eventTask);
          } else {
            target[symbol](eventName, handler, useCapturing);
          }
        };
      }
      var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
      var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
      function patchEventTargetMethods(obj) {
        if (obj && obj.addEventListener) {
          patchMethod(obj, ADD_EVENT_LISTENER, function () {
            return zoneAwareAddEventListener;
          });
          patchMethod(obj, REMOVE_EVENT_LISTENER, function () {
            return zoneAwareRemoveEventListener;
          });
          return true;
        } else {
          return false;
        }
      }
      var originalInstanceKey = zoneSymbol('originalInstance');
      function patchClass(className) {
        var OriginalClass = _global$1[className];
        if (!OriginalClass) return;
        _global$1[className] = function () {
          var a = bindArguments(arguments, className);
          switch (a.length) {
            case 0:
              this[originalInstanceKey] = new OriginalClass();
              break;
            case 1:
              this[originalInstanceKey] = new OriginalClass(a[0]);
              break;
            case 2:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
              break;
            case 3:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
              break;
            case 4:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
              break;
            default:
              throw new Error('Arg list too long.');
          }
        };
        var instance = new OriginalClass(function () {});
        var prop;
        for (prop in instance) {
          if (className === 'XMLHttpRequest' && prop === 'responseBlob') continue;
          (function (prop) {
            if (typeof instance[prop] === 'function') {
              _global$1[className].prototype[prop] = function () {
                return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
              };
            } else {
              Object.defineProperty(_global$1[className].prototype, prop, {
                set: function (fn) {
                  if (typeof fn === 'function') {
                    this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
                  } else {
                    this[originalInstanceKey][prop] = fn;
                  }
                },
                get: function () {
                  return this[originalInstanceKey][prop];
                }
              });
            }
          })(prop);
        }
        for (prop in OriginalClass) {
          if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
            _global$1[className][prop] = OriginalClass[prop];
          }
        }
      }
      function createNamedFn(name, delegate) {
        try {
          return Function('f', "return function " + name + "(){return f(this, arguments)}")(delegate);
        } catch (e) {
          return function () {
            return delegate(this, arguments);
          };
        }
      }
      function patchMethod(target, name, patchFn) {
        var proto = target;
        while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
          proto = Object.getPrototypeOf(proto);
        }
        if (!proto && target[name]) {
          proto = target;
        }
        var delegateName = zoneSymbol(name);
        var delegate;
        if (proto && !(delegate = proto[delegateName])) {
          delegate = proto[delegateName] = proto[name];
          proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
        }
        return delegate;
      }
      function patchTimer(window, setName, cancelName, nameSuffix) {
        var setNative = null;
        var clearNative = null;
        setName += nameSuffix;
        cancelName += nameSuffix;
        var tasksByHandleId = {};
        function scheduleTask(task) {
          var data = task.data;
          data.args[0] = function () {
            task.invoke.apply(this, arguments);
            delete tasksByHandleId[data.handleId];
          };
          data.handleId = setNative.apply(window, data.args);
          tasksByHandleId[data.handleId] = task;
          return task;
        }
        function clearTask(task) {
          delete tasksByHandleId[task.data.handleId];
          return clearNative(task.data.handleId);
        }
        setNative = patchMethod(window, setName, function (delegate) {
          return function (self, args) {
            if (typeof args[0] === 'function') {
              var zone = Zone.current;
              var options = {
                handleId: null,
                isPeriodic: nameSuffix === 'Interval',
                delay: nameSuffix === 'Timeout' || nameSuffix === 'Interval' ? args[1] || 0 : null,
                args: args
              };
              var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
              if (!task) {
                return task;
              }
              var handle = task.data.handleId;
              if (handle.ref && handle.unref) {
                task.ref = handle.ref.bind(handle);
                task.unref = handle.unref.bind(handle);
              }
              return task;
            } else {
              return delegate.apply(window, args);
            }
          };
        });
        clearNative = patchMethod(window, cancelName, function (delegate) {
          return function (self, args) {
            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
            if (task && typeof task.type === 'string') {
              if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
                task.zone.cancelTask(task);
              }
            } else {
              delegate.apply(window, args);
            }
          };
        });
      }
      var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
      var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] = Object.getOwnPropertyDescriptor;
      var _create = Object.create;
      var unconfigurablesKey = zoneSymbol('unconfigurables');
      function propertyPatch() {
        Object.defineProperty = function (obj, prop, desc) {
          if (isUnconfigurable(obj, prop)) {
            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
          }
          var originalConfigurableFlag = desc.configurable;
          if (prop !== 'prototype') {
            desc = rewriteDescriptor(obj, prop, desc);
          }
          return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
        };
        Object.defineProperties = function (obj, props) {
          Object.keys(props).forEach(function (prop) {
            Object.defineProperty(obj, prop, props[prop]);
          });
          return obj;
        };
        Object.create = function (obj, proto) {
          if (typeof proto === 'object' && !Object.isFrozen(proto)) {
            Object.keys(proto).forEach(function (prop) {
              proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
            });
          }
          return _create(obj, proto);
        };
        Object.getOwnPropertyDescriptor = function (obj, prop) {
          var desc = _getOwnPropertyDescriptor(obj, prop);
          if (isUnconfigurable(obj, prop)) {
            desc.configurable = false;
          }
          return desc;
        };
      }
      function _redefineProperty(obj, prop, desc) {
        var originalConfigurableFlag = desc.configurable;
        desc = rewriteDescriptor(obj, prop, desc);
        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
      }
      function isUnconfigurable(obj, prop) {
        return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
      }
      function rewriteDescriptor(obj, prop, desc) {
        desc.configurable = true;
        if (!desc.configurable) {
          if (!obj[unconfigurablesKey]) {
            _defineProperty(obj, unconfigurablesKey, {
              writable: true,
              value: {}
            });
          }
          obj[unconfigurablesKey][prop] = true;
        }
        return desc;
      }
      function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
        try {
          return _defineProperty(obj, prop, desc);
        } catch (e) {
          if (desc.configurable) {
            if (typeof originalConfigurableFlag == 'undefined') {
              delete desc.configurable;
            } else {
              desc.configurable = originalConfigurableFlag;
            }
            try {
              return _defineProperty(obj, prop, desc);
            } catch (e) {
              var descJson = null;
              try {
                descJson = JSON.stringify(desc);
              } catch (e) {
                descJson = descJson.toString();
              }
              console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + e);
            }
          } else {
            throw e;
          }
        }
      }
      var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
      var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex'.split(',');
      var EVENT_TARGET = 'EventTarget';
      function eventTargetPatch(_global) {
        var apis = [];
        var isWtf = _global['wtf'];
        if (isWtf) {
          apis = WTF_ISSUE_555.split(',').map(function (v) {
            return 'HTML' + v + 'Element';
          }).concat(NO_EVENT_TARGET);
        } else if (_global[EVENT_TARGET]) {
          apis.push(EVENT_TARGET);
        } else {
          apis = NO_EVENT_TARGET;
        }
        for (var i = 0; i < apis.length; i++) {
          var type = _global[apis[i]];
          patchEventTargetMethods(type && type.prototype);
        }
      }
      function apply(_global) {
        var WS = _global.WebSocket;
        if (!_global.EventTarget) {
          patchEventTargetMethods(WS.prototype);
        }
        _global.WebSocket = function (a, b) {
          var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
          var proxySocket;
          var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
          if (onmessageDesc && onmessageDesc.configurable === false) {
            proxySocket = Object.create(socket);
            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
              proxySocket[propName] = function () {
                return socket[propName].apply(socket, arguments);
              };
            });
          } else {
            proxySocket = socket;
          }
          patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
          return proxySocket;
        };
        for (var prop in WS) {
          _global.WebSocket[prop] = WS[prop];
        }
      }
      var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
      function propertyDescriptorPatch(_global) {
        if (isNode) {
          return;
        }
        var supportsWebSocket = typeof WebSocket !== 'undefined';
        if (canPatchViaPropertyDescriptor()) {
          if (isBrowser) {
            patchOnProperties(HTMLElement.prototype, eventNames);
          }
          patchOnProperties(XMLHttpRequest.prototype, null);
          if (typeof IDBIndex !== 'undefined') {
            patchOnProperties(IDBIndex.prototype, null);
            patchOnProperties(IDBRequest.prototype, null);
            patchOnProperties(IDBOpenDBRequest.prototype, null);
            patchOnProperties(IDBDatabase.prototype, null);
            patchOnProperties(IDBTransaction.prototype, null);
            patchOnProperties(IDBCursor.prototype, null);
          }
          if (supportsWebSocket) {
            patchOnProperties(WebSocket.prototype, null);
          }
        } else {
          patchViaCapturingAllTheEvents();
          patchClass('XMLHttpRequest');
          if (supportsWebSocket) {
            apply(_global);
          }
        }
      }
      function canPatchViaPropertyDescriptor() {
        if (isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
          var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
          if (desc && !desc.configurable) return false;
        }
        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', { get: function () {
            return true;
          } });
        var req = new XMLHttpRequest();
        var result = !!req.onreadystatechange;
        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {});
        return result;
      }
      var unboundKey = zoneSymbol('unbound');
      function patchViaCapturingAllTheEvents() {
        var _loop_1 = function (i) {
          var property = eventNames[i];
          var onproperty = 'on' + property;
          self.addEventListener(property, function (event) {
            var elt = event.target,
                bound,
                source;
            if (elt) {
              source = elt.constructor['name'] + '.' + onproperty;
            } else {
              source = 'unknown.' + onproperty;
            }
            while (elt) {
              if (elt[onproperty] && !elt[onproperty][unboundKey]) {
                bound = Zone.current.wrap(elt[onproperty], source);
                bound[unboundKey] = elt[onproperty];
                elt[onproperty] = bound;
              }
              elt = elt.parentElement;
            }
          }, true);
        };
        for (var i = 0; i < eventNames.length; i++) {
          _loop_1(i);
        }
      }
      function registerElementPatch(_global) {
        if (!isBrowser || !('registerElement' in _global.document)) {
          return;
        }
        var _registerElement = document.registerElement;
        var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
        document.registerElement = function (name, opts) {
          if (opts && opts.prototype) {
            callbacks.forEach(function (callback) {
              var source = 'Document.registerElement::' + callback;
              if (opts.prototype.hasOwnProperty(callback)) {
                var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
                if (descriptor && descriptor.value) {
                  descriptor.value = Zone.current.wrap(descriptor.value, source);
                  _redefineProperty(opts.prototype, callback, descriptor);
                } else {
                  opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
                }
              } else if (opts.prototype[callback]) {
                opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
              }
            });
          }
          return _registerElement.apply(document, [name, opts]);
        };
      }
      var set = 'set';
      var clear = 'clear';
      var blockingMethods = ['alert', 'prompt', 'confirm'];
      var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
      patchTimer(_global, set, clear, 'Timeout');
      patchTimer(_global, set, clear, 'Interval');
      patchTimer(_global, set, clear, 'Immediate');
      patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
      patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
      patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
      for (var i = 0; i < blockingMethods.length; i++) {
        var name = blockingMethods[i];
        patchMethod(_global, name, function (delegate, symbol, name) {
          return function (s, args) {
            return Zone.current.run(delegate, _global, args, name);
          };
        });
      }
      eventTargetPatch(_global);
      propertyDescriptorPatch(_global);
      patchClass('MutationObserver');
      patchClass('WebKitMutationObserver');
      patchClass('FileReader');
      propertyPatch();
      registerElementPatch(_global);
      patchXHR(_global);
      var XHR_TASK = zoneSymbol('xhrTask');
      var XHR_SYNC = zoneSymbol('xhrSync');
      function patchXHR(window) {
        function findPendingTask(target) {
          var pendingTask = target[XHR_TASK];
          return pendingTask;
        }
        function scheduleTask(task) {
          var data = task.data;
          data.target.addEventListener('readystatechange', function () {
            if (data.target.readyState === data.target.DONE) {
              if (!data.aborted) {
                task.invoke();
              }
            }
          });
          var storedTask = data.target[XHR_TASK];
          if (!storedTask) {
            data.target[XHR_TASK] = task;
          }
          sendNative.apply(data.target, data.args);
          return task;
        }
        function placeholderCallback() {}
        function clearTask(task) {
          var data = task.data;
          data.aborted = true;
          return abortNative.apply(data.target, data.args);
        }
        var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () {
          return function (self, args) {
            self[XHR_SYNC] = args[2] == false;
            return openNative.apply(self, args);
          };
        });
        var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () {
          return function (self, args) {
            var zone = Zone.current;
            if (self[XHR_SYNC]) {
              return sendNative.apply(self, args);
            } else {
              var options = {
                target: self,
                isPeriodic: false,
                delay: null,
                args: args,
                aborted: false
              };
              return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
            }
          };
        });
        var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) {
          return function (self, args) {
            var task = findPendingTask(self);
            if (task && typeof task.type == 'string') {
              if (task.cancelFn == null) {
                return;
              }
              task.zone.cancelTask(task);
            }
          };
        });
      }
      if (_global['navigator'] && _global['navigator'].geolocation) {
        patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
      }
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("4", ["2"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("2");
  return module.exports;
});
$__System.registerDynamic("5", [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        var Reflect = $__global["Reflect"];
        /*! *****************************************************************************
        Copyright (C) Microsoft. All rights reserved.
        Licensed under the Apache License, Version 2.0 (the "License"); you may not use
        this file except in compliance with the License. You may obtain a copy of the
        License at http://www.apache.org/licenses/LICENSE-2.0
        
        THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
        WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
        MERCHANTABLITY OR NON-INFRINGEMENT.
        
        See the Apache Version 2.0 License for specific language governing permissions
        and limitations under the License.
        ***************************************************************************** */
        var Reflect;
        (function (Reflect) {
            "use strict";

            var hasOwn = Object.prototype.hasOwnProperty;
            // feature test for Object.create support
            var supportsCreate = typeof Object.create === "function";
            // feature test for __proto__ support
            var supportsProto = function () {
                var sentinel = {};
                function __() {}
                __.prototype = sentinel;
                var instance = new __();
                return instance.__proto__ === sentinel;
            }();
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            var createDictionary = supportsCreate ? function () {
                return MakeDictionary(Object.create(null));
            } : supportsProto ? function () {
                return MakeDictionary({ __proto__: null });
            } : function () {
                return MakeDictionary({});
            };
            var HashMap;
            (function (HashMap) {
                var downLevel = !supportsCreate && !supportsProto;
                HashMap.has = downLevel ? function (map, key) {
                    return hasOwn.call(map, key);
                } : function (map, key) {
                    return key in map;
                };
                HashMap.get = downLevel ? function (map, key) {
                    return hasOwn.call(map, key) ? map[key] : undefined;
                } : function (map, key) {
                    return map[key];
                };
            })(HashMap || (HashMap = {}));
            // Load global or shim versions of Map, Set, and WeakMap
            var functionPrototype = Object.getPrototypeOf(Function);
            var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
            var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
            var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
            // [[Metadata]] internal slot
            var Metadata = new _WeakMap();
            /**
              * Applies a set of decorators to a property of a target object.
              * @param decorators An array of decorators.
              * @param target The target object.
              * @param targetKey (Optional) The property key to decorate.
              * @param targetDescriptor (Optional) The property descriptor for the target key
              * @remarks Decorators are applied in reverse order.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     Example = Reflect.decorate(decoratorsArray, Example);
              *
              *     // property (on constructor)
              *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
              *
              *     // property (on prototype)
              *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
              *
              *     // method (on constructor)
              *     Object.defineProperty(Example, "staticMethod",
              *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
              *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
              *
              *     // method (on prototype)
              *     Object.defineProperty(Example.prototype, "method",
              *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
              *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
              *
              */
            function decorate(decorators, target, targetKey, targetDescriptor) {
                if (!IsUndefined(targetDescriptor)) {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsObject(target)) throw new TypeError();
                    if (IsUndefined(targetKey)) throw new TypeError();
                    if (!IsObject(targetDescriptor)) throw new TypeError();
                    targetKey = ToPropertyKey(targetKey);
                    return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
                } else if (!IsUndefined(targetKey)) {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsObject(target)) throw new TypeError();
                    targetKey = ToPropertyKey(targetKey);
                    return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
                } else {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsConstructor(target)) throw new TypeError();
                    return DecorateConstructor(decorators, target);
                }
            }
            Reflect.decorate = decorate;
            /**
              * A default metadata decorator factory that can be used on a class, class member, or parameter.
              * @param metadataKey The key for the metadata entry.
              * @param metadataValue The value for the metadata entry.
              * @returns A decorator function.
              * @remarks
              * If `metadataKey` is already defined for the target and target key, the
              * metadataValue for that key will be overwritten.
              * @example
              *
              *     // constructor
              *     @Reflect.metadata(key, value)
              *     class Example {
              *     }
              *
              *     // property (on constructor, TypeScript only)
              *     class Example {
              *         @Reflect.metadata(key, value)
              *         static staticProperty;
              *     }
              *
              *     // property (on prototype, TypeScript only)
              *     class Example {
              *         @Reflect.metadata(key, value)
              *         property;
              *     }
              *
              *     // method (on constructor)
              *     class Example {
              *         @Reflect.metadata(key, value)
              *         static staticMethod() { }
              *     }
              *
              *     // method (on prototype)
              *     class Example {
              *         @Reflect.metadata(key, value)
              *         method() { }
              *     }
              *
              */
            function metadata(metadataKey, metadataValue) {
                function decorator(target, targetKey) {
                    if (!IsUndefined(targetKey)) {
                        if (!IsObject(target)) throw new TypeError();
                        targetKey = ToPropertyKey(targetKey);
                        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
                    } else {
                        if (!IsConstructor(target)) throw new TypeError();
                        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/undefined);
                    }
                }
                return decorator;
            }
            Reflect.metadata = metadata;
            /**
              * Define a unique metadata entry on the target.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param metadataValue A value that contains attached metadata.
              * @param target The target object on which to define metadata.
              * @param targetKey (Optional) The property key for the target.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     Reflect.defineMetadata("custom:annotation", options, Example);
              *
              *     // property (on constructor)
              *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
              *
              *     // property (on prototype)
              *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
              *
              *     // method (on constructor)
              *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
              *
              *     // method (on prototype)
              *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
              *
              *     // decorator factory as metadata-producing annotation.
              *     function MyAnnotation(options): Decorator {
              *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
              *     }
              *
              */
            function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
            }
            Reflect.defineMetadata = defineMetadata;
            /**
              * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.hasMetadata("custom:annotation", Example);
              *
              *     // property (on constructor)
              *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
              *
              */
            function hasMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryHasMetadata(metadataKey, target, targetKey);
            }
            Reflect.hasMetadata = hasMetadata;
            /**
              * Gets a value indicating whether the target object has the provided metadata key defined.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
              *
              *     // property (on constructor)
              *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
              *
              */
            function hasOwnMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
            }
            Reflect.hasOwnMetadata = hasOwnMetadata;
            /**
              * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.getMetadata("custom:annotation", Example);
              *
              *     // property (on constructor)
              *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
              *
              */
            function getMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryGetMetadata(metadataKey, target, targetKey);
            }
            Reflect.getMetadata = getMetadata;
            /**
              * Gets the metadata value for the provided metadata key on the target object.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.getOwnMetadata("custom:annotation", Example);
              *
              *     // property (on constructor)
              *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
              *
              */
            function getOwnMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
            }
            Reflect.getOwnMetadata = getOwnMetadata;
            /**
              * Gets the metadata keys defined on the target object or its prototype chain.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns An array of unique metadata keys.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.getMetadataKeys(Example);
              *
              *     // property (on constructor)
              *     result = Reflect.getMetadataKeys(Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.getMetadataKeys(Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.getMetadataKeys(Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.getMetadataKeys(Example.prototype, "method");
              *
              */
            function getMetadataKeys(target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryMetadataKeys(target, targetKey);
            }
            Reflect.getMetadataKeys = getMetadataKeys;
            /**
              * Gets the unique metadata keys defined on the target object.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns An array of unique metadata keys.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.getOwnMetadataKeys(Example);
              *
              *     // property (on constructor)
              *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
              *
              */
            function getOwnMetadataKeys(target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryOwnMetadataKeys(target, targetKey);
            }
            Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
            /**
              * Deletes the metadata entry from the target object with the provided key.
              * @param metadataKey A key used to store and retrieve metadata.
              * @param target The target object on which the metadata is defined.
              * @param targetKey (Optional) The property key for the target.
              * @returns `true` if the metadata entry was found and deleted; otherwise, false.
              * @example
              *
              *     class Example {
              *         // property declarations are not part of ES6, though they are valid in TypeScript:
              *         // static staticProperty;
              *         // property;
              *
              *         constructor(p) { }
              *         static staticMethod(p) { }
              *         method(p) { }
              *     }
              *
              *     // constructor
              *     result = Reflect.deleteMetadata("custom:annotation", Example);
              *
              *     // property (on constructor)
              *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
              *
              *     // property (on prototype)
              *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
              *
              *     // method (on constructor)
              *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
              *
              *     // method (on prototype)
              *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
              *
              */
            function deleteMetadata(metadataKey, target, targetKey) {
                // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/false);
                if (IsUndefined(metadataMap)) return false;
                if (!metadataMap.delete(metadataKey)) return false;
                if (metadataMap.size > 0) return true;
                var targetMetadata = Metadata.get(target);
                targetMetadata.delete(targetKey);
                if (targetMetadata.size > 0) return true;
                Metadata.delete(target);
                return true;
            }
            Reflect.deleteMetadata = deleteMetadata;
            function DecorateConstructor(decorators, target) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    var decorated = decorator(target);
                    if (!IsUndefined(decorated)) {
                        if (!IsConstructor(decorated)) throw new TypeError();
                        target = decorated;
                    }
                }
                return target;
            }
            function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    var decorated = decorator(target, propertyKey, descriptor);
                    if (!IsUndefined(decorated)) {
                        if (!IsObject(decorated)) throw new TypeError();
                        descriptor = decorated;
                    }
                }
                return descriptor;
            }
            function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    decorator(target, propertyKey);
                }
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#getorcreatemetadatamap--o-p-create-
            function GetOrCreateMetadataMap(target, targetKey, create) {
                var targetMetadata = Metadata.get(target);
                if (!targetMetadata) {
                    if (!create) return undefined;
                    targetMetadata = new _Map();
                    Metadata.set(target, targetMetadata);
                }
                var keyMetadata = targetMetadata.get(targetKey);
                if (!keyMetadata) {
                    if (!create) return undefined;
                    keyMetadata = new _Map();
                    targetMetadata.set(targetKey, keyMetadata);
                }
                return keyMetadata;
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
            function OrdinaryHasMetadata(MetadataKey, O, P) {
                var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return true;
                var parent = GetPrototypeOf(O);
                return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/false);
                return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
            function OrdinaryGetMetadata(MetadataKey, O, P) {
                var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
                var parent = GetPrototypeOf(O);
                return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/false);
                return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/true);
                metadataMap.set(MetadataKey, MetadataValue);
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
            function OrdinaryMetadataKeys(O, P) {
                var ownKeys = OrdinaryOwnMetadataKeys(O, P);
                var parent = GetPrototypeOf(O);
                if (parent === null) return ownKeys;
                var parentKeys = OrdinaryMetadataKeys(parent, P);
                if (parentKeys.length <= 0) return ownKeys;
                if (ownKeys.length <= 0) return parentKeys;
                var keys = new _Set();
                for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                    var key = ownKeys_1[_i];
                    keys.add(key);
                }
                for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                    var key = parentKeys_1[_a];
                    keys.add(key);
                }
                return getKeys(keys);
            }
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
            function OrdinaryOwnMetadataKeys(target, targetKey) {
                var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/false);
                var keys = [];
                if (metadataMap) forEach(metadataMap, function (_, key) {
                    return keys.push(key);
                });
                return keys;
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
            function IsUndefined(x) {
                return x === undefined;
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
            function IsArray(x) {
                return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
            function IsObject(x) {
                return typeof x === "object" ? x !== null : typeof x === "function";
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
            function IsConstructor(x) {
                return typeof x === "function";
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
            function IsSymbol(x) {
                return typeof x === "symbol";
            }
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
            function ToPropertyKey(value) {
                return IsSymbol(value) ? value : String(value);
            }
            function GetPrototypeOf(O) {
                var proto = Object.getPrototypeOf(O);
                if (typeof O !== "function" || O === functionPrototype) return proto;
                // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
                // Try to determine the superclass Exampleonstructor. Compatible implementations
                // must either set __proto__ on a subclass Exampleonstructor to the superclass Exampleonstructor,
                // or ensure each class has a valid `constructor` property on its prototype that
                // points back to the constructor.
                // If this is not the same as Function.[[Prototype]], then this is definately inherited.
                // This is the case when in ES6 or when using __proto__ in a compatible browser.
                if (proto !== functionPrototype) return proto;
                // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
                var prototype = O.prototype;
                var prototypeProto = prototype && Object.getPrototypeOf(prototype);
                if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
                // If the constructor was not a function, then we cannot determine the heritage.
                var constructor = prototypeProto.constructor;
                if (typeof constructor !== "function") return proto;
                // If we have some kind of self-reference, then we cannot determine the heritage.
                if (constructor === O) return proto;
                // we have a pretty good guess at the heritage.
                return constructor;
            }
            function IteratorStep(iterator) {
                var result = iterator.next();
                return result.done ? undefined : result;
            }
            function IteratorClose(iterator) {
                var f = iterator["return"];
                if (f) f.call(iterator);
            }
            function forEach(source, callback, thisArg) {
                var entries = source.entries;
                if (typeof entries === "function") {
                    var iterator = entries.call(source);
                    var result = void 0;
                    try {
                        while (result = IteratorStep(iterator)) {
                            var _a = result.value,
                                key = _a[0],
                                value = _a[1];
                            callback.call(thisArg, value, key, source);
                        }
                    } finally {
                        if (result) IteratorClose(iterator);
                    }
                } else {
                    var forEach_1 = source.forEach;
                    if (typeof forEach_1 === "function") {
                        forEach_1.call(source, callback, thisArg);
                    }
                }
            }
            function getKeys(source) {
                var keys = [];
                forEach(source, function (_, key) {
                    keys.push(key);
                });
                return keys;
            }
            // naive MapIterator shim
            function CreateMapIterator(keys, values, kind) {
                var index = 0;
                return {
                    next: function () {
                        if ((keys || values) && index < (keys || values).length) {
                            var current = index++;
                            switch (kind) {
                                case "key":
                                    return { value: keys[current], done: false };
                                case "value":
                                    return { value: values[current], done: false };
                                case "key+value":
                                    return { value: [keys[current], values[current]], done: false };
                            }
                        }
                        keys = undefined;
                        values = undefined;
                        return { value: undefined, done: true };
                    },
                    "throw": function (error) {
                        if (keys || values) {
                            keys = undefined;
                            values = undefined;
                        }
                        throw error;
                    },
                    "return": function (value) {
                        if (keys || values) {
                            keys = undefined;
                            values = undefined;
                        }
                        return { value: value, done: true };
                    }
                };
            }
            // naive Map shim
            function CreateMapPolyfill() {
                var cacheSentinel = {};
                return function () {
                    function Map() {
                        this._keys = [];
                        this._values = [];
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    Object.defineProperty(Map.prototype, "size", {
                        get: function () {
                            return this._keys.length;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Map.prototype.has = function (key) {
                        return this._find(key, /*insert*/false) >= 0;
                    };
                    Map.prototype.get = function (key) {
                        var index = this._find(key, /*insert*/false);
                        return index >= 0 ? this._values[index] : undefined;
                    };
                    Map.prototype.set = function (key, value) {
                        var index = this._find(key, /*insert*/true);
                        this._values[index] = value;
                        return this;
                    };
                    Map.prototype.delete = function (key) {
                        var index = this._find(key, /*insert*/false);
                        if (index >= 0) {
                            var size = this._keys.length;
                            for (var i = index + 1; i < size; i++) {
                                this._keys[i - 1] = this._keys[i];
                                this._values[i - 1] = this._values[i];
                            }
                            this._keys.length--;
                            this._values.length--;
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                            return true;
                        }
                        return false;
                    };
                    Map.prototype.clear = function () {
                        this._keys.length = 0;
                        this._values.length = 0;
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    };
                    Map.prototype.keys = function () {
                        return CreateMapIterator(this._keys, /*values*/undefined, "key");
                    };
                    Map.prototype.values = function () {
                        return CreateMapIterator( /*keys*/undefined, this._values, "value");
                    };
                    Map.prototype.entries = function () {
                        return CreateMapIterator(this._keys, this._values, "key+value");
                    };
                    Map.prototype._find = function (key, insert) {
                        if (this._cacheKey === key) return this._cacheIndex;
                        var index = this._keys.indexOf(key);
                        if (index < 0 && insert) {
                            index = this._keys.length;
                            this._keys.push(key);
                            this._values.push(undefined);
                        }
                        return this._cacheKey = key, this._cacheIndex = index;
                    };
                    return Map;
                }();
            }
            // naive Set shim
            function CreateSetPolyfill() {
                return function () {
                    function Set() {
                        this._map = new _Map();
                    }
                    Object.defineProperty(Set.prototype, "size", {
                        get: function () {
                            return this._map.size;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Set.prototype.has = function (value) {
                        return this._map.has(value);
                    };
                    Set.prototype.add = function (value) {
                        return this._map.set(value, value), this;
                    };
                    Set.prototype.delete = function (value) {
                        return this._map.delete(value);
                    };
                    Set.prototype.clear = function () {
                        this._map.clear();
                    };
                    Set.prototype.keys = function () {
                        return this._map.keys();
                    };
                    Set.prototype.values = function () {
                        return this._map.values();
                    };
                    Set.prototype.entries = function () {
                        return this._map.entries();
                    };
                    return Set;
                }();
            }
            // naive WeakMap shim
            function CreateWeakMapPolyfill() {
                var UUID_SIZE = 16;
                var keys = createDictionary();
                var rootKey = CreateUniqueKey();
                return function () {
                    function WeakMap() {
                        this._key = CreateUniqueKey();
                    }
                    WeakMap.prototype.has = function (target) {
                        var table = GetOrCreateWeakMapTable(target, /*create*/false);
                        return table !== undefined ? HashMap.has(table, this._key) : false;
                    };
                    WeakMap.prototype.get = function (target) {
                        var table = GetOrCreateWeakMapTable(target, /*create*/false);
                        return table !== undefined ? HashMap.get(table, this._key) : undefined;
                    };
                    WeakMap.prototype.set = function (target, value) {
                        var table = GetOrCreateWeakMapTable(target, /*create*/true);
                        table[this._key] = value;
                        return this;
                    };
                    WeakMap.prototype.delete = function (target) {
                        var table = GetOrCreateWeakMapTable(target, /*create*/false);
                        return table !== undefined ? delete table[this._key] : false;
                    };
                    WeakMap.prototype.clear = function () {
                        // NOTE: not a real clear, just makes the previous data unreachable
                        this._key = CreateUniqueKey();
                    };
                    return WeakMap;
                }();
                function FillRandomBytes(buffer, size) {
                    for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;
                    return buffer;
                }
                function GenRandomBytes(size) {
                    if (typeof Uint8Array === "function") {
                        if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
                        if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
                        return FillRandomBytes(new Uint8Array(size), size);
                    }
                    return FillRandomBytes(new Array(size), size);
                }
                function CreateUUID() {
                    var data = GenRandomBytes(UUID_SIZE);
                    // mark as random - RFC 4122 § 4.4
                    data[6] = data[6] & 0x4f | 0x40;
                    data[8] = data[8] & 0xbf | 0x80;
                    var result = "";
                    for (var offset = 0; offset < UUID_SIZE; ++offset) {
                        var byte = data[offset];
                        if (offset === 4 || offset === 6 || offset === 8) result += "-";
                        if (byte < 16) result += "0";
                        result += byte.toString(16).toLowerCase();
                    }
                    return result;
                }
                function CreateUniqueKey() {
                    var key;
                    do key = "@@WeakMap@@" + CreateUUID(); while (HashMap.has(keys, key));
                    keys[key] = true;
                    return key;
                }
                function GetOrCreateWeakMapTable(target, create) {
                    if (!hasOwn.call(target, rootKey)) {
                        if (!create) return undefined;
                        Object.defineProperty(target, rootKey, { value: createDictionary() });
                    }
                    return target[rootKey];
                }
            }
            // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
            function MakeDictionary(obj) {
                obj.__DICTIONARY_MODE__ = 1;
                delete obj.____DICTIONARY_MODE__;
                return obj;
            }
            // patch global Reflect
            (function (__global) {
                if (typeof __global.Reflect !== "undefined") {
                    if (__global.Reflect !== Reflect) {
                        for (var p in Reflect) {
                            if (hasOwn.call(Reflect, p)) {
                                __global.Reflect[p] = Reflect[p];
                            }
                        }
                    }
                } else {
                    __global.Reflect = Reflect;
                }
            })(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
        })(Reflect || (Reflect = {}));
        

        $__global["Reflect"] = Reflect;
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic("6", ["5"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("5");
  return module.exports;
});
$__System.registerDynamic('7', ['8', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('8')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) : factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core);
    })(this, function (exports, _angular_core) {
      'use strict';

      var TextAst = function () {
        function TextAst(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        TextAst.prototype.visit = function (visitor, context) {
          return visitor.visitText(this, context);
        };
        return TextAst;
      }();
      var BoundTextAst = function () {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        BoundTextAst.prototype.visit = function (visitor, context) {
          return visitor.visitBoundText(this, context);
        };
        return BoundTextAst;
      }();
      var AttrAst = function () {
        function AttrAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        AttrAst.prototype.visit = function (visitor, context) {
          return visitor.visitAttr(this, context);
        };
        return AttrAst;
      }();
      var BoundElementPropertyAst = function () {
        function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
          this.name = name;
          this.type = type;
          this.securityContext = securityContext;
          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
          this.value = value;
          this.unit = unit;
          this.sourceSpan = sourceSpan;
        }
        BoundElementPropertyAst.prototype.visit = function (visitor, context) {
          return visitor.visitElementProperty(this, context);
        };
        Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
          get: function () {
            return this.type === exports.PropertyBindingType.Animation;
          },
          enumerable: true,
          configurable: true
        });
        return BoundElementPropertyAst;
      }();
      var BoundEventAst = function () {
        function BoundEventAst(name, target, phase, handler, sourceSpan) {
          this.name = name;
          this.target = target;
          this.phase = phase;
          this.handler = handler;
          this.sourceSpan = sourceSpan;
        }
        BoundEventAst.calcFullName = function (name, target, phase) {
          if (target) {
            return target + ":" + name;
          } else if (phase) {
            return "@" + name + "." + phase;
          } else {
            return name;
          }
        };
        BoundEventAst.prototype.visit = function (visitor, context) {
          return visitor.visitEvent(this, context);
        };
        Object.defineProperty(BoundEventAst.prototype, "fullName", {
          get: function () {
            return BoundEventAst.calcFullName(this.name, this.target, this.phase);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
          get: function () {
            return !!this.phase;
          },
          enumerable: true,
          configurable: true
        });
        return BoundEventAst;
      }();
      var ReferenceAst = function () {
        function ReferenceAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        ReferenceAst.prototype.visit = function (visitor, context) {
          return visitor.visitReference(this, context);
        };
        return ReferenceAst;
      }();
      var VariableAst = function () {
        function VariableAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        VariableAst.prototype.visit = function (visitor, context) {
          return visitor.visitVariable(this, context);
        };
        return VariableAst;
      }();
      var ElementAst = function () {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.references = references;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
          this.endSourceSpan = endSourceSpan;
        }
        ElementAst.prototype.visit = function (visitor, context) {
          return visitor.visitElement(this, context);
        };
        return ElementAst;
      }();
      var EmbeddedTemplateAst = function () {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.attrs = attrs;
          this.outputs = outputs;
          this.references = references;
          this.variables = variables;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
          return visitor.visitEmbeddedTemplate(this, context);
        };
        return EmbeddedTemplateAst;
      }();
      var BoundDirectivePropertyAst = function () {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
          this.directiveName = directiveName;
          this.templateName = templateName;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
          return visitor.visitDirectiveProperty(this, context);
        };
        return BoundDirectivePropertyAst;
      }();
      var DirectiveAst = function () {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
          this.directive = directive;
          this.inputs = inputs;
          this.hostProperties = hostProperties;
          this.hostEvents = hostEvents;
          this.sourceSpan = sourceSpan;
        }
        DirectiveAst.prototype.visit = function (visitor, context) {
          return visitor.visitDirective(this, context);
        };
        return DirectiveAst;
      }();
      var ProviderAst = function () {
        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
          this.token = token;
          this.multiProvider = multiProvider;
          this.eager = eager;
          this.providers = providers;
          this.providerType = providerType;
          this.lifecycleHooks = lifecycleHooks;
          this.sourceSpan = sourceSpan;
        }
        ProviderAst.prototype.visit = function (visitor, context) {
          return null;
        };
        return ProviderAst;
      }();
      exports.ProviderAstType;
      (function (ProviderAstType) {
        ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
        ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
        ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
        ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
        ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
      })(exports.ProviderAstType || (exports.ProviderAstType = {}));
      var NgContentAst = function () {
        function NgContentAst(index, ngContentIndex, sourceSpan) {
          this.index = index;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        NgContentAst.prototype.visit = function (visitor, context) {
          return visitor.visitNgContent(this, context);
        };
        return NgContentAst;
      }();
      exports.PropertyBindingType;
      (function (PropertyBindingType) {
        PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
        PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
        PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
        PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
        PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
      })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
      function templateVisitAll(visitor, asts, context) {
        if (context === void 0) {
          context = null;
        }
        var result = [];
        var visit = visitor.visit ? function (ast) {
          return visitor.visit(ast, context) || ast.visit(visitor, context);
        } : function (ast) {
          return ast.visit(visitor, context);
        };
        asts.forEach(function (ast) {
          var astResult = visit(ast);
          if (astResult) {
            result.push(astResult);
          }
        });
        return result;
      }
      var $EOF = 0;
      var $TAB = 9;
      var $LF = 10;
      var $VTAB = 11;
      var $FF = 12;
      var $CR = 13;
      var $SPACE = 32;
      var $BANG = 33;
      var $DQ = 34;
      var $HASH = 35;
      var $$ = 36;
      var $PERCENT = 37;
      var $AMPERSAND = 38;
      var $SQ = 39;
      var $LPAREN = 40;
      var $RPAREN = 41;
      var $STAR = 42;
      var $PLUS = 43;
      var $COMMA = 44;
      var $MINUS = 45;
      var $PERIOD = 46;
      var $SLASH = 47;
      var $COLON = 58;
      var $SEMICOLON = 59;
      var $LT = 60;
      var $EQ = 61;
      var $GT = 62;
      var $QUESTION = 63;
      var $0 = 48;
      var $9 = 57;
      var $A = 65;
      var $E = 69;
      var $F = 70;
      var $X = 88;
      var $Z = 90;
      var $LBRACKET = 91;
      var $BACKSLASH = 92;
      var $RBRACKET = 93;
      var $CARET = 94;
      var $_ = 95;
      var $a = 97;
      var $e = 101;
      var $f = 102;
      var $n = 110;
      var $r = 114;
      var $t = 116;
      var $u = 117;
      var $v = 118;
      var $x = 120;
      var $z = 122;
      var $LBRACE = 123;
      var $BAR = 124;
      var $RBRACE = 125;
      var $NBSP = 160;
      var $BT = 96;
      function isWhitespace(code) {
        return code >= $TAB && code <= $SPACE || code == $NBSP;
      }
      function isDigit(code) {
        return $0 <= code && code <= $9;
      }
      function isAsciiLetter(code) {
        return code >= $a && code <= $z || code >= $A && code <= $Z;
      }
      function isAsciiHexDigit(code) {
        return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
      }
      function isPresent(obj) {
        return obj != null;
      }
      function isBlank(obj) {
        return obj == null;
      }
      var STRING_MAP_PROTO = Object.getPrototypeOf({});
      function isStrictStringMap(obj) {
        return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
      }
      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }
        if (token == null) {
          return '' + token;
        }
        if (token.overriddenName) {
          return token.overriddenName;
        }
        if (token.name) {
          return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function (text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.isNumeric = function (value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }();
      function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
      }
      function isPrimitive(obj) {
        return !isJsObject(obj);
      }
      function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
      }
      function assertArrayOfStrings(identifier, value) {
        if (!_angular_core.isDevMode() || isBlank(value)) {
          return;
        }
        if (!Array.isArray(value)) {
          throw new Error("Expected '" + identifier + "' to be an array of strings.");
        }
        for (var i = 0; i < value.length; i += 1) {
          if (typeof value[i] !== 'string') {
            throw new Error("Expected '" + identifier + "' to be an array of strings.");
          }
        }
      }
      var INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
      function assertInterpolationSymbols(identifier, value) {
        if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
          throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
        } else if (_angular_core.isDevMode() && !isBlank(value)) {
          var start_1 = value[0];
          var end_1 = value[1];
          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
            if (regexp.test(start_1) || regexp.test(end_1)) {
              throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
            }
          });
        }
      }
      var InterpolationConfig = function () {
        function InterpolationConfig(start, end) {
          this.start = start;
          this.end = end;
        }
        InterpolationConfig.fromArray = function (markers) {
          if (!markers) {
            return DEFAULT_INTERPOLATION_CONFIG;
          }
          assertInterpolationSymbols('interpolation', markers);
          return new InterpolationConfig(markers[0], markers[1]);
        };
        ;
        return InterpolationConfig;
      }();
      var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ParserError = function () {
        function ParserError(message, input, errLocation, ctxLocation) {
          this.input = input;
          this.errLocation = errLocation;
          this.ctxLocation = ctxLocation;
          this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
        }
        return ParserError;
      }();
      var ParseSpan = function () {
        function ParseSpan(start, end) {
          this.start = start;
          this.end = end;
        }
        return ParseSpan;
      }();
      var AST = function () {
        function AST(span) {
          this.span = span;
        }
        AST.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return null;
        };
        AST.prototype.toString = function () {
          return 'AST';
        };
        return AST;
      }();
      var Quote = function (_super) {
        __extends$1(Quote, _super);
        function Quote(span, prefix, uninterpretedExpression, location) {
          _super.call(this, span);
          this.prefix = prefix;
          this.uninterpretedExpression = uninterpretedExpression;
          this.location = location;
        }
        Quote.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitQuote(this, context);
        };
        Quote.prototype.toString = function () {
          return 'Quote';
        };
        return Quote;
      }(AST);
      var EmptyExpr = function (_super) {
        __extends$1(EmptyExpr, _super);
        function EmptyExpr() {
          _super.apply(this, arguments);
        }
        EmptyExpr.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
        };
        return EmptyExpr;
      }(AST);
      var ImplicitReceiver = function (_super) {
        __extends$1(ImplicitReceiver, _super);
        function ImplicitReceiver() {
          _super.apply(this, arguments);
        }
        ImplicitReceiver.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitImplicitReceiver(this, context);
        };
        return ImplicitReceiver;
      }(AST);
      var Chain = function (_super) {
        __extends$1(Chain, _super);
        function Chain(span, expressions) {
          _super.call(this, span);
          this.expressions = expressions;
        }
        Chain.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitChain(this, context);
        };
        return Chain;
      }(AST);
      var Conditional = function (_super) {
        __extends$1(Conditional, _super);
        function Conditional(span, condition, trueExp, falseExp) {
          _super.call(this, span);
          this.condition = condition;
          this.trueExp = trueExp;
          this.falseExp = falseExp;
        }
        Conditional.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitConditional(this, context);
        };
        return Conditional;
      }(AST);
      var PropertyRead = function (_super) {
        __extends$1(PropertyRead, _super);
        function PropertyRead(span, receiver, name) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
        }
        PropertyRead.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPropertyRead(this, context);
        };
        return PropertyRead;
      }(AST);
      var PropertyWrite = function (_super) {
        __extends$1(PropertyWrite, _super);
        function PropertyWrite(span, receiver, name, value) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
        }
        PropertyWrite.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPropertyWrite(this, context);
        };
        return PropertyWrite;
      }(AST);
      var SafePropertyRead = function (_super) {
        __extends$1(SafePropertyRead, _super);
        function SafePropertyRead(span, receiver, name) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
        }
        SafePropertyRead.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitSafePropertyRead(this, context);
        };
        return SafePropertyRead;
      }(AST);
      var KeyedRead = function (_super) {
        __extends$1(KeyedRead, _super);
        function KeyedRead(span, obj, key) {
          _super.call(this, span);
          this.obj = obj;
          this.key = key;
        }
        KeyedRead.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitKeyedRead(this, context);
        };
        return KeyedRead;
      }(AST);
      var KeyedWrite = function (_super) {
        __extends$1(KeyedWrite, _super);
        function KeyedWrite(span, obj, key, value) {
          _super.call(this, span);
          this.obj = obj;
          this.key = key;
          this.value = value;
        }
        KeyedWrite.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitKeyedWrite(this, context);
        };
        return KeyedWrite;
      }(AST);
      var BindingPipe = function (_super) {
        __extends$1(BindingPipe, _super);
        function BindingPipe(span, exp, name, args) {
          _super.call(this, span);
          this.exp = exp;
          this.name = name;
          this.args = args;
        }
        BindingPipe.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPipe(this, context);
        };
        return BindingPipe;
      }(AST);
      var LiteralPrimitive = function (_super) {
        __extends$1(LiteralPrimitive, _super);
        function LiteralPrimitive(span, value) {
          _super.call(this, span);
          this.value = value;
        }
        LiteralPrimitive.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralPrimitive(this, context);
        };
        return LiteralPrimitive;
      }(AST);
      var LiteralArray = function (_super) {
        __extends$1(LiteralArray, _super);
        function LiteralArray(span, expressions) {
          _super.call(this, span);
          this.expressions = expressions;
        }
        LiteralArray.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralArray(this, context);
        };
        return LiteralArray;
      }(AST);
      var LiteralMap = function (_super) {
        __extends$1(LiteralMap, _super);
        function LiteralMap(span, keys, values) {
          _super.call(this, span);
          this.keys = keys;
          this.values = values;
        }
        LiteralMap.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralMap(this, context);
        };
        return LiteralMap;
      }(AST);
      var Interpolation = function (_super) {
        __extends$1(Interpolation, _super);
        function Interpolation(span, strings, expressions) {
          _super.call(this, span);
          this.strings = strings;
          this.expressions = expressions;
        }
        Interpolation.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitInterpolation(this, context);
        };
        return Interpolation;
      }(AST);
      var Binary = function (_super) {
        __extends$1(Binary, _super);
        function Binary(span, operation, left, right) {
          _super.call(this, span);
          this.operation = operation;
          this.left = left;
          this.right = right;
        }
        Binary.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitBinary(this, context);
        };
        return Binary;
      }(AST);
      var PrefixNot = function (_super) {
        __extends$1(PrefixNot, _super);
        function PrefixNot(span, expression) {
          _super.call(this, span);
          this.expression = expression;
        }
        PrefixNot.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPrefixNot(this, context);
        };
        return PrefixNot;
      }(AST);
      var MethodCall = function (_super) {
        __extends$1(MethodCall, _super);
        function MethodCall(span, receiver, name, args) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
        }
        MethodCall.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitMethodCall(this, context);
        };
        return MethodCall;
      }(AST);
      var SafeMethodCall = function (_super) {
        __extends$1(SafeMethodCall, _super);
        function SafeMethodCall(span, receiver, name, args) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
        }
        SafeMethodCall.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitSafeMethodCall(this, context);
        };
        return SafeMethodCall;
      }(AST);
      var FunctionCall = function (_super) {
        __extends$1(FunctionCall, _super);
        function FunctionCall(span, target, args) {
          _super.call(this, span);
          this.target = target;
          this.args = args;
        }
        FunctionCall.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitFunctionCall(this, context);
        };
        return FunctionCall;
      }(AST);
      var ASTWithSource = function (_super) {
        __extends$1(ASTWithSource, _super);
        function ASTWithSource(ast, source, location, errors) {
          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
          this.ast = ast;
          this.source = source;
          this.location = location;
          this.errors = errors;
        }
        ASTWithSource.prototype.visit = function (visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return this.ast.visit(visitor, context);
        };
        ASTWithSource.prototype.toString = function () {
          return this.source + " in " + this.location;
        };
        return ASTWithSource;
      }(AST);
      var TemplateBinding = function () {
        function TemplateBinding(span, key, keyIsVar, name, expression) {
          this.span = span;
          this.key = key;
          this.keyIsVar = keyIsVar;
          this.name = name;
          this.expression = expression;
        }
        return TemplateBinding;
      }();
      var RecursiveAstVisitor = function () {
        function RecursiveAstVisitor() {}
        RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
          ast.left.visit(this);
          ast.right.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitChain = function (ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
          ast.condition.visit(this);
          ast.trueExp.visit(this);
          ast.falseExp.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
          ast.target.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) {
          return null;
        };
        RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          ast.value.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) {
          return this.visitAll(ast.values, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) {
          return null;
        };
        RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
          ast.expression.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
          ast.receiver.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
          ast.receiver.visit(this);
          ast.value.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
          ast.receiver.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
          var _this = this;
          asts.forEach(function (ast) {
            return ast.visit(_this, context);
          });
          return null;
        };
        RecursiveAstVisitor.prototype.visitQuote = function (ast, context) {
          return null;
        };
        return RecursiveAstVisitor;
      }();
      exports.TokenType;
      (function (TokenType) {
        TokenType[TokenType["Character"] = 0] = "Character";
        TokenType[TokenType["Identifier"] = 1] = "Identifier";
        TokenType[TokenType["Keyword"] = 2] = "Keyword";
        TokenType[TokenType["String"] = 3] = "String";
        TokenType[TokenType["Operator"] = 4] = "Operator";
        TokenType[TokenType["Number"] = 5] = "Number";
        TokenType[TokenType["Error"] = 6] = "Error";
      })(exports.TokenType || (exports.TokenType = {}));
      var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
      var Lexer = function () {
        function Lexer() {}
        Lexer.prototype.tokenize = function (text) {
          var scanner = new _Scanner(text);
          var tokens = [];
          var token = scanner.scanToken();
          while (token != null) {
            tokens.push(token);
            token = scanner.scanToken();
          }
          return tokens;
        };
        Lexer.decorators = [{ type: _angular_core.Injectable }];
        Lexer.ctorParameters = [];
        return Lexer;
      }();
      var Token = function () {
        function Token(index, type, numValue, strValue) {
          this.index = index;
          this.type = type;
          this.numValue = numValue;
          this.strValue = strValue;
        }
        Token.prototype.isCharacter = function (code) {
          return this.type == exports.TokenType.Character && this.numValue == code;
        };
        Token.prototype.isNumber = function () {
          return this.type == exports.TokenType.Number;
        };
        Token.prototype.isString = function () {
          return this.type == exports.TokenType.String;
        };
        Token.prototype.isOperator = function (operater) {
          return this.type == exports.TokenType.Operator && this.strValue == operater;
        };
        Token.prototype.isIdentifier = function () {
          return this.type == exports.TokenType.Identifier;
        };
        Token.prototype.isKeyword = function () {
          return this.type == exports.TokenType.Keyword;
        };
        Token.prototype.isKeywordLet = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'let';
        };
        Token.prototype.isKeywordNull = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'null';
        };
        Token.prototype.isKeywordUndefined = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'undefined';
        };
        Token.prototype.isKeywordTrue = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'true';
        };
        Token.prototype.isKeywordFalse = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'false';
        };
        Token.prototype.isKeywordThis = function () {
          return this.type == exports.TokenType.Keyword && this.strValue == 'this';
        };
        Token.prototype.isError = function () {
          return this.type == exports.TokenType.Error;
        };
        Token.prototype.toNumber = function () {
          return this.type == exports.TokenType.Number ? this.numValue : -1;
        };
        Token.prototype.toString = function () {
          switch (this.type) {
            case exports.TokenType.Character:
            case exports.TokenType.Identifier:
            case exports.TokenType.Keyword:
            case exports.TokenType.Operator:
            case exports.TokenType.String:
            case exports.TokenType.Error:
              return this.strValue;
            case exports.TokenType.Number:
              return this.numValue.toString();
            default:
              return null;
          }
        };
        return Token;
      }();
      function newCharacterToken(index, code) {
        return new Token(index, exports.TokenType.Character, code, String.fromCharCode(code));
      }
      function newIdentifierToken(index, text) {
        return new Token(index, exports.TokenType.Identifier, 0, text);
      }
      function newKeywordToken(index, text) {
        return new Token(index, exports.TokenType.Keyword, 0, text);
      }
      function newOperatorToken(index, text) {
        return new Token(index, exports.TokenType.Operator, 0, text);
      }
      function newStringToken(index, text) {
        return new Token(index, exports.TokenType.String, 0, text);
      }
      function newNumberToken(index, n) {
        return new Token(index, exports.TokenType.Number, n, '');
      }
      function newErrorToken(index, message) {
        return new Token(index, exports.TokenType.Error, 0, message);
      }
      var EOF = new Token(-1, exports.TokenType.Character, 0, '');
      var _Scanner = function () {
        function _Scanner(input) {
          this.input = input;
          this.peek = 0;
          this.index = -1;
          this.length = input.length;
          this.advance();
        }
        _Scanner.prototype.advance = function () {
          this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
        };
        _Scanner.prototype.scanToken = function () {
          var input = this.input,
              length = this.length;
          var peek = this.peek,
              index = this.index;
          while (peek <= $SPACE) {
            if (++index >= length) {
              peek = $EOF;
              break;
            } else {
              peek = input.charCodeAt(index);
            }
          }
          this.peek = peek;
          this.index = index;
          if (index >= length) {
            return null;
          }
          if (isIdentifierStart(peek)) return this.scanIdentifier();
          if (isDigit(peek)) return this.scanNumber(index);
          var start = index;
          switch (peek) {
            case $PERIOD:
              this.advance();
              return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
            case $LPAREN:
            case $RPAREN:
            case $LBRACE:
            case $RBRACE:
            case $LBRACKET:
            case $RBRACKET:
            case $COMMA:
            case $COLON:
            case $SEMICOLON:
              return this.scanCharacter(start, peek);
            case $SQ:
            case $DQ:
              return this.scanString();
            case $HASH:
            case $PLUS:
            case $MINUS:
            case $STAR:
            case $SLASH:
            case $PERCENT:
            case $CARET:
              return this.scanOperator(start, String.fromCharCode(peek));
            case $QUESTION:
              return this.scanComplexOperator(start, '?', $PERIOD, '.');
            case $LT:
            case $GT:
              return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
            case $BANG:
            case $EQ:
              return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
            case $AMPERSAND:
              return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
            case $BAR:
              return this.scanComplexOperator(start, '|', $BAR, '|');
            case $NBSP:
              while (isWhitespace(this.peek)) this.advance();
              return this.scanToken();
          }
          this.advance();
          return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
        };
        _Scanner.prototype.scanCharacter = function (start, code) {
          this.advance();
          return newCharacterToken(start, code);
        };
        _Scanner.prototype.scanOperator = function (start, str) {
          this.advance();
          return newOperatorToken(start, str);
        };
        _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
          this.advance();
          var str = one;
          if (this.peek == twoCode) {
            this.advance();
            str += two;
          }
          if (isPresent(threeCode) && this.peek == threeCode) {
            this.advance();
            str += three;
          }
          return newOperatorToken(start, str);
        };
        _Scanner.prototype.scanIdentifier = function () {
          var start = this.index;
          this.advance();
          while (isIdentifierPart(this.peek)) this.advance();
          var str = this.input.substring(start, this.index);
          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        };
        _Scanner.prototype.scanNumber = function (start) {
          var simple = this.index === start;
          this.advance();
          while (true) {
            if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
              simple = false;
            } else if (isExponentStart(this.peek)) {
              this.advance();
              if (isExponentSign(this.peek)) this.advance();
              if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);
              simple = false;
            } else {
              break;
            }
            this.advance();
          }
          var str = this.input.substring(start, this.index);
          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
          return newNumberToken(start, value);
        };
        _Scanner.prototype.scanString = function () {
          var start = this.index;
          var quote = this.peek;
          this.advance();
          var buffer = '';
          var marker = this.index;
          var input = this.input;
          while (this.peek != quote) {
            if (this.peek == $BACKSLASH) {
              buffer += input.substring(marker, this.index);
              this.advance();
              var unescapedCode = void 0;
              if (this.peek == $u) {
                var hex = input.substring(this.index + 1, this.index + 5);
                if (/^[0-9a-f]+$/i.test(hex)) {
                  unescapedCode = parseInt(hex, 16);
                } else {
                  return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                }
                for (var i = 0; i < 5; i++) {
                  this.advance();
                }
              } else {
                unescapedCode = unescape(this.peek);
                this.advance();
              }
              buffer += String.fromCharCode(unescapedCode);
              marker = this.index;
            } else if (this.peek == $EOF) {
              return this.error('Unterminated quote', 0);
            } else {
              this.advance();
            }
          }
          var last = input.substring(marker, this.index);
          this.advance();
          return newStringToken(start, buffer + last);
        };
        _Scanner.prototype.error = function (message, offset) {
          var position = this.index + offset;
          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
        };
        return _Scanner;
      }();
      function isIdentifierStart(code) {
        return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
      }
      function isIdentifier(input) {
        if (input.length == 0) return false;
        var scanner = new _Scanner(input);
        if (!isIdentifierStart(scanner.peek)) return false;
        scanner.advance();
        while (scanner.peek !== $EOF) {
          if (!isIdentifierPart(scanner.peek)) return false;
          scanner.advance();
        }
        return true;
      }
      function isIdentifierPart(code) {
        return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
      }
      function isExponentStart(code) {
        return code == $e || code == $E;
      }
      function isExponentSign(code) {
        return code == $MINUS || code == $PLUS;
      }
      function isQuote(code) {
        return code === $SQ || code === $DQ || code === $BT;
      }
      function unescape(code) {
        switch (code) {
          case $n:
            return $LF;
          case $f:
            return $FF;
          case $r:
            return $CR;
          case $t:
            return $TAB;
          case $v:
            return $VTAB;
          default:
            return code;
        }
      }
      var SplitInterpolation = function () {
        function SplitInterpolation(strings, expressions, offsets) {
          this.strings = strings;
          this.expressions = expressions;
          this.offsets = offsets;
        }
        return SplitInterpolation;
      }();
      var TemplateBindingParseResult = function () {
        function TemplateBindingParseResult(templateBindings, warnings, errors) {
          this.templateBindings = templateBindings;
          this.warnings = warnings;
          this.errors = errors;
        }
        return TemplateBindingParseResult;
      }();
      function _createInterpolateRegExp(config) {
        var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
        return new RegExp(pattern, 'g');
      }
      var Parser = function () {
        function Parser(_lexer) {
          this._lexer = _lexer;
          this.errors = [];
        }
        Parser.prototype.parseAction = function (input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          this._checkNoInterpolation(input, location, interpolationConfig);
          var sourceToLex = this._stripComments(input);
          var tokens = this._lexer.tokenize(this._stripComments(input));
          var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          var errors = SimpleExpressionChecker.check(ast);
          if (errors.length > 0) {
            this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
          }
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
        };
        Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
          var quote = this._parseQuote(input, location);
          if (isPresent(quote)) {
            return quote;
          }
          this._checkNoInterpolation(input, location, interpolationConfig);
          var sourceToLex = this._stripComments(input);
          var tokens = this._lexer.tokenize(sourceToLex);
          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
        };
        Parser.prototype._parseQuote = function (input, location) {
          if (isBlank(input)) return null;
          var prefixSeparatorIndex = input.indexOf(':');
          if (prefixSeparatorIndex == -1) return null;
          var prefix = input.substring(0, prefixSeparatorIndex).trim();
          if (!isIdentifier(prefix)) return null;
          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
        };
        Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
          var tokens = this._lexer.tokenize(input);
          if (prefixToken) {
            var prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
              t.index = 0;
              return t;
            });
            tokens.unshift.apply(tokens, prefixTokens);
          }
          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
        };
        Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var split = this.splitInterpolation(input, location, interpolationConfig);
          if (split == null) return null;
          var expressions = [];
          for (var i = 0; i < split.expressions.length; ++i) {
            var expressionText = split.expressions[i];
            var sourceToLex = this._stripComments(expressionText);
            var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
            var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
            expressions.push(ast);
          }
          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
        };
        Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var regexp = _createInterpolateRegExp(interpolationConfig);
          var parts = input.split(regexp);
          if (parts.length <= 1) {
            return null;
          }
          var strings = [];
          var expressions = [];
          var offsets = [];
          var offset = 0;
          for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (i % 2 === 0) {
              strings.push(part);
              offset += part.length;
            } else if (part.trim().length > 0) {
              offset += interpolationConfig.start.length;
              expressions.push(part);
              offsets.push(offset);
              offset += part.length + interpolationConfig.end.length;
            } else {
              this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
              expressions.push('$implict');
              offsets.push(offset);
            }
          }
          return new SplitInterpolation(strings, expressions, offsets);
        };
        Parser.prototype.wrapLiteralPrimitive = function (input, location) {
          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
        };
        Parser.prototype._stripComments = function (input) {
          var i = this._commentStart(input);
          return isPresent(i) ? input.substring(0, i).trim() : input;
        };
        Parser.prototype._commentStart = function (input) {
          var outerQuote = null;
          for (var i = 0; i < input.length - 1; i++) {
            var char = input.charCodeAt(i);
            var nextChar = input.charCodeAt(i + 1);
            if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i;
            if (outerQuote === char) {
              outerQuote = null;
            } else if (isBlank(outerQuote) && isQuote(char)) {
              outerQuote = char;
            }
          }
          return null;
        };
        Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
          var regexp = _createInterpolateRegExp(interpolationConfig);
          var parts = input.split(regexp);
          if (parts.length > 1) {
            this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
          }
        };
        Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
          var errLocation = '';
          for (var j = 0; j < partInErrIdx; j++) {
            errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
          }
          return errLocation.length;
        };
        Parser.decorators = [{ type: _angular_core.Injectable }];
        Parser.ctorParameters = [{ type: Lexer }];
        return Parser;
      }();
      var _ParseAST = function () {
        function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
          this.input = input;
          this.location = location;
          this.tokens = tokens;
          this.inputLength = inputLength;
          this.parseAction = parseAction;
          this.errors = errors;
          this.offset = offset;
          this.rparensExpected = 0;
          this.rbracketsExpected = 0;
          this.rbracesExpected = 0;
          this.index = 0;
        }
        _ParseAST.prototype.peek = function (offset) {
          var i = this.index + offset;
          return i < this.tokens.length ? this.tokens[i] : EOF;
        };
        Object.defineProperty(_ParseAST.prototype, "next", {
          get: function () {
            return this.peek(0);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(_ParseAST.prototype, "inputIndex", {
          get: function () {
            return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
          },
          enumerable: true,
          configurable: true
        });
        _ParseAST.prototype.span = function (start) {
          return new ParseSpan(start, this.inputIndex);
        };
        _ParseAST.prototype.advance = function () {
          this.index++;
        };
        _ParseAST.prototype.optionalCharacter = function (code) {
          if (this.next.isCharacter(code)) {
            this.advance();
            return true;
          } else {
            return false;
          }
        };
        _ParseAST.prototype.peekKeywordLet = function () {
          return this.next.isKeywordLet();
        };
        _ParseAST.prototype.expectCharacter = function (code) {
          if (this.optionalCharacter(code)) return;
          this.error("Missing expected " + String.fromCharCode(code));
        };
        _ParseAST.prototype.optionalOperator = function (op) {
          if (this.next.isOperator(op)) {
            this.advance();
            return true;
          } else {
            return false;
          }
        };
        _ParseAST.prototype.expectOperator = function (operator) {
          if (this.optionalOperator(operator)) return;
          this.error("Missing expected operator " + operator);
        };
        _ParseAST.prototype.expectIdentifierOrKeyword = function () {
          var n = this.next;
          if (!n.isIdentifier() && !n.isKeyword()) {
            this.error("Unexpected token " + n + ", expected identifier or keyword");
            return '';
          }
          this.advance();
          return n.toString();
        };
        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
          var n = this.next;
          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
            return '';
          }
          this.advance();
          return n.toString();
        };
        _ParseAST.prototype.parseChain = function () {
          var exprs = [];
          var start = this.inputIndex;
          while (this.index < this.tokens.length) {
            var expr = this.parsePipe();
            exprs.push(expr);
            if (this.optionalCharacter($SEMICOLON)) {
              if (!this.parseAction) {
                this.error('Binding expression cannot contain chained expression');
              }
              while (this.optionalCharacter($SEMICOLON)) {}
            } else if (this.index < this.tokens.length) {
              this.error("Unexpected token '" + this.next + "'");
            }
          }
          if (exprs.length == 0) return new EmptyExpr(this.span(start));
          if (exprs.length == 1) return exprs[0];
          return new Chain(this.span(start), exprs);
        };
        _ParseAST.prototype.parsePipe = function () {
          var result = this.parseExpression();
          if (this.optionalOperator('|')) {
            if (this.parseAction) {
              this.error('Cannot have a pipe in an action expression');
            }
            do {
              var name_1 = this.expectIdentifierOrKeyword();
              var args = [];
              while (this.optionalCharacter($COLON)) {
                args.push(this.parseExpression());
              }
              result = new BindingPipe(this.span(result.span.start - this.offset), result, name_1, args);
            } while (this.optionalOperator('|'));
          }
          return result;
        };
        _ParseAST.prototype.parseExpression = function () {
          return this.parseConditional();
        };
        _ParseAST.prototype.parseConditional = function () {
          var start = this.inputIndex;
          var result = this.parseLogicalOr();
          if (this.optionalOperator('?')) {
            var yes = this.parsePipe();
            var no = void 0;
            if (!this.optionalCharacter($COLON)) {
              var end = this.inputIndex;
              var expression = this.input.substring(start, end);
              this.error("Conditional expression " + expression + " requires all 3 expressions");
              no = new EmptyExpr(this.span(start));
            } else {
              no = this.parsePipe();
            }
            return new Conditional(this.span(start), result, yes, no);
          } else {
            return result;
          }
        };
        _ParseAST.prototype.parseLogicalOr = function () {
          var result = this.parseLogicalAnd();
          while (this.optionalOperator('||')) {
            var right = this.parseLogicalAnd();
            result = new Binary(this.span(result.span.start), '||', result, right);
          }
          return result;
        };
        _ParseAST.prototype.parseLogicalAnd = function () {
          var result = this.parseEquality();
          while (this.optionalOperator('&&')) {
            var right = this.parseEquality();
            result = new Binary(this.span(result.span.start), '&&', result, right);
          }
          return result;
        };
        _ParseAST.prototype.parseEquality = function () {
          var result = this.parseRelational();
          while (this.next.type == exports.TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '==':
              case '===':
              case '!=':
              case '!==':
                this.advance();
                var right = this.parseRelational();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseRelational = function () {
          var result = this.parseAdditive();
          while (this.next.type == exports.TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '<':
              case '>':
              case '<=':
              case '>=':
                this.advance();
                var right = this.parseAdditive();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseAdditive = function () {
          var result = this.parseMultiplicative();
          while (this.next.type == exports.TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '+':
              case '-':
                this.advance();
                var right = this.parseMultiplicative();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseMultiplicative = function () {
          var result = this.parsePrefix();
          while (this.next.type == exports.TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '*':
              case '%':
              case '/':
                this.advance();
                var right = this.parsePrefix();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parsePrefix = function () {
          if (this.next.type == exports.TokenType.Operator) {
            var start = this.inputIndex;
            var operator = this.next.strValue;
            var result = void 0;
            switch (operator) {
              case '+':
                this.advance();
                return this.parsePrefix();
              case '-':
                this.advance();
                result = this.parsePrefix();
                return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
              case '!':
                this.advance();
                result = this.parsePrefix();
                return new PrefixNot(this.span(start), result);
            }
          }
          return this.parseCallChain();
        };
        _ParseAST.prototype.parseCallChain = function () {
          var result = this.parsePrimary();
          while (true) {
            if (this.optionalCharacter($PERIOD)) {
              result = this.parseAccessMemberOrMethodCall(result, false);
            } else if (this.optionalOperator('?.')) {
              result = this.parseAccessMemberOrMethodCall(result, true);
            } else if (this.optionalCharacter($LBRACKET)) {
              this.rbracketsExpected++;
              var key = this.parsePipe();
              this.rbracketsExpected--;
              this.expectCharacter($RBRACKET);
              if (this.optionalOperator('=')) {
                var value = this.parseConditional();
                result = new KeyedWrite(this.span(result.span.start), result, key, value);
              } else {
                result = new KeyedRead(this.span(result.span.start), result, key);
              }
            } else if (this.optionalCharacter($LPAREN)) {
              this.rparensExpected++;
              var args = this.parseCallArguments();
              this.rparensExpected--;
              this.expectCharacter($RPAREN);
              result = new FunctionCall(this.span(result.span.start), result, args);
            } else {
              return result;
            }
          }
        };
        _ParseAST.prototype.parsePrimary = function () {
          var start = this.inputIndex;
          if (this.optionalCharacter($LPAREN)) {
            this.rparensExpected++;
            var result = this.parsePipe();
            this.rparensExpected--;
            this.expectCharacter($RPAREN);
            return result;
          } else if (this.next.isKeywordNull()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), null);
          } else if (this.next.isKeywordUndefined()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), void 0);
          } else if (this.next.isKeywordTrue()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), true);
          } else if (this.next.isKeywordFalse()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), false);
          } else if (this.next.isKeywordThis()) {
            this.advance();
            return new ImplicitReceiver(this.span(start));
          } else if (this.optionalCharacter($LBRACKET)) {
            this.rbracketsExpected++;
            var elements = this.parseExpressionList($RBRACKET);
            this.rbracketsExpected--;
            this.expectCharacter($RBRACKET);
            return new LiteralArray(this.span(start), elements);
          } else if (this.next.isCharacter($LBRACE)) {
            return this.parseLiteralMap();
          } else if (this.next.isIdentifier()) {
            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
          } else if (this.next.isNumber()) {
            var value = this.next.toNumber();
            this.advance();
            return new LiteralPrimitive(this.span(start), value);
          } else if (this.next.isString()) {
            var literalValue = this.next.toString();
            this.advance();
            return new LiteralPrimitive(this.span(start), literalValue);
          } else if (this.index >= this.tokens.length) {
            this.error("Unexpected end of expression: " + this.input);
            return new EmptyExpr(this.span(start));
          } else {
            this.error("Unexpected token " + this.next);
            return new EmptyExpr(this.span(start));
          }
        };
        _ParseAST.prototype.parseExpressionList = function (terminator) {
          var result = [];
          if (!this.next.isCharacter(terminator)) {
            do {
              result.push(this.parsePipe());
            } while (this.optionalCharacter($COMMA));
          }
          return result;
        };
        _ParseAST.prototype.parseLiteralMap = function () {
          var keys = [];
          var values = [];
          var start = this.inputIndex;
          this.expectCharacter($LBRACE);
          if (!this.optionalCharacter($RBRACE)) {
            this.rbracesExpected++;
            do {
              var key = this.expectIdentifierOrKeywordOrString();
              keys.push(key);
              this.expectCharacter($COLON);
              values.push(this.parsePipe());
            } while (this.optionalCharacter($COMMA));
            this.rbracesExpected--;
            this.expectCharacter($RBRACE);
          }
          return new LiteralMap(this.span(start), keys, values);
        };
        _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
          if (isSafe === void 0) {
            isSafe = false;
          }
          var start = receiver.span.start;
          var id = this.expectIdentifierOrKeyword();
          if (this.optionalCharacter($LPAREN)) {
            this.rparensExpected++;
            var args = this.parseCallArguments();
            this.expectCharacter($RPAREN);
            this.rparensExpected--;
            var span = this.span(start);
            return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
          } else {
            if (isSafe) {
              if (this.optionalOperator('=')) {
                this.error('The \'?.\' operator cannot be used in the assignment');
                return new EmptyExpr(this.span(start));
              } else {
                return new SafePropertyRead(this.span(start), receiver, id);
              }
            } else {
              if (this.optionalOperator('=')) {
                if (!this.parseAction) {
                  this.error('Bindings cannot contain assignments');
                  return new EmptyExpr(this.span(start));
                }
                var value = this.parseConditional();
                return new PropertyWrite(this.span(start), receiver, id, value);
              } else {
                return new PropertyRead(this.span(start), receiver, id);
              }
            }
          }
        };
        _ParseAST.prototype.parseCallArguments = function () {
          if (this.next.isCharacter($RPAREN)) return [];
          var positionals = [];
          do {
            positionals.push(this.parsePipe());
          } while (this.optionalCharacter($COMMA));
          return positionals;
        };
        _ParseAST.prototype.expectTemplateBindingKey = function () {
          var result = '';
          var operatorFound = false;
          do {
            result += this.expectIdentifierOrKeywordOrString();
            operatorFound = this.optionalOperator('-');
            if (operatorFound) {
              result += '-';
            }
          } while (operatorFound);
          return result.toString();
        };
        _ParseAST.prototype.parseTemplateBindings = function () {
          var bindings = [];
          var prefix = null;
          var warnings = [];
          while (this.index < this.tokens.length) {
            var start = this.inputIndex;
            var keyIsVar = this.peekKeywordLet();
            if (keyIsVar) {
              this.advance();
            }
            var key = this.expectTemplateBindingKey();
            if (!keyIsVar) {
              if (prefix == null) {
                prefix = key;
              } else {
                key = prefix + key[0].toUpperCase() + key.substring(1);
              }
            }
            this.optionalCharacter($COLON);
            var name_2 = null;
            var expression = null;
            if (keyIsVar) {
              if (this.optionalOperator('=')) {
                name_2 = this.expectTemplateBindingKey();
              } else {
                name_2 = '\$implicit';
              }
            } else if (this.next !== EOF && !this.peekKeywordLet()) {
              var start_1 = this.inputIndex;
              var ast = this.parsePipe();
              var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
              expression = new ASTWithSource(ast, source, this.location, this.errors);
            }
            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
            if (!this.optionalCharacter($SEMICOLON)) {
              this.optionalCharacter($COMMA);
            }
          }
          return new TemplateBindingParseResult(bindings, warnings, this.errors);
        };
        _ParseAST.prototype.error = function (message, index) {
          if (index === void 0) {
            index = null;
          }
          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
          this.skip();
        };
        _ParseAST.prototype.locationText = function (index) {
          if (index === void 0) {
            index = null;
          }
          if (isBlank(index)) index = this.index;
          return index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
        };
        _ParseAST.prototype.skip = function () {
          var n = this.next;
          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
            if (this.next.isError()) {
              this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
            }
            this.advance();
            n = this.next;
          }
        };
        return _ParseAST;
      }();
      var SimpleExpressionChecker = function () {
        function SimpleExpressionChecker() {
          this.errors = [];
        }
        SimpleExpressionChecker.check = function (ast) {
          var s = new SimpleExpressionChecker();
          ast.visit(s);
          return s.errors;
        };
        SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {
          this.visitAll(ast.expressions);
        };
        SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {
          this.visitAll(ast.values);
        };
        SimpleExpressionChecker.prototype.visitBinary = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitConditional = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {
          this.errors.push('pipes');
        };
        SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitAll = function (asts) {
          var _this = this;
          return asts.map(function (node) {
            return node.visit(_this);
          });
        };
        SimpleExpressionChecker.prototype.visitChain = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitQuote = function (ast, context) {};
        return SimpleExpressionChecker;
      }();
      var ParseLocation = function () {
        function ParseLocation(file, offset, line, col) {
          this.file = file;
          this.offset = offset;
          this.line = line;
          this.col = col;
        }
        ParseLocation.prototype.toString = function () {
          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
        };
        return ParseLocation;
      }();
      var ParseSourceFile = function () {
        function ParseSourceFile(content, url) {
          this.content = content;
          this.url = url;
        }
        return ParseSourceFile;
      }();
      var ParseSourceSpan = function () {
        function ParseSourceSpan(start, end, details) {
          if (details === void 0) {
            details = null;
          }
          this.start = start;
          this.end = end;
          this.details = details;
        }
        ParseSourceSpan.prototype.toString = function () {
          return this.start.file.content.substring(this.start.offset, this.end.offset);
        };
        return ParseSourceSpan;
      }();
      exports.ParseErrorLevel;
      (function (ParseErrorLevel) {
        ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
        ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
      })(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
      var ParseError = function () {
        function ParseError(span, msg, level) {
          if (level === void 0) {
            level = exports.ParseErrorLevel.FATAL;
          }
          this.span = span;
          this.msg = msg;
          this.level = level;
        }
        ParseError.prototype.toString = function () {
          var source = this.span.start.file.content;
          var ctxStart = this.span.start.offset;
          var contextStr = '';
          var details = '';
          if (isPresent(ctxStart)) {
            if (ctxStart > source.length - 1) {
              ctxStart = source.length - 1;
            }
            var ctxEnd = ctxStart;
            var ctxLen = 0;
            var ctxLines = 0;
            while (ctxLen < 100 && ctxStart > 0) {
              ctxStart--;
              ctxLen++;
              if (source[ctxStart] == '\n') {
                if (++ctxLines == 3) {
                  break;
                }
              }
            }
            ctxLen = 0;
            ctxLines = 0;
            while (ctxLen < 100 && ctxEnd < source.length - 1) {
              ctxEnd++;
              ctxLen++;
              if (source[ctxEnd] == '\n') {
                if (++ctxLines == 3) {
                  break;
                }
              }
            }
            var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
            contextStr = " (\"" + context + "\")";
          }
          if (this.span.details) {
            details = ", " + this.span.details;
          }
          return "" + this.msg + contextStr + ": " + this.span.start + details;
        };
        return ParseError;
      }();
      var Text = function () {
        function Text(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function (visitor, context) {
          return visitor.visitText(this, context);
        };
        return Text;
      }();
      var Expansion = function () {
        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
          this.switchValue = switchValue;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
          this.switchValueSourceSpan = switchValueSourceSpan;
        }
        Expansion.prototype.visit = function (visitor, context) {
          return visitor.visitExpansion(this, context);
        };
        return Expansion;
      }();
      var ExpansionCase = function () {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          this.value = value;
          this.expression = expression;
          this.sourceSpan = sourceSpan;
          this.valueSourceSpan = valueSourceSpan;
          this.expSourceSpan = expSourceSpan;
        }
        ExpansionCase.prototype.visit = function (visitor, context) {
          return visitor.visitExpansionCase(this, context);
        };
        return ExpansionCase;
      }();
      var Attribute$1 = function () {
        function Attribute(name, value, sourceSpan, valueSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.valueSpan = valueSpan;
        }
        Attribute.prototype.visit = function (visitor, context) {
          return visitor.visitAttribute(this, context);
        };
        return Attribute;
      }();
      var Element = function () {
        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.children = children;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
        }
        Element.prototype.visit = function (visitor, context) {
          return visitor.visitElement(this, context);
        };
        return Element;
      }();
      var Comment = function () {
        function Comment(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Comment.prototype.visit = function (visitor, context) {
          return visitor.visitComment(this, context);
        };
        return Comment;
      }();
      function visitAll(visitor, nodes, context) {
        if (context === void 0) {
          context = null;
        }
        var result = [];
        var visit = visitor.visit ? function (ast) {
          return visitor.visit(ast, context) || ast.visit(visitor, context);
        } : function (ast) {
          return ast.visit(visitor, context);
        };
        nodes.forEach(function (ast) {
          var astResult = visit(ast);
          if (astResult) {
            result.push(astResult);
          }
        });
        return result;
      }
      var TagContentType;
      (function (TagContentType) {
        TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
        TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
        TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
      })(TagContentType || (TagContentType = {}));
      function splitNsName(elementName) {
        if (elementName[0] != ':') {
          return [null, elementName];
        }
        var colonIndex = elementName.indexOf(':', 1);
        if (colonIndex == -1) {
          throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
        }
        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
      }
      function getNsPrefix(fullName) {
        return fullName === null ? null : splitNsName(fullName)[0];
      }
      function mergeNsAndName(prefix, localName) {
        return prefix ? ":" + prefix + ":" + localName : localName;
      }
      var NAMED_ENTITIES = {
        'Aacute': '\u00C1',
        'aacute': '\u00E1',
        'Acirc': '\u00C2',
        'acirc': '\u00E2',
        'acute': '\u00B4',
        'AElig': '\u00C6',
        'aelig': '\u00E6',
        'Agrave': '\u00C0',
        'agrave': '\u00E0',
        'alefsym': '\u2135',
        'Alpha': '\u0391',
        'alpha': '\u03B1',
        'amp': '&',
        'and': '\u2227',
        'ang': '\u2220',
        'apos': '\u0027',
        'Aring': '\u00C5',
        'aring': '\u00E5',
        'asymp': '\u2248',
        'Atilde': '\u00C3',
        'atilde': '\u00E3',
        'Auml': '\u00C4',
        'auml': '\u00E4',
        'bdquo': '\u201E',
        'Beta': '\u0392',
        'beta': '\u03B2',
        'brvbar': '\u00A6',
        'bull': '\u2022',
        'cap': '\u2229',
        'Ccedil': '\u00C7',
        'ccedil': '\u00E7',
        'cedil': '\u00B8',
        'cent': '\u00A2',
        'Chi': '\u03A7',
        'chi': '\u03C7',
        'circ': '\u02C6',
        'clubs': '\u2663',
        'cong': '\u2245',
        'copy': '\u00A9',
        'crarr': '\u21B5',
        'cup': '\u222A',
        'curren': '\u00A4',
        'dagger': '\u2020',
        'Dagger': '\u2021',
        'darr': '\u2193',
        'dArr': '\u21D3',
        'deg': '\u00B0',
        'Delta': '\u0394',
        'delta': '\u03B4',
        'diams': '\u2666',
        'divide': '\u00F7',
        'Eacute': '\u00C9',
        'eacute': '\u00E9',
        'Ecirc': '\u00CA',
        'ecirc': '\u00EA',
        'Egrave': '\u00C8',
        'egrave': '\u00E8',
        'empty': '\u2205',
        'emsp': '\u2003',
        'ensp': '\u2002',
        'Epsilon': '\u0395',
        'epsilon': '\u03B5',
        'equiv': '\u2261',
        'Eta': '\u0397',
        'eta': '\u03B7',
        'ETH': '\u00D0',
        'eth': '\u00F0',
        'Euml': '\u00CB',
        'euml': '\u00EB',
        'euro': '\u20AC',
        'exist': '\u2203',
        'fnof': '\u0192',
        'forall': '\u2200',
        'frac12': '\u00BD',
        'frac14': '\u00BC',
        'frac34': '\u00BE',
        'frasl': '\u2044',
        'Gamma': '\u0393',
        'gamma': '\u03B3',
        'ge': '\u2265',
        'gt': '>',
        'harr': '\u2194',
        'hArr': '\u21D4',
        'hearts': '\u2665',
        'hellip': '\u2026',
        'Iacute': '\u00CD',
        'iacute': '\u00ED',
        'Icirc': '\u00CE',
        'icirc': '\u00EE',
        'iexcl': '\u00A1',
        'Igrave': '\u00CC',
        'igrave': '\u00EC',
        'image': '\u2111',
        'infin': '\u221E',
        'int': '\u222B',
        'Iota': '\u0399',
        'iota': '\u03B9',
        'iquest': '\u00BF',
        'isin': '\u2208',
        'Iuml': '\u00CF',
        'iuml': '\u00EF',
        'Kappa': '\u039A',
        'kappa': '\u03BA',
        'Lambda': '\u039B',
        'lambda': '\u03BB',
        'lang': '\u27E8',
        'laquo': '\u00AB',
        'larr': '\u2190',
        'lArr': '\u21D0',
        'lceil': '\u2308',
        'ldquo': '\u201C',
        'le': '\u2264',
        'lfloor': '\u230A',
        'lowast': '\u2217',
        'loz': '\u25CA',
        'lrm': '\u200E',
        'lsaquo': '\u2039',
        'lsquo': '\u2018',
        'lt': '<',
        'macr': '\u00AF',
        'mdash': '\u2014',
        'micro': '\u00B5',
        'middot': '\u00B7',
        'minus': '\u2212',
        'Mu': '\u039C',
        'mu': '\u03BC',
        'nabla': '\u2207',
        'nbsp': '\u00A0',
        'ndash': '\u2013',
        'ne': '\u2260',
        'ni': '\u220B',
        'not': '\u00AC',
        'notin': '\u2209',
        'nsub': '\u2284',
        'Ntilde': '\u00D1',
        'ntilde': '\u00F1',
        'Nu': '\u039D',
        'nu': '\u03BD',
        'Oacute': '\u00D3',
        'oacute': '\u00F3',
        'Ocirc': '\u00D4',
        'ocirc': '\u00F4',
        'OElig': '\u0152',
        'oelig': '\u0153',
        'Ograve': '\u00D2',
        'ograve': '\u00F2',
        'oline': '\u203E',
        'Omega': '\u03A9',
        'omega': '\u03C9',
        'Omicron': '\u039F',
        'omicron': '\u03BF',
        'oplus': '\u2295',
        'or': '\u2228',
        'ordf': '\u00AA',
        'ordm': '\u00BA',
        'Oslash': '\u00D8',
        'oslash': '\u00F8',
        'Otilde': '\u00D5',
        'otilde': '\u00F5',
        'otimes': '\u2297',
        'Ouml': '\u00D6',
        'ouml': '\u00F6',
        'para': '\u00B6',
        'permil': '\u2030',
        'perp': '\u22A5',
        'Phi': '\u03A6',
        'phi': '\u03C6',
        'Pi': '\u03A0',
        'pi': '\u03C0',
        'piv': '\u03D6',
        'plusmn': '\u00B1',
        'pound': '\u00A3',
        'prime': '\u2032',
        'Prime': '\u2033',
        'prod': '\u220F',
        'prop': '\u221D',
        'Psi': '\u03A8',
        'psi': '\u03C8',
        'quot': '\u0022',
        'radic': '\u221A',
        'rang': '\u27E9',
        'raquo': '\u00BB',
        'rarr': '\u2192',
        'rArr': '\u21D2',
        'rceil': '\u2309',
        'rdquo': '\u201D',
        'real': '\u211C',
        'reg': '\u00AE',
        'rfloor': '\u230B',
        'Rho': '\u03A1',
        'rho': '\u03C1',
        'rlm': '\u200F',
        'rsaquo': '\u203A',
        'rsquo': '\u2019',
        'sbquo': '\u201A',
        'Scaron': '\u0160',
        'scaron': '\u0161',
        'sdot': '\u22C5',
        'sect': '\u00A7',
        'shy': '\u00AD',
        'Sigma': '\u03A3',
        'sigma': '\u03C3',
        'sigmaf': '\u03C2',
        'sim': '\u223C',
        'spades': '\u2660',
        'sub': '\u2282',
        'sube': '\u2286',
        'sum': '\u2211',
        'sup': '\u2283',
        'sup1': '\u00B9',
        'sup2': '\u00B2',
        'sup3': '\u00B3',
        'supe': '\u2287',
        'szlig': '\u00DF',
        'Tau': '\u03A4',
        'tau': '\u03C4',
        'there4': '\u2234',
        'Theta': '\u0398',
        'theta': '\u03B8',
        'thetasym': '\u03D1',
        'thinsp': '\u2009',
        'THORN': '\u00DE',
        'thorn': '\u00FE',
        'tilde': '\u02DC',
        'times': '\u00D7',
        'trade': '\u2122',
        'Uacute': '\u00DA',
        'uacute': '\u00FA',
        'uarr': '\u2191',
        'uArr': '\u21D1',
        'Ucirc': '\u00DB',
        'ucirc': '\u00FB',
        'Ugrave': '\u00D9',
        'ugrave': '\u00F9',
        'uml': '\u00A8',
        'upsih': '\u03D2',
        'Upsilon': '\u03A5',
        'upsilon': '\u03C5',
        'Uuml': '\u00DC',
        'uuml': '\u00FC',
        'weierp': '\u2118',
        'Xi': '\u039E',
        'xi': '\u03BE',
        'Yacute': '\u00DD',
        'yacute': '\u00FD',
        'yen': '\u00A5',
        'yuml': '\u00FF',
        'Yuml': '\u0178',
        'Zeta': '\u0396',
        'zeta': '\u03B6',
        'zwj': '\u200D',
        'zwnj': '\u200C'
      };
      var __extends$3 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var TokenType$1;
      (function (TokenType) {
        TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
        TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
        TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
        TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
        TokenType[TokenType["TEXT"] = 4] = "TEXT";
        TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
        TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
        TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
        TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
        TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
        TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
        TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
        TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
        TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
        TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
        TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
        TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
        TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
        TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
        TokenType[TokenType["EOF"] = 19] = "EOF";
      })(TokenType$1 || (TokenType$1 = {}));
      var Token$1 = function () {
        function Token(type, parts, sourceSpan) {
          this.type = type;
          this.parts = parts;
          this.sourceSpan = sourceSpan;
        }
        return Token;
      }();
      var TokenError = function (_super) {
        __extends$3(TokenError, _super);
        function TokenError(errorMsg, tokenType, span) {
          _super.call(this, span, errorMsg);
          this.tokenType = tokenType;
        }
        return TokenError;
      }(ParseError);
      var TokenizeResult = function () {
        function TokenizeResult(tokens, errors) {
          this.tokens = tokens;
          this.errors = errors;
        }
        return TokenizeResult;
      }();
      function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
        if (tokenizeExpansionForms === void 0) {
          tokenizeExpansionForms = false;
        }
        if (interpolationConfig === void 0) {
          interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
        }
        return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
      }
      var _CR_OR_CRLF_REGEXP = /\r\n?/g;
      function _unexpectedCharacterErrorMsg(charCode) {
        var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
        return "Unexpected character \"" + char + "\"";
      }
      function _unknownEntityErrorMsg(entitySrc) {
        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
      }
      var _ControlFlowError = function () {
        function _ControlFlowError(error) {
          this.error = error;
        }
        return _ControlFlowError;
      }();
      var _Tokenizer = function () {
        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
          if (_interpolationConfig === void 0) {
            _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          this._file = _file;
          this._getTagDefinition = _getTagDefinition;
          this._tokenizeIcu = _tokenizeIcu;
          this._interpolationConfig = _interpolationConfig;
          this._peek = -1;
          this._nextPeek = -1;
          this._index = -1;
          this._line = 0;
          this._column = -1;
          this._expansionCaseStack = [];
          this._inInterpolation = false;
          this.tokens = [];
          this.errors = [];
          this._input = _file.content;
          this._length = _file.content.length;
          this._advance();
        }
        _Tokenizer.prototype._processCarriageReturns = function (content) {
          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
        };
        _Tokenizer.prototype.tokenize = function () {
          while (this._peek !== $EOF) {
            var start = this._getLocation();
            try {
              if (this._attemptCharCode($LT)) {
                if (this._attemptCharCode($BANG)) {
                  if (this._attemptCharCode($LBRACKET)) {
                    this._consumeCdata(start);
                  } else if (this._attemptCharCode($MINUS)) {
                    this._consumeComment(start);
                  } else {
                    this._consumeDocType(start);
                  }
                } else if (this._attemptCharCode($SLASH)) {
                  this._consumeTagClose(start);
                } else {
                  this._consumeTagOpen(start);
                }
              } else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
                this._consumeText();
              }
            } catch (e) {
              if (e instanceof _ControlFlowError) {
                this.errors.push(e.error);
              } else {
                throw e;
              }
            }
          }
          this._beginToken(TokenType$1.EOF);
          this._endToken([]);
          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
        };
        _Tokenizer.prototype._tokenizeExpansionForm = function () {
          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
            this._consumeExpansionFormStart();
            return true;
          }
          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
            this._consumeExpansionCaseStart();
            return true;
          }
          if (this._peek === $RBRACE) {
            if (this._isInExpansionCase()) {
              this._consumeExpansionCaseEnd();
              return true;
            }
            if (this._isInExpansionForm()) {
              this._consumeExpansionFormEnd();
              return true;
            }
          }
          return false;
        };
        _Tokenizer.prototype._getLocation = function () {
          return new ParseLocation(this._file, this._index, this._line, this._column);
        };
        _Tokenizer.prototype._getSpan = function (start, end) {
          if (start === void 0) {
            start = this._getLocation();
          }
          if (end === void 0) {
            end = this._getLocation();
          }
          return new ParseSourceSpan(start, end);
        };
        _Tokenizer.prototype._beginToken = function (type, start) {
          if (start === void 0) {
            start = this._getLocation();
          }
          this._currentTokenStart = start;
          this._currentTokenType = type;
        };
        _Tokenizer.prototype._endToken = function (parts, end) {
          if (end === void 0) {
            end = this._getLocation();
          }
          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
          this.tokens.push(token);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return token;
        };
        _Tokenizer.prototype._createError = function (msg, span) {
          if (this._isInExpansionForm()) {
            msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
          }
          var error = new TokenError(msg, this._currentTokenType, span);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return new _ControlFlowError(error);
        };
        _Tokenizer.prototype._advance = function () {
          if (this._index >= this._length) {
            throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
          }
          if (this._peek === $LF) {
            this._line++;
            this._column = 0;
          } else if (this._peek !== $LF && this._peek !== $CR) {
            this._column++;
          }
          this._index++;
          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
          this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
        };
        _Tokenizer.prototype._attemptCharCode = function (charCode) {
          if (this._peek === charCode) {
            this._advance();
            return true;
          }
          return false;
        };
        _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
            this._advance();
            return true;
          }
          return false;
        };
        _Tokenizer.prototype._requireCharCode = function (charCode) {
          var location = this._getLocation();
          if (!this._attemptCharCode(charCode)) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
          }
        };
        _Tokenizer.prototype._attemptStr = function (chars) {
          var len = chars.length;
          if (this._index + len > this._length) {
            return false;
          }
          var initialPosition = this._savePosition();
          for (var i = 0; i < len; i++) {
            if (!this._attemptCharCode(chars.charCodeAt(i))) {
              this._restorePosition(initialPosition);
              return false;
            }
          }
          return true;
        };
        _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
          for (var i = 0; i < chars.length; i++) {
            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
              return false;
            }
          }
          return true;
        };
        _Tokenizer.prototype._requireStr = function (chars) {
          var location = this._getLocation();
          if (!this._attemptStr(chars)) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
          }
        };
        _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
          while (!predicate(this._peek)) {
            this._advance();
          }
        };
        _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
          var start = this._getLocation();
          this._attemptCharCodeUntilFn(predicate);
          if (this._index - start.offset < len) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
          }
        };
        _Tokenizer.prototype._attemptUntilChar = function (char) {
          while (this._peek !== char) {
            this._advance();
          }
        };
        _Tokenizer.prototype._readChar = function (decodeEntities) {
          if (decodeEntities && this._peek === $AMPERSAND) {
            return this._decodeEntity();
          } else {
            var index = this._index;
            this._advance();
            return this._input[index];
          }
        };
        _Tokenizer.prototype._decodeEntity = function () {
          var start = this._getLocation();
          this._advance();
          if (this._attemptCharCode($HASH)) {
            var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
            var numberStart = this._getLocation().offset;
            this._attemptCharCodeUntilFn(isDigitEntityEnd);
            if (this._peek != $SEMICOLON) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            }
            this._advance();
            var strNum = this._input.substring(numberStart, this._index - 1);
            try {
              var charCode = parseInt(strNum, isHex ? 16 : 10);
              return String.fromCharCode(charCode);
            } catch (e) {
              var entity = this._input.substring(start.offset + 1, this._index - 1);
              throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
            }
          } else {
            var startPosition = this._savePosition();
            this._attemptCharCodeUntilFn(isNamedEntityEnd);
            if (this._peek != $SEMICOLON) {
              this._restorePosition(startPosition);
              return '&';
            }
            this._advance();
            var name_1 = this._input.substring(start.offset + 1, this._index - 1);
            var char = NAMED_ENTITIES[name_1];
            if (!char) {
              throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
            }
            return char;
          }
        };
        _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
          var tagCloseStart;
          var textStart = this._getLocation();
          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
          var parts = [];
          while (true) {
            tagCloseStart = this._getLocation();
            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
              break;
            }
            if (this._index > tagCloseStart.offset) {
              parts.push(this._input.substring(tagCloseStart.offset, this._index));
            }
            while (this._peek !== firstCharOfEnd) {
              parts.push(this._readChar(decodeEntities));
            }
          }
          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
        };
        _Tokenizer.prototype._consumeComment = function (start) {
          var _this = this;
          this._beginToken(TokenType$1.COMMENT_START, start);
          this._requireCharCode($MINUS);
          this._endToken([]);
          var textToken = this._consumeRawText(false, $MINUS, function () {
            return _this._attemptStr('->');
          });
          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeCdata = function (start) {
          var _this = this;
          this._beginToken(TokenType$1.CDATA_START, start);
          this._requireStr('CDATA[');
          this._endToken([]);
          var textToken = this._consumeRawText(false, $RBRACKET, function () {
            return _this._attemptStr(']>');
          });
          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeDocType = function (start) {
          this._beginToken(TokenType$1.DOC_TYPE, start);
          this._attemptUntilChar($GT);
          this._advance();
          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        };
        _Tokenizer.prototype._consumePrefixAndName = function () {
          var nameOrPrefixStart = this._index;
          var prefix = null;
          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
            this._advance();
          }
          var nameStart;
          if (this._peek === $COLON) {
            this._advance();
            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
            nameStart = this._index;
          } else {
            nameStart = nameOrPrefixStart;
          }
          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
          var name = this._input.substring(nameStart, this._index);
          return [prefix, name];
        };
        _Tokenizer.prototype._consumeTagOpen = function (start) {
          var savedPos = this._savePosition();
          var tagName;
          var lowercaseTagName;
          try {
            if (!isAsciiLetter(this._peek)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            }
            var nameStart = this._index;
            this._consumeTagOpenStart(start);
            tagName = this._input.substring(nameStart, this._index);
            lowercaseTagName = tagName.toLowerCase();
            this._attemptCharCodeUntilFn(isNotWhitespace);
            while (this._peek !== $SLASH && this._peek !== $GT) {
              this._consumeAttributeName();
              this._attemptCharCodeUntilFn(isNotWhitespace);
              if (this._attemptCharCode($EQ)) {
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._consumeAttributeValue();
              }
              this._attemptCharCodeUntilFn(isNotWhitespace);
            }
            this._consumeTagOpenEnd();
          } catch (e) {
            if (e instanceof _ControlFlowError) {
              this._restorePosition(savedPos);
              this._beginToken(TokenType$1.TEXT, start);
              this._endToken(['<']);
              return;
            }
            throw e;
          }
          var contentTokenType = this._getTagDefinition(tagName).contentType;
          if (contentTokenType === TagContentType.RAW_TEXT) {
            this._consumeRawTextWithTagClose(lowercaseTagName, false);
          } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
            this._consumeRawTextWithTagClose(lowercaseTagName, true);
          }
        };
        _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
          var _this = this;
          var textToken = this._consumeRawText(decodeEntities, $LT, function () {
            if (!_this._attemptCharCode($SLASH)) return false;
            _this._attemptCharCodeUntilFn(isNotWhitespace);
            if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
            _this._attemptCharCodeUntilFn(isNotWhitespace);
            return _this._attemptCharCode($GT);
          });
          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
          this._endToken([null, lowercaseTagName]);
        };
        _Tokenizer.prototype._consumeTagOpenStart = function (start) {
          this._beginToken(TokenType$1.TAG_OPEN_START, start);
          var parts = this._consumePrefixAndName();
          this._endToken(parts);
        };
        _Tokenizer.prototype._consumeAttributeName = function () {
          this._beginToken(TokenType$1.ATTR_NAME);
          var prefixAndName = this._consumePrefixAndName();
          this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeAttributeValue = function () {
          this._beginToken(TokenType$1.ATTR_VALUE);
          var value;
          if (this._peek === $SQ || this._peek === $DQ) {
            var quoteChar = this._peek;
            this._advance();
            var parts = [];
            while (this._peek !== quoteChar) {
              parts.push(this._readChar(true));
            }
            value = parts.join('');
            this._advance();
          } else {
            var valueStart = this._index;
            this._requireCharCodeUntilFn(isNameEnd, 1);
            value = this._input.substring(valueStart, this._index);
          }
          this._endToken([this._processCarriageReturns(value)]);
        };
        _Tokenizer.prototype._consumeTagOpenEnd = function () {
          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
          this._beginToken(tokenType);
          this._requireCharCode($GT);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeTagClose = function (start) {
          this._beginToken(TokenType$1.TAG_CLOSE, start);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          var prefixAndName = this._consumePrefixAndName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._requireCharCode($GT);
          this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeExpansionFormStart = function () {
          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
          this._requireCharCode($LBRACE);
          this._endToken([]);
          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          var condition = this._readUntil($COMMA);
          this._endToken([condition], this._getLocation());
          this._requireCharCode($COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          var type = this._readUntil($COMMA);
          this._endToken([type], this._getLocation());
          this._requireCharCode($COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
        };
        _Tokenizer.prototype._consumeExpansionCaseStart = function () {
          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
          var value = this._readUntil($LBRACE).trim();
          this._endToken([value], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
          this._requireCharCode($LBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
        };
        _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
          this._requireCharCode($RBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeExpansionFormEnd = function () {
          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
          this._requireCharCode($RBRACE);
          this._endToken([]);
          this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeText = function () {
          var start = this._getLocation();
          this._beginToken(TokenType$1.TEXT, start);
          var parts = [];
          do {
            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
              parts.push(this._interpolationConfig.start);
              this._inInterpolation = true;
            } else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
              parts.push(this._interpolationConfig.end);
              this._inInterpolation = false;
            } else {
              parts.push(this._readChar(true));
            }
          } while (!this._isTextEnd());
          this._endToken([this._processCarriageReturns(parts.join(''))]);
        };
        _Tokenizer.prototype._isTextEnd = function () {
          if (this._peek === $LT || this._peek === $EOF) {
            return true;
          }
          if (this._tokenizeIcu && !this._inInterpolation) {
            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
              return true;
            }
            if (this._peek === $RBRACE && this._isInExpansionCase()) {
              return true;
            }
          }
          return false;
        };
        _Tokenizer.prototype._savePosition = function () {
          return [this._peek, this._index, this._column, this._line, this.tokens.length];
        };
        _Tokenizer.prototype._readUntil = function (char) {
          var start = this._index;
          this._attemptUntilChar(char);
          return this._input.substring(start, this._index);
        };
        _Tokenizer.prototype._restorePosition = function (position) {
          this._peek = position[0];
          this._index = position[1];
          this._column = position[2];
          this._line = position[3];
          var nbTokens = position[4];
          if (nbTokens < this.tokens.length) {
            this.tokens = this.tokens.slice(0, nbTokens);
          }
        };
        _Tokenizer.prototype._isInExpansionCase = function () {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
        };
        _Tokenizer.prototype._isInExpansionForm = function () {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
        };
        return _Tokenizer;
      }();
      function isNotWhitespace(code) {
        return !isWhitespace(code) || code === $EOF;
      }
      function isNameEnd(code) {
        return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
      }
      function isPrefixEnd(code) {
        return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
      }
      function isDigitEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
      }
      function isNamedEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
      }
      function isExpansionFormStart(input, offset, interpolationConfig) {
        var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
        return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
      }
      function isExpansionCaseStart(peek) {
        return peek === $EQ || isAsciiLetter(peek);
      }
      function compareCharCodeCaseInsensitive(code1, code2) {
        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
      }
      function toUpperCaseCharCode(code) {
        return code >= $a && code <= $z ? code - $a + $A : code;
      }
      function mergeTextTokens(srcTokens) {
        var dstTokens = [];
        var lastDstToken;
        for (var i = 0; i < srcTokens.length; i++) {
          var token = srcTokens[i];
          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
            lastDstToken.parts[0] += token.parts[0];
            lastDstToken.sourceSpan.end = token.sourceSpan.end;
          } else {
            lastDstToken = token;
            dstTokens.push(lastDstToken);
          }
        }
        return dstTokens;
      }
      var __extends$2 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var TreeError = function (_super) {
        __extends$2(TreeError, _super);
        function TreeError(elementName, span, msg) {
          _super.call(this, span, msg);
          this.elementName = elementName;
        }
        TreeError.create = function (elementName, span, msg) {
          return new TreeError(elementName, span, msg);
        };
        return TreeError;
      }(ParseError);
      var ParseTreeResult = function () {
        function ParseTreeResult(rootNodes, errors) {
          this.rootNodes = rootNodes;
          this.errors = errors;
        }
        return ParseTreeResult;
      }();
      var Parser$1 = function () {
        function Parser(getTagDefinition) {
          this.getTagDefinition = getTagDefinition;
        }
        Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        };
        return Parser;
      }();
      var _TreeBuilder = function () {
        function _TreeBuilder(tokens, getTagDefinition) {
          this.tokens = tokens;
          this.getTagDefinition = getTagDefinition;
          this._index = -1;
          this._rootNodes = [];
          this._errors = [];
          this._elementStack = [];
          this._advance();
        }
        _TreeBuilder.prototype.build = function () {
          while (this._peek.type !== TokenType$1.EOF) {
            if (this._peek.type === TokenType$1.TAG_OPEN_START) {
              this._consumeStartTag(this._advance());
            } else if (this._peek.type === TokenType$1.TAG_CLOSE) {
              this._consumeEndTag(this._advance());
            } else if (this._peek.type === TokenType$1.CDATA_START) {
              this._closeVoidElement();
              this._consumeCdata(this._advance());
            } else if (this._peek.type === TokenType$1.COMMENT_START) {
              this._closeVoidElement();
              this._consumeComment(this._advance());
            } else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
              this._closeVoidElement();
              this._consumeText(this._advance());
            } else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
              this._consumeExpansion(this._advance());
            } else {
              this._advance();
            }
          }
          return new ParseTreeResult(this._rootNodes, this._errors);
        };
        _TreeBuilder.prototype._advance = function () {
          var prev = this._peek;
          if (this._index < this.tokens.length - 1) {
            this._index++;
          }
          this._peek = this.tokens[this._index];
          return prev;
        };
        _TreeBuilder.prototype._advanceIf = function (type) {
          if (this._peek.type === type) {
            return this._advance();
          }
          return null;
        };
        _TreeBuilder.prototype._consumeCdata = function (startToken) {
          this._consumeText(this._advance());
          this._advanceIf(TokenType$1.CDATA_END);
        };
        _TreeBuilder.prototype._consumeComment = function (token) {
          var text = this._advanceIf(TokenType$1.RAW_TEXT);
          this._advanceIf(TokenType$1.COMMENT_END);
          var value = isPresent(text) ? text.parts[0].trim() : null;
          this._addToParent(new Comment(value, token.sourceSpan));
        };
        _TreeBuilder.prototype._consumeExpansion = function (token) {
          var switchValue = this._advance();
          var type = this._advance();
          var cases = [];
          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
            var expCase = this._parseExpansionCase();
            if (!expCase) return;
            cases.push(expCase);
          }
          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
            return;
          }
          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
          this._advance();
        };
        _TreeBuilder.prototype._parseExpansionCase = function () {
          var value = this._advance();
          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
            return null;
          }
          var start = this._advance();
          var exp = this._collectExpansionExpTokens(start);
          if (!exp) return null;
          var end = this._advance();
          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
          if (parsedExp.errors.length > 0) {
            this._errors = this._errors.concat(parsedExp.errors);
            return null;
          }
          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        };
        _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
          var exp = [];
          var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
          while (true) {
            if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
              expansionFormStack.push(this._peek.type);
            }
            if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
              if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
                expansionFormStack.pop();
                if (expansionFormStack.length == 0) return exp;
              } else {
                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                return null;
              }
            }
            if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
              if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
                expansionFormStack.pop();
              } else {
                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                return null;
              }
            }
            if (this._peek.type === TokenType$1.EOF) {
              this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
              return null;
            }
            exp.push(this._advance());
          }
        };
        _TreeBuilder.prototype._consumeText = function (token) {
          var text = token.parts[0];
          if (text.length > 0 && text[0] == '\n') {
            var parent_1 = this._getParentElement();
            if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
              text = text.substring(1);
            }
          }
          if (text.length > 0) {
            this._addToParent(new Text(text, token.sourceSpan));
          }
        };
        _TreeBuilder.prototype._closeVoidElement = function () {
          if (this._elementStack.length > 0) {
            var el = this._elementStack[this._elementStack.length - 1];
            if (this.getTagDefinition(el.name).isVoid) {
              this._elementStack.pop();
            }
          }
        };
        _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
          var prefix = startTagToken.parts[0];
          var name = startTagToken.parts[1];
          var attrs = [];
          while (this._peek.type === TokenType$1.ATTR_NAME) {
            attrs.push(this._consumeAttr(this._advance()));
          }
          var fullName = this._getElementFullName(prefix, name, this._getParentElement());
          var selfClosing = false;
          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
            this._advance();
            selfClosing = true;
            var tagDef = this.getTagDefinition(fullName);
            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
              this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
            }
          } else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
            this._advance();
            selfClosing = false;
          }
          var end = this._peek.sourceSpan.start;
          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
          var el = new Element(fullName, attrs, [], span, span, null);
          this._pushElement(el);
          if (selfClosing) {
            this._popElement(fullName);
            el.endSourceSpan = span;
          }
        };
        _TreeBuilder.prototype._pushElement = function (el) {
          if (this._elementStack.length > 0) {
            var parentEl = this._elementStack[this._elementStack.length - 1];
            if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
              this._elementStack.pop();
            }
          }
          var tagDef = this.getTagDefinition(el.name);
          var _a = this._getParentElementSkippingContainers(),
              parent = _a.parent,
              container = _a.container;
          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
            var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            this._insertBeforeContainer(parent, container, newParent);
          }
          this._addToParent(el);
          this._elementStack.push(el);
        };
        _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
          if (this._getParentElement()) {
            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
          }
          if (this.getTagDefinition(fullName).isVoid) {
            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
          } else if (!this._popElement(fullName)) {
            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
          }
        };
        _TreeBuilder.prototype._popElement = function (fullName) {
          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
            var el = this._elementStack[stackIndex];
            if (el.name == fullName) {
              this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
              return true;
            }
            if (!this.getTagDefinition(el.name).closedByParent) {
              return false;
            }
          }
          return false;
        };
        _TreeBuilder.prototype._consumeAttr = function (attrName) {
          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
          var end = attrName.sourceSpan.end;
          var value = '';
          var valueSpan;
          if (this._peek.type === TokenType$1.ATTR_VALUE) {
            var valueToken = this._advance();
            value = valueToken.parts[0];
            end = valueToken.sourceSpan.end;
            valueSpan = valueToken.sourceSpan;
          }
          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
        };
        _TreeBuilder.prototype._getParentElement = function () {
          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
        };
        _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
          var container = null;
          for (var i = this._elementStack.length - 1; i >= 0; i--) {
            if (this._elementStack[i].name !== 'ng-container') {
              return {
                parent: this._elementStack[i],
                container: container
              };
            }
            container = this._elementStack[i];
          }
          return {
            parent: this._elementStack[this._elementStack.length - 1],
            container: container
          };
        };
        _TreeBuilder.prototype._addToParent = function (node) {
          var parent = this._getParentElement();
          if (isPresent(parent)) {
            parent.children.push(node);
          } else {
            this._rootNodes.push(node);
          }
        };
        _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
          if (!container) {
            this._addToParent(node);
            this._elementStack.push(node);
          } else {
            if (parent) {
              var index = parent.children.indexOf(container);
              parent.children[index] = node;
            } else {
              this._rootNodes.push(node);
            }
            node.children.push(container);
            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
          }
        };
        _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
          if (isBlank(prefix)) {
            prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
            if (isBlank(prefix) && isPresent(parentElement)) {
              prefix = getNsPrefix(parentElement.name);
            }
          }
          return mergeNsAndName(prefix, localName);
        };
        return _TreeBuilder;
      }();
      function lastOnStack(stack, element) {
        return stack.length > 0 && stack[stack.length - 1] === element;
      }
      function digestMessage(message) {
        return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
      }
      var _SerializerVisitor = function () {
        function _SerializerVisitor() {}
        _SerializerVisitor.prototype.visitText = function (text, context) {
          return text.value;
        };
        _SerializerVisitor.prototype.visitContainer = function (container, context) {
          var _this = this;
          return "[" + container.children.map(function (child) {
            return child.visit(_this);
          }).join(', ') + "]";
        };
        _SerializerVisitor.prototype.visitIcu = function (icu, context) {
          var _this = this;
          var strCases = Object.keys(icu.cases).map(function (k) {
            return k + " {" + icu.cases[k].visit(_this) + "}";
          });
          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
        };
        _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
          var _this = this;
          return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) {
            return child.visit(_this);
          }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
        };
        _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
          return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
        };
        _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
          return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
        };
        return _SerializerVisitor;
      }();
      var serializerVisitor = new _SerializerVisitor();
      function serializeNodes(nodes) {
        return nodes.map(function (a) {
          return a.visit(serializerVisitor, null);
        });
      }
      function sha1(str) {
        var utf8 = utf8Encode(str);
        var words32 = stringToWords32(utf8);
        var len = utf8.length * 8;
        var w = new Array(80);
        var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],
            a = _a[0],
            b = _a[1],
            c = _a[2],
            d = _a[3],
            e = _a[4];
        words32[len >> 5] |= 0x80 << 24 - len % 32;
        words32[(len + 64 >> 9 << 4) + 15] = len;
        for (var i = 0; i < words32.length; i += 16) {
          var _b = [a, b, c, d, e],
              h0 = _b[0],
              h1 = _b[1],
              h2 = _b[2],
              h3 = _b[3],
              h4 = _b[4];
          for (var j = 0; j < 80; j++) {
            if (j < 16) {
              w[j] = words32[i + j];
            } else {
              w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
            }
            var _c = fk(j, b, c, d),
                f = _c[0],
                k = _c[1];
            var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
            _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
          }
          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
        }
        var sha1 = words32ToString([a, b, c, d, e]);
        var hex = '';
        for (var i = 0; i < sha1.length; i++) {
          var b_1 = sha1.charCodeAt(i);
          hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
        }
        return hex.toLowerCase();
        var _d, _e;
      }
      function utf8Encode(str) {
        var encoded = '';
        for (var index = 0; index < str.length; index++) {
          var codePoint = decodeSurrogatePairs(str, index);
          if (codePoint <= 0x7f) {
            encoded += String.fromCharCode(codePoint);
          } else if (codePoint <= 0x7ff) {
            encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
          } else if (codePoint <= 0xffff) {
            encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
          } else if (codePoint <= 0x1fffff) {
            encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
          }
        }
        return encoded;
      }
      function decodeSurrogatePairs(str, index) {
        if (index < 0 || index >= str.length) {
          throw new Error("index=" + index + " is out of range in \"" + str + "\"");
        }
        var high = str.charCodeAt(index);
        var low;
        if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
          low = str.charCodeAt(index + 1);
          if (low >= 0xdc00 && low <= 0xdfff) {
            return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
          }
        }
        return high;
      }
      function stringToWords32(str) {
        var words32 = Array(str.length >>> 2);
        for (var i = 0; i < words32.length; i++) {
          words32[i] = 0;
        }
        for (var i = 0; i < str.length; i++) {
          words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
        }
        return words32;
      }
      function words32ToString(words32) {
        var str = '';
        for (var i = 0; i < words32.length * 4; i++) {
          str += String.fromCharCode(words32[i >>> 2] >>> 8 * (3 - i & 0x3) & 0xff);
        }
        return str;
      }
      function fk(index, b, c, d) {
        if (index < 20) {
          return [b & c | ~b & d, 0x5a827999];
        }
        if (index < 40) {
          return [b ^ c ^ d, 0x6ed9eba1];
        }
        if (index < 60) {
          return [b & c | b & d | c & d, 0x8f1bbcdc];
        }
        return [b ^ c ^ d, 0xca62c1d6];
      }
      function add32(a, b) {
        var low = (a & 0xffff) + (b & 0xffff);
        var high = (a >> 16) + (b >> 16) + (low >> 16);
        return high << 16 | low & 0xffff;
      }
      function rol32(a, count) {
        return a << count | a >>> 32 - count;
      }
      var Message = function () {
        function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
          this.nodes = nodes;
          this.placeholders = placeholders;
          this.placeholderToMsgIds = placeholderToMsgIds;
          this.meaning = meaning;
          this.description = description;
        }
        return Message;
      }();
      var Text$1 = function () {
        function Text(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function (visitor, context) {
          return visitor.visitText(this, context);
        };
        return Text;
      }();
      var Container = function () {
        function Container(children, sourceSpan) {
          this.children = children;
          this.sourceSpan = sourceSpan;
        }
        Container.prototype.visit = function (visitor, context) {
          return visitor.visitContainer(this, context);
        };
        return Container;
      }();
      var Icu = function () {
        function Icu(expression, type, cases, sourceSpan) {
          this.expression = expression;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
        }
        Icu.prototype.visit = function (visitor, context) {
          return visitor.visitIcu(this, context);
        };
        return Icu;
      }();
      var TagPlaceholder = function () {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
          this.tag = tag;
          this.attrs = attrs;
          this.startName = startName;
          this.closeName = closeName;
          this.children = children;
          this.isVoid = isVoid;
          this.sourceSpan = sourceSpan;
        }
        TagPlaceholder.prototype.visit = function (visitor, context) {
          return visitor.visitTagPlaceholder(this, context);
        };
        return TagPlaceholder;
      }();
      var Placeholder = function () {
        function Placeholder(value, name, sourceSpan) {
          if (name === void 0) {
            name = '';
          }
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }
        Placeholder.prototype.visit = function (visitor, context) {
          return visitor.visitPlaceholder(this, context);
        };
        return Placeholder;
      }();
      var IcuPlaceholder = function () {
        function IcuPlaceholder(value, name, sourceSpan) {
          if (name === void 0) {
            name = '';
          }
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }
        IcuPlaceholder.prototype.visit = function (visitor, context) {
          return visitor.visitIcuPlaceholder(this, context);
        };
        return IcuPlaceholder;
      }();
      var HtmlTagDefinition = function () {
        function HtmlTagDefinition(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              closedByChildren = _b.closedByChildren,
              requiredParents = _b.requiredParents,
              implicitNamespacePrefix = _b.implicitNamespacePrefix,
              _c = _b.contentType,
              contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c,
              _d = _b.closedByParent,
              closedByParent = _d === void 0 ? false : _d,
              _e = _b.isVoid,
              isVoid = _e === void 0 ? false : _e,
              _f = _b.ignoreFirstLf,
              ignoreFirstLf = _f === void 0 ? false : _f;
          this.closedByChildren = {};
          this.closedByParent = false;
          this.canSelfClose = false;
          if (closedByChildren && closedByChildren.length > 0) {
            closedByChildren.forEach(function (tagName) {
              return _this.closedByChildren[tagName] = true;
            });
          }
          this.isVoid = isVoid;
          this.closedByParent = closedByParent || isVoid;
          if (requiredParents && requiredParents.length > 0) {
            this.requiredParents = {};
            this.parentToAdd = requiredParents[0];
            requiredParents.forEach(function (tagName) {
              return _this.requiredParents[tagName] = true;
            });
          }
          this.implicitNamespacePrefix = implicitNamespacePrefix;
          this.contentType = contentType;
          this.ignoreFirstLf = ignoreFirstLf;
        }
        HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
          if (!this.requiredParents) {
            return false;
          }
          if (!currentParent) {
            return true;
          }
          var lcParent = currentParent.toLowerCase();
          return this.requiredParents[lcParent] != true && lcParent != 'template';
        };
        HtmlTagDefinition.prototype.isClosedByChild = function (name) {
          return this.isVoid || name.toLowerCase() in this.closedByChildren;
        };
        return HtmlTagDefinition;
      }();
      var TAG_DEFINITIONS = {
        'base': new HtmlTagDefinition({ isVoid: true }),
        'meta': new HtmlTagDefinition({ isVoid: true }),
        'area': new HtmlTagDefinition({ isVoid: true }),
        'embed': new HtmlTagDefinition({ isVoid: true }),
        'link': new HtmlTagDefinition({ isVoid: true }),
        'img': new HtmlTagDefinition({ isVoid: true }),
        'input': new HtmlTagDefinition({ isVoid: true }),
        'param': new HtmlTagDefinition({ isVoid: true }),
        'hr': new HtmlTagDefinition({ isVoid: true }),
        'br': new HtmlTagDefinition({ isVoid: true }),
        'source': new HtmlTagDefinition({ isVoid: true }),
        'track': new HtmlTagDefinition({ isVoid: true }),
        'wbr': new HtmlTagDefinition({ isVoid: true }),
        'p': new HtmlTagDefinition({
          closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
          closedByParent: true
        }),
        'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
        'tbody': new HtmlTagDefinition({
          closedByChildren: ['tbody', 'tfoot'],
          closedByParent: true
        }),
        'tfoot': new HtmlTagDefinition({
          closedByChildren: ['tbody'],
          closedByParent: true
        }),
        'tr': new HtmlTagDefinition({
          closedByChildren: ['tr'],
          requiredParents: ['tbody', 'tfoot', 'thead'],
          closedByParent: true
        }),
        'td': new HtmlTagDefinition({
          closedByChildren: ['td', 'th'],
          closedByParent: true
        }),
        'th': new HtmlTagDefinition({
          closedByChildren: ['td', 'th'],
          closedByParent: true
        }),
        'col': new HtmlTagDefinition({
          requiredParents: ['colgroup'],
          isVoid: true
        }),
        'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
        'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
        'li': new HtmlTagDefinition({
          closedByChildren: ['li'],
          closedByParent: true
        }),
        'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
        'dd': new HtmlTagDefinition({
          closedByChildren: ['dt', 'dd'],
          closedByParent: true
        }),
        'rb': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rt': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rtc': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rp': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'optgroup': new HtmlTagDefinition({
          closedByChildren: ['optgroup'],
          closedByParent: true
        }),
        'option': new HtmlTagDefinition({
          closedByChildren: ['option', 'optgroup'],
          closedByParent: true
        }),
        'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
        'textarea': new HtmlTagDefinition({
          contentType: TagContentType.ESCAPABLE_RAW_TEXT,
          ignoreFirstLf: true
        })
      };
      var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
      function getHtmlTagDefinition(tagName) {
        return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
      }
      var TAG_TO_PLACEHOLDER_NAMES = {
        'A': 'LINK',
        'B': 'BOLD_TEXT',
        'BR': 'LINE_BREAK',
        'EM': 'EMPHASISED_TEXT',
        'H1': 'HEADING_LEVEL1',
        'H2': 'HEADING_LEVEL2',
        'H3': 'HEADING_LEVEL3',
        'H4': 'HEADING_LEVEL4',
        'H5': 'HEADING_LEVEL5',
        'H6': 'HEADING_LEVEL6',
        'HR': 'HORIZONTAL_RULE',
        'I': 'ITALIC_TEXT',
        'LI': 'LIST_ITEM',
        'LINK': 'MEDIA_LINK',
        'OL': 'ORDERED_LIST',
        'P': 'PARAGRAPH',
        'Q': 'QUOTATION',
        'S': 'STRIKETHROUGH_TEXT',
        'SMALL': 'SMALL_TEXT',
        'SUB': 'SUBSTRIPT',
        'SUP': 'SUPERSCRIPT',
        'TBODY': 'TABLE_BODY',
        'TD': 'TABLE_CELL',
        'TFOOT': 'TABLE_FOOTER',
        'TH': 'TABLE_HEADER_CELL',
        'THEAD': 'TABLE_HEADER',
        'TR': 'TABLE_ROW',
        'TT': 'MONOSPACED_TEXT',
        'U': 'UNDERLINED_TEXT',
        'UL': 'UNORDERED_LIST'
      };
      var PlaceholderRegistry = function () {
        function PlaceholderRegistry() {
          this._placeHolderNameCounts = {};
          this._signatureToName = {};
        }
        PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
          var signature = this._hashTag(tag, attrs, isVoid);
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var upperTag = tag.toUpperCase();
          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
          var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
          this._signatureToName[signature] = name;
          return name;
        };
        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
          var signature = this._hashClosingTag(tag);
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var upperTag = tag.toUpperCase();
          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
          var name = this._generateUniqueName("CLOSE_" + baseName);
          this._signatureToName[signature] = name;
          return name;
        };
        PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
          var upperName = name.toUpperCase();
          var signature = "PH: " + upperName + "=" + content;
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var uniqueName = this._generateUniqueName(upperName);
          this._signatureToName[signature] = uniqueName;
          return uniqueName;
        };
        PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
          var start = "<" + tag;
          var strAttrs = Object.keys(attrs).sort().map(function (name) {
            return " " + name + "=" + attrs[name];
          }).join('');
          var end = isVoid ? '/>' : "></" + tag + ">";
          return start + strAttrs + end;
        };
        PlaceholderRegistry.prototype._hashClosingTag = function (tag) {
          return this._hashTag("/" + tag, {}, false);
        };
        PlaceholderRegistry.prototype._generateUniqueName = function (base) {
          var name = base;
          var next = this._placeHolderNameCounts[name];
          if (!next) {
            next = 1;
          } else {
            name += "_" + next;
            next++;
          }
          this._placeHolderNameCounts[base] = next;
          return name;
        };
        return PlaceholderRegistry;
      }();
      var _expParser = new Parser(new Lexer());
      function createI18nMessageFactory(interpolationConfig) {
        var visitor = new _I18nVisitor(_expParser, interpolationConfig);
        return function (nodes, meaning, description) {
          return visitor.toI18nMessage(nodes, meaning, description);
        };
      }
      var _I18nVisitor = function () {
        function _I18nVisitor(_expressionParser, _interpolationConfig) {
          this._expressionParser = _expressionParser;
          this._interpolationConfig = _interpolationConfig;
        }
        _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
          this._icuDepth = 0;
          this._placeholderRegistry = new PlaceholderRegistry();
          this._placeholderToContent = {};
          this._placeholderToIds = {};
          var i18nodes = visitAll(this, nodes, {});
          return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
        };
        _I18nVisitor.prototype.visitElement = function (el, context) {
          var children = visitAll(this, el.children);
          var attrs = {};
          el.attrs.forEach(function (attr) {
            attrs[attr.name] = attr.value;
          });
          var isVoid = getHtmlTagDefinition(el.name).isVoid;
          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
          var closePhName = '';
          if (!isVoid) {
            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
            this._placeholderToContent[closePhName] = "</" + el.name + ">";
          }
          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
        };
        _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
        };
        _I18nVisitor.prototype.visitText = function (text, context) {
          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
        };
        _I18nVisitor.prototype.visitComment = function (comment, context) {
          return null;
        };
        _I18nVisitor.prototype.visitExpansion = function (icu, context) {
          var _this = this;
          this._icuDepth++;
          var i18nIcuCases = {};
          var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
          icu.cases.forEach(function (caze) {
            i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) {
              return node.visit(_this, {});
            }), caze.expSourceSpan);
          });
          this._icuDepth--;
          if (this._isIcu || this._icuDepth > 0) {
            return i18nIcu;
          }
          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
          this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        };
        _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
          throw new Error('Unreachable code');
        };
        _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
          if (!splitInterpolation) {
            return new Text$1(text, sourceSpan);
          }
          var nodes = [];
          var container = new Container(nodes, sourceSpan);
          var _a = this._interpolationConfig,
              sDelimiter = _a.start,
              eDelimiter = _a.end;
          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
            var expression = splitInterpolation.expressions[i];
            var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
            var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
            if (splitInterpolation.strings[i].length) {
              nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
            }
            nodes.push(new Placeholder(expression, phName, sourceSpan));
            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
          }
          var lastStringIdx = splitInterpolation.strings.length - 1;
          if (splitInterpolation.strings[lastStringIdx].length) {
            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
          }
          return container;
        };
        return _I18nVisitor;
      }();
      var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
      function _extractPlaceholderName(input) {
        return input.split(_CUSTOM_PH_EXP)[1];
      }
      var __extends$4 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var I18nError = function (_super) {
        __extends$4(I18nError, _super);
        function I18nError(span, msg) {
          _super.call(this, span, msg);
        }
        return I18nError;
      }(ParseError);
      var _I18N_ATTR = 'i18n';
      var _I18N_ATTR_PREFIX = 'i18n-';
      var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
      function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor(implicitTags, implicitAttrs);
        return visitor.extract(nodes, interpolationConfig);
      }
      function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor(implicitTags, implicitAttrs);
        return visitor.merge(nodes, translations, interpolationConfig);
      }
      var ExtractionResult = function () {
        function ExtractionResult(messages, errors) {
          this.messages = messages;
          this.errors = errors;
        }
        return ExtractionResult;
      }();
      var _VisitorMode;
      (function (_VisitorMode) {
        _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
        _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
      })(_VisitorMode || (_VisitorMode = {}));
      var _Visitor = function () {
        function _Visitor(_implicitTags, _implicitAttrs) {
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
        }
        _Visitor.prototype.extract = function (nodes, interpolationConfig) {
          var _this = this;
          this._init(_VisitorMode.Extract, interpolationConfig);
          nodes.forEach(function (node) {
            return node.visit(_this, null);
          });
          if (this._inI18nBlock) {
            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ExtractionResult(this._messages, this._errors);
        };
        _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
          this._init(_VisitorMode.Merge, interpolationConfig);
          this._translations = translations;
          var wrapper = new Element('wrapper', [], nodes, null, null, null);
          var translatedNode = wrapper.visit(this, null);
          if (this._inI18nBlock) {
            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ParseTreeResult(translatedNode.children, this._errors);
        };
        _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
          var expression = visitAll(this, icuCase.expression, context);
          if (this._mode === _VisitorMode.Merge) {
            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
          }
        };
        _Visitor.prototype.visitExpansion = function (icu, context) {
          this._mayBeAddBlockChildren(icu);
          var wasInIcu = this._inIcu;
          if (!this._inIcu) {
            if (this._isInTranslatableSection) {
              this._addMessage([icu]);
            }
            this._inIcu = true;
          }
          var cases = visitAll(this, icu.cases, context);
          if (this._mode === _VisitorMode.Merge) {
            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
          }
          this._inIcu = wasInIcu;
          return icu;
        };
        _Visitor.prototype.visitComment = function (comment, context) {
          var isOpening = _isOpeningComment(comment);
          if (isOpening && this._isInTranslatableSection) {
            this._reportError(comment, 'Could not start a block inside a translatable section');
            return;
          }
          var isClosing = _isClosingComment(comment);
          if (isClosing && !this._inI18nBlock) {
            this._reportError(comment, 'Trying to close an unopened block');
            return;
          }
          if (!this._inI18nNode && !this._inIcu) {
            if (!this._inI18nBlock) {
              if (isOpening) {
                this._inI18nBlock = true;
                this._blockStartDepth = this._depth;
                this._blockChildren = [];
                this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
                this._openTranslatableSection(comment);
              }
            } else {
              if (isClosing) {
                if (this._depth == this._blockStartDepth) {
                  this._closeTranslatableSection(comment, this._blockChildren);
                  this._inI18nBlock = false;
                  var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                  var nodes = this._translateMessage(comment, message);
                  return visitAll(this, nodes);
                } else {
                  this._reportError(comment, 'I18N blocks should not cross element boundaries');
                  return;
                }
              }
            }
          }
        };
        _Visitor.prototype.visitText = function (text, context) {
          if (this._isInTranslatableSection) {
            this._mayBeAddBlockChildren(text);
          }
          return text;
        };
        _Visitor.prototype.visitElement = function (el, context) {
          var _this = this;
          this._mayBeAddBlockChildren(el);
          this._depth++;
          var wasInI18nNode = this._inI18nNode;
          var wasInImplicitNode = this._inImplicitNode;
          var childNodes;
          var i18nAttr = _getI18nAttr(el);
          var isImplicit = this._implicitTags.some(function (tag) {
            return el.name === tag;
          }) && !this._inIcu && !this._isInTranslatableSection;
          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
          this._inImplicitNode = this._inImplicitNode || isImplicit;
          if (!this._isInTranslatableSection && !this._inIcu) {
            if (i18nAttr) {
              this._inI18nNode = true;
              var message = this._addMessage(el.children, i18nAttr.value);
              childNodes = this._translateMessage(el, message);
            } else if (isTopLevelImplicit) {
              this._inI18nNode = true;
              var message = this._addMessage(el.children);
              childNodes = this._translateMessage(el, message);
            }
            if (this._mode == _VisitorMode.Extract) {
              var isTranslatable = i18nAttr || isTopLevelImplicit;
              if (isTranslatable) {
                this._openTranslatableSection(el);
              }
              visitAll(this, el.children);
              if (isTranslatable) {
                this._closeTranslatableSection(el, el.children);
              }
            }
            if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
              childNodes = [];
              el.children.forEach(function (child) {
                var visited = child.visit(_this, context);
                if (visited && !_this._isInTranslatableSection) {
                  childNodes = childNodes.concat(visited);
                }
              });
            }
          } else {
            if (i18nAttr || isTopLevelImplicit) {
              this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
            }
            if (this._mode == _VisitorMode.Extract) {
              visitAll(this, el.children);
            }
            if (this._mode == _VisitorMode.Merge) {
              childNodes = [];
              el.children.forEach(function (child) {
                var visited = child.visit(_this, context);
                if (visited && !_this._isInTranslatableSection) {
                  childNodes = childNodes.concat(visited);
                }
              });
            }
          }
          this._visitAttributesOf(el);
          this._depth--;
          this._inI18nNode = wasInI18nNode;
          this._inImplicitNode = wasInImplicitNode;
          if (this._mode === _VisitorMode.Merge) {
            var translatedAttrs = this._translateAttributes(el);
            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
          }
        };
        _Visitor.prototype.visitAttribute = function (attribute, context) {
          throw new Error('unreachable code');
        };
        _Visitor.prototype._init = function (mode, interpolationConfig) {
          this._mode = mode;
          this._inI18nBlock = false;
          this._inI18nNode = false;
          this._depth = 0;
          this._inIcu = false;
          this._msgCountAtSectionStart = void 0;
          this._errors = [];
          this._messages = [];
          this._inImplicitNode = false;
          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
        };
        _Visitor.prototype._visitAttributesOf = function (el) {
          var _this = this;
          var explicitAttrNameToValue = {};
          var implicitAttrNames = this._implicitAttrs[el.name] || [];
          el.attrs.filter(function (attr) {
            return attr.name.startsWith(_I18N_ATTR_PREFIX);
          }).forEach(function (attr) {
            return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
          });
          el.attrs.forEach(function (attr) {
            if (attr.name in explicitAttrNameToValue) {
              _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
            } else if (implicitAttrNames.some(function (name) {
              return attr.name === name;
            })) {
              _this._addMessage([attr]);
            }
          });
        };
        _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
          if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
            return;
          }
          var _a = _splitMeaningAndDesc(meaningAndDesc),
              meaning = _a[0],
              description = _a[1];
          var message = this._createI18nMessage(ast, meaning, description);
          this._messages.push(message);
          return message;
        };
        _Visitor.prototype._translateMessage = function (el, message) {
          if (message && this._mode === _VisitorMode.Merge) {
            var id = digestMessage(message);
            var nodes = this._translations.get(id);
            if (nodes) {
              return nodes;
            }
            this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
          }
          return [];
        };
        _Visitor.prototype._translateAttributes = function (el) {
          var _this = this;
          var attributes = el.attrs;
          var i18nAttributeMeanings = {};
          attributes.forEach(function (attr) {
            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
              i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
            }
          });
          var translatedAttributes = [];
          attributes.forEach(function (attr) {
            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
              return;
            }
            if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
              var meaning = i18nAttributeMeanings[attr.name];
              var message = _this._createI18nMessage([attr], meaning, '');
              var id = digestMessage(message);
              var nodes = _this._translations.get(id);
              if (nodes) {
                if (nodes[0] instanceof Text) {
                  var value = nodes[0].value;
                  translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
                } else {
                  _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
                }
              } else {
                _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
              }
            } else {
              translatedAttributes.push(attr);
            }
          });
          return translatedAttributes;
        };
        _Visitor.prototype._mayBeAddBlockChildren = function (node) {
          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
            this._blockChildren.push(node);
          }
        };
        _Visitor.prototype._openTranslatableSection = function (node) {
          if (this._isInTranslatableSection) {
            this._reportError(node, 'Unexpected section start');
          } else {
            this._msgCountAtSectionStart = this._messages.length;
          }
        };
        Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
          get: function () {
            return this._msgCountAtSectionStart !== void 0;
          },
          enumerable: true,
          configurable: true
        });
        _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
          if (!this._isInTranslatableSection) {
            this._reportError(node, 'Unexpected section end');
            return;
          }
          var startIndex = this._msgCountAtSectionStart;
          var significantChildren = directChildren.reduce(function (count, node) {
            return count + (node instanceof Comment ? 0 : 1);
          }, 0);
          if (significantChildren == 1) {
            for (var i = this._messages.length - 1; i >= startIndex; i--) {
              var ast = this._messages[i].nodes;
              if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
                this._messages.splice(i, 1);
                break;
              }
            }
          }
          this._msgCountAtSectionStart = void 0;
        };
        _Visitor.prototype._reportError = function (node, msg) {
          this._errors.push(new I18nError(node.sourceSpan, msg));
        };
        return _Visitor;
      }();
      function _isOpeningComment(n) {
        return n instanceof Comment && n.value && n.value.startsWith('i18n');
      }
      function _isClosingComment(n) {
        return n instanceof Comment && n.value && n.value === '/i18n';
      }
      function _getI18nAttr(p) {
        return p.attrs.find(function (attr) {
          return attr.name === _I18N_ATTR;
        }) || null;
      }
      function _splitMeaningAndDesc(i18n) {
        if (!i18n) return ['', ''];
        var pipeIndex = i18n.indexOf('|');
        return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
      }
      var MessageBundle = function () {
        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
          this._htmlParser = _htmlParser;
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
          this._messageMap = {};
        }
        MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
          var _this = this;
          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
          if (htmlParserResult.errors.length) {
            return htmlParserResult.errors;
          }
          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
          if (i18nParserResult.errors.length) {
            return i18nParserResult.errors;
          }
          i18nParserResult.messages.forEach(function (message) {
            _this._messageMap[digestMessage(message)] = message;
          });
        };
        MessageBundle.prototype.getMessageMap = function () {
          return this._messageMap;
        };
        MessageBundle.prototype.write = function (serializer) {
          return serializer.write(this._messageMap);
        };
        return MessageBundle;
      }();
      var XmlTagDefinition = function () {
        function XmlTagDefinition() {
          this.closedByParent = false;
          this.contentType = TagContentType.PARSABLE_DATA;
          this.isVoid = false;
          this.ignoreFirstLf = false;
          this.canSelfClose = true;
        }
        XmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
          return false;
        };
        XmlTagDefinition.prototype.isClosedByChild = function (name) {
          return false;
        };
        return XmlTagDefinition;
      }();
      var _TAG_DEFINITION = new XmlTagDefinition();
      function getXmlTagDefinition(tagName) {
        return _TAG_DEFINITION;
      }
      var __extends$5 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var XmlParser = function (_super) {
        __extends$5(XmlParser, _super);
        function XmlParser() {
          _super.call(this, getXmlTagDefinition);
        }
        XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
        };
        return XmlParser;
      }(Parser$1);
      function extractPlaceholders(messageBundle) {
        var messageMap = messageBundle.getMessageMap();
        var placeholders = {};
        Object.keys(messageMap).forEach(function (msgId) {
          placeholders[msgId] = messageMap[msgId].placeholders;
        });
        return placeholders;
      }
      function extractPlaceholderToIds(messageBundle) {
        var messageMap = messageBundle.getMessageMap();
        var placeholderToIds = {};
        Object.keys(messageMap).forEach(function (msgId) {
          placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
        });
        return placeholderToIds;
      }
      var __extends$6 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _Visitor$1 = function () {
        function _Visitor() {}
        _Visitor.prototype.visitTag = function (tag) {
          var _this = this;
          var strAttrs = this._serializeAttributes(tag.attrs);
          if (tag.children.length == 0) {
            return "<" + tag.name + strAttrs + "/>";
          }
          var strChildren = tag.children.map(function (node) {
            return node.visit(_this);
          });
          return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
        };
        _Visitor.prototype.visitText = function (text) {
          return text.value;
        };
        _Visitor.prototype.visitDeclaration = function (decl) {
          return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
        };
        _Visitor.prototype._serializeAttributes = function (attrs) {
          var strAttrs = Object.keys(attrs).map(function (name) {
            return name + "=\"" + attrs[name] + "\"";
          }).join(' ');
          return strAttrs.length > 0 ? ' ' + strAttrs : '';
        };
        _Visitor.prototype.visitDoctype = function (doctype) {
          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
        };
        return _Visitor;
      }();
      var _visitor = new _Visitor$1();
      function serialize(nodes) {
        return nodes.map(function (node) {
          return node.visit(_visitor);
        }).join('');
      }
      var Declaration = function () {
        function Declaration(unescapedAttrs) {
          var _this = this;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function (k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        Declaration.prototype.visit = function (visitor) {
          return visitor.visitDeclaration(this);
        };
        return Declaration;
      }();
      var Doctype = function () {
        function Doctype(rootTag, dtd) {
          this.rootTag = rootTag;
          this.dtd = dtd;
        }
        ;
        Doctype.prototype.visit = function (visitor) {
          return visitor.visitDoctype(this);
        };
        return Doctype;
      }();
      var Tag = function () {
        function Tag(name, unescapedAttrs, children) {
          var _this = this;
          if (unescapedAttrs === void 0) {
            unescapedAttrs = {};
          }
          if (children === void 0) {
            children = [];
          }
          this.name = name;
          this.children = children;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function (k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        Tag.prototype.visit = function (visitor) {
          return visitor.visitTag(this);
        };
        return Tag;
      }();
      var Text$2 = function () {
        function Text(unescapedValue) {
          this.value = _escapeXml(unescapedValue);
        }
        ;
        Text.prototype.visit = function (visitor) {
          return visitor.visitText(this);
        };
        return Text;
      }();
      var CR = function (_super) {
        __extends$6(CR, _super);
        function CR(ws) {
          if (ws === void 0) {
            ws = 0;
          }
          _super.call(this, "\n" + new Array(ws + 1).join(' '));
        }
        return CR;
      }(Text$2);
      var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
      function _escapeXml(text) {
        return _ESCAPED_CHARS.reduce(function (text, entry) {
          return text.replace(entry[0], entry[1]);
        }, text);
      }
      var _VERSION = '1.2';
      var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
      var _SOURCE_LANG = 'en';
      var _PLACEHOLDER_TAG = 'x';
      var _SOURCE_TAG = 'source';
      var _TARGET_TAG = 'target';
      var _UNIT_TAG = 'trans-unit';
      var Xliff = function () {
        function Xliff(_htmlParser, _interpolationConfig) {
          this._htmlParser = _htmlParser;
          this._interpolationConfig = _interpolationConfig;
        }
        Xliff.prototype.write = function (messageMap) {
          var visitor = new _WriteVisitor();
          var transUnits = [];
          Object.keys(messageMap).forEach(function (id) {
            var message = messageMap[id];
            var transUnit = new Tag(_UNIT_TAG, {
              id: id,
              datatype: 'html'
            });
            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
            if (message.description) {
              transUnit.children.push(new CR(8), new Tag('note', {
                priority: '1',
                from: 'description'
              }, [new Text$2(message.description)]));
            }
            if (message.meaning) {
              transUnit.children.push(new CR(8), new Tag('note', {
                priority: '1',
                from: 'meaning'
              }, [new Text$2(message.meaning)]));
            }
            transUnit.children.push(new CR(6));
            transUnits.push(new CR(6), transUnit);
          });
          var body = new Tag('body', {}, transUnits.concat([new CR(4)]));
          var file = new Tag('file', {
            'source-language': _SOURCE_LANG,
            datatype: 'plaintext',
            original: 'ng2.template'
          }, [new CR(4), body, new CR(2)]);
          var xliff = new Tag('xliff', {
            version: _VERSION,
            xmlns: _XMLNS
          }, [new CR(2), file, new CR()]);
          return serialize([new Declaration({
            version: '1.0',
            encoding: 'UTF-8'
          }), new CR(), xliff, new CR()]);
        };
        Xliff.prototype.load = function (content, url, messageBundle) {
          var _this = this;
          var result = new XmlParser().parse(content, url);
          if (result.errors.length) {
            throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
          }
          var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle),
              messages = _a.messages,
              errors = _a.errors;
          if (errors.length) {
            throw new Error("xtb parse errors:\n" + errors.join('\n'));
          }
          var messageMap = {};
          var parseErrors = [];
          Object.keys(messages).forEach(function (id) {
            var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
            parseErrors.push.apply(parseErrors, res.errors);
            messageMap[id] = res.rootNodes;
          });
          if (parseErrors.length) {
            throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
          }
          return messageMap;
        };
        return Xliff;
      }();
      var _WriteVisitor = function () {
        function _WriteVisitor() {}
        _WriteVisitor.prototype.visitText = function (text, context) {
          return [new Text$2(text.value)];
        };
        _WriteVisitor.prototype.visitContainer = function (container, context) {
          var _this = this;
          var nodes = [];
          container.children.forEach(function (node) {
            return nodes.push.apply(nodes, node.visit(_this));
          });
          return nodes;
        };
        _WriteVisitor.prototype.visitIcu = function (icu, context) {
          if (this._isInIcu) {
            throw new Error('xliff does not support nested ICU messages');
          }
          this._isInIcu = true;
          var nodes = [];
          this._isInIcu = false;
          return nodes;
        };
        _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
          var ctype = getCtypeForTag(ph.tag);
          var startTagPh = new Tag(_PLACEHOLDER_TAG, {
            id: ph.startName,
            ctype: ctype
          });
          if (ph.isVoid) {
            return [startTagPh];
          }
          var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
            id: ph.closeName,
            ctype: ctype
          });
          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        };
        _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
        };
        _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
        };
        _WriteVisitor.prototype.serialize = function (nodes) {
          var _this = this;
          this._isInIcu = false;
          return (_a = []).concat.apply(_a, nodes.map(function (node) {
            return node.visit(_this);
          }));
          var _a;
        };
        return _WriteVisitor;
      }();
      var _LoadVisitor = function () {
        function _LoadVisitor() {}
        _LoadVisitor.prototype.parse = function (nodes, messageBundle) {
          var _this = this;
          this._messageNodes = [];
          this._translatedMessages = {};
          this._msgId = '';
          this._target = [];
          this._errors = [];
          visitAll(this, nodes, null);
          var messageMap = messageBundle.getMessageMap();
          var placeholders = extractPlaceholders(messageBundle);
          var placeholderToIds = extractPlaceholderToIds(messageBundle);
          this._messageNodes.filter(function (message) {
            return messageMap.hasOwnProperty(message[0]);
          }).sort(function (a, b) {
            if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
              return -1;
            }
            if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
              return 1;
            }
            return 0;
          }).forEach(function (message) {
            var id = message[0];
            _this._placeholders = placeholders[id] || {};
            _this._placeholderToIds = placeholderToIds[id] || {};
            _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
          });
          return {
            messages: this._translatedMessages,
            errors: this._errors
          };
        };
        _LoadVisitor.prototype.visitElement = function (element, context) {
          switch (element.name) {
            case _UNIT_TAG:
              this._target = null;
              var msgId = element.attrs.find(function (attr) {
                return attr.name === 'id';
              });
              if (!msgId) {
                this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
              } else {
                this._msgId = msgId.value;
              }
              visitAll(this, element.children, null);
              if (this._msgId !== null) {
                this._messageNodes.push([this._msgId, this._target]);
              }
              break;
            case _SOURCE_TAG:
              break;
            case _TARGET_TAG:
              this._target = element.children;
              break;
            case _PLACEHOLDER_TAG:
              var idAttr = element.attrs.find(function (attr) {
                return attr.name === 'id';
              });
              if (!idAttr) {
                this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
              } else {
                var id = idAttr.value;
                if (this._placeholders.hasOwnProperty(id)) {
                  return this._placeholders[id];
                }
                if (this._placeholderToIds.hasOwnProperty(id) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
                  return this._translatedMessages[this._placeholderToIds[id]];
                }
                this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
              }
              break;
            default:
              visitAll(this, element.children, null);
          }
        };
        _LoadVisitor.prototype.visitAttribute = function (attribute, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype.visitText = function (text, context) {
          return text.value;
        };
        _LoadVisitor.prototype.visitComment = function (comment, context) {
          return '';
        };
        _LoadVisitor.prototype.visitExpansion = function (expansion, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype._addError = function (node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
        };
        return _LoadVisitor;
      }();
      function getCtypeForTag(tag) {
        switch (tag.toLowerCase()) {
          case 'br':
            return 'lb';
          case 'img':
            return 'image';
          default:
            return "x-" + tag;
        }
      }
      var _MESSAGES_TAG = 'messagebundle';
      var _MESSAGE_TAG = 'msg';
      var _PLACEHOLDER_TAG$1 = 'ph';
      var _EXEMPLE_TAG = 'ex';
      var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
      var Xmb = function () {
        function Xmb() {}
        Xmb.prototype.write = function (messageMap) {
          var visitor = new _Visitor$2();
          var rootNode = new Tag(_MESSAGES_TAG);
          Object.keys(messageMap).forEach(function (id) {
            var message = messageMap[id];
            var attrs = { id: id };
            if (message.description) {
              attrs['desc'] = message.description;
            }
            if (message.meaning) {
              attrs['meaning'] = message.meaning;
            }
            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
          });
          rootNode.children.push(new CR());
          return serialize([new Declaration({
            version: '1.0',
            encoding: 'UTF-8'
          }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), rootNode, new CR()]);
        };
        Xmb.prototype.load = function (content, url, messageBundle) {
          throw new Error('Unsupported');
        };
        return Xmb;
      }();
      var _Visitor$2 = function () {
        function _Visitor() {}
        _Visitor.prototype.visitText = function (text, context) {
          return [new Text$2(text.value)];
        };
        _Visitor.prototype.visitContainer = function (container, context) {
          var _this = this;
          var nodes = [];
          container.children.forEach(function (node) {
            return nodes.push.apply(nodes, node.visit(_this));
          });
          return nodes;
        };
        _Visitor.prototype.visitIcu = function (icu, context) {
          var _this = this;
          var nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
          Object.keys(icu.cases).forEach(function (c) {
            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
          });
          nodes.push(new Text$2("}"));
          return nodes;
        };
        _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
          var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
          if (ph.isVoid) {
            return [startTagPh];
          }
          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
          var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        };
        _Visitor.prototype.visitPlaceholder = function (ph, context) {
          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
        };
        _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
        };
        _Visitor.prototype.serialize = function (nodes) {
          var _this = this;
          return (_a = []).concat.apply(_a, nodes.map(function (node) {
            return node.visit(_this);
          }));
          var _a;
        };
        return _Visitor;
      }();
      var _TRANSLATIONS_TAG = 'translationbundle';
      var _TRANSLATION_TAG = 'translation';
      var _PLACEHOLDER_TAG$2 = 'ph';
      var Xtb = function () {
        function Xtb(_htmlParser, _interpolationConfig) {
          this._htmlParser = _htmlParser;
          this._interpolationConfig = _interpolationConfig;
        }
        Xtb.prototype.write = function (messageMap) {
          throw new Error('Unsupported');
        };
        Xtb.prototype.load = function (content, url, messageBundle) {
          var _this = this;
          var result = new XmlParser().parse(content, url);
          if (result.errors.length) {
            throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
          }
          var _a = new _Visitor$3().parse(result.rootNodes, messageBundle),
              messages = _a.messages,
              errors = _a.errors;
          if (errors.length) {
            throw new Error("xtb parse errors:\n" + errors.join('\n'));
          }
          var messageMap = {};
          var parseErrors = [];
          Object.keys(messages).forEach(function (id) {
            var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
            parseErrors.push.apply(parseErrors, res.errors);
            messageMap[id] = res.rootNodes;
          });
          if (parseErrors.length) {
            throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
          }
          return messageMap;
        };
        return Xtb;
      }();
      var _Visitor$3 = function () {
        function _Visitor() {}
        _Visitor.prototype.parse = function (nodes, messageBundle) {
          var _this = this;
          this._messageNodes = [];
          this._translatedMessages = {};
          this._bundleDepth = 0;
          this._translationDepth = 0;
          this._errors = [];
          visitAll(this, nodes, null);
          var messageMap = messageBundle.getMessageMap();
          var placeholders = extractPlaceholders(messageBundle);
          var placeholderToIds = extractPlaceholderToIds(messageBundle);
          this._messageNodes.filter(function (message) {
            return messageMap.hasOwnProperty(message[0]);
          }).sort(function (a, b) {
            if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
              return -1;
            }
            if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
              return 1;
            }
            return 0;
          }).forEach(function (message) {
            var id = message[0];
            _this._placeholders = placeholders[id] || {};
            _this._placeholderToIds = placeholderToIds[id] || {};
            _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
          });
          return {
            messages: this._translatedMessages,
            errors: this._errors
          };
        };
        _Visitor.prototype.visitElement = function (element, context) {
          switch (element.name) {
            case _TRANSLATIONS_TAG:
              this._bundleDepth++;
              if (this._bundleDepth > 1) {
                this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
              }
              visitAll(this, element.children, null);
              this._bundleDepth--;
              break;
            case _TRANSLATION_TAG:
              this._translationDepth++;
              if (this._translationDepth > 1) {
                this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
              }
              var idAttr = element.attrs.find(function (attr) {
                return attr.name === 'id';
              });
              if (!idAttr) {
                this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
              } else {
                this._messageNodes.push([idAttr.value, element.children]);
              }
              this._translationDepth--;
              break;
            case _PLACEHOLDER_TAG$2:
              var nameAttr = element.attrs.find(function (attr) {
                return attr.name === 'name';
              });
              if (!nameAttr) {
                this._addError(element, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
              } else {
                var name_1 = nameAttr.value;
                if (this._placeholders.hasOwnProperty(name_1)) {
                  return this._placeholders[name_1];
                }
                if (this._placeholderToIds.hasOwnProperty(name_1) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
                  return this._translatedMessages[this._placeholderToIds[name_1]];
                }
                this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
              }
              break;
            default:
              this._addError(element, 'Unexpected tag');
          }
        };
        _Visitor.prototype.visitAttribute = function (attribute, context) {
          throw new Error('unreachable code');
        };
        _Visitor.prototype.visitText = function (text, context) {
          return text.value;
        };
        _Visitor.prototype.visitComment = function (comment, context) {
          return '';
        };
        _Visitor.prototype.visitExpansion = function (expansion, context) {
          var _this = this;
          var strCases = expansion.cases.map(function (c) {
            return c.visit(_this, null);
          });
          return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
        };
        _Visitor.prototype.visitExpansionCase = function (expansionCase, context) {
          return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
        };
        _Visitor.prototype._addError = function (node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
        };
        return _Visitor;
      }();
      var TranslationBundle = function () {
        function TranslationBundle(_messageMap) {
          if (_messageMap === void 0) {
            _messageMap = {};
          }
          this._messageMap = _messageMap;
        }
        TranslationBundle.load = function (content, url, messageBundle, serializer) {
          return new TranslationBundle(serializer.load(content, url, messageBundle));
        };
        TranslationBundle.prototype.get = function (id) {
          return this._messageMap[id];
        };
        TranslationBundle.prototype.has = function (id) {
          return id in this._messageMap;
        };
        return TranslationBundle;
      }();
      var I18NHtmlParser = function () {
        function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
          this._htmlParser = _htmlParser;
          this._translations = _translations;
          this._translationsFormat = _translationsFormat;
        }
        I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
          if (!this._translations || this._translations === '') {
            return parseResult;
          }
          var messageBundle = new MessageBundle(this._htmlParser, [], {});
          var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
          if (errors && errors.length) {
            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
          }
          var serializer = this._createSerializer(interpolationConfig);
          var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
        };
        I18NHtmlParser.prototype._createSerializer = function (interpolationConfig) {
          var format = (this._translationsFormat || 'xlf').toLowerCase();
          switch (format) {
            case 'xmb':
              return new Xmb();
            case 'xtb':
              return new Xtb(this._htmlParser, interpolationConfig);
            case 'xliff':
            case 'xlf':
            default:
              return new Xliff(this._htmlParser, interpolationConfig);
          }
        };
        return I18NHtmlParser;
      }();
      var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function (m1, m2) {
          var m = {};
          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }();
      var ListWrapper = function () {
        function ListWrapper() {}
        ListWrapper.removeAll = function (list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            if (index > -1) {
              list.splice(index, 1);
            }
          }
        };
        ListWrapper.remove = function (list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function (a, b) {
          if (a.length != b.length) return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return false;
          }
          return true;
        };
        ListWrapper.flatten = function (list) {
          return list.reduce(function (flat, item) {
            var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return flat.concat(flatItem);
          }, []);
        };
        return ListWrapper;
      }();
      var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', 'g');
      var CssSelector = function () {
        function CssSelector() {
          this.element = null;
          this.classNames = [];
          this.attrs = [];
          this.notSelectors = [];
        }
        CssSelector.parse = function (selector) {
          var results = [];
          var _addResult = function (res, cssSel) {
            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
              cssSel.element = '*';
            }
            res.push(cssSel);
          };
          var cssSelector = new CssSelector();
          var match;
          var current = cssSelector;
          var inNot = false;
          _SELECTOR_REGEXP.lastIndex = 0;
          while (match = _SELECTOR_REGEXP.exec(selector)) {
            if (match[1]) {
              if (inNot) {
                throw new Error('Nesting :not is not allowed in a selector');
              }
              inNot = true;
              current = new CssSelector();
              cssSelector.notSelectors.push(current);
            }
            if (match[2]) {
              current.setElement(match[2]);
            }
            if (match[3]) {
              current.addClassName(match[3]);
            }
            if (match[4]) {
              current.addAttribute(match[4], match[5]);
            }
            if (match[6]) {
              inNot = false;
              current = cssSelector;
            }
            if (match[7]) {
              if (inNot) {
                throw new Error('Multiple selectors in :not are not supported');
              }
              _addResult(results, cssSelector);
              cssSelector = current = new CssSelector();
            }
          }
          _addResult(results, cssSelector);
          return results;
        };
        CssSelector.prototype.isElementSelector = function () {
          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
        };
        CssSelector.prototype.hasElementSelector = function () {
          return !!this.element;
        };
        CssSelector.prototype.setElement = function (element) {
          if (element === void 0) {
            element = null;
          }
          this.element = element;
        };
        CssSelector.prototype.getMatchingElementTemplate = function () {
          var tagName = this.element || 'div';
          var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
          var attrs = '';
          for (var i = 0; i < this.attrs.length; i += 2) {
            var attrName = this.attrs[i];
            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
            attrs += " " + attrName + attrValue;
          }
          return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
        };
        CssSelector.prototype.addAttribute = function (name, value) {
          if (value === void 0) {
            value = '';
          }
          this.attrs.push(name, value && value.toLowerCase() || '');
        };
        CssSelector.prototype.addClassName = function (name) {
          this.classNames.push(name.toLowerCase());
        };
        CssSelector.prototype.toString = function () {
          var res = this.element || '';
          if (this.classNames) {
            this.classNames.forEach(function (klass) {
              return res += "." + klass;
            });
          }
          if (this.attrs) {
            for (var i = 0; i < this.attrs.length; i += 2) {
              var name_1 = this.attrs[i];
              var value = this.attrs[i + 1];
              res += "[" + name_1 + (value ? '=' + value : '') + "]";
            }
          }
          this.notSelectors.forEach(function (notSelector) {
            return res += ":not(" + notSelector + ")";
          });
          return res;
        };
        return CssSelector;
      }();
      var SelectorMatcher = function () {
        function SelectorMatcher() {
          this._elementMap = new Map();
          this._elementPartialMap = new Map();
          this._classMap = new Map();
          this._classPartialMap = new Map();
          this._attrValueMap = new Map();
          this._attrValuePartialMap = new Map();
          this._listContexts = [];
        }
        SelectorMatcher.createNotMatcher = function (notSelectors) {
          var notMatcher = new SelectorMatcher();
          notMatcher.addSelectables(notSelectors, null);
          return notMatcher;
        };
        SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
          var listContext = null;
          if (cssSelectors.length > 1) {
            listContext = new SelectorListContext(cssSelectors);
            this._listContexts.push(listContext);
          }
          for (var i = 0; i < cssSelectors.length; i++) {
            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
          }
        };
        SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
          var matcher = this;
          var element = cssSelector.element;
          var classNames = cssSelector.classNames;
          var attrs = cssSelector.attrs;
          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
          if (element) {
            var isTerminal = attrs.length === 0 && classNames.length === 0;
            if (isTerminal) {
              this._addTerminal(matcher._elementMap, element, selectable);
            } else {
              matcher = this._addPartial(matcher._elementPartialMap, element);
            }
          }
          if (classNames) {
            for (var i = 0; i < classNames.length; i++) {
              var isTerminal = attrs.length === 0 && i === classNames.length - 1;
              var className = classNames[i];
              if (isTerminal) {
                this._addTerminal(matcher._classMap, className, selectable);
              } else {
                matcher = this._addPartial(matcher._classPartialMap, className);
              }
            }
          }
          if (attrs) {
            for (var i = 0; i < attrs.length; i += 2) {
              var isTerminal = i === attrs.length - 2;
              var name_2 = attrs[i];
              var value = attrs[i + 1];
              if (isTerminal) {
                var terminalMap = matcher._attrValueMap;
                var terminalValuesMap = terminalMap.get(name_2);
                if (!terminalValuesMap) {
                  terminalValuesMap = new Map();
                  terminalMap.set(name_2, terminalValuesMap);
                }
                this._addTerminal(terminalValuesMap, value, selectable);
              } else {
                var partialMap = matcher._attrValuePartialMap;
                var partialValuesMap = partialMap.get(name_2);
                if (!partialValuesMap) {
                  partialValuesMap = new Map();
                  partialMap.set(name_2, partialValuesMap);
                }
                matcher = this._addPartial(partialValuesMap, value);
              }
            }
          }
        };
        SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
          var terminalList = map.get(name);
          if (!terminalList) {
            terminalList = [];
            map.set(name, terminalList);
          }
          terminalList.push(selectable);
        };
        SelectorMatcher.prototype._addPartial = function (map, name) {
          var matcher = map.get(name);
          if (!matcher) {
            matcher = new SelectorMatcher();
            map.set(name, matcher);
          }
          return matcher;
        };
        SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
          var result = false;
          var element = cssSelector.element;
          var classNames = cssSelector.classNames;
          var attrs = cssSelector.attrs;
          for (var i = 0; i < this._listContexts.length; i++) {
            this._listContexts[i].alreadyMatched = false;
          }
          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
          if (classNames) {
            for (var i = 0; i < classNames.length; i++) {
              var className = classNames[i];
              result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
              result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
            }
          }
          if (attrs) {
            for (var i = 0; i < attrs.length; i += 2) {
              var name_3 = attrs[i];
              var value = attrs[i + 1];
              var terminalValuesMap = this._attrValueMap.get(name_3);
              if (value) {
                result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
              }
              result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
              var partialValuesMap = this._attrValuePartialMap.get(name_3);
              if (value) {
                result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
              }
              result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
            }
          }
          return result;
        };
        SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
            return false;
          }
          var selectables = map.get(name);
          var starSelectables = map.get('*');
          if (starSelectables) {
            selectables = selectables.concat(starSelectables);
          }
          if (!selectables) {
            return false;
          }
          var selectable;
          var result = false;
          for (var i = 0; i < selectables.length; i++) {
            selectable = selectables[i];
            result = selectable.finalize(cssSelector, matchedCallback) || result;
          }
          return result;
        };
        SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
            return false;
          }
          var nestedSelector = map.get(name);
          if (!nestedSelector) {
            return false;
          }
          return nestedSelector.match(cssSelector, matchedCallback);
        };
        return SelectorMatcher;
      }();
      var SelectorListContext = function () {
        function SelectorListContext(selectors) {
          this.selectors = selectors;
          this.alreadyMatched = false;
        }
        return SelectorListContext;
      }();
      var SelectorContext = function () {
        function SelectorContext(selector, cbContext, listContext) {
          this.selector = selector;
          this.cbContext = cbContext;
          this.listContext = listContext;
          this.notSelectors = selector.notSelectors;
        }
        SelectorContext.prototype.finalize = function (cssSelector, callback) {
          var result = true;
          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
            result = !notMatcher.match(cssSelector, null);
          }
          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
            if (this.listContext) {
              this.listContext.alreadyMatched = true;
            }
            callback(this.selector, this.cbContext);
          }
          return result;
        };
        return SelectorContext;
      }();
      var MODULE_SUFFIX = '';
      var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          var m = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
          }
          return m[1].toUpperCase();
        });
      }
      function splitAtColon(input, defaultValues) {
        return _splitAt(input, ':', defaultValues);
      }
      function splitAtPeriod(input, defaultValues) {
        return _splitAt(input, '.', defaultValues);
      }
      function _splitAt(input, character, defaultValues) {
        var characterIndex = input.indexOf(character);
        if (characterIndex == -1) return defaultValues;
        return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
      }
      function sanitizeIdentifier(name) {
        return name.replace(/\W/g, '_');
      }
      function visitValue(value, visitor, context) {
        if (Array.isArray(value)) {
          return visitor.visitArray(value, context);
        }
        if (isStrictStringMap(value)) {
          return visitor.visitStringMap(value, context);
        }
        if (isBlank(value) || isPrimitive(value)) {
          return visitor.visitPrimitive(value, context);
        }
        return visitor.visitOther(value, context);
      }
      var ValueTransformer = function () {
        function ValueTransformer() {}
        ValueTransformer.prototype.visitArray = function (arr, context) {
          var _this = this;
          return arr.map(function (value) {
            return visitValue(value, _this, context);
          });
        };
        ValueTransformer.prototype.visitStringMap = function (map, context) {
          var _this = this;
          var result = {};
          Object.keys(map).forEach(function (key) {
            result[key] = visitValue(map[key], _this, context);
          });
          return result;
        };
        ValueTransformer.prototype.visitPrimitive = function (value, context) {
          return value;
        };
        ValueTransformer.prototype.visitOther = function (value, context) {
          return value;
        };
        return ValueTransformer;
      }();
      var SyncAsyncResult = function () {
        function SyncAsyncResult(syncResult, asyncResult) {
          if (asyncResult === void 0) {
            asyncResult = null;
          }
          this.syncResult = syncResult;
          this.asyncResult = asyncResult;
          if (!asyncResult) {
            this.asyncResult = Promise.resolve(syncResult);
          }
        }
        return SyncAsyncResult;
      }();
      var __extends$7 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function unimplemented() {
        throw new Error('unimplemented');
      }
      var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
      var CompileMetadataWithIdentifier = function () {
        function CompileMetadataWithIdentifier() {}
        Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return CompileMetadataWithIdentifier;
      }();
      var CompileAnimationEntryMetadata = function () {
        function CompileAnimationEntryMetadata(name, definitions) {
          if (name === void 0) {
            name = null;
          }
          if (definitions === void 0) {
            definitions = null;
          }
          this.name = name;
          this.definitions = definitions;
        }
        return CompileAnimationEntryMetadata;
      }();
      var CompileAnimationStateMetadata = function () {
        function CompileAnimationStateMetadata() {}
        return CompileAnimationStateMetadata;
      }();
      var CompileAnimationStateDeclarationMetadata = function (_super) {
        __extends$7(CompileAnimationStateDeclarationMetadata, _super);
        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this);
          this.stateNameExpr = stateNameExpr;
          this.styles = styles;
        }
        return CompileAnimationStateDeclarationMetadata;
      }(CompileAnimationStateMetadata);
      var CompileAnimationStateTransitionMetadata = function (_super) {
        __extends$7(CompileAnimationStateTransitionMetadata, _super);
        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this);
          this.stateChangeExpr = stateChangeExpr;
          this.steps = steps;
        }
        return CompileAnimationStateTransitionMetadata;
      }(CompileAnimationStateMetadata);
      var CompileAnimationMetadata = function () {
        function CompileAnimationMetadata() {}
        return CompileAnimationMetadata;
      }();
      var CompileAnimationKeyframesSequenceMetadata = function (_super) {
        __extends$7(CompileAnimationKeyframesSequenceMetadata, _super);
        function CompileAnimationKeyframesSequenceMetadata(steps) {
          if (steps === void 0) {
            steps = [];
          }
          _super.call(this);
          this.steps = steps;
        }
        return CompileAnimationKeyframesSequenceMetadata;
      }(CompileAnimationMetadata);
      var CompileAnimationStyleMetadata = function (_super) {
        __extends$7(CompileAnimationStyleMetadata, _super);
        function CompileAnimationStyleMetadata(offset, styles) {
          if (styles === void 0) {
            styles = null;
          }
          _super.call(this);
          this.offset = offset;
          this.styles = styles;
        }
        return CompileAnimationStyleMetadata;
      }(CompileAnimationMetadata);
      var CompileAnimationAnimateMetadata = function (_super) {
        __extends$7(CompileAnimationAnimateMetadata, _super);
        function CompileAnimationAnimateMetadata(timings, styles) {
          if (timings === void 0) {
            timings = 0;
          }
          if (styles === void 0) {
            styles = null;
          }
          _super.call(this);
          this.timings = timings;
          this.styles = styles;
        }
        return CompileAnimationAnimateMetadata;
      }(CompileAnimationMetadata);
      var CompileAnimationWithStepsMetadata = function (_super) {
        __extends$7(CompileAnimationWithStepsMetadata, _super);
        function CompileAnimationWithStepsMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this);
          this.steps = steps;
        }
        return CompileAnimationWithStepsMetadata;
      }(CompileAnimationMetadata);
      var CompileAnimationSequenceMetadata = function (_super) {
        __extends$7(CompileAnimationSequenceMetadata, _super);
        function CompileAnimationSequenceMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this, steps);
        }
        return CompileAnimationSequenceMetadata;
      }(CompileAnimationWithStepsMetadata);
      var CompileAnimationGroupMetadata = function (_super) {
        __extends$7(CompileAnimationGroupMetadata, _super);
        function CompileAnimationGroupMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this, steps);
        }
        return CompileAnimationGroupMetadata;
      }(CompileAnimationWithStepsMetadata);
      var CompileIdentifierMetadata = function () {
        function CompileIdentifierMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              reference = _b.reference,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              value = _b.value;
          this.reference = reference;
          this.name = name;
          this.prefix = prefix;
          this.moduleUrl = moduleUrl;
          this.value = value;
        }
        Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
          get: function () {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        return CompileIdentifierMetadata;
      }();
      var CompileDiDependencyMetadata = function () {
        function CompileDiDependencyMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              isAttribute = _b.isAttribute,
              isSelf = _b.isSelf,
              isHost = _b.isHost,
              isSkipSelf = _b.isSkipSelf,
              isOptional = _b.isOptional,
              isValue = _b.isValue,
              token = _b.token,
              value = _b.value;
          this.isAttribute = !!isAttribute;
          this.isSelf = !!isSelf;
          this.isHost = !!isHost;
          this.isSkipSelf = !!isSkipSelf;
          this.isOptional = !!isOptional;
          this.isValue = !!isValue;
          this.token = token;
          this.value = value;
        }
        return CompileDiDependencyMetadata;
      }();
      var CompileProviderMetadata = function () {
        function CompileProviderMetadata(_a) {
          var token = _a.token,
              useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token;
          this.useClass = useClass;
          this.useValue = useValue;
          this.useExisting = useExisting;
          this.useFactory = useFactory;
          this.deps = deps || null;
          this.multi = !!multi;
        }
        return CompileProviderMetadata;
      }();
      var CompileFactoryMetadata = function (_super) {
        __extends$7(CompileFactoryMetadata, _super);
        function CompileFactoryMetadata(_a) {
          var reference = _a.reference,
              name = _a.name,
              moduleUrl = _a.moduleUrl,
              prefix = _a.prefix,
              diDeps = _a.diDeps,
              value = _a.value;
          _super.call(this, {
            reference: reference,
            name: name,
            prefix: prefix,
            moduleUrl: moduleUrl,
            value: value
          });
          this.diDeps = _normalizeArray(diDeps);
        }
        return CompileFactoryMetadata;
      }(CompileIdentifierMetadata);
      var CompileTokenMetadata = function () {
        function CompileTokenMetadata(_a) {
          var value = _a.value,
              identifier = _a.identifier,
              identifierIsInstance = _a.identifierIsInstance;
          this.value = value;
          this.identifier = identifier;
          this.identifierIsInstance = !!identifierIsInstance;
        }
        Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
          get: function () {
            if (isPresent(this.identifier)) {
              return this.identifier.reference;
            } else {
              return this.value;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompileTokenMetadata.prototype, "name", {
          get: function () {
            return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
          },
          enumerable: true,
          configurable: true
        });
        return CompileTokenMetadata;
      }();
      var CompileTypeMetadata = function (_super) {
        __extends$7(CompileTypeMetadata, _super);
        function CompileTypeMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              reference = _b.reference,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              isHost = _b.isHost,
              value = _b.value,
              diDeps = _b.diDeps,
              lifecycleHooks = _b.lifecycleHooks;
          _super.call(this, {
            reference: reference,
            name: name,
            moduleUrl: moduleUrl,
            prefix: prefix,
            value: value
          });
          this.isHost = !!isHost;
          this.diDeps = _normalizeArray(diDeps);
          this.lifecycleHooks = _normalizeArray(lifecycleHooks);
        }
        return CompileTypeMetadata;
      }(CompileIdentifierMetadata);
      var CompileQueryMetadata = function () {
        function CompileQueryMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              selectors = _b.selectors,
              descendants = _b.descendants,
              first = _b.first,
              propertyName = _b.propertyName,
              read = _b.read;
          this.selectors = selectors;
          this.descendants = !!descendants;
          this.first = !!first;
          this.propertyName = propertyName;
          this.read = read;
        }
        return CompileQueryMetadata;
      }();
      var CompileStylesheetMetadata = function () {
        function CompileStylesheetMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              moduleUrl = _b.moduleUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls;
          this.moduleUrl = moduleUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
        }
        return CompileStylesheetMetadata;
      }();
      var CompileTemplateMetadata = function () {
        function CompileTemplateMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              encapsulation = _b.encapsulation,
              template = _b.template,
              templateUrl = _b.templateUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              externalStylesheets = _b.externalStylesheets,
              animations = _b.animations,
              ngContentSelectors = _b.ngContentSelectors,
              interpolation = _b.interpolation;
          this.encapsulation = encapsulation;
          this.template = template;
          this.templateUrl = templateUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
          this.externalStylesheets = _normalizeArray(externalStylesheets);
          this.animations = animations ? ListWrapper.flatten(animations) : [];
          this.ngContentSelectors = ngContentSelectors || [];
          if (interpolation && interpolation.length != 2) {
            throw new Error("'interpolation' should have a start and an end symbol.");
          }
          this.interpolation = interpolation;
        }
        CompileTemplateMetadata.prototype.toSummary = function () {
          return {
            isSummary: true,
            animations: this.animations.map(function (anim) {
              return anim.name;
            }),
            ngContentSelectors: this.ngContentSelectors,
            encapsulation: this.encapsulation
          };
        };
        return CompileTemplateMetadata;
      }();
      var CompileDirectiveMetadata = function () {
        function CompileDirectiveMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              hostListeners = _b.hostListeners,
              hostProperties = _b.hostProperties,
              hostAttributes = _b.hostAttributes,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              template = _b.template;
          this.type = type;
          this.isComponent = isComponent;
          this.selector = selector;
          this.exportAs = exportAs;
          this.changeDetection = changeDetection;
          this.inputs = inputs;
          this.outputs = outputs;
          this.hostListeners = hostListeners;
          this.hostProperties = hostProperties;
          this.hostAttributes = hostAttributes;
          this.providers = _normalizeArray(providers);
          this.viewProviders = _normalizeArray(viewProviders);
          this.queries = _normalizeArray(queries);
          this.viewQueries = _normalizeArray(viewQueries);
          this.entryComponents = _normalizeArray(entryComponents);
          this.template = template;
        }
        CompileDirectiveMetadata.create = function (_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              host = _b.host,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              template = _b.template;
          var hostListeners = {};
          var hostProperties = {};
          var hostAttributes = {};
          if (isPresent(host)) {
            Object.keys(host).forEach(function (key) {
              var value = host[key];
              var matches = key.match(HOST_REG_EXP);
              if (matches === null) {
                hostAttributes[key] = value;
              } else if (isPresent(matches[1])) {
                hostProperties[matches[1]] = value;
              } else if (isPresent(matches[2])) {
                hostListeners[matches[2]] = value;
              }
            });
          }
          var inputsMap = {};
          if (isPresent(inputs)) {
            inputs.forEach(function (bindConfig) {
              var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
              inputsMap[parts[0]] = parts[1];
            });
          }
          var outputsMap = {};
          if (isPresent(outputs)) {
            outputs.forEach(function (bindConfig) {
              var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
              outputsMap[parts[0]] = parts[1];
            });
          }
          return new CompileDirectiveMetadata({
            type: type,
            isComponent: !!isComponent,
            selector: selector,
            exportAs: exportAs,
            changeDetection: changeDetection,
            inputs: inputsMap,
            outputs: outputsMap,
            hostListeners: hostListeners,
            hostProperties: hostProperties,
            hostAttributes: hostAttributes,
            providers: providers,
            viewProviders: viewProviders,
            queries: queries,
            viewQueries: viewQueries,
            entryComponents: entryComponents,
            template: template
          });
        };
        Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
          get: function () {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        CompileDirectiveMetadata.prototype.toSummary = function () {
          return {
            isSummary: true,
            type: this.type,
            isComponent: this.isComponent,
            selector: this.selector,
            exportAs: this.exportAs,
            inputs: this.inputs,
            outputs: this.outputs,
            hostListeners: this.hostListeners,
            hostProperties: this.hostProperties,
            hostAttributes: this.hostAttributes,
            providers: this.providers,
            viewProviders: this.viewProviders,
            queries: this.queries,
            entryComponents: this.entryComponents,
            changeDetection: this.changeDetection,
            template: this.template && this.template.toSummary()
          };
        };
        return CompileDirectiveMetadata;
      }();
      function createHostComponentMeta(compMeta) {
        var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
        return CompileDirectiveMetadata.create({
          type: new CompileTypeMetadata({
            reference: Object,
            name: compMeta.type.name + "_Host",
            moduleUrl: compMeta.type.moduleUrl,
            isHost: true
          }),
          template: new CompileTemplateMetadata({
            encapsulation: _angular_core.ViewEncapsulation.None,
            template: template,
            templateUrl: '',
            styles: [],
            styleUrls: [],
            ngContentSelectors: [],
            animations: []
          }),
          changeDetection: _angular_core.ChangeDetectionStrategy.Default,
          inputs: [],
          outputs: [],
          host: {},
          isComponent: true,
          selector: '*',
          providers: [],
          viewProviders: [],
          queries: [],
          viewQueries: []
        });
      }
      var CompilePipeMetadata = function () {
        function CompilePipeMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              name = _b.name,
              pure = _b.pure;
          this.type = type;
          this.name = name;
          this.pure = !!pure;
        }
        Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
          get: function () {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        CompilePipeMetadata.prototype.toSummary = function () {
          return {
            isSummary: true,
            type: this.type,
            name: this.name,
            pure: this.pure
          };
        };
        return CompilePipeMetadata;
      }();
      var CompileNgModuleMetadata = function () {
        function CompileNgModuleMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              providers = _b.providers,
              declaredDirectives = _b.declaredDirectives,
              exportedDirectives = _b.exportedDirectives,
              declaredPipes = _b.declaredPipes,
              exportedPipes = _b.exportedPipes,
              entryComponents = _b.entryComponents,
              bootstrapComponents = _b.bootstrapComponents,
              importedModules = _b.importedModules,
              exportedModules = _b.exportedModules,
              schemas = _b.schemas,
              transitiveModule = _b.transitiveModule,
              id = _b.id;
          this.type = type;
          this.declaredDirectives = _normalizeArray(declaredDirectives);
          this.exportedDirectives = _normalizeArray(exportedDirectives);
          this.declaredPipes = _normalizeArray(declaredPipes);
          this.exportedPipes = _normalizeArray(exportedPipes);
          this.providers = _normalizeArray(providers);
          this.entryComponents = _normalizeArray(entryComponents);
          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
          this.importedModules = _normalizeArray(importedModules);
          this.exportedModules = _normalizeArray(exportedModules);
          this.schemas = _normalizeArray(schemas);
          this.id = id;
          this.transitiveModule = transitiveModule;
        }
        Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
          get: function () {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        CompileNgModuleMetadata.prototype.toSummary = function () {
          return {
            isSummary: true,
            type: this.type,
            entryComponents: this.entryComponents,
            providers: this.providers,
            importedModules: this.importedModules,
            exportedModules: this.exportedModules,
            exportedDirectives: this.exportedDirectives,
            exportedPipes: this.exportedPipes,
            directiveLoaders: this.transitiveModule.directiveLoaders
          };
        };
        CompileNgModuleMetadata.prototype.toInjectorSummary = function () {
          return {
            isSummary: true,
            type: this.type,
            entryComponents: this.entryComponents,
            providers: this.providers,
            importedModules: this.importedModules,
            exportedModules: this.exportedModules
          };
        };
        CompileNgModuleMetadata.prototype.toDirectiveSummary = function () {
          return {
            isSummary: true,
            type: this.type,
            exportedDirectives: this.exportedDirectives,
            exportedPipes: this.exportedPipes,
            exportedModules: this.exportedModules,
            directiveLoaders: this.transitiveModule.directiveLoaders
          };
        };
        return CompileNgModuleMetadata;
      }();
      var TransitiveCompileNgModuleMetadata = function () {
        function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes, directiveLoaders) {
          var _this = this;
          this.modules = modules;
          this.providers = providers;
          this.entryComponents = entryComponents;
          this.directives = directives;
          this.pipes = pipes;
          this.directiveLoaders = directiveLoaders;
          this.directivesSet = new Set();
          this.pipesSet = new Set();
          directives.forEach(function (dir) {
            return _this.directivesSet.add(dir.reference);
          });
          pipes.forEach(function (pipe) {
            return _this.pipesSet.add(pipe.reference);
          });
        }
        return TransitiveCompileNgModuleMetadata;
      }();
      function removeIdentifierDuplicates(items) {
        var map = new Map();
        items.forEach(function (item) {
          if (!map.get(item.identifier.reference)) {
            map.set(item.identifier.reference, item);
          }
        });
        return Array.from(map.values());
      }
      function _normalizeArray(obj) {
        return obj || [];
      }
      function isStaticSymbol(value) {
        return typeof value === 'object' && value !== null && value['name'] && value['filePath'];
      }
      var ProviderMeta = function () {
        function ProviderMeta(token, _a) {
          var useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token;
          this.useClass = useClass;
          this.useValue = useValue;
          this.useExisting = useExisting;
          this.useFactory = useFactory;
          this.dependencies = deps;
          this.multi = !!multi;
        }
        return ProviderMeta;
      }();
      var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
      var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
      var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
      var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
      var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
      var ViewContainer = _angular_core.__core_private__.ViewContainer;
      var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
      var ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
      var AppView = _angular_core.__core_private__.AppView;
      var DebugAppView = _angular_core.__core_private__.DebugAppView;
      var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
      var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
      var ViewType = _angular_core.__core_private__.ViewType;
      var view_utils = _angular_core.__core_private__.view_utils;
      var DebugContext = _angular_core.__core_private__.DebugContext;
      var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
      var devModeEqual = _angular_core.__core_private__.devModeEqual;
      var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
      var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
      var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
      var Console = _angular_core.__core_private__.Console;
      var reflector = _angular_core.__core_private__.reflector;
      var Reflector = _angular_core.__core_private__.Reflector;
      var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
      var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
      var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
      var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
      var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
      var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
      var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
      var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
      var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
      var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
      var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
      var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
      var clearStyles = _angular_core.__core_private__.clearStyles;
      var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
      var renderStyles = _angular_core.__core_private__.renderStyles;
      var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
      var AnimationTransition = _angular_core.__core_private__.AnimationTransition;
      var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
      var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
      var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
      var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
      var Identifiers = function () {
        function Identifiers() {}
        Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
          moduleUrl: assetUrl('core', 'metadata/di'),
          runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
        };
        Identifiers.ViewUtils = {
          name: 'ViewUtils',
          moduleUrl: assetUrl('core', 'linker/view_utils'),
          runtime: view_utils.ViewUtils
        };
        Identifiers.AppView = {
          name: 'AppView',
          moduleUrl: APP_VIEW_MODULE_URL,
          runtime: AppView
        };
        Identifiers.DebugAppView = {
          name: 'DebugAppView',
          moduleUrl: APP_VIEW_MODULE_URL,
          runtime: DebugAppView
        };
        Identifiers.ViewContainer = {
          name: 'ViewContainer',
          moduleUrl: assetUrl('core', 'linker/view_container'),
          runtime: ViewContainer
        };
        Identifiers.ElementRef = {
          name: 'ElementRef',
          moduleUrl: assetUrl('core', 'linker/element_ref'),
          runtime: _angular_core.ElementRef
        };
        Identifiers.ViewContainerRef = {
          name: 'ViewContainerRef',
          moduleUrl: assetUrl('core', 'linker/view_container_ref'),
          runtime: _angular_core.ViewContainerRef
        };
        Identifiers.ChangeDetectorRef = {
          name: 'ChangeDetectorRef',
          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
          runtime: _angular_core.ChangeDetectorRef
        };
        Identifiers.RenderComponentType = {
          name: 'RenderComponentType',
          moduleUrl: assetUrl('core', 'render/api'),
          runtime: _angular_core.RenderComponentType
        };
        Identifiers.QueryList = {
          name: 'QueryList',
          moduleUrl: assetUrl('core', 'linker/query_list'),
          runtime: _angular_core.QueryList
        };
        Identifiers.TemplateRef = {
          name: 'TemplateRef',
          moduleUrl: assetUrl('core', 'linker/template_ref'),
          runtime: _angular_core.TemplateRef
        };
        Identifiers.TemplateRef_ = {
          name: 'TemplateRef_',
          moduleUrl: assetUrl('core', 'linker/template_ref'),
          runtime: TemplateRef_
        };
        Identifiers.CodegenComponentFactoryResolver = {
          name: 'CodegenComponentFactoryResolver',
          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
          runtime: CodegenComponentFactoryResolver
        };
        Identifiers.ComponentFactoryResolver = {
          name: 'ComponentFactoryResolver',
          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
          runtime: _angular_core.ComponentFactoryResolver
        };
        Identifiers.ComponentFactory = {
          name: 'ComponentFactory',
          runtime: _angular_core.ComponentFactory,
          moduleUrl: assetUrl('core', 'linker/component_factory')
        };
        Identifiers.ComponentRef_ = {
          name: 'ComponentRef_',
          runtime: ComponentRef_,
          moduleUrl: assetUrl('core', 'linker/component_factory')
        };
        Identifiers.ComponentRef = {
          name: 'ComponentRef',
          runtime: _angular_core.ComponentRef,
          moduleUrl: assetUrl('core', 'linker/component_factory')
        };
        Identifiers.NgModuleFactory = {
          name: 'NgModuleFactory',
          runtime: _angular_core.NgModuleFactory,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
        };
        Identifiers.NgModuleInjector = {
          name: 'NgModuleInjector',
          runtime: NgModuleInjector,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
        };
        Identifiers.RegisterModuleFactoryFn = {
          name: 'registerModuleFactory',
          runtime: registerModuleFactory,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
        };
        Identifiers.ValueUnwrapper = {
          name: 'ValueUnwrapper',
          moduleUrl: CD_MODULE_URL,
          runtime: ValueUnwrapper
        };
        Identifiers.Injector = {
          name: 'Injector',
          moduleUrl: assetUrl('core', 'di/injector'),
          runtime: _angular_core.Injector
        };
        Identifiers.ViewEncapsulation = {
          name: 'ViewEncapsulation',
          moduleUrl: assetUrl('core', 'metadata/view'),
          runtime: _angular_core.ViewEncapsulation
        };
        Identifiers.ViewType = {
          name: 'ViewType',
          moduleUrl: assetUrl('core', 'linker/view_type'),
          runtime: ViewType
        };
        Identifiers.ChangeDetectionStrategy = {
          name: 'ChangeDetectionStrategy',
          moduleUrl: CD_MODULE_URL,
          runtime: _angular_core.ChangeDetectionStrategy
        };
        Identifiers.StaticNodeDebugInfo = {
          name: 'StaticNodeDebugInfo',
          moduleUrl: assetUrl('core', 'linker/debug_context'),
          runtime: StaticNodeDebugInfo
        };
        Identifiers.DebugContext = {
          name: 'DebugContext',
          moduleUrl: assetUrl('core', 'linker/debug_context'),
          runtime: DebugContext
        };
        Identifiers.Renderer = {
          name: 'Renderer',
          moduleUrl: assetUrl('core', 'render/api'),
          runtime: _angular_core.Renderer
        };
        Identifiers.SimpleChange = {
          name: 'SimpleChange',
          moduleUrl: CD_MODULE_URL,
          runtime: _angular_core.SimpleChange
        };
        Identifiers.UNINITIALIZED = {
          name: 'UNINITIALIZED',
          moduleUrl: CD_MODULE_URL,
          runtime: UNINITIALIZED
        };
        Identifiers.ChangeDetectorStatus = {
          name: 'ChangeDetectorStatus',
          moduleUrl: CD_MODULE_URL,
          runtime: ChangeDetectorStatus
        };
        Identifiers.checkBinding = {
          name: 'checkBinding',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.checkBinding
        };
        Identifiers.devModeEqual = {
          name: 'devModeEqual',
          moduleUrl: CD_MODULE_URL,
          runtime: devModeEqual
        };
        Identifiers.inlineInterpolate = {
          name: 'inlineInterpolate',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.inlineInterpolate
        };
        Identifiers.interpolate = {
          name: 'interpolate',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.interpolate
        };
        Identifiers.castByValue = {
          name: 'castByValue',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.castByValue
        };
        Identifiers.EMPTY_ARRAY = {
          name: 'EMPTY_ARRAY',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_ARRAY
        };
        Identifiers.EMPTY_MAP = {
          name: 'EMPTY_MAP',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_MAP
        };
        Identifiers.createRenderElement = {
          name: 'createRenderElement',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.createRenderElement
        };
        Identifiers.selectOrCreateRenderHostElement = {
          name: 'selectOrCreateRenderHostElement',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.selectOrCreateRenderHostElement
        };
        Identifiers.pureProxies = [null, {
          name: 'pureProxy1',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy1
        }, {
          name: 'pureProxy2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy2
        }, {
          name: 'pureProxy3',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy3
        }, {
          name: 'pureProxy4',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy4
        }, {
          name: 'pureProxy5',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy5
        }, {
          name: 'pureProxy6',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy6
        }, {
          name: 'pureProxy7',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy7
        }, {
          name: 'pureProxy8',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy8
        }, {
          name: 'pureProxy9',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy9
        }, {
          name: 'pureProxy10',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy10
        }];
        Identifiers.SecurityContext = {
          name: 'SecurityContext',
          moduleUrl: assetUrl('core', 'security'),
          runtime: _angular_core.SecurityContext
        };
        Identifiers.AnimationKeyframe = {
          name: 'AnimationKeyframe',
          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
          runtime: AnimationKeyframe
        };
        Identifiers.AnimationStyles = {
          name: 'AnimationStyles',
          moduleUrl: assetUrl('core', 'animation/animation_styles'),
          runtime: AnimationStyles
        };
        Identifiers.NoOpAnimationPlayer = {
          name: 'NoOpAnimationPlayer',
          moduleUrl: assetUrl('core', 'animation/animation_player'),
          runtime: NoOpAnimationPlayer
        };
        Identifiers.AnimationGroupPlayer = {
          name: 'AnimationGroupPlayer',
          moduleUrl: assetUrl('core', 'animation/animation_group_player'),
          runtime: AnimationGroupPlayer
        };
        Identifiers.AnimationSequencePlayer = {
          name: 'AnimationSequencePlayer',
          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
          runtime: AnimationSequencePlayer
        };
        Identifiers.prepareFinalAnimationStyles = {
          name: 'prepareFinalAnimationStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: prepareFinalAnimationStyles
        };
        Identifiers.balanceAnimationKeyframes = {
          name: 'balanceAnimationKeyframes',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: balanceAnimationKeyframes
        };
        Identifiers.clearStyles = {
          name: 'clearStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: clearStyles
        };
        Identifiers.renderStyles = {
          name: 'renderStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: renderStyles
        };
        Identifiers.collectAndResolveStyles = {
          name: 'collectAndResolveStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: collectAndResolveStyles
        };
        Identifiers.LOCALE_ID = {
          name: 'LOCALE_ID',
          moduleUrl: assetUrl('core', 'i18n/tokens'),
          runtime: _angular_core.LOCALE_ID
        };
        Identifiers.TRANSLATIONS_FORMAT = {
          name: 'TRANSLATIONS_FORMAT',
          moduleUrl: assetUrl('core', 'i18n/tokens'),
          runtime: _angular_core.TRANSLATIONS_FORMAT
        };
        Identifiers.setBindingDebugInfo = {
          name: 'setBindingDebugInfo',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.setBindingDebugInfo
        };
        Identifiers.setBindingDebugInfoForChanges = {
          name: 'setBindingDebugInfoForChanges',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.setBindingDebugInfoForChanges
        };
        Identifiers.AnimationTransition = {
          name: 'AnimationTransition',
          moduleUrl: assetUrl('core', 'animation/animation_transition'),
          runtime: AnimationTransition
        };
        Identifiers.InlineArray = {
          name: 'InlineArray',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: null
        };
        Identifiers.inlineArrays = [{
          name: 'InlineArray2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray2
        }, {
          name: 'InlineArray2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray2
        }, {
          name: 'InlineArray4',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray4
        }, {
          name: 'InlineArray8',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray8
        }, {
          name: 'InlineArray16',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray16
        }];
        Identifiers.EMPTY_INLINE_ARRAY = {
          name: 'EMPTY_INLINE_ARRAY',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_INLINE_ARRAY
        };
        Identifiers.InlineArrayDynamic = {
          name: 'InlineArrayDynamic',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArrayDynamic
        };
        Identifiers.subscribeToRenderElement = {
          name: 'subscribeToRenderElement',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.subscribeToRenderElement
        };
        Identifiers.createRenderComponentType = {
          name: 'createRenderComponentType',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.createRenderComponentType
        };
        Identifiers.noop = {
          name: 'noop',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.noop
        };
        return Identifiers;
      }();
      function assetUrl(pkg, path, type) {
        if (path === void 0) {
          path = null;
        }
        if (type === void 0) {
          type = 'src';
        }
        if (path == null) {
          return "asset:@angular/lib/" + pkg + "/index";
        } else {
          return "asset:@angular/lib/" + pkg + "/src/" + path;
        }
      }
      function resolveIdentifier(identifier) {
        return new CompileIdentifierMetadata({
          name: identifier.name,
          moduleUrl: identifier.moduleUrl,
          reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
        });
      }
      function identifierToken(identifier) {
        return new CompileTokenMetadata({ identifier: identifier });
      }
      function resolveIdentifierToken(identifier) {
        return identifierToken(resolveIdentifier(identifier));
      }
      function resolveEnumIdentifier(enumType, name) {
        var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
        return new CompileIdentifierMetadata({
          name: enumType.name + "." + name,
          moduleUrl: enumType.moduleUrl,
          reference: resolvedEnum
        });
      }
      var __extends$8 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var HtmlParser = function (_super) {
        __extends$8(HtmlParser, _super);
        function HtmlParser() {
          _super.call(this, getHtmlTagDefinition);
        }
        HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
        };
        HtmlParser.decorators = [{ type: _angular_core.Injectable }];
        HtmlParser.ctorParameters = [];
        return HtmlParser;
      }(Parser$1);
      var __extends$9 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
      function expandNodes(nodes) {
        var expander = new _Expander();
        return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
      }
      var ExpansionResult = function () {
        function ExpansionResult(nodes, expanded, errors) {
          this.nodes = nodes;
          this.expanded = expanded;
          this.errors = errors;
        }
        return ExpansionResult;
      }();
      var ExpansionError = function (_super) {
        __extends$9(ExpansionError, _super);
        function ExpansionError(span, errorMsg) {
          _super.call(this, span, errorMsg);
        }
        return ExpansionError;
      }(ParseError);
      var _Expander = function () {
        function _Expander() {
          this.isExpanded = false;
          this.errors = [];
        }
        _Expander.prototype.visitElement = function (element, context) {
          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
        };
        _Expander.prototype.visitAttribute = function (attribute, context) {
          return attribute;
        };
        _Expander.prototype.visitText = function (text, context) {
          return text;
        };
        _Expander.prototype.visitComment = function (comment, context) {
          return comment;
        };
        _Expander.prototype.visitExpansion = function (icu, context) {
          this.isExpanded = true;
          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
        };
        _Expander.prototype.visitExpansionCase = function (icuCase, context) {
          throw new Error('Should not be reached');
        };
        return _Expander;
      }();
      function _expandPluralForm(ast, errors) {
        var children = ast.cases.map(function (c) {
          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
            errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
          }
          var expansionResult = expandNodes(c.expression);
          errors.push.apply(errors, expansionResult.errors);
          return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
      }
      function _expandDefaultForm(ast, errors) {
        var children = ast.cases.map(function (c) {
          var expansionResult = expandNodes(c.expression);
          errors.push.apply(errors, expansionResult.errors);
          if (c.value === 'other') {
            return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
          }
          return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
      }
      var __extends$10 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ProviderError = function (_super) {
        __extends$10(ProviderError, _super);
        function ProviderError(message, span) {
          _super.call(this, span, message);
        }
        return ProviderError;
      }(ParseError);
      var ProviderViewContext = function () {
        function ProviderViewContext(component, sourceSpan) {
          var _this = this;
          this.component = component;
          this.sourceSpan = sourceSpan;
          this.errors = [];
          this.viewQueries = _getViewQueries(component);
          this.viewProviders = new Map();
          _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {
            if (isBlank(_this.viewProviders.get(provider.token.reference))) {
              _this.viewProviders.set(provider.token.reference, true);
            }
          });
        }
        return ProviderViewContext;
      }();
      var ProviderElementContext = function () {
        function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
          var _this = this;
          this.viewContext = viewContext;
          this._parent = _parent;
          this._isViewRoot = _isViewRoot;
          this._directiveAsts = _directiveAsts;
          this._sourceSpan = _sourceSpan;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._hasViewContainer = false;
          this._attrs = {};
          attrs.forEach(function (attrAst) {
            return _this._attrs[attrAst.name] = attrAst.value;
          });
          var directivesMeta = _directiveAsts.map(function (directiveAst) {
            return directiveAst.directive;
          });
          this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
          this._contentQueries = _getContentQueries(directivesMeta);
          var queriedTokens = new Map();
          Array.from(this._allProviders.values()).forEach(function (provider) {
            _this._addQueryReadsTo(provider.token, queriedTokens);
          });
          refs.forEach(function (refAst) {
            _this._addQueryReadsTo(new CompileTokenMetadata({ value: refAst.name }), queriedTokens);
          });
          if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
            this._hasViewContainer = true;
          }
          Array.from(this._allProviders.values()).forEach(function (provider) {
            var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
            if (eager) {
              _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
            }
          });
        }
        ProviderElementContext.prototype.afterElement = function () {
          var _this = this;
          Array.from(this._allProviders.values()).forEach(function (provider) {
            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
          });
        };
        Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
          get: function () {
            return Array.from(this._transformedProviders.values());
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
          get: function () {
            var sortedProviderTypes = this.transformProviders.map(function (provider) {
              return provider.token.identifier;
            });
            var sortedDirectives = this._directiveAsts.slice();
            sortedDirectives.sort(function (dir1, dir2) {
              return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            });
            return sortedDirectives;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
          get: function () {
            return this._hasViewContainer;
          },
          enumerable: true,
          configurable: true
        });
        ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
          this._getQueriesFor(token).forEach(function (query) {
            var queryReadToken = query.read || token;
            if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
              queryReadTokens.set(queryReadToken.reference, true);
            }
          });
        };
        ProviderElementContext.prototype._getQueriesFor = function (token) {
          var result = [];
          var currentEl = this;
          var distance = 0;
          var queries;
          while (currentEl !== null) {
            queries = currentEl._contentQueries.get(token.reference);
            if (isPresent(queries)) {
              result.push.apply(result, queries.filter(function (query) {
                return query.descendants || distance <= 1;
              }));
            }
            if (currentEl._directiveAsts.length > 0) {
              distance++;
            }
            currentEl = currentEl._parent;
          }
          queries = this.viewContext.viewQueries.get(token.reference);
          if (isPresent(queries)) {
            result.push.apply(result, queries);
          }
          return result;
        };
        ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
          var _this = this;
          var resolvedProvider = this._allProviders.get(token.reference);
          if (!resolvedProvider || (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService || (requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin) {
            return null;
          }
          var transformedProviderAst = this._transformedProviders.get(token.reference);
          if (isPresent(transformedProviderAst)) {
            return transformedProviderAst;
          }
          if (isPresent(this._seenProviders.get(token.reference))) {
            this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
            return null;
          }
          this._seenProviders.set(token.reference, true);
          var transformedProviders = resolvedProvider.providers.map(function (provider) {
            var transformedUseValue = provider.useValue;
            var transformedUseExisting = provider.useExisting;
            var transformedDeps;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }), eager);
              if (isPresent(existingDiDep.token)) {
                transformedUseExisting = existingDiDep.token;
              } else {
                transformedUseExisting = null;
                transformedUseValue = existingDiDep.value;
              }
            } else if (isPresent(provider.useFactory)) {
              var deps = provider.deps || provider.useFactory.diDeps;
              transformedDeps = deps.map(function (dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = provider.deps || provider.useClass.diDeps;
              transformedDeps = deps.map(function (dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          });
          this._transformedProviders.set(token.reference, transformedProviderAst);
          return transformedProviderAst;
        };
        ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
          if (eager === void 0) {
            eager = null;
          }
          if (dep.isAttribute) {
            var attrValue = this._attrs[dep.token.value];
            return new CompileDiDependencyMetadata({
              isValue: true,
              value: attrValue == null ? null : attrValue
            });
          }
          if (isPresent(dep.token)) {
            if (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component) {
              if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
                return dep;
              }
              if (dep.token.reference === resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
                this._hasViewContainer = true;
              }
            }
            if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
              return dep;
            }
            if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
              return dep;
            }
          }
          return null;
        };
        ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
          if (eager === void 0) {
            eager = null;
          }
          var currElement = this;
          var currEager = eager;
          var result = null;
          if (!dep.isSkipSelf) {
            result = this._getLocalDependency(requestingProviderType, dep, eager);
          }
          if (dep.isSelf) {
            if (!result && dep.isOptional) {
              result = new CompileDiDependencyMetadata({
                isValue: true,
                value: null
              });
            }
          } else {
            while (!result && isPresent(currElement._parent)) {
              var prevElement = currElement;
              currElement = currElement._parent;
              if (prevElement._isViewRoot) {
                currEager = false;
              }
              result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
            }
            if (!result) {
              if (!dep.isHost || this.viewContext.component.type.isHost || this.viewContext.component.type.reference === dep.token.reference || isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {
                result = dep;
              } else {
                result = dep.isOptional ? result = new CompileDiDependencyMetadata({
                  isValue: true,
                  value: null
                }) : null;
              }
            }
          }
          if (!result) {
            this.viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
          }
          return result;
        };
        return ProviderElementContext;
      }();
      var NgModuleProviderAnalyzer = function () {
        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
          var _this = this;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._errors = [];
          this._allProviders = new Map();
          var ngModuleTypes = ngModule.transitiveModule.modules.map(function (moduleMeta) {
            return moduleMeta.type;
          });
          ngModuleTypes.forEach(function (ngModuleType) {
            var ngModuleProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({ identifier: ngModuleType }),
              useClass: ngModuleType
            });
            _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
          });
          _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
        }
        NgModuleProviderAnalyzer.prototype.parse = function () {
          var _this = this;
          Array.from(this._allProviders.values()).forEach(function (provider) {
            _this._getOrCreateLocalProvider(provider.token, provider.eager);
          });
          if (this._errors.length > 0) {
            var errorString = this._errors.join('\n');
            throw new Error("Provider parse errors:\n" + errorString);
          }
          return Array.from(this._transformedProviders.values());
        };
        NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
          var _this = this;
          var resolvedProvider = this._allProviders.get(token.reference);
          if (!resolvedProvider) {
            return null;
          }
          var transformedProviderAst = this._transformedProviders.get(token.reference);
          if (isPresent(transformedProviderAst)) {
            return transformedProviderAst;
          }
          if (isPresent(this._seenProviders.get(token.reference))) {
            this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
            return null;
          }
          this._seenProviders.set(token.reference, true);
          var transformedProviders = resolvedProvider.providers.map(function (provider) {
            var transformedUseValue = provider.useValue;
            var transformedUseExisting = provider.useExisting;
            var transformedDeps;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }), eager, resolvedProvider.sourceSpan);
              if (isPresent(existingDiDep.token)) {
                transformedUseExisting = existingDiDep.token;
              } else {
                transformedUseExisting = null;
                transformedUseValue = existingDiDep.value;
              }
            } else if (isPresent(provider.useFactory)) {
              var deps = provider.deps || provider.useFactory.diDeps;
              transformedDeps = deps.map(function (dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = provider.deps || provider.useClass.diDeps;
              transformedDeps = deps.map(function (dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          });
          this._transformedProviders.set(token.reference, transformedProviderAst);
          return transformedProviderAst;
        };
        NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
          if (eager === void 0) {
            eager = null;
          }
          var foundLocal = false;
          if (!dep.isSkipSelf && isPresent(dep.token)) {
            if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
              foundLocal = true;
            } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
              foundLocal = true;
            }
          }
          var result = dep;
          if (dep.isSelf && !foundLocal) {
            if (dep.isOptional) {
              result = new CompileDiDependencyMetadata({
                isValue: true,
                value: null
              });
            } else {
              this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
            }
          }
          return result;
        };
        return NgModuleProviderAnalyzer;
      }();
      function _transformProvider(provider, _a) {
        var useExisting = _a.useExisting,
            useValue = _a.useValue,
            deps = _a.deps;
        return new CompileProviderMetadata({
          token: provider.token,
          useClass: provider.useClass,
          useExisting: useExisting,
          useFactory: provider.useFactory,
          useValue: useValue,
          deps: deps,
          multi: provider.multi
        });
      }
      function _transformProviderAst(provider, _a) {
        var eager = _a.eager,
            providers = _a.providers;
        return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
      }
      function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
        if (targetProviders === void 0) {
          targetProviders = null;
        }
        if (!targetProviders) {
          targetProviders = [];
        }
        if (isPresent(providers)) {
          providers.forEach(function (provider) {
            if (Array.isArray(provider)) {
              _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
            } else {
              var normalizeProvider = void 0;
              if (provider instanceof CompileProviderMetadata) {
                normalizeProvider = provider;
              } else if (provider instanceof CompileTypeMetadata) {
                normalizeProvider = new CompileProviderMetadata({
                  token: new CompileTokenMetadata({ identifier: provider }),
                  useClass: provider
                });
              } else {
                targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
              }
              if (isPresent(normalizeProvider)) {
                targetProviders.push(normalizeProvider);
              }
            }
          });
        }
        return targetProviders;
      }
      function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
        var providersByToken = new Map();
        directives.forEach(function (directive) {
          var dirProvider = new CompileProviderMetadata({
            token: new CompileTokenMetadata({ identifier: directive.type }),
            useClass: directive.type
          });
          _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
        });
        var directivesWithComponentFirst = directives.filter(function (dir) {
          return dir.isComponent;
        }).concat(directives.filter(function (dir) {
          return !dir.isComponent;
        }));
        directivesWithComponentFirst.forEach(function (directive) {
          _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
          _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
        });
        return providersByToken;
      }
      function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
        providers.forEach(function (provider) {
          var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
          if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
          }
          if (!resolvedProvider) {
            var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
            resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
            targetProvidersByToken.set(provider.token.reference, resolvedProvider);
          } else {
            if (!provider.multi) {
              resolvedProvider.providers.length = 0;
            }
            resolvedProvider.providers.push(provider);
          }
        });
      }
      function _getViewQueries(component) {
        var viewQueries = new Map();
        if (isPresent(component.viewQueries)) {
          component.viewQueries.forEach(function (query) {
            return _addQueryToTokenMap(viewQueries, query);
          });
        }
        return viewQueries;
      }
      function _getContentQueries(directives) {
        var contentQueries = new Map();
        directives.forEach(function (directive) {
          if (isPresent(directive.queries)) {
            directive.queries.forEach(function (query) {
              return _addQueryToTokenMap(contentQueries, query);
            });
          }
        });
        return contentQueries;
      }
      function _addQueryToTokenMap(map, query) {
        query.selectors.forEach(function (token) {
          var entry = map.get(token.reference);
          if (!entry) {
            entry = [];
            map.set(token.reference, entry);
          }
          entry.push(query);
        });
      }
      var ElementSchemaRegistry = function () {
        function ElementSchemaRegistry() {}
        return ElementSchemaRegistry;
      }();
      var StyleWithImports = function () {
        function StyleWithImports(style, styleUrls) {
          this.style = style;
          this.styleUrls = styleUrls;
        }
        return StyleWithImports;
      }();
      function isStyleUrlResolvable(url) {
        if (isBlank(url) || url.length === 0 || url[0] == '/') return false;
        var schemeMatch = url.match(_urlWithSchemaRe);
        return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
      }
      function extractStyleUrls(resolver, baseUrl, cssText) {
        var foundUrls = [];
        var modifiedCssText = cssText.replace(_cssImportRe, function () {
          var m = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
          }
          var url = m[1] || m[2];
          if (!isStyleUrlResolvable(url)) {
            return m[0];
          }
          foundUrls.push(resolver.resolve(baseUrl, url));
          return '';
        });
        return new StyleWithImports(modifiedCssText, foundUrls);
      }
      var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
      var _urlWithSchemaRe = /^([^:/?#]+):/;
      var __extends$11 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var PROPERTY_PARTS_SEPARATOR = '.';
      var ATTRIBUTE_PREFIX = 'attr';
      var CLASS_PREFIX = 'class';
      var STYLE_PREFIX = 'style';
      var ANIMATE_PROP_PREFIX = 'animate-';
      var BoundPropertyType;
      (function (BoundPropertyType) {
        BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
        BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
        BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
      })(BoundPropertyType || (BoundPropertyType = {}));
      var BoundProperty = function () {
        function BoundProperty(name, expression, type, sourceSpan) {
          this.name = name;
          this.expression = expression;
          this.type = type;
          this.sourceSpan = sourceSpan;
        }
        Object.defineProperty(BoundProperty.prototype, "isLiteral", {
          get: function () {
            return this.type === BoundPropertyType.LITERAL_ATTR;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BoundProperty.prototype, "isAnimation", {
          get: function () {
            return this.type === BoundPropertyType.ANIMATION;
          },
          enumerable: true,
          configurable: true
        });
        return BoundProperty;
      }();
      var BindingParser = function () {
        function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
          var _this = this;
          this._exprParser = _exprParser;
          this._interpolationConfig = _interpolationConfig;
          this._schemaRegistry = _schemaRegistry;
          this._targetErrors = _targetErrors;
          this.pipesByName = new Map();
          pipes.forEach(function (pipe) {
            return _this.pipesByName.set(pipe.name, pipe);
          });
        }
        BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) {
          var _this = this;
          if (dirMeta.hostProperties) {
            var boundProps_1 = [];
            Object.keys(dirMeta.hostProperties).forEach(function (propName) {
              var expression = dirMeta.hostProperties[propName];
              if (typeof expression === 'string') {
                _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
              } else {
                _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
              }
            });
            return boundProps_1.map(function (prop) {
              return _this.createElementPropertyAst(dirMeta.selector, prop);
            });
          }
        };
        BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
          var _this = this;
          if (dirMeta.hostListeners) {
            var targetEventAsts_1 = [];
            Object.keys(dirMeta.hostListeners).forEach(function (propName) {
              var expression = dirMeta.hostListeners[propName];
              if (typeof expression === 'string') {
                _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
              } else {
                _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
              }
            });
            return targetEventAsts_1;
          }
        };
        BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
            if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
            this._checkPipes(ast, sourceSpan);
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype.parseInlineTemplateBinding = function (name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
          var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
          for (var i = 0; i < bindings.length; i++) {
            var binding = bindings[i];
            if (binding.keyIsVar) {
              targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
            } else if (isPresent(binding.expression)) {
              this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
            } else {
              targetMatchableAttrs.push([binding.key, '']);
              this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
            }
          }
        };
        BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
          var _this = this;
          var sourceInfo = sourceSpan.start.toString();
          try {
            var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
            bindingsResult.templateBindings.forEach(function (binding) {
              if (isPresent(binding.expression)) {
                _this._checkPipes(binding.expression, sourceSpan);
              }
            });
            bindingsResult.warnings.forEach(function (warning) {
              _this._reportError(warning, sourceSpan, exports.ParseErrorLevel.WARNING);
            });
            return bindingsResult.templateBindings;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return [];
          }
        };
        BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          if (_isAnimationLabel(name)) {
            name = name.substring(1);
            if (value) {
              this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, exports.ParseErrorLevel.FATAL);
            }
            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
          } else {
            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
          }
        };
        BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
          var isAnimationProp = false;
          if (name.startsWith(ANIMATE_PROP_PREFIX)) {
            isAnimationProp = true;
            name = name.substring(ANIMATE_PROP_PREFIX.length);
          } else if (_isAnimationLabel(name)) {
            isAnimationProp = true;
            name = name.substring(1);
          }
          if (isAnimationProp) {
            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
          } else {
            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
          }
        };
        BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          var expr = this.parseInterpolation(value, sourceSpan);
          if (isPresent(expr)) {
            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
            return true;
          }
          return false;
        };
        BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
        };
        BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
          var ast = this._parseBinding(expression || 'null', false, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
        };
        BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
            if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
            this._checkPipes(ast, sourceSpan);
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
          if (boundProp.isAnimation) {
            return new BoundElementPropertyAst(boundProp.name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
          }
          var unit = null;
          var bindingType;
          var boundPropertyName;
          var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
          var securityContexts;
          if (parts.length === 1) {
            var partValue = parts[0];
            boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
            bindingType = exports.PropertyBindingType.Property;
            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
          } else {
            if (parts[0] == ATTRIBUTE_PREFIX) {
              boundPropertyName = parts[1];
              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
              var nsSeparatorIdx = boundPropertyName.indexOf(':');
              if (nsSeparatorIdx > -1) {
                var ns = boundPropertyName.substring(0, nsSeparatorIdx);
                var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
                boundPropertyName = mergeNsAndName(ns, name_1);
              }
              bindingType = exports.PropertyBindingType.Attribute;
            } else if (parts[0] == CLASS_PREFIX) {
              boundPropertyName = parts[1];
              bindingType = exports.PropertyBindingType.Class;
              securityContexts = [_angular_core.SecurityContext.NONE];
            } else if (parts[0] == STYLE_PREFIX) {
              unit = parts.length > 2 ? parts[2] : null;
              boundPropertyName = parts[1];
              bindingType = exports.PropertyBindingType.Style;
              securityContexts = [_angular_core.SecurityContext.STYLE];
            } else {
              this._reportError("Invalid property name '" + boundProp.name + "'", boundProp.sourceSpan);
              bindingType = null;
              securityContexts = [];
            }
          }
          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
        };
        BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          if (_isAnimationLabel(name)) {
            name = name.substr(1);
            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
          } else {
            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
          }
        };
        BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
          var matches = splitAtPeriod(name, [name, '']);
          var eventName = matches[0];
          var phase = matches[1].toLowerCase();
          if (phase) {
            switch (phase) {
              case 'start':
              case 'done':
                var ast = this._parseAction(expression, sourceSpan);
                targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
                break;
              default:
                this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
                break;
            }
          } else {
            this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
          }
        };
        BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          var _a = splitAtColon(name, [null, name]),
              target = _a[0],
              eventName = _a[1];
          var ast = this._parseAction(expression, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
        };
        BindingParser.prototype._parseAction = function (value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
            if (ast) {
              this._reportExpressionParserErrors(ast.errors, sourceSpan);
            }
            if (!ast || ast.ast instanceof EmptyExpr) {
              this._reportError("Empty expressions are not allowed", sourceSpan);
              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
            this._checkPipes(ast, sourceSpan);
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype._reportError = function (message, sourceSpan, level) {
          if (level === void 0) {
            level = exports.ParseErrorLevel.FATAL;
          }
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
        };
        BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var error = errors_1[_i];
            this._reportError(error.message, sourceSpan);
          }
        };
        BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
          var _this = this;
          if (isPresent(ast)) {
            var collector = new PipeCollector();
            ast.visit(collector);
            collector.pipes.forEach(function (pipeName) {
              if (!_this.pipesByName.has(pipeName)) {
                _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
              }
            });
          }
        };
        BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
          var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
          if (report.error) {
            this._reportError(report.msg, sourceSpan, exports.ParseErrorLevel.FATAL);
          }
        };
        return BindingParser;
      }();
      var PipeCollector = function (_super) {
        __extends$11(PipeCollector, _super);
        function PipeCollector() {
          _super.apply(this, arguments);
          this.pipes = new Set();
        }
        PipeCollector.prototype.visitPipe = function (ast, context) {
          this.pipes.add(ast.name);
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        return PipeCollector;
      }(RecursiveAstVisitor);
      function _isAnimationLabel(name) {
        return name[0] == '@';
      }
      function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
        var ctxs = [];
        CssSelector.parse(selector).forEach(function (selector) {
          var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
          var notElementNames = new Set(selector.notSelectors.filter(function (selector) {
            return selector.isElementSelector();
          }).map(function (selector) {
            return selector.element;
          }));
          var possibleElementNames = elementNames.filter(function (elementName) {
            return !notElementNames.has(elementName);
          });
          ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) {
            return registry.securityContext(elementName, propName, isAttribute);
          }));
        });
        return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
      }
      var NG_CONTENT_SELECT_ATTR = 'select';
      var NG_CONTENT_ELEMENT = 'ng-content';
      var LINK_ELEMENT = 'link';
      var LINK_STYLE_REL_ATTR = 'rel';
      var LINK_STYLE_HREF_ATTR = 'href';
      var LINK_STYLE_REL_VALUE = 'stylesheet';
      var STYLE_ELEMENT = 'style';
      var SCRIPT_ELEMENT = 'script';
      var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
      var NG_PROJECT_AS = 'ngProjectAs';
      function preparseElement(ast) {
        var selectAttr = null;
        var hrefAttr = null;
        var relAttr = null;
        var nonBindable = false;
        var projectAs = null;
        ast.attrs.forEach(function (attr) {
          var lcAttrName = attr.name.toLowerCase();
          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
            selectAttr = attr.value;
          } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
            hrefAttr = attr.value;
          } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
            relAttr = attr.value;
          } else if (attr.name == NG_NON_BINDABLE_ATTR) {
            nonBindable = true;
          } else if (attr.name == NG_PROJECT_AS) {
            if (attr.value.length > 0) {
              projectAs = attr.value;
            }
          }
        });
        selectAttr = normalizeNgContentSelect(selectAttr);
        var nodeName = ast.name.toLowerCase();
        var type = PreparsedElementType.OTHER;
        if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
          type = PreparsedElementType.NG_CONTENT;
        } else if (nodeName == STYLE_ELEMENT) {
          type = PreparsedElementType.STYLE;
        } else if (nodeName == SCRIPT_ELEMENT) {
          type = PreparsedElementType.SCRIPT;
        } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
          type = PreparsedElementType.STYLESHEET;
        }
        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
      }
      var PreparsedElementType;
      (function (PreparsedElementType) {
        PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
        PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
        PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
        PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
        PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
      })(PreparsedElementType || (PreparsedElementType = {}));
      var PreparsedElement = function () {
        function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
          this.type = type;
          this.selectAttr = selectAttr;
          this.hrefAttr = hrefAttr;
          this.nonBindable = nonBindable;
          this.projectAs = projectAs;
        }
        return PreparsedElement;
      }();
      function normalizeNgContentSelect(selectAttr) {
        if (selectAttr === null || selectAttr.length === 0) {
          return '*';
        }
        return selectAttr;
      }
      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
      var KW_BIND_IDX = 1;
      var KW_LET_IDX = 2;
      var KW_REF_IDX = 3;
      var KW_ON_IDX = 4;
      var KW_BINDON_IDX = 5;
      var KW_AT_IDX = 6;
      var IDENT_KW_IDX = 7;
      var IDENT_BANANA_BOX_IDX = 8;
      var IDENT_PROPERTY_IDX = 9;
      var IDENT_EVENT_IDX = 10;
      var TEMPLATE_ELEMENT = 'template';
      var TEMPLATE_ATTR = 'template';
      var TEMPLATE_ATTR_PREFIX = '*';
      var CLASS_ATTR = 'class';
      var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
      var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
      var TemplateParseError = function (_super) {
        __extends(TemplateParseError, _super);
        function TemplateParseError(message, span, level) {
          _super.call(this, span, message, level);
        }
        return TemplateParseError;
      }(ParseError);
      var TemplateParseResult = function () {
        function TemplateParseResult(templateAst, errors) {
          this.templateAst = templateAst;
          this.errors = errors;
        }
        return TemplateParseResult;
      }();
      var TemplateParser = function () {
        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._htmlParser = _htmlParser;
          this._console = _console;
          this.transforms = transforms;
        }
        TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
          var warnings = result.errors.filter(function (error) {
            return error.level === exports.ParseErrorLevel.WARNING;
          });
          var errors = result.errors.filter(function (error) {
            return error.level === exports.ParseErrorLevel.FATAL;
          });
          if (warnings.length > 0) {
            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
          }
          if (errors.length > 0) {
            var errorString = errors.join('\n');
            throw new Error("Template parse errors:\n" + errorString);
          }
          return result.templateAst;
        };
        TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
        };
        TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
          var result;
          var errors = htmlAstWithErrors.errors;
          if (htmlAstWithErrors.rootNodes.length > 0) {
            var uniqDirectives = removeSummaryDuplicates(directives);
            var uniqPipes = removeSummaryDuplicates(pipes);
            var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
            var interpolationConfig = void 0;
            if (component.template && component.template.interpolation) {
              interpolationConfig = {
                start: component.template.interpolation[0],
                end: component.template.interpolation[1]
              };
            }
            var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
            var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
            result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
            errors.push.apply(errors, providerViewContext.errors);
          } else {
            result = [];
          }
          this._assertNoReferenceDuplicationOnTemplate(result, errors);
          if (errors.length > 0) {
            return new TemplateParseResult(result, errors);
          }
          if (isPresent(this.transforms)) {
            this.transforms.forEach(function (transform) {
              result = templateVisitAll(transform, result);
            });
          }
          return new TemplateParseResult(result, errors);
        };
        TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
          if (forced === void 0) {
            forced = false;
          }
          var errors = htmlAstWithErrors.errors;
          if (errors.length == 0 || forced) {
            var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
            errors.push.apply(errors, expandedHtmlAst.errors);
            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
          }
          return htmlAstWithErrors;
        };
        TemplateParser.prototype.getInterpolationConfig = function (component) {
          if (component.template) {
            return InterpolationConfig.fromArray(component.template.interpolation);
          }
        };
        TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
          var existingReferences = [];
          result.filter(function (element) {
            return !!element.references;
          }).forEach(function (element) {
            return element.references.forEach(function (reference) {
              var name = reference.name;
              if (existingReferences.indexOf(name) < 0) {
                existingReferences.push(name);
              } else {
                var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, exports.ParseErrorLevel.FATAL);
                errors.push(error);
              }
            });
          });
        };
        TemplateParser.decorators = [{ type: _angular_core.Injectable }];
        TemplateParser.ctorParameters = [{ type: Parser }, { type: ElementSchemaRegistry }, { type: I18NHtmlParser }, { type: Console }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, {
            type: _angular_core.Inject,
            args: [TEMPLATE_TRANSFORMS]
          }]
        }];
        return TemplateParser;
      }();
      var TemplateParseVisitor = function () {
        function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
          var _this = this;
          this.providerViewContext = providerViewContext;
          this._bindingParser = _bindingParser;
          this._schemaRegistry = _schemaRegistry;
          this._schemas = _schemas;
          this._targetErrors = _targetErrors;
          this.selectorMatcher = new SelectorMatcher();
          this.directivesIndex = new Map();
          this.ngContentCount = 0;
          directives.forEach(function (directive, index) {
            var selector = CssSelector.parse(directive.selector);
            _this.selectorMatcher.addSelectables(selector, directive);
            _this.directivesIndex.set(directive, index);
          });
        }
        TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitText = function (text, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
          if (isPresent(expr)) {
            return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
          } else {
            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
          }
        };
        TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        TemplateParseVisitor.prototype.visitComment = function (comment, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitElement = function (element, parent) {
          var _this = this;
          var nodeName = element.name;
          var preparsedElement = preparseElement(element);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
            return null;
          }
          if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
            return null;
          }
          var matchableAttrs = [];
          var elementOrDirectiveProps = [];
          var elementOrDirectiveRefs = [];
          var elementVars = [];
          var events = [];
          var templateElementOrDirectiveProps = [];
          var templateMatchableAttrs = [];
          var templateElementVars = [];
          var hasInlineTemplates = false;
          var attrs = [];
          var lcElName = splitNsName(nodeName.toLowerCase())[1];
          var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
          element.attrs.forEach(function (attr) {
            var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
            var templateBindingsSource = undefined;
            var prefixToken = undefined;
            if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
              templateBindingsSource = attr.value;
            } else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
              templateBindingsSource = attr.value;
              prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
            }
            var hasTemplateBinding = isPresent(templateBindingsSource);
            if (hasTemplateBinding) {
              if (hasInlineTemplates) {
                _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
              }
              hasInlineTemplates = true;
              _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
            }
            if (!hasBinding && !hasTemplateBinding) {
              attrs.push(_this.visitAttribute(attr, null));
              matchableAttrs.push([attr.name, attr.value]);
            }
          });
          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
              directiveMetas = _a.directives,
              matchElement = _a.matchElement;
          var references = [];
          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
          var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
          providerContext.afterElement();
          var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
          var ngContentIndex = parent.findNgContentIndex(projectionSelector);
          var parsedElement;
          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
            if (element.children && !element.children.every(_isEmptyTextNode)) {
              this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
            }
            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          } else if (isTemplateElement) {
            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          } else {
            this._assertElementExists(matchElement, element);
            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
            var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
            this._findComponentDirectives(directiveAsts).forEach(function (componentDirectiveAst) {
              return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template);
            });
            var componentTemplate = providerContext.viewContext.component.template;
            this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
          }
          if (hasInlineTemplates) {
            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
            var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
            var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
            templateProviderContext.afterElement();
            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
          }
          return parsedElement;
        };
        TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {
          var _this = this;
          var triggerLookup = new Set();
          template.animations.forEach(function (entry) {
            triggerLookup.add(entry);
          });
          var animationInputs = inputs.filter(function (input) {
            return input.isAnimation;
          });
          animationInputs.forEach(function (input) {
            var name = input.name;
            if (!triggerLookup.has(name)) {
              _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
            }
          });
          outputs.forEach(function (output) {
            if (output.isAnimation) {
              var found = animationInputs.find(function (input) {
                return input.name == output.name;
              });
              if (!found) {
                _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
              }
            }
          });
        };
        TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
          var name = this._normalizeAttributeName(attr.name);
          var value = attr.value;
          var srcSpan = attr.sourceSpan;
          var bindParts = name.match(BIND_NAME_REGEXP);
          var hasBinding = false;
          if (bindParts !== null) {
            hasBinding = true;
            if (isPresent(bindParts[KW_BIND_IDX])) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[KW_LET_IDX]) {
              if (isTemplateElement) {
                var identifier = bindParts[IDENT_KW_IDX];
                this._parseVariable(identifier, value, srcSpan, targetVars);
              } else {
                this._reportError("\"let-\" is only supported on template elements.", srcSpan);
              }
            } else if (bindParts[KW_REF_IDX]) {
              var identifier = bindParts[IDENT_KW_IDX];
              this._parseReference(identifier, value, srcSpan, targetRefs);
            } else if (bindParts[KW_ON_IDX]) {
              this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[KW_BINDON_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[KW_AT_IDX]) {
              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[IDENT_PROPERTY_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[IDENT_EVENT_IDX]) {
              this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            }
          } else {
            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          if (!hasBinding) {
            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          return hasBinding;
        };
        TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
          return (/^data-/i.test(attrName) ? attrName.substring(5) : attrName
          );
        };
        TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
          if (identifier.indexOf('-') > -1) {
            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
          }
          targetVars.push(new VariableAst(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
          if (identifier.indexOf('-') > -1) {
            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
          }
          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
        };
        TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
          var _this = this;
          var directives = new Array(this.directivesIndex.size);
          var matchElement = false;
          selectorMatcher.match(elementCssSelector, function (selector, directive) {
            directives[_this.directivesIndex.get(directive)] = directive;
            matchElement = matchElement || selector.hasElementSelector();
          });
          return {
            directives: directives.filter(function (dir) {
              return !!dir;
            }),
            matchElement: matchElement
          };
        };
        TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
          var _this = this;
          var matchedReferences = new Set();
          var component = null;
          var directiveAsts = directives.map(function (directive) {
            var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
            if (directive.isComponent) {
              component = directive;
            }
            var directiveProperties = [];
            var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
            _this._checkPropertiesInSchema(elementName, hostProperties);
            var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
              if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
                targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
                matchedReferences.add(elOrDirRef.name);
              }
            });
            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
          });
          elementOrDirectiveRefs.forEach(function (elOrDirRef) {
            if (elOrDirRef.value.length > 0) {
              if (!matchedReferences.has(elOrDirRef.name)) {
                _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
              }
            } else if (!component) {
              var refToken = null;
              if (isTemplateElement) {
                refToken = resolveIdentifierToken(Identifiers.TemplateRef);
              }
              targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
            }
          });
          return directiveAsts;
        };
        TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
          if (directiveProperties) {
            var boundPropsByName_1 = new Map();
            boundProps.forEach(function (boundProp) {
              var prevValue = boundPropsByName_1.get(boundProp.name);
              if (!prevValue || prevValue.isLiteral) {
                boundPropsByName_1.set(boundProp.name, boundProp);
              }
            });
            Object.keys(directiveProperties).forEach(function (dirProp) {
              var elProp = directiveProperties[dirProp];
              var boundProp = boundPropsByName_1.get(elProp);
              if (boundProp) {
                targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
              }
            });
          }
        };
        TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
          var _this = this;
          var boundElementProps = [];
          var boundDirectivePropsIndex = new Map();
          directives.forEach(function (directive) {
            directive.inputs.forEach(function (prop) {
              boundDirectivePropsIndex.set(prop.templateName, prop);
            });
          });
          props.forEach(function (prop) {
            if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
              boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
            }
          });
          this._checkPropertiesInSchema(elementName, boundElementProps);
          return boundElementProps;
        };
        TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
          return directives.filter(function (directive) {
            return directive.directive.isComponent;
          });
        };
        TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
          return this._findComponentDirectives(directives).map(function (directive) {
            return directive.directive.type.name;
          });
        };
        TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
          var componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 1) {
            this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
          }
        };
        TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
          var elName = element.name.replace(/^:xhtml:/, '');
          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
            var errorMsg = "'" + elName + "' is not a known element:\n" + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
            this._reportError(errorMsg, element.sourceSpan);
          }
        };
        TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
          var _this = this;
          var componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 0) {
            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
          }
          elementProps.forEach(function (prop) {
            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
          });
        };
        TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
          var _this = this;
          var allDirectiveEvents = new Set();
          directives.forEach(function (directive) {
            Object.keys(directive.directive.outputs).forEach(function (k) {
              var eventName = directive.directive.outputs[k];
              allDirectiveEvents.add(eventName);
            });
          });
          events.forEach(function (event) {
            if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
              _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
            }
          });
        };
        TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
          var _this = this;
          boundProps.forEach(function (boundProp) {
            if (boundProp.type === exports.PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
              var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
              if (elementName.indexOf('-') > -1) {
                errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
              }
              _this._reportError(errorMsg, boundProp.sourceSpan);
            }
          });
        };
        TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
          if (level === void 0) {
            level = exports.ParseErrorLevel.FATAL;
          }
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
        };
        return TemplateParseVisitor;
      }();
      var NonBindableVisitor = function () {
        function NonBindableVisitor() {}
        NonBindableVisitor.prototype.visitElement = function (ast, parent) {
          var preparsedElement = preparseElement(ast);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
            return null;
          }
          var attrNameAndValues = ast.attrs.map(function (attrAst) {
            return [attrAst.name, attrAst.value];
          });
          var selector = createElementCssSelector(ast.name, attrNameAndValues);
          var ngContentIndex = parent.findNgContentIndex(selector);
          var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
        };
        NonBindableVisitor.prototype.visitComment = function (comment, context) {
          return null;
        };
        NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        NonBindableVisitor.prototype.visitText = function (text, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
        };
        NonBindableVisitor.prototype.visitExpansion = function (expansion, context) {
          return expansion;
        };
        NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
          return expansionCase;
        };
        return NonBindableVisitor;
      }();
      var ElementOrDirectiveRef = function () {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        return ElementOrDirectiveRef;
      }();
      function splitClasses(classAttrValue) {
        return classAttrValue.trim().split(/\s+/g);
      }
      var ElementContext = function () {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          this.isTemplateElement = isTemplateElement;
          this._ngContentIndexMatcher = _ngContentIndexMatcher;
          this._wildcardNgContentIndex = _wildcardNgContentIndex;
          this.providerContext = providerContext;
        }
        ElementContext.create = function (isTemplateElement, directives, providerContext) {
          var matcher = new SelectorMatcher();
          var wildcardNgContentIndex = null;
          var component = directives.find(function (directive) {
            return directive.directive.isComponent;
          });
          if (component) {
            var ngContentSelectors = component.directive.template.ngContentSelectors;
            for (var i = 0; i < ngContentSelectors.length; i++) {
              var selector = ngContentSelectors[i];
              if (selector === '*') {
                wildcardNgContentIndex = i;
              } else {
                matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
              }
            }
          }
          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        };
        ElementContext.prototype.findNgContentIndex = function (selector) {
          var ngContentIndices = [];
          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
            ngContentIndices.push(ngContentIndex);
          });
          ngContentIndices.sort();
          if (isPresent(this._wildcardNgContentIndex)) {
            ngContentIndices.push(this._wildcardNgContentIndex);
          }
          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        };
        return ElementContext;
      }();
      function createElementCssSelector(elementName, matchableAttrs) {
        var cssSelector = new CssSelector();
        var elNameNoNs = splitNsName(elementName)[1];
        cssSelector.setElement(elNameNoNs);
        for (var i = 0; i < matchableAttrs.length; i++) {
          var attrName = matchableAttrs[i][0];
          var attrNameNoNs = splitNsName(attrName)[1];
          var attrValue = matchableAttrs[i][1];
          cssSelector.addAttribute(attrNameNoNs, attrValue);
          if (attrName.toLowerCase() == CLASS_ATTR) {
            var classes = splitClasses(attrValue);
            classes.forEach(function (className) {
              return cssSelector.addClassName(className);
            });
          }
        }
        return cssSelector;
      }
      var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
      var NON_BINDABLE_VISITOR = new NonBindableVisitor();
      function _isEmptyTextNode(node) {
        return node instanceof Text && node.value.trim().length == 0;
      }
      function removeSummaryDuplicates(items) {
        var map = new Map();
        items.forEach(function (item) {
          if (!map.get(item.type.reference)) {
            map.set(item.type.reference, item);
          }
        });
        return Array.from(map.values());
      }
      function unimplemented$1() {
        throw new Error('unimplemented');
      }
      var CompilerConfig = function () {
        function CompilerConfig(_a) {
          var _b = _a === void 0 ? {} : _a,
              _c = _b.renderTypes,
              renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
              _d = _b.defaultEncapsulation,
              defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d,
              genDebugInfo = _b.genDebugInfo,
              logBindingUpdate = _b.logBindingUpdate,
              _e = _b.useJit,
              useJit = _e === void 0 ? true : _e;
          this.renderTypes = renderTypes;
          this.defaultEncapsulation = defaultEncapsulation;
          this._genDebugInfo = genDebugInfo;
          this._logBindingUpdate = logBindingUpdate;
          this.useJit = useJit;
        }
        Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
          get: function () {
            return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
          get: function () {
            return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
          },
          enumerable: true,
          configurable: true
        });
        return CompilerConfig;
      }();
      var RenderTypes = function () {
        function RenderTypes() {}
        Object.defineProperty(RenderTypes.prototype, "renderer", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderText", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderElement", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderComment", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderNode", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderEvent", {
          get: function () {
            return unimplemented$1();
          },
          enumerable: true,
          configurable: true
        });
        return RenderTypes;
      }();
      var DefaultRenderTypes = function () {
        function DefaultRenderTypes() {
          this.renderText = null;
          this.renderElement = null;
          this.renderComment = null;
          this.renderNode = null;
          this.renderEvent = null;
        }
        Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
          get: function () {
            return resolveIdentifier(Identifiers.Renderer);
          },
          enumerable: true,
          configurable: true
        });
        ;
        return DefaultRenderTypes;
      }();
      var __extends$12 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var TypeModifier;
      (function (TypeModifier) {
        TypeModifier[TypeModifier["Const"] = 0] = "Const";
      })(TypeModifier || (TypeModifier = {}));
      var Type$1 = function () {
        function Type(modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        Type.prototype.hasModifier = function (modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return Type;
      }();
      var BuiltinTypeName;
      (function (BuiltinTypeName) {
        BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
        BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
        BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
        BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
        BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
        BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
        BuiltinTypeName[BuiltinTypeName["Null"] = 6] = "Null";
      })(BuiltinTypeName || (BuiltinTypeName = {}));
      var BuiltinType = function (_super) {
        __extends$12(BuiltinType, _super);
        function BuiltinType(name, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
        }
        BuiltinType.prototype.visitType = function (visitor, context) {
          return visitor.visitBuiltintType(this, context);
        };
        return BuiltinType;
      }(Type$1);
      var ExternalType = function (_super) {
        __extends$12(ExternalType, _super);
        function ExternalType(value, typeParams, modifiers) {
          if (typeParams === void 0) {
            typeParams = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.value = value;
          this.typeParams = typeParams;
        }
        ExternalType.prototype.visitType = function (visitor, context) {
          return visitor.visitExternalType(this, context);
        };
        return ExternalType;
      }(Type$1);
      var ArrayType = function (_super) {
        __extends$12(ArrayType, _super);
        function ArrayType(of, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.of = of;
        }
        ArrayType.prototype.visitType = function (visitor, context) {
          return visitor.visitArrayType(this, context);
        };
        return ArrayType;
      }(Type$1);
      var MapType = function (_super) {
        __extends$12(MapType, _super);
        function MapType(valueType, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.valueType = valueType;
        }
        MapType.prototype.visitType = function (visitor, context) {
          return visitor.visitMapType(this, context);
        };
        return MapType;
      }(Type$1);
      var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
      var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
      var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
      var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
      var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
      var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
      var NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
      var BinaryOperator;
      (function (BinaryOperator) {
        BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
        BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
        BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
        BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
        BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
        BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
        BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
        BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
        BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
        BinaryOperator[BinaryOperator["And"] = 9] = "And";
        BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
        BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
        BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
        BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
        BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
      })(BinaryOperator || (BinaryOperator = {}));
      var Expression = function () {
        function Expression(type) {
          this.type = type;
        }
        Expression.prototype.prop = function (name) {
          return new ReadPropExpr(this, name);
        };
        Expression.prototype.key = function (index, type) {
          if (type === void 0) {
            type = null;
          }
          return new ReadKeyExpr(this, index, type);
        };
        Expression.prototype.callMethod = function (name, params) {
          return new InvokeMethodExpr(this, name, params);
        };
        Expression.prototype.callFn = function (params) {
          return new InvokeFunctionExpr(this, params);
        };
        Expression.prototype.instantiate = function (params, type) {
          if (type === void 0) {
            type = null;
          }
          return new InstantiateExpr(this, params, type);
        };
        Expression.prototype.conditional = function (trueCase, falseCase) {
          if (falseCase === void 0) {
            falseCase = null;
          }
          return new ConditionalExpr(this, trueCase, falseCase);
        };
        Expression.prototype.equals = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
        };
        Expression.prototype.notEquals = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
        };
        Expression.prototype.identical = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
        };
        Expression.prototype.notIdentical = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
        };
        Expression.prototype.minus = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
        };
        Expression.prototype.plus = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
        };
        Expression.prototype.divide = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
        };
        Expression.prototype.multiply = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
        };
        Expression.prototype.modulo = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
        };
        Expression.prototype.and = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
        };
        Expression.prototype.or = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
        };
        Expression.prototype.lower = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
        };
        Expression.prototype.lowerEquals = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
        };
        Expression.prototype.bigger = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
        };
        Expression.prototype.biggerEquals = function (rhs) {
          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
        };
        Expression.prototype.isBlank = function () {
          return this.equals(TYPED_NULL_EXPR);
        };
        Expression.prototype.cast = function (type) {
          return new CastExpr(this, type);
        };
        Expression.prototype.toStmt = function () {
          return new ExpressionStatement(this);
        };
        return Expression;
      }();
      var BuiltinVar;
      (function (BuiltinVar) {
        BuiltinVar[BuiltinVar["This"] = 0] = "This";
        BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
        BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
        BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
      })(BuiltinVar || (BuiltinVar = {}));
      var ReadVarExpr = function (_super) {
        __extends$12(ReadVarExpr, _super);
        function ReadVarExpr(name, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          if (typeof name === 'string') {
            this.name = name;
            this.builtin = null;
          } else {
            this.name = null;
            this.builtin = name;
          }
        }
        ReadVarExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitReadVarExpr(this, context);
        };
        ReadVarExpr.prototype.set = function (value) {
          return new WriteVarExpr(this.name, value);
        };
        return ReadVarExpr;
      }(Expression);
      var WriteVarExpr = function (_super) {
        __extends$12(WriteVarExpr, _super);
        function WriteVarExpr(name, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.name = name;
          this.value = value;
        }
        WriteVarExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitWriteVarExpr(this, context);
        };
        WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          return new DeclareVarStmt(this.name, this.value, type, modifiers);
        };
        return WriteVarExpr;
      }(Expression);
      var WriteKeyExpr = function (_super) {
        __extends$12(WriteKeyExpr, _super);
        function WriteKeyExpr(receiver, index, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.receiver = receiver;
          this.index = index;
          this.value = value;
        }
        WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitWriteKeyExpr(this, context);
        };
        return WriteKeyExpr;
      }(Expression);
      var WritePropExpr = function (_super) {
        __extends$12(WritePropExpr, _super);
        function WritePropExpr(receiver, name, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
        }
        WritePropExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitWritePropExpr(this, context);
        };
        return WritePropExpr;
      }(Expression);
      var BuiltinMethod;
      (function (BuiltinMethod) {
        BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
        BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
        BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
      })(BuiltinMethod || (BuiltinMethod = {}));
      var InvokeMethodExpr = function (_super) {
        __extends$12(InvokeMethodExpr, _super);
        function InvokeMethodExpr(receiver, method, args, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.args = args;
          if (typeof method === 'string') {
            this.name = method;
            this.builtin = null;
          } else {
            this.name = null;
            this.builtin = method;
          }
        }
        InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitInvokeMethodExpr(this, context);
        };
        return InvokeMethodExpr;
      }(Expression);
      var InvokeFunctionExpr = function (_super) {
        __extends$12(InvokeFunctionExpr, _super);
        function InvokeFunctionExpr(fn, args, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.fn = fn;
          this.args = args;
        }
        InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitInvokeFunctionExpr(this, context);
        };
        return InvokeFunctionExpr;
      }(Expression);
      var InstantiateExpr = function (_super) {
        __extends$12(InstantiateExpr, _super);
        function InstantiateExpr(classExpr, args, type) {
          _super.call(this, type);
          this.classExpr = classExpr;
          this.args = args;
        }
        InstantiateExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitInstantiateExpr(this, context);
        };
        return InstantiateExpr;
      }(Expression);
      var LiteralExpr = function (_super) {
        __extends$12(LiteralExpr, _super);
        function LiteralExpr(value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.value = value;
        }
        LiteralExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitLiteralExpr(this, context);
        };
        return LiteralExpr;
      }(Expression);
      var ExternalExpr = function (_super) {
        __extends$12(ExternalExpr, _super);
        function ExternalExpr(value, type, typeParams) {
          if (type === void 0) {
            type = null;
          }
          if (typeParams === void 0) {
            typeParams = null;
          }
          _super.call(this, type);
          this.value = value;
          this.typeParams = typeParams;
        }
        ExternalExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitExternalExpr(this, context);
        };
        return ExternalExpr;
      }(Expression);
      var ConditionalExpr = function (_super) {
        __extends$12(ConditionalExpr, _super);
        function ConditionalExpr(condition, trueCase, falseCase, type) {
          if (falseCase === void 0) {
            falseCase = null;
          }
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || trueCase.type);
          this.condition = condition;
          this.falseCase = falseCase;
          this.trueCase = trueCase;
        }
        ConditionalExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitConditionalExpr(this, context);
        };
        return ConditionalExpr;
      }(Expression);
      var NotExpr = function (_super) {
        __extends$12(NotExpr, _super);
        function NotExpr(condition) {
          _super.call(this, BOOL_TYPE);
          this.condition = condition;
        }
        NotExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitNotExpr(this, context);
        };
        return NotExpr;
      }(Expression);
      var CastExpr = function (_super) {
        __extends$12(CastExpr, _super);
        function CastExpr(value, type) {
          _super.call(this, type);
          this.value = value;
        }
        CastExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitCastExpr(this, context);
        };
        return CastExpr;
      }(Expression);
      var FnParam = function () {
        function FnParam(name, type) {
          if (type === void 0) {
            type = null;
          }
          this.name = name;
          this.type = type;
        }
        return FnParam;
      }();
      var FunctionExpr = function (_super) {
        __extends$12(FunctionExpr, _super);
        function FunctionExpr(params, statements, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.params = params;
          this.statements = statements;
        }
        FunctionExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitFunctionExpr(this, context);
        };
        FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
        };
        return FunctionExpr;
      }(Expression);
      var BinaryOperatorExpr = function (_super) {
        __extends$12(BinaryOperatorExpr, _super);
        function BinaryOperatorExpr(operator, lhs, rhs, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || lhs.type);
          this.operator = operator;
          this.rhs = rhs;
          this.lhs = lhs;
        }
        BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitBinaryOperatorExpr(this, context);
        };
        return BinaryOperatorExpr;
      }(Expression);
      var ReadPropExpr = function (_super) {
        __extends$12(ReadPropExpr, _super);
        function ReadPropExpr(receiver, name, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.name = name;
        }
        ReadPropExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitReadPropExpr(this, context);
        };
        ReadPropExpr.prototype.set = function (value) {
          return new WritePropExpr(this.receiver, this.name, value);
        };
        return ReadPropExpr;
      }(Expression);
      var ReadKeyExpr = function (_super) {
        __extends$12(ReadKeyExpr, _super);
        function ReadKeyExpr(receiver, index, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.index = index;
        }
        ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitReadKeyExpr(this, context);
        };
        ReadKeyExpr.prototype.set = function (value) {
          return new WriteKeyExpr(this.receiver, this.index, value);
        };
        return ReadKeyExpr;
      }(Expression);
      var LiteralArrayExpr = function (_super) {
        __extends$12(LiteralArrayExpr, _super);
        function LiteralArrayExpr(entries, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.entries = entries;
        }
        LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitLiteralArrayExpr(this, context);
        };
        return LiteralArrayExpr;
      }(Expression);
      var LiteralMapExpr = function (_super) {
        __extends$12(LiteralMapExpr, _super);
        function LiteralMapExpr(entries, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.entries = entries;
          this.valueType = null;
          if (isPresent(type)) {
            this.valueType = type.valueType;
          }
        }
        LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
          return visitor.visitLiteralMapExpr(this, context);
        };
        return LiteralMapExpr;
      }(Expression);
      var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
      var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
      var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
      var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
      var NULL_EXPR = new LiteralExpr(null, null);
      var TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
      var StmtModifier;
      (function (StmtModifier) {
        StmtModifier[StmtModifier["Final"] = 0] = "Final";
        StmtModifier[StmtModifier["Private"] = 1] = "Private";
      })(StmtModifier || (StmtModifier = {}));
      var Statement = function () {
        function Statement(modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        Statement.prototype.hasModifier = function (modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return Statement;
      }();
      var DeclareVarStmt = function (_super) {
        __extends$12(DeclareVarStmt, _super);
        function DeclareVarStmt(name, value, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.value = value;
          this.type = type || value.type;
        }
        DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitDeclareVarStmt(this, context);
        };
        return DeclareVarStmt;
      }(Statement);
      var DeclareFunctionStmt = function (_super) {
        __extends$12(DeclareFunctionStmt, _super);
        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.params = params;
          this.statements = statements;
          this.type = type;
        }
        DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitDeclareFunctionStmt(this, context);
        };
        return DeclareFunctionStmt;
      }(Statement);
      var ExpressionStatement = function (_super) {
        __extends$12(ExpressionStatement, _super);
        function ExpressionStatement(expr) {
          _super.call(this);
          this.expr = expr;
        }
        ExpressionStatement.prototype.visitStatement = function (visitor, context) {
          return visitor.visitExpressionStmt(this, context);
        };
        return ExpressionStatement;
      }(Statement);
      var ReturnStatement = function (_super) {
        __extends$12(ReturnStatement, _super);
        function ReturnStatement(value) {
          _super.call(this);
          this.value = value;
        }
        ReturnStatement.prototype.visitStatement = function (visitor, context) {
          return visitor.visitReturnStmt(this, context);
        };
        return ReturnStatement;
      }(Statement);
      var AbstractClassPart = function () {
        function AbstractClassPart(type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          this.type = type;
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        AbstractClassPart.prototype.hasModifier = function (modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return AbstractClassPart;
      }();
      var ClassField = function (_super) {
        __extends$12(ClassField, _super);
        function ClassField(name, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
        }
        return ClassField;
      }(AbstractClassPart);
      var ClassMethod = function (_super) {
        __extends$12(ClassMethod, _super);
        function ClassMethod(name, params, body, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
          this.params = params;
          this.body = body;
        }
        return ClassMethod;
      }(AbstractClassPart);
      var ClassGetter = function (_super) {
        __extends$12(ClassGetter, _super);
        function ClassGetter(name, body, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
          this.body = body;
        }
        return ClassGetter;
      }(AbstractClassPart);
      var ClassStmt = function (_super) {
        __extends$12(ClassStmt, _super);
        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.parent = parent;
          this.fields = fields;
          this.getters = getters;
          this.constructorMethod = constructorMethod;
          this.methods = methods;
        }
        ClassStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitDeclareClassStmt(this, context);
        };
        return ClassStmt;
      }(Statement);
      var IfStmt = function (_super) {
        __extends$12(IfStmt, _super);
        function IfStmt(condition, trueCase, falseCase) {
          if (falseCase === void 0) {
            falseCase = [];
          }
          _super.call(this);
          this.condition = condition;
          this.trueCase = trueCase;
          this.falseCase = falseCase;
        }
        IfStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitIfStmt(this, context);
        };
        return IfStmt;
      }(Statement);
      var CommentStmt = function (_super) {
        __extends$12(CommentStmt, _super);
        function CommentStmt(comment) {
          _super.call(this);
          this.comment = comment;
        }
        CommentStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitCommentStmt(this, context);
        };
        return CommentStmt;
      }(Statement);
      var TryCatchStmt = function (_super) {
        __extends$12(TryCatchStmt, _super);
        function TryCatchStmt(bodyStmts, catchStmts) {
          _super.call(this);
          this.bodyStmts = bodyStmts;
          this.catchStmts = catchStmts;
        }
        TryCatchStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitTryCatchStmt(this, context);
        };
        return TryCatchStmt;
      }(Statement);
      var ThrowStmt = function (_super) {
        __extends$12(ThrowStmt, _super);
        function ThrowStmt(error) {
          _super.call(this);
          this.error = error;
        }
        ThrowStmt.prototype.visitStatement = function (visitor, context) {
          return visitor.visitThrowStmt(this, context);
        };
        return ThrowStmt;
      }(Statement);
      var ExpressionTransformer = function () {
        function ExpressionTransformer() {}
        ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
          var method = ast.builtin || ast.name;
          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
          return new NotExpr(ast.condition.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
          return new CastExpr(ast.value.visitExpression(this, context), context);
        };
        ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
        };
        ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
        };
        ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
          var _this = this;
          var entries = ast.entries.map(function (entry) {
            return [entry[0], entry[1].visitExpression(_this, context)];
          });
          return new LiteralMapExpr(entries);
        };
        ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
          var _this = this;
          return exprs.map(function (expr) {
            return expr.visitExpression(_this, context);
          });
        };
        ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
        };
        ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
          return new ReturnStatement(stmt.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
        };
        ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
        };
        ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
          return new ThrowStmt(stmt.error.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
          var _this = this;
          return stmts.map(function (stmt) {
            return stmt.visitStatement(_this, context);
          });
        };
        return ExpressionTransformer;
      }();
      var RecursiveExpressionVisitor = function () {
        function RecursiveExpressionVisitor() {}
        RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.index.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
          ast.receiver.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
          ast.fn.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
          ast.classExpr.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
          ast.condition.visitExpression(this, context);
          ast.trueCase.visitExpression(this, context);
          ast.falseCase.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
          ast.condition.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
          ast.value.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
          ast.lhs.visitExpression(this, context);
          ast.rhs.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
          ast.receiver.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
          ast.receiver.visitExpression(this, context);
          ast.index.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
          this.visitAllExpressions(ast.entries, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
          var _this = this;
          ast.entries.forEach(function (entry) {
            return entry[1].visitExpression(_this, context);
          });
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
          var _this = this;
          exprs.forEach(function (expr) {
            return expr.visitExpression(_this, context);
          });
        };
        RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
          stmt.expr.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
          stmt.condition.visitExpression(this, context);
          this.visitAllStatements(stmt.trueCase, context);
          this.visitAllStatements(stmt.falseCase, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
          this.visitAllStatements(stmt.bodyStmts, context);
          this.visitAllStatements(stmt.catchStmts, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
          stmt.error.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
          var _this = this;
          stmts.forEach(function (stmt) {
            return stmt.visitStatement(_this, context);
          });
        };
        return RecursiveExpressionVisitor;
      }();
      function replaceVarInExpression(varName, newValue, expression) {
        var transformer = new _ReplaceVariableTransformer(varName, newValue);
        return expression.visitExpression(transformer, null);
      }
      var _ReplaceVariableTransformer = function (_super) {
        __extends$12(_ReplaceVariableTransformer, _super);
        function _ReplaceVariableTransformer(_varName, _newValue) {
          _super.call(this);
          this._varName = _varName;
          this._newValue = _newValue;
        }
        _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
          return ast.name == this._varName ? this._newValue : ast;
        };
        return _ReplaceVariableTransformer;
      }(ExpressionTransformer);
      function findReadVarNames(stmts) {
        var finder = new _VariableFinder();
        finder.visitAllStatements(stmts, null);
        return finder.varNames;
      }
      var _VariableFinder = function (_super) {
        __extends$12(_VariableFinder, _super);
        function _VariableFinder() {
          _super.apply(this, arguments);
          this.varNames = new Set();
        }
        _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
          this.varNames.add(ast.name);
          return null;
        };
        return _VariableFinder;
      }(RecursiveExpressionVisitor);
      function variable(name, type) {
        if (type === void 0) {
          type = null;
        }
        return new ReadVarExpr(name, type);
      }
      function importExpr(id, typeParams) {
        if (typeParams === void 0) {
          typeParams = null;
        }
        return new ExternalExpr(id, null, typeParams);
      }
      function importType(id, typeParams, typeModifiers) {
        if (typeParams === void 0) {
          typeParams = null;
        }
        if (typeModifiers === void 0) {
          typeModifiers = null;
        }
        return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
      }
      function literalArr(values, type) {
        if (type === void 0) {
          type = null;
        }
        return new LiteralArrayExpr(values, type);
      }
      function literalMap(values, type) {
        if (type === void 0) {
          type = null;
        }
        return new LiteralMapExpr(values, type);
      }
      function not(expr) {
        return new NotExpr(expr);
      }
      function fn(params, body, type) {
        if (type === void 0) {
          type = null;
        }
        return new FunctionExpr(params, body, type);
      }
      function literal(value, type) {
        if (type === void 0) {
          type = null;
        }
        return new LiteralExpr(value, type);
      }
      var __extends$13 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var AnimationAst = function () {
        function AnimationAst() {
          this.startTime = 0;
          this.playTime = 0;
        }
        return AnimationAst;
      }();
      var AnimationStateAst = function (_super) {
        __extends$13(AnimationStateAst, _super);
        function AnimationStateAst() {
          _super.apply(this, arguments);
        }
        return AnimationStateAst;
      }(AnimationAst);
      var AnimationEntryAst = function (_super) {
        __extends$13(AnimationEntryAst, _super);
        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
          _super.call(this);
          this.name = name;
          this.stateDeclarations = stateDeclarations;
          this.stateTransitions = stateTransitions;
        }
        AnimationEntryAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationEntry(this, context);
        };
        return AnimationEntryAst;
      }(AnimationAst);
      var AnimationStateDeclarationAst = function (_super) {
        __extends$13(AnimationStateDeclarationAst, _super);
        function AnimationStateDeclarationAst(stateName, styles) {
          _super.call(this);
          this.stateName = stateName;
          this.styles = styles;
        }
        AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationStateDeclaration(this, context);
        };
        return AnimationStateDeclarationAst;
      }(AnimationStateAst);
      var AnimationStateTransitionExpression = function () {
        function AnimationStateTransitionExpression(fromState, toState) {
          this.fromState = fromState;
          this.toState = toState;
        }
        return AnimationStateTransitionExpression;
      }();
      var AnimationStateTransitionAst = function (_super) {
        __extends$13(AnimationStateTransitionAst, _super);
        function AnimationStateTransitionAst(stateChanges, animation) {
          _super.call(this);
          this.stateChanges = stateChanges;
          this.animation = animation;
        }
        AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationStateTransition(this, context);
        };
        return AnimationStateTransitionAst;
      }(AnimationStateAst);
      var AnimationStepAst = function (_super) {
        __extends$13(AnimationStepAst, _super);
        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
          _super.call(this);
          this.startingStyles = startingStyles;
          this.keyframes = keyframes;
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
        }
        AnimationStepAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationStep(this, context);
        };
        return AnimationStepAst;
      }(AnimationAst);
      var AnimationStylesAst = function (_super) {
        __extends$13(AnimationStylesAst, _super);
        function AnimationStylesAst(styles) {
          _super.call(this);
          this.styles = styles;
        }
        AnimationStylesAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationStyles(this, context);
        };
        return AnimationStylesAst;
      }(AnimationAst);
      var AnimationKeyframeAst = function (_super) {
        __extends$13(AnimationKeyframeAst, _super);
        function AnimationKeyframeAst(offset, styles) {
          _super.call(this);
          this.offset = offset;
          this.styles = styles;
        }
        AnimationKeyframeAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationKeyframe(this, context);
        };
        return AnimationKeyframeAst;
      }(AnimationAst);
      var AnimationWithStepsAst = function (_super) {
        __extends$13(AnimationWithStepsAst, _super);
        function AnimationWithStepsAst(steps) {
          _super.call(this);
          this.steps = steps;
        }
        return AnimationWithStepsAst;
      }(AnimationAst);
      var AnimationGroupAst = function (_super) {
        __extends$13(AnimationGroupAst, _super);
        function AnimationGroupAst(steps) {
          _super.call(this, steps);
        }
        AnimationGroupAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationGroup(this, context);
        };
        return AnimationGroupAst;
      }(AnimationWithStepsAst);
      var AnimationSequenceAst = function (_super) {
        __extends$13(AnimationSequenceAst, _super);
        function AnimationSequenceAst(steps) {
          _super.call(this, steps);
        }
        AnimationSequenceAst.prototype.visit = function (visitor, context) {
          return visitor.visitAnimationSequence(this, context);
        };
        return AnimationSequenceAst;
      }(AnimationWithStepsAst);
      var AnimationEntryCompileResult = function () {
        function AnimationEntryCompileResult(name, statements, fnExp) {
          this.name = name;
          this.statements = statements;
          this.fnExp = fnExp;
        }
        return AnimationEntryCompileResult;
      }();
      var AnimationCompiler = function () {
        function AnimationCompiler() {}
        AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {
          return parsedAnimations.map(function (entry) {
            var factoryName = factoryNamePrefix + "_" + entry.name;
            var visitor = new _AnimationBuilder(entry.name, factoryName);
            return visitor.build(entry);
          });
        };
        return AnimationCompiler;
      }();
      var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
      var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
      var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
      var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
      var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
      var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
      var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
      var _ANIMATION_PLAYER_VAR = variable('player');
      var _ANIMATION_TIME_VAR = variable('totalTime');
      var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
      var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
      var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
      var _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
      var _EMPTY_MAP = literalMap([]);
      var _EMPTY_ARRAY = literalArr([]);
      var _AnimationBuilder = function () {
        function _AnimationBuilder(animationName, factoryName) {
          this.animationName = animationName;
          this._fnVarName = factoryName + '_factory';
          this._statesMapVarName = factoryName + '_states';
          this._statesMapVar = variable(this._statesMapVarName);
        }
        _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
          var stylesArr = [];
          if (context.isExpectingFirstStyleStep) {
            stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
            context.isExpectingFirstStyleStep = false;
          }
          ast.styles.forEach(function (entry) {
            var entries = Object.keys(entry).map(function (key) {
              return [key, literal(entry[key])];
            });
            stylesArr.push(literalMap(entries));
          });
          return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
        };
        _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
          return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
        };
        _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
          var _this = this;
          if (context.endStateAnimateStep === ast) {
            return this._visitEndStateAnimation(ast, context);
          }
          var startingStylesExpr = ast.startingStyles.visit(this, context);
          var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) {
            return keyframeEntry.visit(_this, context);
          });
          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
        };
        _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
          var _this = this;
          var startingStylesExpr = ast.startingStyles.visit(this, context);
          var keyframeExpressions = ast.keyframes.map(function (keyframe) {
            return keyframe.visit(_this, context);
          });
          var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
        };
        _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
          var previousStylesValue = _EMPTY_ARRAY;
          if (context.isExpectingFirstAnimateStep) {
            previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
            context.isExpectingFirstAnimateStep = false;
          }
          context.totalTransitionTime += ast.duration + ast.delay;
          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing), previousStylesValue]);
        };
        _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
          var _this = this;
          var playerExprs = ast.steps.map(function (step) {
            return step.visit(_this, context);
          });
          return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
          var _this = this;
          var playerExprs = ast.steps.map(function (step) {
            return step.visit(_this, context);
          });
          return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
          var flatStyles = {};
          _getStylesArray(ast).forEach(function (entry) {
            Object.keys(entry).forEach(function (key) {
              flatStyles[key] = entry[key];
            });
          });
          context.stateMap.registerState(ast.stateName, flatStyles);
        };
        _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
          var steps = ast.animation.steps;
          var lastStep = steps[steps.length - 1];
          if (_isEndStateAnimateStep(lastStep)) {
            context.endStateAnimateStep = lastStep;
          }
          context.totalTransitionTime = 0;
          context.isExpectingFirstStyleStep = true;
          context.isExpectingFirstAnimateStep = true;
          var stateChangePreconditions = [];
          ast.stateChanges.forEach(function (stateChange) {
            stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
            if (stateChange.fromState != ANY_STATE) {
              context.stateMap.registerState(stateChange.fromState);
            }
            if (stateChange.toState != ANY_STATE) {
              context.stateMap.registerState(stateChange.toState);
            }
          });
          var animationPlayerExpr = ast.animation.visit(this, context);
          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) {
            return a.or(b);
          });
          var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
          var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
        };
        _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
          var _this = this;
          ast.stateDeclarations.forEach(function (def) {
            return def.visit(_this, context);
          });
          context.stateMap.registerState(DEFAULT_STATE, {});
          var statements = [];
          statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))])).toDeclStmt());
          statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt());
          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
          ast.stateTransitions.forEach(function (transAst) {
            return statements.push(transAst.visit(_this, context));
          });
          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));
          statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [fn([], [_ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(), RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
          statements.push(importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([_PREVIOUS_ANIMATION_PLAYERS]).callMethod('destroy', []).toStmt());
          statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt());
          statements.push(new ReturnStatement(importExpr(resolveIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR])));
          return fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements, importType(resolveIdentifier(Identifiers.AnimationTransition)));
        };
        _AnimationBuilder.prototype.build = function (ast) {
          var context = new _AnimationBuilderContext();
          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
          var fnVariable = variable(this._fnVarName);
          var lookupMap = [];
          Object.keys(context.stateMap.states).forEach(function (stateName) {
            var value = context.stateMap.states[stateName];
            var variableValue = _EMPTY_MAP;
            if (isPresent(value)) {
              var styleMap_1 = [];
              Object.keys(value).forEach(function (key) {
                styleMap_1.push([key, literal(value[key])]);
              });
              variableValue = literalMap(styleMap_1);
            }
            lookupMap.push([stateName, variableValue]);
          });
          var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
          var statements = [compiledStatesMapStmt, fnStatement];
          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
        };
        return _AnimationBuilder;
      }();
      var _AnimationBuilderContext = function () {
        function _AnimationBuilderContext() {
          this.stateMap = new _AnimationBuilderStateMap();
          this.endStateAnimateStep = null;
          this.isExpectingFirstStyleStep = false;
          this.isExpectingFirstAnimateStep = false;
          this.totalTransitionTime = 0;
        }
        return _AnimationBuilderContext;
      }();
      var _AnimationBuilderStateMap = function () {
        function _AnimationBuilderStateMap() {
          this._states = {};
        }
        Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
          get: function () {
            return this._states;
          },
          enumerable: true,
          configurable: true
        });
        _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
          if (value === void 0) {
            value = null;
          }
          var existingEntry = this._states[name];
          if (!existingEntry) {
            this._states[name] = value;
          }
        };
        return _AnimationBuilderStateMap;
      }();
      function _compareToAnimationStateExpr(value, animationState) {
        var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
        switch (animationState) {
          case EMPTY_ANIMATION_STATE:
            return value.equals(emptyStateLiteral);
          case ANY_STATE:
            return literal(true);
          default:
            return value.equals(literal(animationState));
        }
      }
      function _isEndStateAnimateStep(step) {
        if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
          var styles1 = _getStylesArray(step.keyframes[0])[0];
          var styles2 = _getStylesArray(step.keyframes[1])[0];
          return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
        }
        return false;
      }
      function _getStylesArray(obj) {
        return obj.styles.styles;
      }
      function createDiTokenExpression(token) {
        if (isPresent(token.value)) {
          return literal(token.value);
        } else if (token.identifierIsInstance) {
          return importExpr(token.identifier).instantiate([], importType(token.identifier, [], [TypeModifier.Const]));
        } else {
          return importExpr(token.identifier);
        }
      }
      function createInlineArray(values) {
        if (values.length === 0) {
          return importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
        }
        var log2 = Math.log(values.length) / Math.log(2);
        var index = Math.ceil(log2);
        var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic;
        var identifier = resolveIdentifier(identifierSpec);
        return importExpr(identifier).instantiate([literal(values.length)].concat(values));
      }
      function createPureProxy(fn, argCount, pureProxyProp, builder) {
        builder.fields.push(new ClassField(pureProxyProp.name, null));
        var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
        if (!pureProxyId) {
          throw new Error("Unsupported number of argument for pure functions: " + argCount);
        }
        builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn])).toStmt());
      }
      function createEnumExpression(enumType, enumValue) {
        var enumName = Object.keys(enumType.runtime).find(function (propName) {
          return enumType.runtime[propName] === enumValue;
        });
        if (!enumName) {
          throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
        }
        return importExpr(resolveEnumIdentifier(resolveIdentifier(enumType), enumName));
      }
      var CheckBindingField = function () {
        function CheckBindingField(expression, bindingId) {
          this.expression = expression;
          this.bindingId = bindingId;
        }
        return CheckBindingField;
      }();
      function createCheckBindingField(builder) {
        var bindingId = "" + builder.fields.length;
        var fieldExpr = createBindFieldExpr(bindingId);
        builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
        builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))).toStmt());
        return new CheckBindingField(fieldExpr, bindingId);
      }
      function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
        var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([throwOnChangeVar, fieldExpr, evalResult.currValExpr]);
        if (evalResult.forceUpdate) {
          condition = evalResult.forceUpdate.or(condition);
        }
        return evalResult.stmts.concat([new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()]))]);
      }
      function createBindFieldExpr(bindingId) {
        return THIS_EXPR.prop("_expr_" + bindingId);
      }
      var VAL_UNWRAPPER_VAR = variable("valUnwrapper");
      var EventHandlerVars = function () {
        function EventHandlerVars() {}
        EventHandlerVars.event = variable('$event');
        return EventHandlerVars;
      }();
      var ConvertPropertyBindingResult = function () {
        function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
          this.stmts = stmts;
          this.currValExpr = currValExpr;
          this.forceUpdate = forceUpdate;
        }
        return ConvertPropertyBindingResult;
      }();
      function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
        var currValExpr = createCurrValueExpr(bindingId);
        var stmts = [];
        if (!nameResolver) {
          nameResolver = new DefaultNameResolver();
        }
        var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
        var outputExpr = expression.visit(visitor, _Mode.Expression);
        if (!outputExpr) {
          return null;
        }
        if (visitor.temporaryCount) {
          for (var i = 0; i < visitor.temporaryCount; i++) {
            stmts.push(temporaryDeclaration(bindingId, i));
          }
        }
        if (visitor.needsValueUnwrapper) {
          var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
          stmts.push(initValueUnwrapperStmt);
        }
        stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
        if (visitor.needsValueUnwrapper) {
          return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
        } else {
          return new ConvertPropertyBindingResult(stmts, currValExpr, null);
        }
      }
      var ConvertActionBindingResult = function () {
        function ConvertActionBindingResult(stmts, preventDefault) {
          this.stmts = stmts;
          this.preventDefault = preventDefault;
        }
        return ConvertActionBindingResult;
      }();
      function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
        if (!nameResolver) {
          nameResolver = new DefaultNameResolver();
        }
        var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
        var actionStmts = [];
        flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
        prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
        var lastIndex = actionStmts.length - 1;
        var preventDefaultVar = null;
        if (lastIndex >= 0) {
          var lastStatement = actionStmts[lastIndex];
          var returnExpr = convertStmtIntoExpression(lastStatement);
          if (returnExpr) {
            preventDefaultVar = createPreventDefaultVar(bindingId);
            actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
          }
        }
        return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
      }
      function createSharedBindingVariablesIfNeeded(stmts) {
        var unwrapperStmts = [];
        var readVars = findReadVarNames(stmts);
        if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
          unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [StmtModifier.Final]));
        }
        return unwrapperStmts;
      }
      function temporaryName(bindingId, temporaryNumber) {
        return "tmp_" + bindingId + "_" + temporaryNumber;
      }
      function temporaryDeclaration(bindingId, temporaryNumber) {
        return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
      }
      function prependTemporaryDecls(temporaryCount, bindingId, statements) {
        for (var i = temporaryCount - 1; i >= 0; i--) {
          statements.unshift(temporaryDeclaration(bindingId, i));
        }
      }
      var _Mode;
      (function (_Mode) {
        _Mode[_Mode["Statement"] = 0] = "Statement";
        _Mode[_Mode["Expression"] = 1] = "Expression";
      })(_Mode || (_Mode = {}));
      function ensureStatementMode(mode, ast) {
        if (mode !== _Mode.Statement) {
          throw new Error("Expected a statement, but saw " + ast);
        }
      }
      function ensureExpressionMode(mode, ast) {
        if (mode !== _Mode.Expression) {
          throw new Error("Expected an expression, but saw " + ast);
        }
      }
      function convertToStatementIfNeeded(mode, expr) {
        if (mode === _Mode.Statement) {
          return expr.toStmt();
        } else {
          return expr;
        }
      }
      var _AstToIrVisitor = function () {
        function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
          this._builder = _builder;
          this._nameResolver = _nameResolver;
          this._implicitReceiver = _implicitReceiver;
          this._valueUnwrapper = _valueUnwrapper;
          this.bindingId = bindingId;
          this.isAction = isAction;
          this._nodeMap = new Map();
          this._resultMap = new Map();
          this._currentTemporary = 0;
          this.needsValueUnwrapper = false;
          this.temporaryCount = 0;
        }
        _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
          var op;
          switch (ast.operation) {
            case '+':
              op = BinaryOperator.Plus;
              break;
            case '-':
              op = BinaryOperator.Minus;
              break;
            case '*':
              op = BinaryOperator.Multiply;
              break;
            case '/':
              op = BinaryOperator.Divide;
              break;
            case '%':
              op = BinaryOperator.Modulo;
              break;
            case '&&':
              op = BinaryOperator.And;
              break;
            case '||':
              op = BinaryOperator.Or;
              break;
            case '==':
              op = BinaryOperator.Equals;
              break;
            case '!=':
              op = BinaryOperator.NotEquals;
              break;
            case '===':
              op = BinaryOperator.Identical;
              break;
            case '!==':
              op = BinaryOperator.NotIdentical;
              break;
            case '<':
              op = BinaryOperator.Lower;
              break;
            case '>':
              op = BinaryOperator.Bigger;
              break;
            case '<=':
              op = BinaryOperator.LowerEquals;
              break;
            case '>=':
              op = BinaryOperator.BiggerEquals;
              break;
            default:
              throw new Error("Unsupported operation " + ast.operation);
          }
          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
          ensureStatementMode(mode, ast);
          return this.visitAll(ast.expressions, mode);
        };
        _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
          var value = this.visit(ast.condition, _Mode.Expression);
          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
          var input = this.visit(ast.exp, _Mode.Expression);
          var args = this.visitAll(ast.args, _Mode.Expression);
          var value = this._nameResolver.callPipe(ast.name, input, args);
          if (!value) {
            throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
          }
          this.needsValueUnwrapper = true;
          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
        };
        _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
          ensureExpressionMode(mode, ast);
          return this._implicitReceiver;
        };
        _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
          ensureExpressionMode(mode, ast);
          var args = [literal(ast.expressions.length)];
          for (var i = 0; i < ast.strings.length - 1; i++) {
            args.push(literal(ast.strings[i]));
            args.push(this.visit(ast.expressions[i], _Mode.Expression));
          }
          args.push(literal(ast.strings[ast.strings.length - 1]));
          return ast.expressions.length <= 9 ? importExpr(resolveIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(resolveIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]);
        };
        _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
          return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
          var obj = this.visit(ast.obj, _Mode.Expression);
          var key = this.visit(ast.key, _Mode.Expression);
          var value = this.visit(ast.value, _Mode.Expression);
          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
        };
        _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
          var parts = this.visitAll(ast.expressions, mode);
          var literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
          return convertToStatementIfNeeded(mode, literalArr$$);
        };
        _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
          var parts = [];
          for (var i = 0; i < ast.keys.length; i++) {
            parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
          }
          var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
          return convertToStatementIfNeeded(mode, literalMap$$);
        };
        _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
          return convertToStatementIfNeeded(mode, literal(ast.value));
        };
        _AstToIrVisitor.prototype._getLocal = function (name) {
          if (this.isAction && name == EventHandlerVars.event.name) {
            return EventHandlerVars.event;
          }
          return this._nameResolver.getLocal(name);
        };
        _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
          var leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
            return this.convertSafeAccess(ast, leftMostSafe, mode);
          } else {
            var args = this.visitAll(ast.args, _Mode.Expression);
            var result = null;
            var receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
              var varExpr = this._getLocal(ast.name);
              if (isPresent(varExpr)) {
                result = varExpr.callFn(args);
              }
            }
            if (isBlank(result)) {
              result = receiver.callMethod(ast.name, args);
            }
            return convertToStatementIfNeeded(mode, result);
          }
        };
        _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
          var leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
            return this.convertSafeAccess(ast, leftMostSafe, mode);
          } else {
            var result = null;
            var receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
              result = this._getLocal(ast.name);
            }
            if (isBlank(result)) {
              result = receiver.prop(ast.name);
            }
            return convertToStatementIfNeeded(mode, result);
          }
        };
        _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
          var receiver = this.visit(ast.receiver, _Mode.Expression);
          if (receiver === this._implicitReceiver) {
            var varExpr = this._getLocal(ast.name);
            if (isPresent(varExpr)) {
              throw new Error('Cannot assign to a reference or variable!');
            }
          }
          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
          var _this = this;
          return asts.map(function (ast) {
            return _this.visit(ast, mode);
          });
        };
        _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
          throw new Error('Quotes are not supported for evaluation!');
        };
        _AstToIrVisitor.prototype.visit = function (ast, mode) {
          var result = this._resultMap.get(ast);
          if (result) return result;
          return (this._nodeMap.get(ast) || ast).visit(this, mode);
        };
        _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
          var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
          var temporary;
          if (this.needsTemporary(leftMostSafe.receiver)) {
            temporary = this.allocateTemporary();
            guardedExpression = temporary.set(guardedExpression);
            this._resultMap.set(leftMostSafe.receiver, temporary);
          }
          var condition = guardedExpression.isBlank();
          if (leftMostSafe instanceof SafeMethodCall) {
            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
          } else {
            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
          }
          var access = this.visit(ast, _Mode.Expression);
          this._nodeMap.delete(leftMostSafe);
          if (temporary) {
            this.releaseTemporary(temporary);
          }
          return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
        };
        _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
          var _this = this;
          var visit = function (visitor, ast) {
            return (_this._nodeMap.get(ast) || ast).visit(visitor);
          };
          return ast.visit({
            visitBinary: function (ast) {
              return null;
            },
            visitChain: function (ast) {
              return null;
            },
            visitConditional: function (ast) {
              return null;
            },
            visitFunctionCall: function (ast) {
              return null;
            },
            visitImplicitReceiver: function (ast) {
              return null;
            },
            visitInterpolation: function (ast) {
              return null;
            },
            visitKeyedRead: function (ast) {
              return visit(this, ast.obj);
            },
            visitKeyedWrite: function (ast) {
              return null;
            },
            visitLiteralArray: function (ast) {
              return null;
            },
            visitLiteralMap: function (ast) {
              return null;
            },
            visitLiteralPrimitive: function (ast) {
              return null;
            },
            visitMethodCall: function (ast) {
              return visit(this, ast.receiver);
            },
            visitPipe: function (ast) {
              return null;
            },
            visitPrefixNot: function (ast) {
              return null;
            },
            visitPropertyRead: function (ast) {
              return visit(this, ast.receiver);
            },
            visitPropertyWrite: function (ast) {
              return null;
            },
            visitQuote: function (ast) {
              return null;
            },
            visitSafeMethodCall: function (ast) {
              return visit(this, ast.receiver) || ast;
            },
            visitSafePropertyRead: function (ast) {
              return visit(this, ast.receiver) || ast;
            }
          });
        };
        _AstToIrVisitor.prototype.needsTemporary = function (ast) {
          var _this = this;
          var visit = function (visitor, ast) {
            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
          };
          var visitSome = function (visitor, ast) {
            return ast.some(function (ast) {
              return visit(visitor, ast);
            });
          };
          return ast.visit({
            visitBinary: function (ast) {
              return visit(this, ast.left) || visit(this, ast.right);
            },
            visitChain: function (ast) {
              return false;
            },
            visitConditional: function (ast) {
              return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
            },
            visitFunctionCall: function (ast) {
              return true;
            },
            visitImplicitReceiver: function (ast) {
              return false;
            },
            visitInterpolation: function (ast) {
              return visitSome(this, ast.expressions);
            },
            visitKeyedRead: function (ast) {
              return false;
            },
            visitKeyedWrite: function (ast) {
              return false;
            },
            visitLiteralArray: function (ast) {
              return true;
            },
            visitLiteralMap: function (ast) {
              return true;
            },
            visitLiteralPrimitive: function (ast) {
              return false;
            },
            visitMethodCall: function (ast) {
              return true;
            },
            visitPipe: function (ast) {
              return true;
            },
            visitPrefixNot: function (ast) {
              return visit(this, ast.expression);
            },
            visitPropertyRead: function (ast) {
              return false;
            },
            visitPropertyWrite: function (ast) {
              return false;
            },
            visitQuote: function (ast) {
              return false;
            },
            visitSafeMethodCall: function (ast) {
              return true;
            },
            visitSafePropertyRead: function (ast) {
              return false;
            }
          });
        };
        _AstToIrVisitor.prototype.allocateTemporary = function () {
          var tempNumber = this._currentTemporary++;
          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
          return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
        };
        _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
          this._currentTemporary--;
          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
            throw new Error("Temporary " + temporary.name + " released out of order");
          }
        };
        return _AstToIrVisitor;
      }();
      function flattenStatements(arg, output) {
        if (Array.isArray(arg)) {
          arg.forEach(function (entry) {
            return flattenStatements(entry, output);
          });
        } else {
          output.push(arg);
        }
      }
      function createCachedLiteralArray(builder, values) {
        if (values.length === 0) {
          return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
        }
        var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
        var proxyParams = [];
        var proxyReturnEntries = [];
        for (var i = 0; i < values.length; i++) {
          var paramName = "p" + i;
          proxyParams.push(new FnParam(paramName));
          proxyReturnEntries.push(variable(paramName));
        }
        createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
        return proxyExpr.callFn(values);
      }
      function createCachedLiteralMap(builder, entries) {
        if (entries.length === 0) {
          return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
        }
        var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
        var proxyParams = [];
        var proxyReturnEntries = [];
        var values = [];
        for (var i = 0; i < entries.length; i++) {
          var paramName = "p" + i;
          proxyParams.push(new FnParam(paramName));
          proxyReturnEntries.push([entries[i][0], variable(paramName)]);
          values.push(entries[i][1]);
        }
        createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
        return proxyExpr.callFn(values);
      }
      var DefaultNameResolver = function () {
        function DefaultNameResolver() {}
        DefaultNameResolver.prototype.callPipe = function (name, input, args) {
          return null;
        };
        DefaultNameResolver.prototype.getLocal = function (name) {
          return null;
        };
        return DefaultNameResolver;
      }();
      function createCurrValueExpr(bindingId) {
        return variable("currVal_" + bindingId);
      }
      function createPreventDefaultVar(bindingId) {
        return variable("pd_" + bindingId);
      }
      function convertStmtIntoExpression(stmt) {
        if (stmt instanceof ExpressionStatement) {
          return stmt.expr;
        } else if (stmt instanceof ReturnStatement) {
          return stmt.value;
        }
        return null;
      }
      function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
        var updateStmts = [];
        var renderer = view.prop('renderer');
        renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
        switch (boundProp.type) {
          case exports.PropertyBindingType.Property:
            if (logBindingUpdate) {
              updateStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo)).callFn([renderer, renderElement, literal(boundProp.name), renderValue]).toStmt());
            }
            updateStmts.push(renderer.callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue]).toStmt());
            break;
          case exports.PropertyBindingType.Attribute:
            renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
            updateStmts.push(renderer.callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue]).toStmt());
            break;
          case exports.PropertyBindingType.Class:
            updateStmts.push(renderer.callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue]).toStmt());
            break;
          case exports.PropertyBindingType.Style:
            var strValue = renderValue.callMethod('toString', []);
            if (isPresent(boundProp.unit)) {
              strValue = strValue.plus(literal(boundProp.unit));
            }
            renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
            updateStmts.push(renderer.callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue]).toStmt());
            break;
          case exports.PropertyBindingType.Animation:
            throw new Error('Illegal state: Should not come here!');
        }
        return updateStmts;
      }
      function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
        if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
          return renderValue;
        }
        if (!boundProp.needsRuntimeSecurityContext) {
          securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
        }
        if (!securityContextExpression) {
          throw new Error("internal error, no SecurityContext given " + boundProp.name);
        }
        var ctx = view.prop('viewUtils').prop('sanitizer');
        var args = [securityContextExpression, renderValue];
        return ctx.callMethod('sanitize', args);
      }
      function triggerAnimation(view, componentView, boundProp, eventListener, renderElement, renderValue, lastRenderValue) {
        var detachStmts = [];
        var updateStmts = [];
        var animationName = boundProp.name;
        var animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
        var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
        var unitializedValue = importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));
        var animationTransitionVar = variable('animationTransition_' + animationName);
        updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue), renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)])).toDeclStmt());
        detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue])).toDeclStmt());
        var registerStmts = [animationTransitionVar.callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])]).toStmt(), animationTransitionVar.callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])]).toStmt()];
        updateStmts.push.apply(updateStmts, registerStmts);
        detachStmts.push.apply(detachStmts, registerStmts);
        return {
          updateStmts: updateStmts,
          detachStmts: detachStmts
        };
      }
      function createClassStmt(config) {
        var parentArgs = config.parentArgs || [];
        var superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
        var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
        var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
        return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
      }
      function concatClassBuilderParts(builders) {
        return {
          fields: (_a = []).concat.apply(_a, builders.map(function (builder) {
            return builder.fields || [];
          })),
          methods: (_b = []).concat.apply(_b, builders.map(function (builder) {
            return builder.methods || [];
          })),
          getters: (_c = []).concat.apply(_c, builders.map(function (builder) {
            return builder.getters || [];
          })),
          ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) {
            return builder.ctorStmts || [];
          }))
        };
        var _a, _b, _c, _d;
      }
      var DirectiveWrapperCompileResult = function () {
        function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
          this.statements = statements;
          this.dirWrapperClassVar = dirWrapperClassVar;
        }
        return DirectiveWrapperCompileResult;
      }();
      var CONTEXT_FIELD_NAME = 'context';
      var CHANGES_FIELD_NAME = '_changes';
      var CHANGED_FIELD_NAME = '_changed';
      var EVENT_HANDLER_FIELD_NAME = '_eventHandler';
      var CURR_VALUE_VAR = variable('currValue');
      var THROW_ON_CHANGE_VAR = variable('throwOnChange');
      var FORCE_UPDATE_VAR = variable('forceUpdate');
      var VIEW_VAR = variable('view');
      var COMPONENT_VIEW_VAR = variable('componentView');
      var RENDER_EL_VAR = variable('el');
      var EVENT_NAME_VAR = variable('eventName');
      var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
      var DirectiveWrapperCompiler = function () {
        function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
          this.compilerConfig = compilerConfig;
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._console = _console;
        }
        DirectiveWrapperCompiler.dirWrapperClassName = function (id) {
          return "Wrapper_" + id.name;
        };
        DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {
          var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
          reportParseErrors(hostParseResult.errors, this._console);
          var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
          Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {
            addCheckInputMethod(inputFieldName, builder);
          });
          addNgDoCheckMethod(builder);
          addCheckHostMethod(hostParseResult.hostProps, builder);
          addHandleEventMethod(hostParseResult.hostListeners, builder);
          addSubscribeMethod(dirMeta, builder);
          var classStmt = builder.build();
          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
        };
        DirectiveWrapperCompiler.decorators = [{ type: _angular_core.Injectable }];
        DirectiveWrapperCompiler.ctorParameters = [{ type: CompilerConfig }, { type: Parser }, { type: ElementSchemaRegistry }, { type: Console }];
        return DirectiveWrapperCompiler;
      }();
      var DirectiveWrapperBuilder = function () {
        function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
          this.compilerConfig = compilerConfig;
          this.dirMeta = dirMeta;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          this.detachStmts = [];
          this.destroyStmts = [];
          var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
          this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate;
          this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
          this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
          this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
          this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
          if (this.ngOnDestroy) {
            this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
          }
        }
        DirectiveWrapperBuilder.prototype.build = function () {
          var dirDepParamNames = [];
          for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
            dirDepParamNames.push("p" + i);
          }
          var methods = [new ClassMethod('ngOnDetach', [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE)], this.detachStmts), new ClassMethod('ngOnDestroy', [], this.destroyStmts)];
          var fields = [new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]), new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)), new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private])];
          var ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
          if (this.genChanges) {
            fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
            ctorStmts.push(RESET_CHANGES_STMT);
          }
          ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function (paramName) {
            return variable(paramName);
          }))).toStmt());
          return createClassStmt({
            name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
            ctorParams: dirDepParamNames.map(function (paramName) {
              return new FnParam(paramName, DYNAMIC_TYPE);
            }),
            builders: [{
              fields: fields,
              ctorStmts: ctorStmts,
              methods: methods
            }, this]
          });
        };
        return DirectiveWrapperBuilder;
      }();
      function addNgDoCheckMethod(builder) {
        var changedVar = variable('changed');
        var stmts = [changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
        var lifecycleStmts = [];
        if (builder.genChanges) {
          var onChangesStmts = [];
          if (builder.ngOnChanges) {
            onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
          }
          if (builder.compilerConfig.logBindingUpdate) {
            onChangesStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
          }
          onChangesStmts.push(RESET_CHANGES_STMT);
          lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
        }
        if (builder.ngOnInit) {
          lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
        }
        if (builder.ngDoCheck) {
          lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
        }
        if (lifecycleStmts.length > 0) {
          stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
        }
        stmts.push(new ReturnStatement(changedVar));
        builder.methods.push(new ClassMethod('ngDoCheck', [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)], stmts, BOOL_TYPE));
      }
      function addCheckInputMethod(input, builder) {
        var field = createCheckBindingField(builder);
        var onChangeStatements = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(), THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt()];
        if (builder.genChanges) {
          onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(importExpr(resolveIdentifier(Identifiers.SimpleChange)).instantiate([field.expression, CURR_VALUE_VAR])).toStmt());
        }
        var methodBody = createCheckBindingStmt({
          currValExpr: CURR_VALUE_VAR,
          forceUpdate: FORCE_UPDATE_VAR,
          stmts: []
        }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
        builder.methods.push(new ClassMethod("check_" + input, [new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE), new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)], methodBody));
      }
      function addCheckHostMethod(hostProps, builder) {
        var stmts = [];
        var methodParams = [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)];
        hostProps.forEach(function (hostProp, hostPropIdx) {
          var field = createCheckBindingField(builder);
          var evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
          if (!evalResult) {
            return;
          }
          var securityContextExpr;
          if (hostProp.needsRuntimeSecurityContext) {
            securityContextExpr = variable("secCtx_" + methodParams.length);
            methodParams.push(new FnParam(securityContextExpr.name, importType(resolveIdentifier(Identifiers.SecurityContext))));
          }
          var checkBindingStmts;
          if (hostProp.isAnimation) {
            var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(resolveIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression),
                updateStmts = _a.updateStmts,
                detachStmts = _a.detachStmts;
            checkBindingStmts = updateStmts;
            (_b = builder.detachStmts).push.apply(_b, detachStmts);
          } else {
            checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
          }
          stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
          var _b;
        });
        builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
      }
      function addHandleEventMethod(hostListeners, builder) {
        var resultVar = variable("result");
        var actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
        hostListeners.forEach(function (hostListener, eventIdx) {
          var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
          var trueStmts = evalResult.stmts;
          if (evalResult.preventDefault) {
            trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
          }
          actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
        });
        actionStmts.push(new ReturnStatement(resultVar));
        builder.methods.push(new ClassMethod('handleEvent', [new FnParam(EVENT_NAME_VAR.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], actionStmts, BOOL_TYPE));
      }
      function addSubscribeMethod(dirMeta, builder) {
        var methodParams = [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)];
        var stmts = [THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()];
        Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {
          var eventName = dirMeta.outputs[emitterPropName];
          var paramName = "emit" + emitterIdx;
          methodParams.push(new FnParam(paramName, BOOL_TYPE));
          var subscriptionFieldName = "subscription" + emitterIdx;
          builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
          stmts.push(new IfStmt(variable(paramName), [THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])])).toStmt()]));
          builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', [])).toStmt());
        });
        builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
      }
      var ParseResult = function () {
        function ParseResult(hostProps, hostListeners, errors) {
          this.hostProps = hostProps;
          this.hostListeners = hostListeners;
          this.errors = errors;
        }
        return ParseResult;
      }();
      function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
        var errors = [];
        var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
        var sourceFileName = dirMeta.type.moduleUrl ? "in Directive " + dirMeta.type.name + " in " + dirMeta.type.moduleUrl : "in Directive " + dirMeta.type.name;
        var sourceFile = new ParseSourceFile('', sourceFileName);
        var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
        var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
        var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
        return new ParseResult(parsedHostProps, parsedHostListeners, errors);
      }
      function reportParseErrors(parseErrors, console) {
        var warnings = parseErrors.filter(function (error) {
          return error.level === exports.ParseErrorLevel.WARNING;
        });
        var errors = parseErrors.filter(function (error) {
          return error.level === exports.ParseErrorLevel.FATAL;
        });
        if (warnings.length > 0) {
          this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
        }
        if (errors.length > 0) {
          throw new Error("Directive parse errors:\n" + errors.join('\n'));
        }
      }
      var DirectiveWrapperExpressions = function () {
        function DirectiveWrapperExpressions() {}
        DirectiveWrapperExpressions.create = function (dir, depsExpr) {
          return importExpr(dir).instantiate(depsExpr, importType(dir));
        };
        DirectiveWrapperExpressions.context = function (dirWrapper) {
          return dirWrapper.prop(CONTEXT_FIELD_NAME);
        };
        DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) {
          return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
        };
        DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
          if (hostProps.length) {
            return [dirWrapper.callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts)).toStmt()];
          } else {
            return [];
          }
        };
        DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {
          if (hostProps.some(function (prop) {
            return prop.isAnimation;
          })) {
            return [dirWrapper.callMethod('ngOnDetach', [view, componentView, renderEl]).toStmt()];
          } else {
            return [];
          }
        };
        DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {
          if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 || Object.keys(dir.outputs).length > 0) {
            return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
          } else {
            return [];
          }
        };
        DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
          var needsSubscribe = false;
          var eventFlags = [];
          Object.keys(dirMeta.outputs).forEach(function (propName) {
            var eventName = dirMeta.outputs[propName];
            var eventUsed = usedEvents.indexOf(eventName) > -1;
            needsSubscribe = needsSubscribe || eventUsed;
            eventFlags.push(literal(eventUsed));
          });
          hostProps.forEach(function (hostProp) {
            if (hostProp.isAnimation && usedEvents.length > 0) {
              needsSubscribe = true;
            }
          });
          if (needsSubscribe) {
            return [dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()];
          } else {
            return [];
          }
        };
        DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {
          return dirWrapper.callMethod('handleEvent', [eventName, event]);
        };
        return DirectiveWrapperExpressions;
      }();
      function convertValueToOutputAst(value, type) {
        if (type === void 0) {
          type = null;
        }
        return visitValue(value, new _ValueOutputAstTransformer(), type);
      }
      var _ValueOutputAstTransformer = function () {
        function _ValueOutputAstTransformer() {}
        _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
          var _this = this;
          return literalArr(arr.map(function (value) {
            return visitValue(value, _this, null);
          }), type);
        };
        _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
          var _this = this;
          var entries = [];
          Object.keys(map).forEach(function (key) {
            entries.push([key, visitValue(map[key], _this, null)]);
          });
          return literalMap(entries, type);
        };
        _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) {
          return literal(value, type);
        };
        _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
          if (value instanceof CompileIdentifierMetadata) {
            return importExpr(value);
          } else if (value instanceof Expression) {
            return value;
          } else {
            throw new Error("Illegal state: Don't now how to compile value " + value);
          }
        };
        return _ValueOutputAstTransformer;
      }();
      var _DebugState = function () {
        function _DebugState(nodeIndex, sourceAst) {
          this.nodeIndex = nodeIndex;
          this.sourceAst = sourceAst;
        }
        return _DebugState;
      }();
      var NULL_DEBUG_STATE = new _DebugState(null, null);
      var CompileMethod = function () {
        function CompileMethod(_view) {
          this._view = _view;
          this._newState = NULL_DEBUG_STATE;
          this._currState = NULL_DEBUG_STATE;
          this._bodyStatements = [];
          this._debugEnabled = this._view.genConfig.genDebugInfo;
        }
        CompileMethod.prototype._updateDebugContextIfNeeded = function () {
          if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
            var expr = this._updateDebugContext(this._newState);
            if (isPresent(expr)) {
              this._bodyStatements.push(expr.toStmt());
            }
          }
        };
        CompileMethod.prototype._updateDebugContext = function (newState) {
          this._currState = this._newState = newState;
          if (this._debugEnabled) {
            var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
            return THIS_EXPR.callMethod('debug', [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
          } else {
            return null;
          }
        };
        CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
          return res || NULL_EXPR;
        };
        CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
          this._newState = new _DebugState(nodeIndex, templateAst);
        };
        CompileMethod.prototype.push = function () {
          var stmts = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            stmts[_i - 0] = arguments[_i];
          }
          this.addStmts(stmts);
        };
        CompileMethod.prototype.addStmt = function (stmt) {
          this._updateDebugContextIfNeeded();
          this._bodyStatements.push(stmt);
        };
        CompileMethod.prototype.addStmts = function (stmts) {
          this._updateDebugContextIfNeeded();
          (_a = this._bodyStatements).push.apply(_a, stmts);
          var _a;
        };
        CompileMethod.prototype.finish = function () {
          return this._bodyStatements;
        };
        CompileMethod.prototype.isEmpty = function () {
          return this._bodyStatements.length === 0;
        };
        return CompileMethod;
      }();
      var __extends$15 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function getPropertyInView(property, callingView, definedView) {
        if (callingView === definedView) {
          return property;
        } else {
          var viewProp = THIS_EXPR;
          var currView = callingView;
          while (currView !== definedView && isPresent(currView.declarationElement.view)) {
            currView = currView.declarationElement.view;
            viewProp = viewProp.prop('parentView');
          }
          if (currView !== definedView) {
            throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
          }
          return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
        }
      }
      var _ReplaceViewTransformer = function (_super) {
        __extends$15(_ReplaceViewTransformer, _super);
        function _ReplaceViewTransformer(_viewExpr, _view) {
          _super.call(this);
          this._viewExpr = _viewExpr;
          this._view = _view;
        }
        _ReplaceViewTransformer.prototype._isThis = function (expr) {
          return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
        };
        _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {
          return this._isThis(ast) ? this._viewExpr : ast;
        };
        _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {
          if (this._isThis(ast.receiver)) {
            if (this._view.fields.some(function (field) {
              return field.name == ast.name;
            }) || this._view.getters.some(function (field) {
              return field.name == ast.name;
            })) {
              return this._viewExpr.cast(this._view.classType).prop(ast.name);
            }
          }
          return _super.prototype.visitReadPropExpr.call(this, ast, context);
        };
        return _ReplaceViewTransformer;
      }(ExpressionTransformer);
      function injectFromViewParentInjector(view, token, optional) {
        var viewExpr;
        if (view.viewType === ViewType.HOST) {
          viewExpr = THIS_EXPR;
        } else {
          viewExpr = THIS_EXPR.prop('parentView');
        }
        var args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
        if (optional) {
          args.push(NULL_EXPR);
        }
        return viewExpr.callMethod('injectorGet', args);
      }
      function getViewClassName(component, embeddedTemplateIndex) {
        return "View_" + component.type.name + embeddedTemplateIndex;
      }
      function getHandleEventMethodName(elementIndex) {
        return "handleEvent_" + elementIndex;
      }
      var ViewQueryValues = function () {
        function ViewQueryValues(view, values) {
          this.view = view;
          this.values = values;
        }
        return ViewQueryValues;
      }();
      var CompileQuery = function () {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
          this.meta = meta;
          this.queryList = queryList;
          this.ownerDirectiveExpression = ownerDirectiveExpression;
          this.view = view;
          this._values = new ViewQueryValues(view, []);
        }
        CompileQuery.prototype.addValue = function (value, view) {
          var currentView = view;
          var elPath = [];
          while (isPresent(currentView) && currentView !== this.view) {
            var parentEl = currentView.declarationElement;
            elPath.unshift(parentEl);
            currentView = parentEl.view;
          }
          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
          var viewValues = this._values;
          elPath.forEach(function (el) {
            var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
            if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
              viewValues = last;
            } else {
              var newViewValues = new ViewQueryValues(el.embeddedView, []);
              viewValues.values.push(newViewValues);
              viewValues = newViewValues;
            }
          });
          viewValues.values.push(value);
          if (elPath.length > 0) {
            view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
          }
        };
        CompileQuery.prototype._isStatic = function () {
          return !this._values.values.some(function (value) {
            return value instanceof ViewQueryValues;
          });
        };
        CompileQuery.prototype.afterChildren = function (targetStaticMethod, targetDynamicMethod) {
          var values = createQueryValues(this._values);
          var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
          if (isPresent(this.ownerDirectiveExpression)) {
            var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
            updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
          }
          if (!this.meta.first) {
            updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
          }
          if (this.meta.first && this._isStatic()) {
            targetStaticMethod.addStmts(updateStmts);
          } else {
            targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
          }
        };
        return CompileQuery;
      }();
      function createQueryValues(viewValues) {
        return ListWrapper.flatten(viewValues.values.map(function (entry) {
          if (entry instanceof ViewQueryValues) {
            return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
          } else {
            return entry;
          }
        }));
      }
      function mapNestedViews(viewContainer, view, expressions) {
        var adjustedExpressions = expressions.map(function (expr) {
          return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);
        });
        return viewContainer.callMethod('mapNestedViews', [variable(view.className), fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]);
      }
      function createQueryList(query, directiveInstance, propertyName, compileView) {
        compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
        var expr = THIS_EXPR.prop(propertyName);
        compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([])).toStmt());
        return expr;
      }
      function addQueryToTokenMap(map, query) {
        query.meta.selectors.forEach(function (selector) {
          var entry = map.get(selector.reference);
          if (!entry) {
            entry = [];
            map.set(selector.reference, entry);
          }
          entry.push(query);
        });
      }
      var ViewTypeEnum = function () {
        function ViewTypeEnum() {}
        ViewTypeEnum.fromValue = function (value) {
          return createEnumExpression(Identifiers.ViewType, value);
        };
        return ViewTypeEnum;
      }();
      var ViewEncapsulationEnum = function () {
        function ViewEncapsulationEnum() {}
        ViewEncapsulationEnum.fromValue = function (value) {
          return createEnumExpression(Identifiers.ViewEncapsulation, value);
        };
        return ViewEncapsulationEnum;
      }();
      var ChangeDetectorStatusEnum = function () {
        function ChangeDetectorStatusEnum() {}
        ChangeDetectorStatusEnum.fromValue = function (value) {
          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
        };
        return ChangeDetectorStatusEnum;
      }();
      var ViewConstructorVars = function () {
        function ViewConstructorVars() {}
        ViewConstructorVars.viewUtils = variable('viewUtils');
        ViewConstructorVars.parentView = variable('parentView');
        ViewConstructorVars.parentIndex = variable('parentIndex');
        ViewConstructorVars.parentElement = variable('parentElement');
        return ViewConstructorVars;
      }();
      var ViewProperties = function () {
        function ViewProperties() {}
        ViewProperties.renderer = THIS_EXPR.prop('renderer');
        ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
        return ViewProperties;
      }();
      var InjectMethodVars = function () {
        function InjectMethodVars() {}
        InjectMethodVars.token = variable('token');
        InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
        InjectMethodVars.notFoundResult = variable('notFoundResult');
        return InjectMethodVars;
      }();
      var DetectChangesVars = function () {
        function DetectChangesVars() {}
        DetectChangesVars.throwOnChange = variable("throwOnChange");
        DetectChangesVars.changes = variable("changes");
        DetectChangesVars.changed = variable("changed");
        return DetectChangesVars;
      }();
      var ViewClassDependency = function () {
        function ViewClassDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ViewClassDependency;
      }();
      var ComponentFactoryDependency = function () {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }();
      var DirectiveWrapperDependency = function () {
        function DirectiveWrapperDependency(dir, placeholder) {
          this.dir = dir;
          this.placeholder = placeholder;
        }
        return DirectiveWrapperDependency;
      }();
      var __extends$14 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var CompileNode = function () {
        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
          this.parent = parent;
          this.view = view;
          this.nodeIndex = nodeIndex;
          this.renderNode = renderNode;
          this.sourceAst = sourceAst;
        }
        CompileNode.prototype.isNull = function () {
          return !this.renderNode;
        };
        CompileNode.prototype.isRootElement = function () {
          return this.view != this.parent.view;
        };
        return CompileNode;
      }();
      var CompileElement = function (_super) {
        __extends$14(CompileElement, _super);
        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references, _targetDependencies) {
          var _this = this;
          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
          this.component = component;
          this._directives = _directives;
          this._resolvedProvidersArray = _resolvedProvidersArray;
          this.hasViewContainer = hasViewContainer;
          this.hasEmbeddedView = hasEmbeddedView;
          this._targetDependencies = _targetDependencies;
          this.compViewExpr = null;
          this.instances = new Map();
          this.directiveWrapperInstance = new Map();
          this._queryCount = 0;
          this._queries = new Map();
          this.contentNodesByNgContentIndex = null;
          this.referenceTokens = {};
          references.forEach(function (ref) {
            return _this.referenceTokens[ref.name] = ref.value;
          });
          this.elementRef = importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
          this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
          this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
          this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));
          if (this.hasViewContainer || this.hasEmbeddedView) {
            this._createViewContainer();
          }
          if (this.component) {
            this._createComponentFactoryResolver();
          }
        }
        CompileElement.createNull = function () {
          return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);
        };
        CompileElement.prototype._createViewContainer = function () {
          var fieldName = "_vc_" + this.nodeIndex;
          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
          var statement = THIS_EXPR.prop(fieldName).set(importExpr(resolveIdentifier(Identifiers.ViewContainer)).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
          this.view.createMethod.addStmt(statement);
          this.viewContainer = THIS_EXPR.prop(fieldName);
          this.instances.set(resolveIdentifierToken(Identifiers.ViewContainer).reference, this.viewContainer);
          this.view.viewContainers.push(this.viewContainer);
        };
        CompileElement.prototype._createComponentFactoryResolver = function () {
          var _this = this;
          var entryComponents = this.component.entryComponents.map(function (entryComponent) {
            var id = new CompileIdentifierMetadata({ name: entryComponent.name });
            _this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
            return id;
          });
          if (!entryComponents || entryComponents.length === 0) {
            return;
          }
          var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function (entryComponent) {
            return importExpr(entryComponent);
          })), injectFromViewParentInjector(this.view, resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)]);
          var provider = new CompileProviderMetadata({
            token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
            useValue: createComponentFactoryResolverExpr
          });
          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
        };
        CompileElement.prototype.setComponentView = function (compViewExpr) {
          this.compViewExpr = compViewExpr;
          this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length);
          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
            this.contentNodesByNgContentIndex[i] = [];
          }
        };
        CompileElement.prototype.setEmbeddedView = function (embeddedView) {
          this.embeddedView = embeddedView;
          if (isPresent(embeddedView)) {
            var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([THIS_EXPR, literal(this.nodeIndex), this.renderNode]);
            var provider = new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.TemplateRef),
              useValue: createTemplateRefExpr
            });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
          }
        };
        CompileElement.prototype.beforeChildren = function () {
          var _this = this;
          if (this.hasViewContainer) {
            this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.viewContainer.prop('vcRef'));
          }
          this._resolvedProviders = new Map();
          this._resolvedProvidersArray.forEach(function (provider) {
            return _this._resolvedProviders.set(provider.token.reference, provider);
          });
          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
            var isDirectiveWrapper = resolvedProvider.providerType === exports.ProviderAstType.Component || resolvedProvider.providerType === exports.ProviderAstType.Directive;
            var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
              if (provider.useExisting) {
                return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }));
              } else if (provider.useFactory) {
                var deps = provider.deps || provider.useFactory.diDeps;
                var depsExpr = deps.map(function (dep) {
                  return _this._getDependency(resolvedProvider.providerType, dep);
                });
                return importExpr(provider.useFactory).callFn(depsExpr);
              } else if (provider.useClass) {
                var deps = provider.deps || provider.useClass.diDeps;
                var depsExpr = deps.map(function (dep) {
                  return _this._getDependency(resolvedProvider.providerType, dep);
                });
                if (isDirectiveWrapper) {
                  var directiveWrapperIdentifier = new CompileIdentifierMetadata({ name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass) });
                  _this._targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));
                  return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
                } else {
                  return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
                }
              } else {
                return convertValueToOutputAst(provider.useValue);
              }
            });
            var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
            var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
            if (isDirectiveWrapper) {
              _this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);
              _this.instances.set(resolvedProvider.token.reference, DirectiveWrapperExpressions.context(instance));
            } else {
              _this.instances.set(resolvedProvider.token.reference, instance);
            }
          });
          var _loop_1 = function (i) {
            var directive = this_1._directives[i];
            var directiveInstance = this_1.instances.get(identifierToken(directive.type).reference);
            directive.queries.forEach(function (queryMeta) {
              _this._addQuery(queryMeta, directiveInstance);
            });
          };
          var this_1 = this;
          for (var i = 0; i < this._directives.length; i++) {
            _loop_1(i);
          }
          var queriesWithReads = [];
          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
            var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
            queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) {
              return new _QueryWithRead(query, resolvedProvider.token);
            }));
          });
          Object.keys(this.referenceTokens).forEach(function (varName) {
            var token = _this.referenceTokens[varName];
            var varValue;
            if (token) {
              varValue = _this.instances.get(token.reference);
            } else {
              varValue = _this.renderNode;
            }
            _this.view.locals.set(varName, varValue);
            var varToken = new CompileTokenMetadata({ value: varName });
            queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) {
              return new _QueryWithRead(query, varToken);
            }));
          });
          queriesWithReads.forEach(function (queryWithRead) {
            var value;
            if (isPresent(queryWithRead.read.identifier)) {
              value = _this.instances.get(queryWithRead.read.reference);
            } else {
              var token = _this.referenceTokens[queryWithRead.read.value];
              if (isPresent(token)) {
                value = _this.instances.get(token.reference);
              } else {
                value = _this.elementRef;
              }
            }
            if (isPresent(value)) {
              queryWithRead.query.addValue(value, _this.view);
            }
          });
        };
        CompileElement.prototype.afterChildren = function (childNodeCount) {
          var _this = this;
          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
            var providerExpr = _this.instances.get(resolvedProvider.token.reference);
            var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
            _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
          });
          Array.from(this._queries.values()).forEach(function (queries) {
            return queries.forEach(function (q) {
              return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
            });
          });
        };
        CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
        };
        CompileElement.prototype.getComponent = function () {
          return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type).reference) : null;
        };
        CompileElement.prototype.getProviderTokens = function () {
          return Array.from(this._resolvedProviders.values()).map(function (resolvedProvider) {
            return createDiTokenExpression(resolvedProvider.token);
          });
        };
        CompileElement.prototype._getQueriesFor = function (token) {
          var result = [];
          var currentEl = this;
          var distance = 0;
          var queries;
          while (!currentEl.isNull()) {
            queries = currentEl._queries.get(token.reference);
            if (isPresent(queries)) {
              result.push.apply(result, queries.filter(function (query) {
                return query.meta.descendants || distance <= 1;
              }));
            }
            if (currentEl._directives.length > 0) {
              distance++;
            }
            currentEl = currentEl.parent;
          }
          queries = this.view.componentView.viewQueries.get(token.reference);
          if (isPresent(queries)) {
            result.push.apply(result, queries);
          }
          return result;
        };
        CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
          var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
          addQueryToTokenMap(this._queries, query);
          return query;
        };
        CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
          var result = null;
          if (isPresent(dep.token)) {
            if (!result) {
              if (dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
                if (requestingProviderType === exports.ProviderAstType.Component) {
                  return this.compViewExpr.prop('ref');
                } else {
                  return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
                }
              }
            }
            if (!result) {
              var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
              if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
                return null;
              }
              result = this.instances.get(dep.token.reference);
            }
          }
          return result;
        };
        CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
          var currElement = this;
          var result = null;
          if (dep.isValue) {
            result = literal(dep.value);
          }
          if (!result && !dep.isSkipSelf) {
            result = this._getLocalDependency(requestingProviderType, dep);
          }
          while (!result && !currElement.parent.isNull()) {
            currElement = currElement.parent;
            result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({ token: dep.token }));
          }
          if (!result) {
            result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
          }
          if (!result) {
            result = NULL_EXPR;
          }
          return getPropertyInView(result, this.view, currElement.view);
        };
        return CompileElement;
      }(CompileNode);
      function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
        var indexCondition;
        if (childNodeCount > 0) {
          indexCondition = literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
        } else {
          indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
        }
        return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
      }
      function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
        var view = compileElement.view;
        var resolvedProviderValueExpr;
        var type;
        if (isMulti) {
          resolvedProviderValueExpr = literalArr(providerValueExpressions);
          type = new ArrayType(DYNAMIC_TYPE);
        } else {
          resolvedProviderValueExpr = providerValueExpressions[0];
          type = providerValueExpressions[0].type;
        }
        if (!type) {
          type = DYNAMIC_TYPE;
        }
        if (isEager) {
          view.fields.push(new ClassField(propName, type));
          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
        } else {
          var internalField = "_" + propName;
          view.fields.push(new ClassField(internalField, type));
          var getter = new CompileMethod(view);
          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
          view.getters.push(new ClassGetter(propName, getter.finish(), type));
        }
        return THIS_EXPR.prop(propName);
      }
      var _QueryWithRead = function () {
        function _QueryWithRead(query, match) {
          this.query = query;
          this.read = query.meta.read || match;
        }
        return _QueryWithRead;
      }();
      var CompilePipe = function () {
        function CompilePipe(view, meta) {
          var _this = this;
          this.view = view;
          this.meta = meta;
          this._purePipeProxyCount = 0;
          this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
          var deps = this.meta.type.diDeps.map(function (diDep) {
            if (diDep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
              return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
            }
            return injectFromViewParentInjector(view, diDep.token, false);
          });
          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
          this.view.createMethod.resetDebugInfo(null, null);
          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
        }
        CompilePipe.call = function (view, name, args) {
          var compView = view.componentView;
          var meta = _findPipeMeta(compView, name);
          var pipe;
          if (meta.pure) {
            pipe = compView.purePipes.get(name);
            if (!pipe) {
              pipe = new CompilePipe(compView, meta);
              compView.purePipes.set(name, pipe);
              compView.pipes.push(pipe);
            }
          } else {
            pipe = new CompilePipe(view, meta);
            view.pipes.push(pipe);
          }
          return pipe._call(view, args);
        };
        Object.defineProperty(CompilePipe.prototype, "pure", {
          get: function () {
            return this.meta.pure;
          },
          enumerable: true,
          configurable: true
        });
        CompilePipe.prototype._call = function (callingView, args) {
          if (this.meta.pure) {
            var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
            var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
            createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, {
              fields: callingView.fields,
              ctorStmts: callingView.createMethod
            });
            return importExpr(resolveIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
          } else {
            return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
          }
        };
        return CompilePipe;
      }();
      function _findPipeMeta(view, name) {
        var pipeMeta = null;
        for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
          var localPipeMeta = view.pipeMetas[i];
          if (localPipeMeta.name == name) {
            pipeMeta = localPipeMeta;
            break;
          }
        }
        if (!pipeMeta) {
          throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
        }
        return pipeMeta;
      }
      var CompileViewRootNodeType;
      (function (CompileViewRootNodeType) {
        CompileViewRootNodeType[CompileViewRootNodeType["Node"] = 0] = "Node";
        CompileViewRootNodeType[CompileViewRootNodeType["ViewContainer"] = 1] = "ViewContainer";
        CompileViewRootNodeType[CompileViewRootNodeType["NgContent"] = 2] = "NgContent";
      })(CompileViewRootNodeType || (CompileViewRootNodeType = {}));
      var CompileViewRootNode = function () {
        function CompileViewRootNode(type, expr, ngContentIndex) {
          this.type = type;
          this.expr = expr;
          this.ngContentIndex = ngContentIndex;
        }
        return CompileViewRootNode;
      }();
      var CompileView = function () {
        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
          var _this = this;
          this.component = component;
          this.genConfig = genConfig;
          this.pipeMetas = pipeMetas;
          this.styles = styles;
          this.animations = animations;
          this.viewIndex = viewIndex;
          this.declarationElement = declarationElement;
          this.templateVariableBindings = templateVariableBindings;
          this.viewChildren = [];
          this.nodes = [];
          this.rootNodes = [];
          this.lastRenderNode = NULL_EXPR;
          this.viewContainers = [];
          this.methods = [];
          this.ctorStmts = [];
          this.fields = [];
          this.getters = [];
          this.disposables = [];
          this.purePipes = new Map();
          this.pipes = [];
          this.locals = new Map();
          this.literalArrayCount = 0;
          this.literalMapCount = 0;
          this.pipeCount = 0;
          this.createMethod = new CompileMethod(this);
          this.animationBindingsMethod = new CompileMethod(this);
          this.injectorGetMethod = new CompileMethod(this);
          this.updateContentQueriesMethod = new CompileMethod(this);
          this.dirtyParentQueriesMethod = new CompileMethod(this);
          this.updateViewQueriesMethod = new CompileMethod(this);
          this.detectChangesInInputsMethod = new CompileMethod(this);
          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
          this.destroyMethod = new CompileMethod(this);
          this.detachMethod = new CompileMethod(this);
          this.viewType = getViewType(component, viewIndex);
          this.className = getViewClassName(component, viewIndex);
          this.classType = importType(new CompileIdentifierMetadata({ name: this.className }));
          this.classExpr = variable(this.className);
          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
            this.componentView = this;
          } else {
            this.componentView = this.declarationElement.view.componentView;
          }
          this.componentContext = getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
          var viewQueries = new Map();
          if (this.viewType === ViewType.COMPONENT) {
            var directiveInstance_1 = THIS_EXPR.prop('context');
            this.component.viewQueries.forEach(function (queryMeta, queryIndex) {
              var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
              var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
              var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
              addQueryToTokenMap(viewQueries, query);
            });
          }
          this.viewQueries = viewQueries;
          templateVariableBindings.forEach(function (entry) {
            _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0]));
          });
          if (!this.declarationElement.isNull()) {
            this.declarationElement.setEmbeddedView(this);
          }
        }
        CompileView.prototype.callPipe = function (name, input, args) {
          return CompilePipe.call(this, name, [input].concat(args));
        };
        CompileView.prototype.getLocal = function (name) {
          if (name == EventHandlerVars.event.name) {
            return EventHandlerVars.event;
          }
          var currView = this;
          var result = currView.locals.get(name);
          while (!result && isPresent(currView.declarationElement.view)) {
            currView = currView.declarationElement.view;
            result = currView.locals.get(name);
          }
          if (isPresent(result)) {
            return getPropertyInView(result, this, currView);
          } else {
            return null;
          }
        };
        CompileView.prototype.afterNodes = function () {
          var _this = this;
          Array.from(this.viewQueries.values()).forEach(function (queries) {
            return queries.forEach(function (q) {
              return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
            });
          });
        };
        return CompileView;
      }();
      function getViewType(component, embeddedTemplateIndex) {
        if (embeddedTemplateIndex > 0) {
          return ViewType.EMBEDDED;
        }
        if (component.type.isHost) {
          return ViewType.HOST;
        }
        return ViewType.COMPONENT;
      }
      function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
        var usedEvents = collectEvents(boundEvents, directives);
        if (!usedEvents.size) {
          return false;
        }
        if (bindToRenderer) {
          subscribeToRenderEvents(usedEvents, compileElement);
        }
        subscribeToDirectiveEvents(usedEvents, directives, compileElement);
        generateHandleEventMethod(boundEvents, directives, compileElement);
        return true;
      }
      function collectEvents(boundEvents, directives) {
        var usedEvents = new Map();
        boundEvents.forEach(function (event) {
          usedEvents.set(event.fullName, event);
        });
        directives.forEach(function (dirAst) {
          dirAst.hostEvents.forEach(function (event) {
            usedEvents.set(event.fullName, event);
          });
        });
        return usedEvents;
      }
      function subscribeToRenderEvents(usedEvents, compileElement) {
        var eventAndTargetExprs = [];
        usedEvents.forEach(function (event) {
          if (!event.phase) {
            eventAndTargetExprs.push(literal(event.name), literal(event.target));
          }
        });
        if (eventAndTargetExprs.length) {
          var disposableVar = variable("disposable_" + compileElement.view.disposables.length);
          compileElement.view.disposables.push(disposableVar);
          compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(resolveIdentifier(Identifiers.subscribeToRenderElement)).callFn([THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs), handleEventExpr(compileElement)])).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
        }
      }
      function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
        var usedEventNames = Array.from(usedEvents.keys());
        directives.forEach(function (dirAst) {
          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
          compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
        });
      }
      function generateHandleEventMethod(boundEvents, directives, compileElement) {
        var hasComponentHostListener = directives.some(function (dirAst) {
          return dirAst.hostEvents.some(function (event) {
            return dirAst.directive.isComponent;
          });
        });
        var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
        var handleEventStmts = new CompileMethod(compileElement.view);
        handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
        var eventNameVar = variable('eventName');
        var resultVar = variable('result');
        handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
        directives.forEach(function (dirAst, dirIdx) {
          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
          if (dirAst.hostEvents.length > 0) {
            handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event).and(resultVar)).toStmt());
          }
        });
        boundEvents.forEach(function (renderEvent, renderEventIdx) {
          var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
          var trueStmts = evalResult.stmts;
          if (evalResult.preventDefault) {
            trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
          }
          handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
        });
        handleEventStmts.push(new ReturnStatement(resultVar));
        compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [new FnParam(eventNameVar.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], handleEventStmts.finish(), BOOL_TYPE));
      }
      function handleEventExpr(compileElement) {
        var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
        return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
      }
      var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
      var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
      function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
        var view = compileElement.view;
        var lifecycleHooks = directiveMeta.type.lifecycleHooks;
        var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
        afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
        }
        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
        }
      }
      function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
        var view = compileElement.view;
        var lifecycleHooks = directiveMeta.type.lifecycleHooks;
        var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
        afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
        }
        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
        }
      }
      function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
        compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
        compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
      }
      function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
        var onDestroyMethod = compileElement.view.destroyMethod;
        onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (provider.providerType !== exports.ProviderAstType.Directive && provider.providerType !== exports.ProviderAstType.Component && provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
        }
      }
      function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
        var onDestroyMethod = view.destroyMethod;
        if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
        }
      }
      function bindRenderText(boundText, compileNode, view) {
        var valueField = createCheckBindingField(view);
        var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
        if (!evalResult) {
          return null;
        }
        view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
        view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, evalResult.currValExpr]).toStmt()]));
      }
      function bindRenderInputs(boundProps, hasEvents, compileElement) {
        var view = compileElement.view;
        var renderNode = compileElement.renderNode;
        boundProps.forEach(function (boundProp) {
          var bindingField = createCheckBindingField(view);
          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
          var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
          if (!evalResult) {
            return;
          }
          var checkBindingStmts = [];
          var compileMethod = view.detectChangesRenderPropertiesMethod;
          switch (boundProp.type) {
            case exports.PropertyBindingType.Property:
            case exports.PropertyBindingType.Attribute:
            case exports.PropertyBindingType.Class:
            case exports.PropertyBindingType.Style:
              checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
              break;
            case exports.PropertyBindingType.Animation:
              compileMethod = view.animationBindingsMethod;
              var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) : importExpr(resolveIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression),
                  updateStmts = _a.updateStmts,
                  detachStmts = _a.detachStmts;
              checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
              view.detachMethod.addStmts(detachStmts);
              break;
          }
          compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
        });
      }
      function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
        var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) {
          return boundProp.needsRuntimeSecurityContext;
        }).map(function (boundProp) {
          var ctx;
          switch (boundProp.type) {
            case exports.PropertyBindingType.Property:
              ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
              break;
            case exports.PropertyBindingType.Attribute:
              ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
              break;
            default:
              throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
          }
          return createEnumExpression(Identifiers.SecurityContext, ctx);
        });
        compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
      }
      function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
        var view = compileElement.view;
        var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
        detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        directiveAst.inputs.forEach(function (input, inputIdx) {
          var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
          var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
          if (!evalResult) {
            return;
          }
          detectChangesInInputsMethod.addStmts(evalResult.stmts);
          detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || literal(false)]).toStmt());
        });
        var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
        var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
        var directiveDetectChangesStmt = isOnPushComp ? new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) : directiveDetectChangesExpr.toStmt();
        detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
      }
      function bindView(view, parsedTemplate, schemaRegistry) {
        var visitor = new ViewBinderVisitor(view, schemaRegistry);
        templateVisitAll(visitor, parsedTemplate);
        view.pipes.forEach(function (pipe) {
          bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
        });
      }
      var ViewBinderVisitor = function () {
        function ViewBinderVisitor(view, _schemaRegistry) {
          this.view = view;
          this._schemaRegistry = _schemaRegistry;
          this._nodeIndex = 0;
        }
        ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
          var node = this.view.nodes[this._nodeIndex++];
          bindRenderText(ast, node, this.view);
          return null;
        };
        ViewBinderVisitor.prototype.visitText = function (ast, parent) {
          this._nodeIndex++;
          return null;
        };
        ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) {
          return null;
        };
        ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
          var _this = this;
          var compileElement = this.view.nodes[this._nodeIndex++];
          var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
          bindRenderInputs(ast.inputs, hasEvents, compileElement);
          ast.directives.forEach(function (directiveAst, dirIndex) {
            var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
            bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
            bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
          });
          templateVisitAll(this, ast.children, compileElement);
          ast.directives.forEach(function (directiveAst) {
            var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
            var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
          });
          ast.providers.forEach(function (providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token.reference);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          return null;
        };
        ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++];
          bindOutputs(ast.outputs, ast.directives, compileElement, false);
          ast.directives.forEach(function (directiveAst, dirIndex) {
            var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
            var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
            bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
          });
          ast.providers.forEach(function (providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token.reference);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
          return null;
        };
        ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
          return null;
        };
        ViewBinderVisitor.prototype.visitReference = function (ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) {
          return null;
        };
        ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) {
          return null;
        };
        return ViewBinderVisitor;
      }();
      var IMPLICIT_TEMPLATE_VAR = '\$implicit';
      var CLASS_ATTR$1 = 'class';
      var STYLE_ATTR = 'style';
      var NG_CONTAINER_TAG = 'ng-container';
      var parentRenderNodeVar = variable('parentRenderNode');
      var rootSelectorVar = variable('rootSelector');
      function buildView(view, template, targetDependencies) {
        var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
        var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
        templateVisitAll(builderVisitor, template, parentEl);
        if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
          view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
        }
        return builderVisitor.nestedViewCount;
      }
      function finishView(view, targetStatements) {
        view.afterNodes();
        createViewTopLevelStmts(view, targetStatements);
        view.nodes.forEach(function (node) {
          if (node instanceof CompileElement && node.hasEmbeddedView) {
            finishView(node.embeddedView, targetStatements);
          }
        });
      }
      var ViewBuilderVisitor = function () {
        function ViewBuilderVisitor(view, targetDependencies) {
          this.view = view;
          this.targetDependencies = targetDependencies;
          this.nestedViewCount = 0;
        }
        ViewBuilderVisitor.prototype._isRootNode = function (parent) {
          return parent.view !== this.view;
        };
        ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
          var projectedNode = _getOuterContainerOrSelf(node);
          var parent = projectedNode.parent;
          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
          var viewContainer = node instanceof CompileElement && node.hasViewContainer ? node.viewContainer : null;
          if (this._isRootNode(parent)) {
            if (this.view.viewType !== ViewType.COMPONENT) {
              this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
            }
          } else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
            parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
          }
        };
        ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
          parent = _getOuterContainerParentOrSelf(parent);
          if (this._isRootNode(parent)) {
            if (this.view.viewType === ViewType.COMPONENT) {
              return parentRenderNodeVar;
            } else {
              return NULL_EXPR;
            }
          } else {
            return isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
          }
        };
        ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {
          var view = this.view;
          if (view.rootNodes.length === 0 || view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
            var fieldName = "_el_" + view.nodes.length;
            view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
            view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR])).toStmt());
            view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
          }
          return view.rootNodes[view.rootNodes.length - 1].expr;
        };
        ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
          return this._visitText(ast, '', parent);
        };
        ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
          return this._visitText(ast, ast.value, parent);
        };
        ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
          var fieldName = "_text_" + this.view.nodes.length;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
          var renderNode = THIS_EXPR.prop(fieldName);
          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
          var createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
          this.view.nodes.push(compileNode);
          this.view.createMethod.addStmt(createRenderNode);
          this._addRootNodeAndProject(compileNode);
          return renderNode;
        };
        ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
          this.view.createMethod.resetDebugInfo(null, ast);
          var parentRenderNode = this._getParentRenderNode(parent);
          if (parentRenderNode !== NULL_EXPR) {
            this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)]).toStmt());
          } else if (this._isRootNode(parent)) {
            if (this.view.viewType !== ViewType.COMPONENT) {
              this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
            }
          } else {
            if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
              parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
            }
          }
          return null;
        };
        ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
          var nodeIndex = this.view.nodes.length;
          var createRenderNodeExpr;
          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
          var directives = ast.directives.map(function (directiveAst) {
            return directiveAst.directive;
          });
          var component = directives.find(function (directive) {
            return directive.isComponent;
          });
          if (ast.name === NG_CONTAINER_TAG) {
            createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
          } else {
            var htmlAttrs = _readHtmlAttrs(ast.attrs);
            var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) {
              return literal(v);
            }));
            if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
              createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr]);
            } else {
              createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name), attrNameAndValues, debugContextExpr]);
            }
          }
          var fieldName = "_el_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
          var renderNode = THIS_EXPR.prop(fieldName);
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references, this.targetDependencies);
          this.view.nodes.push(compileElement);
          var compViewExpr = null;
          if (isPresent(component)) {
            var nestedComponentIdentifier = new CompileIdentifierMetadata({ name: getViewClassName(component, 0) });
            this.targetDependencies.push(new ViewClassDependency(component.type, nestedComponentIdentifier));
            compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex);
            this.view.fields.push(new ClassField(compViewExpr.name, importType(resolveIdentifier(Identifiers.AppView), [importType(component.type)])));
            this.view.viewChildren.push(compViewExpr);
            compileElement.setComponentView(compViewExpr);
            this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode])).toStmt());
          }
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          templateVisitAll(this, ast.children, compileElement);
          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
          if (isPresent(compViewExpr)) {
            this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
          }
          return null;
        };
        ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
          var nodeIndex = this.view.nodes.length;
          var fieldName = "_anchor_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
          var renderNode = THIS_EXPR.prop(fieldName);
          var templateVariableBindings = ast.variables.map(function (varAst) {
            return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
          });
          var directives = ast.directives.map(function (directiveAst) {
            return directiveAst.directive;
          });
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references, this.targetDependencies);
          this.view.nodes.push(compileElement);
          this.nestedViewCount++;
          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          compileElement.afterChildren(0);
          return null;
        };
        ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) {
          return null;
        };
        return ViewBuilderVisitor;
      }();
      function _getOuterContainerOrSelf(node) {
        var view = node.view;
        while (_isNgContainer(node.parent, view)) {
          node = node.parent;
        }
        return node;
      }
      function _getOuterContainerParentOrSelf(el) {
        var view = el.view;
        while (_isNgContainer(el, view)) {
          el = el.parent;
        }
        return el;
      }
      function _isNgContainer(node, view) {
        return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
      }
      function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
        var mapResult = {};
        Object.keys(declaredHtmlAttrs).forEach(function (key) {
          mapResult[key] = declaredHtmlAttrs[key];
        });
        directives.forEach(function (directiveMeta) {
          Object.keys(directiveMeta.hostAttributes).forEach(function (name) {
            var value = directiveMeta.hostAttributes[name];
            var prevValue = mapResult[name];
            mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
          });
        });
        var arrResult = [];
        Object.keys(mapResult).sort().forEach(function (attrName) {
          arrResult.push(attrName, mapResult[attrName]);
        });
        return arrResult;
      }
      function _readHtmlAttrs(attrs) {
        var htmlAttrs = {};
        attrs.forEach(function (ast) {
          htmlAttrs[ast.name] = ast.value;
        });
        return htmlAttrs;
      }
      function mergeAttributeValue(attrName, attrValue1, attrValue2) {
        if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
          return attrValue1 + " " + attrValue2;
        } else {
          return attrValue2;
        }
      }
      function createViewTopLevelStmts(view, targetStatements) {
        var nodeDebugInfosVar = NULL_EXPR;
        if (view.genConfig.genDebugInfo) {
          nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
          targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
        }
        var renderCompTypeVar = variable("renderType_" + view.component.type.name);
        if (view.viewIndex === 0) {
          var templateUrlInfo = void 0;
          if (view.component.template.templateUrl == view.component.type.moduleUrl) {
            templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
          } else {
            templateUrlInfo = view.component.template.templateUrl;
          }
          targetStatements.push(renderCompTypeVar.set(importExpr(resolveIdentifier(Identifiers.createRenderComponentType)).callFn([view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, literalMap(view.animations.map(function (entry) {
            return [entry.name, entry.fnExp];
          }))])).toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
        }
        var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
        targetStatements.push(viewClass);
      }
      function createStaticNodeDebugInfo(node) {
        var compileElement = node instanceof CompileElement ? node : null;
        var providerTokens = [];
        var componentToken = NULL_EXPR;
        var varTokenEntries = [];
        if (isPresent(compileElement)) {
          providerTokens = compileElement.getProviderTokens();
          if (isPresent(compileElement.component)) {
            componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
          }
          Object.keys(compileElement.referenceTokens).forEach(function (varName) {
            var token = compileElement.referenceTokens[varName];
            varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
          });
        }
        return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
      }
      function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
        var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentView.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE), new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)];
        var superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex, ViewConstructorVars.parentElement, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
        if (view.genConfig.genDebugInfo) {
          superConstructorArgs.push(nodeDebugInfosVar);
        }
        if (view.viewType === ViewType.EMBEDDED) {
          viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(resolveIdentifier(Identifiers.ViewContainer))));
          superConstructorArgs.push(variable('declaredViewContainer'));
        }
        var viewMethods = [new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])), new ClassMethod('injectorGetInternal', [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new ClassMethod('destroyInternal', [], generateDestroyMethod(view)), new ClassMethod('detachInternal', [], view.detachMethod.finish()), generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view), generateCreateEmbeddedViewsMethod(view)].filter(function (method) {
          return method.body.length > 0;
        });
        var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
        var viewClass = createClassStmt({
          name: view.className,
          parent: importExpr(resolveIdentifier(superClass), [getContextType(view)]),
          parentArgs: superConstructorArgs,
          ctorParams: viewConstructorArgs,
          builders: [{ methods: viewMethods }, view]
        });
        return viewClass;
      }
      function generateDestroyMethod(view) {
        var stmts = [];
        view.viewContainers.forEach(function (viewContainer) {
          stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
        });
        view.viewChildren.forEach(function (viewChild) {
          stmts.push(viewChild.callMethod('destroy', []).toStmt());
        });
        stmts.push.apply(stmts, view.destroyMethod.finish());
        return stmts;
      }
      function generateCreateMethod(view) {
        var parentRenderNodeExpr = NULL_EXPR;
        var parentRenderNodeStmts = [];
        if (view.viewType === ViewType.COMPONENT) {
          parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
          parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
        }
        var resultExpr;
        if (view.viewType === ViewType.HOST) {
          var hostEl = view.nodes[0];
          resultExpr = importExpr(resolveIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()]);
        } else {
          resultExpr = NULL_EXPR;
        }
        var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE).prop('directRenderer').conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) {
          return node.renderNode;
        })));
        return parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod('init', [view.lastRenderNode, allNodesExpr, view.disposables.length ? literalArr(view.disposables) : NULL_EXPR]).toStmt(), new ReturnStatement(resultExpr)]);
      }
      function generateDetectChangesMethod(view) {
        var stmts = [];
        if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() && view.viewContainers.length === 0 && view.viewChildren.length === 0) {
          return stmts;
        }
        stmts.push.apply(stmts, view.animationBindingsMethod.finish());
        stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
        view.viewContainers.forEach(function (viewContainer) {
          stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange]).toStmt());
        });
        var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
        if (afterContentStmts.length > 0) {
          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
        }
        stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
        view.viewChildren.forEach(function (viewChild) {
          stmts.push(viewChild.callMethod('detectChanges', [DetectChangesVars.throwOnChange]).toStmt());
        });
        var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
        if (afterViewStmts.length > 0) {
          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
        }
        var varStmts = [];
        var readVars = findReadVarNames(stmts);
        if (readVars.has(DetectChangesVars.changed.name)) {
          varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
        }
        if (readVars.has(DetectChangesVars.changes.name)) {
          varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
        }
        varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
        return varStmts.concat(stmts);
      }
      function addReturnValuefNotEmpty(statements, value) {
        if (statements.length > 0) {
          return statements.concat([new ReturnStatement(value)]);
        } else {
          return statements;
        }
      }
      function getContextType(view) {
        if (view.viewType === ViewType.COMPONENT) {
          return importType(view.component.type);
        }
        return DYNAMIC_TYPE;
      }
      function getChangeDetectionMode(view) {
        var mode;
        if (view.viewType === ViewType.COMPONENT) {
          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
        } else {
          mode = ChangeDetectorStatus.CheckAlways;
        }
        return mode;
      }
      function generateVisitRootNodesMethod(view) {
        var cbVar = variable('cb');
        var ctxVar = variable('ctx');
        var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
        return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
      }
      function generateVisitProjectableNodesMethod(view) {
        var nodeIndexVar = variable('nodeIndex');
        var ngContentIndexVar = variable('ngContentIndex');
        var cbVar = variable('cb');
        var ctxVar = variable('ctx');
        var stmts = [];
        view.nodes.forEach(function (node) {
          if (node instanceof CompileElement && node.component) {
            node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {
              stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
            });
          }
        });
        return new ClassMethod('visitProjectableNodesInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE), new FnParam(ngContentIndexVar.name, NUMBER_TYPE), new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
      }
      function generateVisitNodesStmts(nodes, cb, ctx) {
        var stmts = [];
        nodes.forEach(function (node) {
          switch (node.type) {
            case CompileViewRootNodeType.Node:
              stmts.push(cb.callFn([node.expr, ctx]).toStmt());
              break;
            case CompileViewRootNodeType.ViewContainer:
              stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
              stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
              break;
            case CompileViewRootNodeType.NgContent:
              stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx]).toStmt());
              break;
          }
        });
        return stmts;
      }
      function generateCreateEmbeddedViewsMethod(view) {
        var nodeIndexVar = variable('nodeIndex');
        var stmts = [];
        view.nodes.forEach(function (node) {
          if (node instanceof CompileElement) {
            if (node.embeddedView) {
              var parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
              stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode, node.viewContainer]))]));
            }
          }
        });
        if (stmts.length > 0) {
          stmts.push(new ReturnStatement(NULL_EXPR));
        }
        return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
      }
      var ViewCompileResult = function () {
        function ViewCompileResult(statements, viewClassVar, dependencies) {
          this.statements = statements;
          this.viewClassVar = viewClassVar;
          this.dependencies = dependencies;
        }
        return ViewCompileResult;
      }();
      var ViewCompiler = function () {
        function ViewCompiler(_genConfig, _schemaRegistry) {
          this._genConfig = _genConfig;
          this._schemaRegistry = _schemaRegistry;
        }
        ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {
          var dependencies = [];
          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
          var statements = [];
          buildView(view, template, dependencies);
          bindView(view, template, this._schemaRegistry);
          finishView(view, statements);
          return new ViewCompileResult(statements, view.classExpr.name, dependencies);
        };
        ViewCompiler.decorators = [{ type: _angular_core.Injectable }];
        ViewCompiler.ctorParameters = [{ type: CompilerConfig }, { type: ElementSchemaRegistry }];
        return ViewCompiler;
      }();
      var SourceModule = function () {
        function SourceModule(fileUrl, moduleUrl, source) {
          this.fileUrl = fileUrl;
          this.moduleUrl = moduleUrl;
          this.source = source;
        }
        return SourceModule;
      }();
      function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
        var _a = _createNgModules(programStaticSymbols, options, metadataResolver),
            ngModules = _a.ngModules,
            symbolsMissingModule = _a.symbolsMissingModule;
        return _analyzeNgModules(ngModules, symbolsMissingModule);
      }
      function analyzeAndValidateNgModules(programStaticSymbols, options, metadataResolver) {
        var result = analyzeNgModules(programStaticSymbols, options, metadataResolver);
        if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
          var messages = result.symbolsMissingModule.map(function (s) {
            return "Cannot determine the module for class " + s.name + " in " + s.filePath + "!";
          });
          throw new Error(messages.join('\n'));
        }
        return result;
      }
      function loadNgModuleDirectives(ngModules) {
        return Promise.all(ListWrapper.flatten(ngModules.map(function (ngModule) {
          return ngModule.transitiveModule.directiveLoaders.map(function (loader) {
            return loader();
          });
        }))).then(function () {});
      }
      function _analyzeNgModules(ngModuleMetas, symbolsMissingModule) {
        var moduleMetasByRef = new Map();
        ngModuleMetas.forEach(function (ngModule) {
          return moduleMetasByRef.set(ngModule.type.reference, ngModule);
        });
        var ngModuleByPipeOrDirective = new Map();
        var ngModulesByFile = new Map();
        var ngDirectivesByFile = new Map();
        var filePaths = new Set();
        ngModuleMetas.forEach(function (ngModuleMeta) {
          var srcFileUrl = ngModuleMeta.type.reference.filePath;
          filePaths.add(srcFileUrl);
          ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
          ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
            var fileUrl = dirIdentifier.reference.filePath;
            filePaths.add(fileUrl);
            ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
            ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
          });
          ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
            var fileUrl = pipeIdentifier.reference.filePath;
            filePaths.add(fileUrl);
            ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
          });
        });
        var files = [];
        filePaths.forEach(function (srcUrl) {
          var directives = ngDirectivesByFile.get(srcUrl) || [];
          var ngModules = ngModulesByFile.get(srcUrl) || [];
          files.push({
            srcUrl: srcUrl,
            directives: directives,
            ngModules: ngModules
          });
        });
        return {
          ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
          files: files,
          ngModules: ngModuleMetas,
          symbolsMissingModule: symbolsMissingModule
        };
      }
      var OfflineCompiler = function () {
        function OfflineCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat, _animationParser) {
          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._dirWrapperCompiler = _dirWrapperCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._outputEmitter = _outputEmitter;
          this._localeId = _localeId;
          this._translationFormat = _translationFormat;
          this._animationParser = _animationParser;
          this._animationCompiler = new AnimationCompiler();
        }
        OfflineCompiler.prototype.clearCache = function () {
          this._metadataResolver.clearCache();
        };
        OfflineCompiler.prototype.compileModules = function (staticSymbols, options) {
          var _this = this;
          var _a = analyzeAndValidateNgModules(staticSymbols, options, this._metadataResolver),
              ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
              files = _a.files,
              ngModules = _a.ngModules;
          return loadNgModuleDirectives(ngModules).then(function () {
            var sourceModules = files.map(function (file) {
              return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules);
            });
            return ListWrapper.flatten(sourceModules);
          });
        };
        OfflineCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, ngModules) {
          var _this = this;
          var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
          var statements = [];
          var exportedVars = [];
          var outputSourceModules = [];
          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) {
            return _this._compileModule(ngModuleType, statements);
          }));
          exportedVars.push.apply(exportedVars, directives.map(function (directiveType) {
            return _this._compileDirectiveWrapper(directiveType, statements);
          }));
          directives.forEach(function (dirType) {
            var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
            if (!compMeta.isComponent) {
              return Promise.resolve(null);
            }
            var ngModule = ngModuleByPipeOrDirective.get(dirType);
            if (!ngModule) {
              throw new Error("Internal Error: cannot determine the module for component " + compMeta.type.name + "!");
            }
            _assertComponent(compMeta);
            var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
            stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
              outputSourceModules.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
            });
            exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
          });
          if (statements.length > 0) {
            var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
            outputSourceModules.unshift(srcModule);
          }
          return outputSourceModules;
        };
        OfflineCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
          var providers = [];
          if (this._localeId) {
            providers.push(new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.LOCALE_ID),
              useValue: this._localeId
            }));
          }
          if (this._translationFormat) {
            providers.push(new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
              useValue: this._translationFormat
            }));
          }
          var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
          appCompileResult.dependencies.forEach(function (dep) {
            dep.placeholder.name = _componentFactoryName(dep.comp);
            dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
          });
          targetStatements.push.apply(targetStatements, appCompileResult.statements);
          return appCompileResult.ngModuleFactoryVar;
        };
        OfflineCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {
          var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
          var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
          targetStatements.push.apply(targetStatements, dirCompileResult.statements);
          return dirCompileResult.dirWrapperClassVar;
        };
        OfflineCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
          var hostMeta = createHostComponentMeta(compMeta);
          var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
          var compFactoryVar = _componentFactoryName(compMeta.type);
          targetStatements.push(variable(compFactoryVar).set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
          return compFactoryVar;
        };
        OfflineCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
          var _this = this;
          var parsedAnimations = this._animationParser.parseComponent(compMeta);
          var directives = directiveIdentifiers.map(function (dir) {
            return _this._metadataResolver.getDirectiveSummary(dir.reference);
          });
          var pipes = ngModule.transitiveModule.pipes.map(function (pipe) {
            return _this._metadataResolver.getPipeSummary(pipe.reference);
          });
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, compMeta.type.name);
          var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
          if (componentStyles) {
            targetStatements.push.apply(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
          }
          compiledAnimations.forEach(function (entry) {
            return targetStatements.push.apply(targetStatements, entry.statements);
          });
          targetStatements.push.apply(targetStatements, _resolveViewStatements(viewResult));
          return viewResult.viewClassVar;
        };
        OfflineCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
          _resolveStyleStatements(stylesCompileResult, fileSuffix);
          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        };
        OfflineCompiler.prototype._codegenSourceModule = function (fileUrl, moduleUrl, statements, exportedVars) {
          return new SourceModule(fileUrl, moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
        };
        return OfflineCompiler;
      }();
      function _resolveViewStatements(compileResult) {
        compileResult.dependencies.forEach(function (dep) {
          if (dep instanceof ViewClassDependency) {
            var vfd = dep;
            vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
          } else if (dep instanceof ComponentFactoryDependency) {
            var cfd = dep;
            cfd.placeholder.name = _componentFactoryName(cfd.comp);
            cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
          } else if (dep instanceof DirectiveWrapperDependency) {
            var dwd = dep;
            dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);
          }
        });
        return compileResult.statements;
      }
      function _resolveStyleStatements(compileResult, fileSuffix) {
        compileResult.dependencies.forEach(function (dep) {
          dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
        });
        return compileResult.statements;
      }
      function _ngfactoryModuleUrl(dirUrl) {
        var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
        return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
      }
      function _componentFactoryName(comp) {
        return comp.name + "NgFactory";
      }
      function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
        return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
      }
      function _assertComponent(meta) {
        if (!meta.isComponent) {
          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
        }
      }
      function _splitTypescriptSuffix(path) {
        if (path.endsWith('.d.ts')) {
          return [path.slice(0, -5), '.ts'];
        }
        var lastDot = path.lastIndexOf('.');
        if (lastDot !== -1) {
          return [path.substring(0, lastDot), path.substring(lastDot)];
        }
        return [path, ''];
      }
      function _createNgModules(programStaticSymbols, options, metadataResolver) {
        var ngModules = new Map();
        var programPipesAndDirectives = [];
        var ngModulePipesAndDirective = new Set();
        var addNgModule = function (staticSymbol) {
          if (ngModules.has(staticSymbol)) {
            return false;
          }
          var ngModule = metadataResolver.getUnloadedNgModuleMetadata(staticSymbol, false, false);
          if (ngModule) {
            ngModules.set(ngModule.type.reference, ngModule);
            ngModule.declaredDirectives.forEach(function (dir) {
              return ngModulePipesAndDirective.add(dir.reference);
            });
            ngModule.declaredPipes.forEach(function (pipe) {
              return ngModulePipesAndDirective.add(pipe.reference);
            });
            if (options.transitiveModules) {
              ngModule.transitiveModule.modules.forEach(function (modMeta) {
                return addNgModule(modMeta.type.reference);
              });
            }
          }
          return !!ngModule;
        };
        programStaticSymbols.forEach(function (staticSymbol) {
          if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
            programPipesAndDirectives.push(staticSymbol);
          }
        });
        var symbolsMissingModule = programPipesAndDirectives.filter(function (s) {
          return !ngModulePipesAndDirective.has(s);
        });
        return {
          ngModules: Array.from(ngModules.values()),
          symbolsMissingModule: symbolsMissingModule
        };
      }
      var StylesCollectionEntry = function () {
        function StylesCollectionEntry(time, value) {
          this.time = time;
          this.value = value;
        }
        StylesCollectionEntry.prototype.matches = function (time, value) {
          return time == this.time && value == this.value;
        };
        return StylesCollectionEntry;
      }();
      var StylesCollection = function () {
        function StylesCollection() {
          this.styles = {};
        }
        StylesCollection.prototype.insertAtTime = function (property, time, value) {
          var tuple = new StylesCollectionEntry(time, value);
          var entries = this.styles[property];
          if (!isPresent(entries)) {
            entries = this.styles[property] = [];
          }
          var insertionIndex = 0;
          for (var i = entries.length - 1; i >= 0; i--) {
            if (entries[i].time <= time) {
              insertionIndex = i + 1;
              break;
            }
          }
          entries.splice(insertionIndex, 0, tuple);
        };
        StylesCollection.prototype.getByIndex = function (property, index) {
          var items = this.styles[property];
          if (isPresent(items)) {
            return index >= items.length ? null : items[index];
          }
          return null;
        };
        StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
          var entries = this.styles[property];
          if (isPresent(entries)) {
            for (var i = entries.length - 1; i >= 0; i--) {
              if (entries[i].time <= time) return i;
            }
          }
          return null;
        };
        return StylesCollection;
      }();
      var __extends$16 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _INITIAL_KEYFRAME = 0;
      var _TERMINAL_KEYFRAME = 1;
      var _ONE_SECOND = 1000;
      var AnimationParseError = function (_super) {
        __extends$16(AnimationParseError, _super);
        function AnimationParseError(message) {
          _super.call(this, null, message);
        }
        AnimationParseError.prototype.toString = function () {
          return "" + this.msg;
        };
        return AnimationParseError;
      }(ParseError);
      var AnimationEntryParseResult = function () {
        function AnimationEntryParseResult(ast, errors) {
          this.ast = ast;
          this.errors = errors;
        }
        return AnimationEntryParseResult;
      }();
      var AnimationParser = function () {
        function AnimationParser(_schema) {
          this._schema = _schema;
        }
        AnimationParser.prototype.parseComponent = function (component) {
          var _this = this;
          var errors = [];
          var componentName = component.type.name;
          var animationTriggerNames = new Set();
          var asts = component.template.animations.map(function (entry) {
            var result = _this.parseEntry(entry);
            var ast = result.ast;
            var triggerName = ast.name;
            if (animationTriggerNames.has(triggerName)) {
              result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
            } else {
              animationTriggerNames.add(triggerName);
            }
            if (result.errors.length > 0) {
              var errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
              result.errors.forEach(function (error) {
                errorMessage_1 += '\n-- ' + error.msg;
              });
              errors.push(errorMessage_1);
            }
            return ast;
          });
          if (errors.length > 0) {
            var errorString = errors.join('\n');
            throw new Error("Animation parse errors:\n" + errorString);
          }
          return asts;
        };
        AnimationParser.prototype.parseEntry = function (entry) {
          var _this = this;
          var errors = [];
          var stateStyles = {};
          var transitions = [];
          var stateDeclarationAsts = [];
          entry.definitions.forEach(function (def) {
            if (def instanceof CompileAnimationStateDeclarationMetadata) {
              _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {
                stateDeclarationAsts.push(ast);
                stateStyles[ast.stateName] = ast.styles;
              });
            } else {
              transitions.push(def);
            }
          });
          var stateTransitionAsts = transitions.map(function (transDef) {
            return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors);
          });
          var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
          return new AnimationEntryParseResult(ast, errors);
        };
        AnimationParser.decorators = [{ type: _angular_core.Injectable }];
        AnimationParser.ctorParameters = [{ type: ElementSchemaRegistry }];
        return AnimationParser;
      }();
      function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
        var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
        var defStyles = new AnimationStylesAst(normalizedStyles);
        var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
        return states.map(function (state) {
          return new AnimationStateDeclarationAst(state, defStyles);
        });
      }
      function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
        var styles = new StylesCollection();
        var transitionExprs = [];
        var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
        transitionStates.forEach(function (expr) {
          transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors));
        });
        var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
        var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
        var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
        if (errors.length == 0) {
          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
        }
        var stepsAst = animationAst instanceof AnimationWithStepsAst ? animationAst : new AnimationSequenceAst([animationAst]);
        return new AnimationStateTransitionAst(transitionExprs, stepsAst);
      }
      function _parseAnimationAlias(alias, errors) {
        switch (alias) {
          case ':enter':
            return 'void => *';
          case ':leave':
            return '* => void';
          default:
            errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
            return '* => *';
        }
      }
      function _parseAnimationTransitionExpr(eventStr, errors) {
        var expressions = [];
        if (eventStr[0] == ':') {
          eventStr = _parseAnimationAlias(eventStr, errors);
        }
        var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
        if (!isPresent(match) || match.length < 4) {
          errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
          return expressions;
        }
        var fromState = match[1];
        var separator = match[2];
        var toState = match[3];
        expressions.push(new AnimationStateTransitionExpression(fromState, toState));
        var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
        if (separator[0] == '<' && !isFullAnyStateExpr) {
          expressions.push(new AnimationStateTransitionExpression(toState, fromState));
        }
        return expressions;
      }
      function _normalizeAnimationEntry(entry) {
        return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
      }
      function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
        var normalizedStyles = [];
        entry.styles.forEach(function (styleEntry) {
          if (typeof styleEntry === 'string') {
            if (permitStateReferences) {
              normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
            } else {
              errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
            }
          } else {
            var stylesObj_1 = styleEntry;
            var normalizedStylesObj_1 = {};
            Object.keys(stylesObj_1).forEach(function (propName) {
              var normalizedProp = schema.normalizeAnimationStyleProperty(propName);
              var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
              var normalizationError = normalizedOutput['error'];
              if (normalizationError) {
                errors.push(new AnimationParseError(normalizationError));
              }
              normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
            });
            normalizedStyles.push(normalizedStylesObj_1);
          }
        });
        return normalizedStyles;
      }
      function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
        var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
        return entry instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
      }
      function _mergeAnimationStyles(stylesList, newItem) {
        if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
          var lastIndex = stylesList.length - 1;
          var lastItem = stylesList[lastIndex];
          if (typeof lastItem === 'object' && lastItem !== null) {
            stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
            return;
          }
        }
        stylesList.push(newItem);
      }
      function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
        var steps;
        if (entry instanceof CompileAnimationWithStepsMetadata) {
          steps = entry.steps;
        } else {
          return [entry];
        }
        var newSteps = [];
        var combinedStyles;
        steps.forEach(function (step) {
          if (step instanceof CompileAnimationStyleMetadata) {
            if (!isPresent(combinedStyles)) {
              combinedStyles = [];
            }
            _normalizeStyleMetadata(step, stateStyles, schema, errors, true).forEach(function (entry) {
              _mergeAnimationStyles(combinedStyles, entry);
            });
          } else {
            if (isPresent(combinedStyles)) {
              newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
              combinedStyles = null;
            }
            if (step instanceof CompileAnimationAnimateMetadata) {
              var animateStyleValue = step.styles;
              if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
                animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
              } else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
                animateStyleValue.steps.forEach(function (step) {
                  step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
                });
              }
            } else if (step instanceof CompileAnimationWithStepsMetadata) {
              var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
              step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
            }
            newSteps.push(step);
          }
        });
        if (isPresent(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
        }
        return newSteps;
      }
      function _resolveStylesFromState(stateName, stateStyles, errors) {
        var styles = [];
        if (stateName[0] != ':') {
          errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
        } else {
          var normalizedStateName = stateName.substring(1);
          var value = stateStyles[normalizedStateName];
          if (!isPresent(value)) {
            errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
          } else {
            value.styles.forEach(function (stylesEntry) {
              if (typeof stylesEntry === 'object' && stylesEntry !== null) {
                styles.push(stylesEntry);
              }
            });
          }
        }
        return styles;
      }
      var _AnimationTimings = function () {
        function _AnimationTimings(duration, delay, easing) {
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
        }
        return _AnimationTimings;
      }();
      function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
        var totalEntries = keyframeSequence.steps.length;
        var totalOffsets = 0;
        keyframeSequence.steps.forEach(function (step) {
          return totalOffsets += isPresent(step.offset) ? 1 : 0;
        });
        if (totalOffsets > 0 && totalOffsets < totalEntries) {
          errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
          totalOffsets = totalEntries;
        }
        var limit = totalEntries - 1;
        var margin = totalOffsets == 0 ? 1 / limit : 0;
        var rawKeyframes = [];
        var index = 0;
        var doSortKeyframes = false;
        var lastOffset = 0;
        keyframeSequence.steps.forEach(function (styleMetadata) {
          var offset = styleMetadata.offset;
          var keyframeStyles = {};
          styleMetadata.styles.forEach(function (entry) {
            Object.keys(entry).forEach(function (prop) {
              if (prop != 'offset') {
                keyframeStyles[prop] = entry[prop];
              }
            });
          });
          if (isPresent(offset)) {
            doSortKeyframes = doSortKeyframes || offset < lastOffset;
          } else {
            offset = index == limit ? _TERMINAL_KEYFRAME : margin * index;
          }
          rawKeyframes.push([offset, keyframeStyles]);
          lastOffset = offset;
          index++;
        });
        if (doSortKeyframes) {
          rawKeyframes.sort(function (a, b) {
            return a[0] <= b[0] ? -1 : 1;
          });
        }
        var firstKeyframe = rawKeyframes[0];
        if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
          rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
        }
        var firstKeyframeStyles = firstKeyframe[1];
        limit = rawKeyframes.length - 1;
        var lastKeyframe = rawKeyframes[limit];
        if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
          limit++;
        }
        var lastKeyframeStyles = lastKeyframe[1];
        for (var i = 1; i <= limit; i++) {
          var entry = rawKeyframes[i];
          var styles = entry[1];
          Object.keys(styles).forEach(function (prop) {
            if (!isPresent(firstKeyframeStyles[prop])) {
              firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
            }
          });
        }
        var _loop_1 = function (i) {
          var entry = rawKeyframes[i];
          var styles = entry[1];
          Object.keys(styles).forEach(function (prop) {
            if (!isPresent(lastKeyframeStyles[prop])) {
              lastKeyframeStyles[prop] = styles[prop];
            }
          });
        };
        for (var i = limit - 1; i >= 0; i--) {
          _loop_1(i);
        }
        return rawKeyframes.map(function (entry) {
          return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
        });
      }
      function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
        var ast;
        var playTime = 0;
        var startingTime = currentTime;
        if (entry instanceof CompileAnimationWithStepsMetadata) {
          var maxDuration_1 = 0;
          var steps_1 = [];
          var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
          var previousStyles_1;
          entry.steps.forEach(function (entry) {
            var time = isGroup_1 ? startingTime : currentTime;
            if (entry instanceof CompileAnimationStyleMetadata) {
              entry.styles.forEach(function (stylesEntry) {
                var map = stylesEntry;
                Object.keys(map).forEach(function (prop) {
                  collectedStyles.insertAtTime(prop, time, map[prop]);
                });
              });
              previousStyles_1 = entry.styles;
              return;
            }
            var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
            if (isPresent(previousStyles_1)) {
              if (entry instanceof CompileAnimationWithStepsMetadata) {
                var startingStyles = new AnimationStylesAst(previousStyles_1);
                steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
              } else {
                var innerStep = innerAst;
                (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
              }
              previousStyles_1 = null;
            }
            var astDuration = innerAst.playTime;
            currentTime += astDuration;
            playTime += astDuration;
            maxDuration_1 = Math.max(astDuration, maxDuration_1);
            steps_1.push(innerAst);
            var _a;
          });
          if (isPresent(previousStyles_1)) {
            var startingStyles = new AnimationStylesAst(previousStyles_1);
            steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          }
          if (isGroup_1) {
            ast = new AnimationGroupAst(steps_1);
            playTime = maxDuration_1;
            currentTime = startingTime + playTime;
          } else {
            ast = new AnimationSequenceAst(steps_1);
          }
        } else if (entry instanceof CompileAnimationAnimateMetadata) {
          var timings = _parseTimeExpression(entry.timings, errors);
          var styles = entry.styles;
          var keyframes = void 0;
          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
            keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
          } else {
            var styleData = styles;
            var offset = _TERMINAL_KEYFRAME;
            var styleAst = new AnimationStylesAst(styleData.styles);
            var keyframe = new AnimationKeyframeAst(offset, styleAst);
            keyframes = [keyframe];
          }
          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
          playTime = timings.duration + timings.delay;
          currentTime += playTime;
          keyframes.forEach(function (keyframe) {
            return keyframe.styles.styles.forEach(function (entry) {
              return Object.keys(entry).forEach(function (prop) {
                collectedStyles.insertAtTime(prop, currentTime, entry[prop]);
              });
            });
          });
        } else {
          ast = new AnimationStepAst(null, [], 0, 0, '');
        }
        ast.playTime = playTime;
        ast.startTime = startingTime;
        return ast;
      }
      function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
        if (ast instanceof AnimationStepAst && ast.keyframes.length > 0) {
          var keyframes = ast.keyframes;
          if (keyframes.length == 1) {
            var endKeyframe = keyframes[0];
            var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
            ast.keyframes = [startKeyframe, endKeyframe];
          }
        } else if (ast instanceof AnimationWithStepsAst) {
          ast.steps.forEach(function (entry) {
            return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
          });
        }
      }
      function _parseTimeExpression(exp, errors) {
        var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
        var duration;
        var delay = 0;
        var easing = null;
        if (typeof exp === 'string') {
          var matches = exp.match(regex);
          if (matches === null) {
            errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
            return new _AnimationTimings(0, 0, null);
          }
          var durationMatch = parseFloat(matches[1]);
          var durationUnit = matches[2];
          if (durationUnit == 's') {
            durationMatch *= _ONE_SECOND;
          }
          duration = Math.floor(durationMatch);
          var delayMatch = matches[3];
          var delayUnit = matches[4];
          if (isPresent(delayMatch)) {
            var delayVal = parseFloat(delayMatch);
            if (isPresent(delayUnit) && delayUnit == 's') {
              delayVal *= _ONE_SECOND;
            }
            delay = Math.floor(delayVal);
          }
          var easingVal = matches[5];
          if (!isBlank(easingVal)) {
            easing = easingVal;
          }
        } else {
          duration = exp;
        }
        return new _AnimationTimings(duration, delay, easing);
      }
      function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
        var values = {};
        var endTime = startTime + duration;
        endKeyframe.styles.styles.forEach(function (styleData) {
          Object.keys(styleData).forEach(function (prop) {
            var val = styleData[prop];
            if (prop == 'offset') return;
            var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
            var resultEntry, nextEntry, value;
            if (isPresent(resultIndex)) {
              resultEntry = collectedStyles.getByIndex(prop, resultIndex);
              value = resultEntry.value;
              nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
            } else {
              value = FILL_STYLE_FLAG;
            }
            if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
              errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
            }
            values[prop] = value;
          });
        });
        return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
      }
      var ResourceLoader = function () {
        function ResourceLoader() {}
        ResourceLoader.prototype.get = function (url) {
          return null;
        };
        return ResourceLoader;
      }();
      var _ASSET_SCHEME = 'asset:';
      function createUrlResolverWithoutPackagePrefix() {
        return new UrlResolver();
      }
      function createOfflineCompileUrlResolver() {
        return new UrlResolver(_ASSET_SCHEME);
      }
      var DEFAULT_PACKAGE_URL_PROVIDER = {
        provide: _angular_core.PACKAGE_ROOT_URL,
        useValue: '/'
      };
      var UrlResolver = function () {
        function UrlResolver(_packagePrefix) {
          if (_packagePrefix === void 0) {
            _packagePrefix = null;
          }
          this._packagePrefix = _packagePrefix;
        }
        UrlResolver.prototype.resolve = function (baseUrl, url) {
          var resolvedUrl = url;
          if (isPresent(baseUrl) && baseUrl.length > 0) {
            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
          }
          var resolvedParts = _split(resolvedUrl);
          var prefix = this._packagePrefix;
          if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
            var path = resolvedParts[_ComponentIndex.Path];
            if (this._packagePrefix === _ASSET_SCHEME) {
              var pathSegements = path.split(/\//);
              resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
            } else {
              prefix = prefix.replace(/\/+$/, '');
              path = path.replace(/^\/+/, '');
              return prefix + "/" + path;
            }
          }
          return resolvedUrl;
        };
        UrlResolver.decorators = [{ type: _angular_core.Injectable }];
        UrlResolver.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: _angular_core.Inject,
            args: [_angular_core.PACKAGE_ROOT_URL]
          }]
        }];
        return UrlResolver;
      }();
      function getUrlScheme(url) {
        var match = _split(url);
        return match && match[_ComponentIndex.Scheme] || '';
      }
      function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
        var out = [];
        if (isPresent(opt_scheme)) {
          out.push(opt_scheme + ':');
        }
        if (isPresent(opt_domain)) {
          out.push('//');
          if (isPresent(opt_userInfo)) {
            out.push(opt_userInfo + '@');
          }
          out.push(opt_domain);
          if (isPresent(opt_port)) {
            out.push(':' + opt_port);
          }
        }
        if (isPresent(opt_path)) {
          out.push(opt_path);
        }
        if (isPresent(opt_queryData)) {
          out.push('?' + opt_queryData);
        }
        if (isPresent(opt_fragment)) {
          out.push('#' + opt_fragment);
        }
        return out.join('');
      }
      var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
      var _ComponentIndex;
      (function (_ComponentIndex) {
        _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
        _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
        _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
        _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
        _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
        _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
        _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
      })(_ComponentIndex || (_ComponentIndex = {}));
      function _split(uri) {
        return uri.match(_splitRe);
      }
      function _removeDotSegments(path) {
        if (path == '/') return '/';
        var leadingSlash = path[0] == '/' ? '/' : '';
        var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
        var segments = path.split('/');
        var out = [];
        var up = 0;
        for (var pos = 0; pos < segments.length; pos++) {
          var segment = segments[pos];
          switch (segment) {
            case '':
            case '.':
              break;
            case '..':
              if (out.length > 0) {
                out.pop();
              } else {
                up++;
              }
              break;
            default:
              out.push(segment);
          }
        }
        if (leadingSlash == '') {
          while (up-- > 0) {
            out.unshift('..');
          }
          if (out.length === 0) out.push('.');
        }
        return leadingSlash + out.join('/') + trailingSlash;
      }
      function _joinAndCanonicalizePath(parts) {
        var path = parts[_ComponentIndex.Path];
        path = isBlank(path) ? '' : _removeDotSegments(path);
        parts[_ComponentIndex.Path] = path;
        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
      }
      function _resolveUrl(base, url) {
        var parts = _split(encodeURI(url));
        var baseParts = _split(base);
        if (isPresent(parts[_ComponentIndex.Scheme])) {
          return _joinAndCanonicalizePath(parts);
        } else {
          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
        }
        for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
          if (isBlank(parts[i])) {
            parts[i] = baseParts[i];
          }
        }
        if (parts[_ComponentIndex.Path][0] == '/') {
          return _joinAndCanonicalizePath(parts);
        }
        var path = baseParts[_ComponentIndex.Path];
        if (isBlank(path)) path = '/';
        var index = path.lastIndexOf('/');
        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
        parts[_ComponentIndex.Path] = path;
        return _joinAndCanonicalizePath(parts);
      }
      var DirectiveNormalizer = function () {
        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
          this._resourceLoader = _resourceLoader;
          this._urlResolver = _urlResolver;
          this._htmlParser = _htmlParser;
          this._config = _config;
          this._resourceLoaderCache = new Map();
        }
        DirectiveNormalizer.prototype.clearCache = function () {
          this._resourceLoaderCache.clear();
        };
        DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
          var _this = this;
          if (!normalizedDirective.isComponent) {
            return;
          }
          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) {
            _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
          });
        };
        DirectiveNormalizer.prototype._fetch = function (url) {
          var result = this._resourceLoaderCache.get(url);
          if (!result) {
            result = this._resourceLoader.get(url);
            this._resourceLoaderCache.set(url, result);
          }
          return result;
        };
        DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
          var _this = this;
          var normalizedTemplateSync = null;
          var normalizedTemplateAsync;
          if (isPresent(prenormData.template)) {
            normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
            normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
          } else if (prenormData.templateUrl) {
            normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
          } else {
            throw new Error("No template specified for component " + stringify(prenormData.componentType));
          }
          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
            return new SyncAsyncResult(normalizedTemplateSync);
          } else {
            return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) {
              return _this.normalizeExternalStylesheets(normalizedTemplate);
            }));
          }
        };
        DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
          return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
        };
        DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
          var _this = this;
          var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
          return this._fetch(templateUrl).then(function (value) {
            return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
          });
        };
        DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {
          var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
          var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
          if (rootNodesAndErrors.errors.length > 0) {
            var errorString = rootNodesAndErrors.errors.join('\n');
            throw new Error("Template parse errors:\n" + errorString);
          }
          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: prenomData.styles,
            styleUrls: prenomData.styleUrls,
            moduleUrl: prenomData.moduleUrl
          }));
          var visitor = new TemplatePreparseVisitor();
          visitAll(visitor, rootNodesAndErrors.rootNodes);
          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: visitor.styles,
            styleUrls: visitor.styleUrls,
            moduleUrl: templateAbsUrl
          }));
          var encapsulation = prenomData.encapsulation;
          if (isBlank(encapsulation)) {
            encapsulation = this._config.defaultEncapsulation;
          }
          var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
          var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
            encapsulation = _angular_core.ViewEncapsulation.None;
          }
          return new CompileTemplateMetadata({
            encapsulation: encapsulation,
            template: template,
            templateUrl: templateAbsUrl,
            styles: styles,
            styleUrls: styleUrls,
            ngContentSelectors: visitor.ngContentSelectors,
            animations: prenomData.animations,
            interpolation: prenomData.interpolation
          });
        };
        DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
          return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function (externalStylesheets) {
            return new CompileTemplateMetadata({
              encapsulation: templateMeta.encapsulation,
              template: templateMeta.template,
              templateUrl: templateMeta.templateUrl,
              styles: templateMeta.styles,
              styleUrls: templateMeta.styleUrls,
              externalStylesheets: externalStylesheets,
              ngContentSelectors: templateMeta.ngContentSelectors,
              animations: templateMeta.animations,
              interpolation: templateMeta.interpolation
            });
          });
        };
        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
          var _this = this;
          if (loadedStylesheets === void 0) {
            loadedStylesheets = new Map();
          }
          return Promise.all(styleUrls.filter(function (styleUrl) {
            return !loadedStylesheets.has(styleUrl);
          }).map(function (styleUrl) {
            return _this._fetch(styleUrl).then(function (loadedStyle) {
              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
                styles: [loadedStyle],
                moduleUrl: styleUrl
              }));
              loadedStylesheets.set(styleUrl, stylesheet);
              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
            });
          })).then(function (_) {
            return Array.from(loadedStylesheets.values());
          });
        };
        DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
          var _this = this;
          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function (url) {
            return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
          });
          var allStyles = stylesheet.styles.map(function (style) {
            var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
            return styleWithImports.style;
          });
          return new CompileStylesheetMetadata({
            styles: allStyles,
            styleUrls: allStyleUrls,
            moduleUrl: stylesheet.moduleUrl
          });
        };
        DirectiveNormalizer.decorators = [{ type: _angular_core.Injectable }];
        DirectiveNormalizer.ctorParameters = [{ type: ResourceLoader }, { type: UrlResolver }, { type: HtmlParser }, { type: CompilerConfig }];
        return DirectiveNormalizer;
      }();
      var TemplatePreparseVisitor = function () {
        function TemplatePreparseVisitor() {
          this.ngContentSelectors = [];
          this.styles = [];
          this.styleUrls = [];
          this.ngNonBindableStackCount = 0;
        }
        TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
          var preparsedElement = preparseElement(ast);
          switch (preparsedElement.type) {
            case PreparsedElementType.NG_CONTENT:
              if (this.ngNonBindableStackCount === 0) {
                this.ngContentSelectors.push(preparsedElement.selectAttr);
              }
              break;
            case PreparsedElementType.STYLE:
              var textContent_1 = '';
              ast.children.forEach(function (child) {
                if (child instanceof Text) {
                  textContent_1 += child.value;
                }
              });
              this.styles.push(textContent_1);
              break;
            case PreparsedElementType.STYLESHEET:
              this.styleUrls.push(preparsedElement.hrefAttr);
              break;
            default:
              break;
          }
          if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount++;
          }
          visitAll(this, ast.children);
          if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount--;
          }
          return null;
        };
        TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitText = function (ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
          return null;
        };
        return TemplatePreparseVisitor;
      }();
      var DirectiveResolver = function () {
        function DirectiveResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        DirectiveResolver.prototype.isDirective = function (type) {
          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          return typeMetadata && typeMetadata.some(isDirectiveMetadata);
        };
        DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          if (typeMetadata) {
            var metadata = typeMetadata.find(isDirectiveMetadata);
            if (metadata) {
              var propertyMetadata = this._reflector.propMetadata(type);
              return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
            }
          }
          if (throwIfNotFound) {
            throw new Error("No Directive annotation found on " + stringify(type));
          }
          return null;
        };
        DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
          var inputs = [];
          var outputs = [];
          var host = {};
          var queries = {};
          Object.keys(propertyMetadata).forEach(function (propName) {
            propertyMetadata[propName].forEach(function (a) {
              if (a instanceof _angular_core.Input) {
                if (a.bindingPropertyName) {
                  inputs.push(propName + ": " + a.bindingPropertyName);
                } else {
                  inputs.push(propName);
                }
              } else if (a instanceof _angular_core.Output) {
                var output = a;
                if (output.bindingPropertyName) {
                  outputs.push(propName + ": " + output.bindingPropertyName);
                } else {
                  outputs.push(propName);
                }
              } else if (a instanceof _angular_core.HostBinding) {
                var hostBinding = a;
                if (hostBinding.hostPropertyName) {
                  var startWith = hostBinding.hostPropertyName[0];
                  if (startWith === '(') {
                    throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
                  } else if (startWith === '[') {
                    throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
                  }
                  host["[" + hostBinding.hostPropertyName + "]"] = propName;
                } else {
                  host["[" + propName + "]"] = propName;
                }
              } else if (a instanceof _angular_core.HostListener) {
                var hostListener = a;
                var args = hostListener.args || [];
                host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(',') + ")";
              } else if (a instanceof _angular_core.Query) {
                queries[propName] = a;
              }
            });
          });
          return this._merge(dm, inputs, outputs, host, queries, directiveType);
        };
        DirectiveResolver.prototype._extractPublicName = function (def) {
          return splitAtColon(def, [null, def])[1].trim();
        };
        DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
          var _this = this;
          var mergedInputs = inputs;
          if (directive.inputs) {
            var inputNames_1 = directive.inputs.map(function (def) {
              return _this._extractPublicName(def);
            });
            inputs.forEach(function (inputDef) {
              var publicName = _this._extractPublicName(inputDef);
              if (inputNames_1.indexOf(publicName) > -1) {
                throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
              }
            });
            mergedInputs.unshift.apply(mergedInputs, directive.inputs);
          }
          var mergedOutputs = outputs;
          if (directive.outputs) {
            var outputNames_1 = directive.outputs.map(function (def) {
              return _this._extractPublicName(def);
            });
            outputs.forEach(function (outputDef) {
              var publicName = _this._extractPublicName(outputDef);
              if (outputNames_1.indexOf(publicName) > -1) {
                throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
              }
            });
            mergedOutputs.unshift.apply(mergedOutputs, directive.outputs);
          }
          var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
          var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
          if (directive instanceof _angular_core.Component) {
            return new _angular_core.Component({
              selector: directive.selector,
              inputs: mergedInputs,
              outputs: mergedOutputs,
              host: mergedHost,
              exportAs: directive.exportAs,
              moduleId: directive.moduleId,
              queries: mergedQueries,
              changeDetection: directive.changeDetection,
              providers: directive.providers,
              viewProviders: directive.viewProviders,
              entryComponents: directive.entryComponents,
              template: directive.template,
              templateUrl: directive.templateUrl,
              styles: directive.styles,
              styleUrls: directive.styleUrls,
              encapsulation: directive.encapsulation,
              animations: directive.animations,
              interpolation: directive.interpolation
            });
          } else {
            return new _angular_core.Directive({
              selector: directive.selector,
              inputs: mergedInputs,
              outputs: mergedOutputs,
              host: mergedHost,
              exportAs: directive.exportAs,
              queries: mergedQueries,
              providers: directive.providers
            });
          }
        };
        DirectiveResolver.decorators = [{ type: _angular_core.Injectable }];
        DirectiveResolver.ctorParameters = [{ type: ReflectorReader }];
        return DirectiveResolver;
      }();
      function isDirectiveMetadata(type) {
        return type instanceof _angular_core.Directive;
      }
      function hasLifecycleHook(hook, token) {
        return reflector.hasLifecycleHook(token, getHookName(hook));
      }
      function getHookName(hook) {
        switch (hook) {
          case LifecycleHooks.OnInit:
            return 'ngOnInit';
          case LifecycleHooks.OnDestroy:
            return 'ngOnDestroy';
          case LifecycleHooks.DoCheck:
            return 'ngDoCheck';
          case LifecycleHooks.OnChanges:
            return 'ngOnChanges';
          case LifecycleHooks.AfterContentInit:
            return 'ngAfterContentInit';
          case LifecycleHooks.AfterContentChecked:
            return 'ngAfterContentChecked';
          case LifecycleHooks.AfterViewInit:
            return 'ngAfterViewInit';
          case LifecycleHooks.AfterViewChecked:
            return 'ngAfterViewChecked';
        }
      }
      function _isNgModuleMetadata(obj) {
        return obj instanceof _angular_core.NgModule;
      }
      var NgModuleResolver = function () {
        function NgModuleResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        NgModuleResolver.prototype.isNgModule = function (type) {
          return this._reflector.annotations(type).some(_isNgModuleMetadata);
        };
        NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
          if (isPresent(ngModuleMeta)) {
            return ngModuleMeta;
          } else {
            if (throwIfNotFound) {
              throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
            }
            return null;
          }
        };
        NgModuleResolver.decorators = [{ type: _angular_core.Injectable }];
        NgModuleResolver.ctorParameters = [{ type: ReflectorReader }];
        return NgModuleResolver;
      }();
      function _isPipeMetadata(type) {
        return type instanceof _angular_core.Pipe;
      }
      var PipeResolver = function () {
        function PipeResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        PipeResolver.prototype.isPipe = function (type) {
          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          return typeMetadata && typeMetadata.some(_isPipeMetadata);
        };
        PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          if (isPresent(metas)) {
            var annotation = metas.find(_isPipeMetadata);
            if (isPresent(annotation)) {
              return annotation;
            }
          }
          if (throwIfNotFound) {
            throw new Error("No Pipe decorator found on " + stringify(type));
          }
          return null;
        };
        PipeResolver.decorators = [{ type: _angular_core.Injectable }];
        PipeResolver.ctorParameters = [{ type: ReflectorReader }];
        return PipeResolver;
      }();
      var __extends$17 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var CompileMetadataResolver = function () {
        function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _directiveNormalizer, _reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._ngModuleResolver = _ngModuleResolver;
          this._directiveResolver = _directiveResolver;
          this._pipeResolver = _pipeResolver;
          this._schemaRegistry = _schemaRegistry;
          this._directiveNormalizer = _directiveNormalizer;
          this._reflector = _reflector;
          this._directiveCache = new Map();
          this._directiveSummaryCache = new Map();
          this._pipeCache = new Map();
          this._pipeSummaryCache = new Map();
          this._ngModuleCache = new Map();
          this._ngModuleOfTypes = new Map();
          this._anonymousTypes = new Map();
          this._anonymousTypeIndex = 0;
        }
        CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {
          var identifier = stringify(token);
          if (identifier.indexOf('(') >= 0) {
            var found = this._anonymousTypes.get(token);
            if (!found) {
              this._anonymousTypes.set(token, this._anonymousTypeIndex++);
              found = this._anonymousTypes.get(token);
            }
            identifier = "anonymous_token_" + found + "_";
          }
          return sanitizeIdentifier(identifier);
        };
        CompileMetadataResolver.prototype.clearCacheFor = function (type) {
          var dirMeta = this._directiveCache.get(type);
          this._directiveCache.delete(type);
          this._directiveSummaryCache.delete(type);
          this._pipeCache.delete(type);
          this._pipeSummaryCache.delete(type);
          this._ngModuleOfTypes.delete(type);
          this._ngModuleCache.clear();
          if (dirMeta) {
            this._directiveNormalizer.clearCacheFor(dirMeta);
          }
        };
        CompileMetadataResolver.prototype.clearCache = function () {
          this._directiveCache.clear();
          this._directiveSummaryCache.clear();
          this._pipeCache.clear();
          this._pipeSummaryCache.clear();
          this._ngModuleCache.clear();
          this._ngModuleOfTypes.clear();
          this._directiveNormalizer.clearCache();
        };
        CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
          var _this = this;
          var defs = entry.definitions.map(function (def) {
            return _this._getAnimationStateMetadata(def);
          });
          return new CompileAnimationEntryMetadata(entry.name, defs);
        };
        CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) {
          if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
            var styles = this._getAnimationStyleMetadata(value.styles);
            return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
          }
          if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
            return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
          }
          return null;
        };
        CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) {
          return new CompileAnimationStyleMetadata(value.offset, value.styles);
        };
        CompileMetadataResolver.prototype._getAnimationMetadata = function (value) {
          var _this = this;
          if (value instanceof _angular_core.AnimationStyleMetadata) {
            return this._getAnimationStyleMetadata(value);
          }
          if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
            return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) {
              return _this._getAnimationStyleMetadata(entry);
            }));
          }
          if (value instanceof _angular_core.AnimationAnimateMetadata) {
            var animateData = this._getAnimationMetadata(value.styles);
            return new CompileAnimationAnimateMetadata(value.timings, animateData);
          }
          if (value instanceof _angular_core.AnimationWithStepsMetadata) {
            var steps = value.steps.map(function (step) {
              return _this._getAnimationMetadata(step);
            });
            if (value instanceof _angular_core.AnimationGroupMetadata) {
              return new CompileAnimationGroupMetadata(steps);
            }
            return new CompileAnimationSequenceMetadata(steps);
          }
          return null;
        };
        CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {
          var _this = this;
          if (this._directiveCache.has(directiveType)) {
            return;
          }
          directiveType = _angular_core.resolveForwardRef(directiveType);
          var nonNormalizedMetadata = this.getNonNormalizedDirectiveMetadata(directiveType);
          var createDirectiveMetadata = function (templateMetadata) {
            var normalizedDirMeta = new CompileDirectiveMetadata({
              type: nonNormalizedMetadata.type,
              isComponent: nonNormalizedMetadata.isComponent,
              selector: nonNormalizedMetadata.selector,
              exportAs: nonNormalizedMetadata.exportAs,
              changeDetection: nonNormalizedMetadata.changeDetection,
              inputs: nonNormalizedMetadata.inputs,
              outputs: nonNormalizedMetadata.outputs,
              hostListeners: nonNormalizedMetadata.hostListeners,
              hostProperties: nonNormalizedMetadata.hostProperties,
              hostAttributes: nonNormalizedMetadata.hostAttributes,
              providers: nonNormalizedMetadata.providers,
              viewProviders: nonNormalizedMetadata.viewProviders,
              queries: nonNormalizedMetadata.queries,
              viewQueries: nonNormalizedMetadata.viewQueries,
              entryComponents: nonNormalizedMetadata.entryComponents,
              template: templateMetadata
            });
            _this._directiveCache.set(directiveType, normalizedDirMeta);
            _this._directiveSummaryCache.set(directiveType, normalizedDirMeta.toSummary());
            return normalizedDirMeta;
          };
          if (nonNormalizedMetadata.isComponent) {
            var templateMeta = this._directiveNormalizer.normalizeTemplate({
              componentType: directiveType,
              moduleUrl: nonNormalizedMetadata.type.moduleUrl,
              encapsulation: nonNormalizedMetadata.template.encapsulation,
              template: nonNormalizedMetadata.template.template,
              templateUrl: nonNormalizedMetadata.template.templateUrl,
              styles: nonNormalizedMetadata.template.styles,
              styleUrls: nonNormalizedMetadata.template.styleUrls,
              animations: nonNormalizedMetadata.template.animations,
              interpolation: nonNormalizedMetadata.template.interpolation
            });
            if (templateMeta.syncResult) {
              createDirectiveMetadata(templateMeta.syncResult);
              return null;
            } else {
              if (isSync) {
                throw new ComponentStillLoadingError(directiveType);
              }
              return templateMeta.asyncResult.then(createDirectiveMetadata);
            }
          } else {
            createDirectiveMetadata(null);
            return null;
          }
        };
        CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
          var _this = this;
          directiveType = _angular_core.resolveForwardRef(directiveType);
          var dirMeta = this._directiveResolver.resolve(directiveType);
          if (!dirMeta) {
            return null;
          }
          var moduleUrl = staticTypeModuleUrl(directiveType);
          var nonNormalizedTemplateMetadata;
          if (dirMeta instanceof _angular_core.Component) {
            moduleUrl = componentModuleUrl(this._reflector, directiveType, dirMeta);
            assertArrayOfStrings('styles', dirMeta.styles);
            assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
            assertInterpolationSymbols('interpolation', dirMeta.interpolation);
            var animations = dirMeta.animations ? dirMeta.animations.map(function (e) {
              return _this.getAnimationEntryMetadata(e);
            }) : null;
            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
              encapsulation: dirMeta.encapsulation,
              template: dirMeta.template,
              templateUrl: dirMeta.templateUrl,
              styles: dirMeta.styles,
              styleUrls: dirMeta.styleUrls,
              animations: animations,
              interpolation: dirMeta.interpolation
            });
          }
          var changeDetectionStrategy = null;
          var viewProviders = [];
          var entryComponentMetadata = [];
          var selector = dirMeta.selector;
          if (dirMeta instanceof _angular_core.Component) {
            changeDetectionStrategy = dirMeta.changeDetection;
            if (dirMeta.viewProviders) {
              viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
            }
            if (dirMeta.entryComponents) {
              entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function (type) {
                return _this._getIdentifierMetadata(type, staticTypeModuleUrl(type));
              }).concat(entryComponentMetadata);
            }
            if (!selector) {
              selector = this._schemaRegistry.getDefaultComponentElementName();
            }
          } else {
            if (!selector) {
              throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
            }
          }
          var providers = [];
          if (isPresent(dirMeta.providers)) {
            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
          }
          var queries = [];
          var viewQueries = [];
          if (isPresent(dirMeta.queries)) {
            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
          }
          return CompileDirectiveMetadata.create({
            selector: selector,
            exportAs: dirMeta.exportAs,
            isComponent: !!nonNormalizedTemplateMetadata,
            type: this._getTypeMetadata(directiveType, moduleUrl),
            template: nonNormalizedTemplateMetadata,
            changeDetection: changeDetectionStrategy,
            inputs: dirMeta.inputs,
            outputs: dirMeta.outputs,
            host: dirMeta.host,
            providers: providers,
            viewProviders: viewProviders,
            queries: queries,
            viewQueries: viewQueries,
            entryComponents: entryComponentMetadata
          });
        };
        CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
          var dirMeta = this._directiveCache.get(directiveType);
          if (!dirMeta) {
            throw new Error("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringify(directiveType) + ".");
          }
          return dirMeta;
        };
        CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
          var dirSummary = this._directiveSummaryCache.get(dirType);
          if (!dirSummary) {
            throw new Error("Illegal state: getDirectiveSummary can only be called after loadNgModuleMetadata for a module that imports it. Directive " + stringify(dirType) + ".");
          }
          return dirSummary;
        };
        CompileMetadataResolver.prototype.isDirective = function (type) {
          return this._directiveResolver.isDirective(type);
        };
        CompileMetadataResolver.prototype.isPipe = function (type) {
          return this._pipeResolver.isPipe(type);
        };
        CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType) {
          var modMeta = this._ngModuleCache.get(moduleType);
          if (!modMeta) {
            throw new Error("Illegal state: getNgModuleMetadata can only be called after loadNgModuleMetadata. Module " + stringify(moduleType) + ".");
          }
          return modMeta;
        };
        CompileMetadataResolver.prototype._loadNgModuleSummary = function (moduleType, isSync) {
          var moduleMeta = this._loadNgModuleMetadata(moduleType, isSync, false);
          return moduleMeta ? moduleMeta.toSummary() : null;
        };
        CompileMetadataResolver.prototype.loadNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var ngModule = this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
          var loading = ngModule ? Promise.all(ngModule.transitiveModule.directiveLoaders.map(function (loader) {
            return loader();
          })) : Promise.resolve(null);
          return {
            ngModule: ngModule,
            loading: loading
          };
        };
        CompileMetadataResolver.prototype.getUnloadedNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          return this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
        };
        CompileMetadataResolver.prototype._loadNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
          var _this = this;
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          moduleType = _angular_core.resolveForwardRef(moduleType);
          var compileMeta = this._ngModuleCache.get(moduleType);
          if (compileMeta) {
            return compileMeta;
          }
          var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
          if (!meta) {
            return null;
          }
          var declaredDirectives = [];
          var exportedNonModuleIdentifiers = [];
          var declaredPipes = [];
          var importedModules = [];
          var exportedModules = [];
          var providers = [];
          var entryComponents = [];
          var bootstrapComponents = [];
          var schemas = [];
          if (meta.imports) {
            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
              var importedModuleType;
              if (isValidType(importedType)) {
                importedModuleType = importedType;
              } else if (importedType && importedType.ngModule) {
                var moduleWithProviders = importedType;
                importedModuleType = moduleWithProviders.ngModule;
                if (moduleWithProviders.providers) {
                  providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
                }
              }
              if (importedModuleType) {
                var importedModuleSummary = _this._loadNgModuleSummary(importedModuleType, isSync);
                if (!importedModuleSummary) {
                  throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
                }
                importedModules.push(importedModuleSummary);
              } else {
                throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
              }
            });
          }
          if (meta.exports) {
            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
              if (!isValidType(exportedType)) {
                throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
              }
              var exportedModuleSummary = _this._loadNgModuleSummary(exportedType, isSync);
              if (exportedModuleSummary) {
                exportedModules.push(exportedModuleSummary);
              } else {
                exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType, staticTypeModuleUrl(exportedType)));
              }
            });
          }
          var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
          if (meta.declarations) {
            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
              if (!isValidType(declaredType)) {
                throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
              }
              var declaredIdentifier = _this._getIdentifierMetadata(declaredType, staticTypeModuleUrl(declaredType));
              if (_this._directiveResolver.isDirective(declaredType)) {
                transitiveModule.directivesSet.add(declaredType);
                transitiveModule.directives.push(declaredIdentifier);
                declaredDirectives.push(declaredIdentifier);
                _this._addTypeToModule(declaredType, moduleType);
                transitiveModule.directiveLoaders.push(function () {
                  return _this._loadDirectiveMetadata(declaredType, isSync);
                });
              } else if (_this._pipeResolver.isPipe(declaredType)) {
                transitiveModule.pipesSet.add(declaredType);
                transitiveModule.pipes.push(declaredIdentifier);
                declaredPipes.push(declaredIdentifier);
                _this._addTypeToModule(declaredType, moduleType);
                _this._loadPipeMetadata(declaredType);
              } else {
                throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
              }
            });
          }
          var exportedDirectives = [];
          var exportedPipes = [];
          exportedNonModuleIdentifiers.forEach(function (exportedId) {
            if (transitiveModule.directivesSet.has(exportedId.reference)) {
              exportedDirectives.push(exportedId);
            } else if (transitiveModule.pipesSet.has(exportedId.reference)) {
              exportedPipes.push(exportedId);
            } else {
              throw new Error("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringify(exportedId.reference) + " from " + stringify(moduleType) + " as it was neither declared nor imported!");
            }
          });
          if (meta.providers) {
            providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringify(moduleType) + "'"));
          }
          if (meta.entryComponents) {
            entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function (type) {
              return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
            }));
          }
          if (meta.bootstrap) {
            var typeMetadata = flattenAndDedupeArray(meta.bootstrap).map(function (type) {
              if (!isValidType(type)) {
                throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
              }
              return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
            });
            bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
          }
          entryComponents.push.apply(entryComponents, bootstrapComponents);
          if (meta.schemas) {
            schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
          }
          (_a = transitiveModule.entryComponents).push.apply(_a, entryComponents);
          (_b = transitiveModule.providers).push.apply(_b, providers);
          compileMeta = new CompileNgModuleMetadata({
            type: this._getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
            providers: providers,
            entryComponents: entryComponents,
            bootstrapComponents: bootstrapComponents,
            schemas: schemas,
            declaredDirectives: declaredDirectives,
            exportedDirectives: exportedDirectives,
            declaredPipes: declaredPipes,
            exportedPipes: exportedPipes,
            importedModules: importedModules,
            exportedModules: exportedModules,
            transitiveModule: transitiveModule,
            id: meta.id
          });
          transitiveModule.modules.push(compileMeta.toInjectorSummary());
          this._ngModuleCache.set(moduleType, compileMeta);
          return compileMeta;
          var _a, _b;
        };
        CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
          if (this._directiveResolver.isDirective(type)) {
            return 'directive';
          }
          if (this._pipeResolver.isPipe(type)) {
            return 'pipe';
          }
          if (this._ngModuleResolver.isNgModule(type)) {
            return 'module';
          }
          if (type.provide) {
            return 'provider';
          }
          return 'value';
        };
        CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
          var oldModule = this._ngModuleOfTypes.get(type);
          if (oldModule && oldModule !== moduleType) {
            throw new Error("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! " + ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
          }
          this._ngModuleOfTypes.set(type, moduleType);
        };
        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
          var transitiveModules = getTransitiveImportedModules(importedModules.concat(exportedModules));
          var providers = flattenArray(transitiveModules.map(function (ngModule) {
            return ngModule.providers;
          }));
          var entryComponents = flattenArray(transitiveModules.map(function (ngModule) {
            return ngModule.entryComponents;
          }));
          var transitiveExportedModules = getTransitiveExportedModules(importedModules);
          var directives = flattenArray(transitiveExportedModules.map(function (ngModule) {
            return ngModule.exportedDirectives;
          }));
          var pipes = flattenArray(transitiveExportedModules.map(function (ngModule) {
            return ngModule.exportedPipes;
          }));
          var directiveLoaders = ListWrapper.flatten(transitiveExportedModules.map(function (ngModule) {
            return ngModule.directiveLoaders;
          }));
          return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes, directiveLoaders);
        };
        CompileMetadataResolver.prototype._getIdentifierMetadata = function (type, moduleUrl) {
          type = _angular_core.resolveForwardRef(type);
          return new CompileIdentifierMetadata({
            name: this.sanitizeTokenName(type),
            moduleUrl: moduleUrl,
            reference: type
          });
        };
        CompileMetadataResolver.prototype._getTypeMetadata = function (type, moduleUrl, dependencies) {
          if (dependencies === void 0) {
            dependencies = null;
          }
          var identifier = this._getIdentifierMetadata(type, moduleUrl);
          return new CompileTypeMetadata({
            name: identifier.name,
            moduleUrl: identifier.moduleUrl,
            reference: identifier.reference,
            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
            lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) {
              return hasLifecycleHook(hook, identifier.reference);
            })
          });
        };
        CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, moduleUrl, dependencies) {
          if (dependencies === void 0) {
            dependencies = null;
          }
          factory = _angular_core.resolveForwardRef(factory);
          return new CompileFactoryMetadata({
            name: this.sanitizeTokenName(factory),
            moduleUrl: moduleUrl,
            reference: factory,
            diDeps: this._getDependenciesMetadata(factory, dependencies)
          });
        };
        CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
          var pipeMeta = this._pipeCache.get(pipeType);
          if (!pipeMeta) {
            throw new Error("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringify(pipeType) + ".");
          }
          return pipeMeta;
        };
        CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
          var pipeSummary = this._pipeSummaryCache.get(pipeType);
          if (!pipeSummary) {
            throw new Error("Illegal state: getPipeSummary can only be called after loadNgModuleMetadata for a module that imports it. Pipe " + stringify(pipeType) + ".");
          }
          return pipeSummary;
        };
        CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
          var pipeMeta = this._pipeCache.get(pipeType);
          if (!pipeMeta) {
            pipeMeta = this._loadPipeMetadata(pipeType);
          }
          return pipeMeta;
        };
        CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
          pipeType = _angular_core.resolveForwardRef(pipeType);
          var pipeAnnotation = this._pipeResolver.resolve(pipeType);
          var pipeMeta = new CompilePipeMetadata({
            type: this._getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
            name: pipeAnnotation.name,
            pure: pipeAnnotation.pure
          });
          this._pipeCache.set(pipeType, pipeMeta);
          this._pipeSummaryCache.set(pipeType, pipeMeta.toSummary());
          return pipeMeta;
        };
        CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {
          var _this = this;
          var hasUnknownDeps = false;
          var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
          var dependenciesMetadata = params.map(function (param) {
            var isAttribute = false;
            var isHost = false;
            var isSelf = false;
            var isSkipSelf = false;
            var isOptional = false;
            var token = null;
            if (Array.isArray(param)) {
              param.forEach(function (paramEntry) {
                if (paramEntry instanceof _angular_core.Host) {
                  isHost = true;
                } else if (paramEntry instanceof _angular_core.Self) {
                  isSelf = true;
                } else if (paramEntry instanceof _angular_core.SkipSelf) {
                  isSkipSelf = true;
                } else if (paramEntry instanceof _angular_core.Optional) {
                  isOptional = true;
                } else if (paramEntry instanceof _angular_core.Attribute) {
                  isAttribute = true;
                  token = paramEntry.attributeName;
                } else if (paramEntry instanceof _angular_core.Inject) {
                  token = paramEntry.token;
                } else if (isValidType(paramEntry) && isBlank(token)) {
                  token = paramEntry;
                }
              });
            } else {
              token = param;
            }
            if (isBlank(token)) {
              hasUnknownDeps = true;
              return null;
            }
            return new CompileDiDependencyMetadata({
              isAttribute: isAttribute,
              isHost: isHost,
              isSelf: isSelf,
              isSkipSelf: isSkipSelf,
              isOptional: isOptional,
              token: _this._getTokenMetadata(token)
            });
          });
          if (hasUnknownDeps) {
            var depsTokens = dependenciesMetadata.map(function (dep) {
              return dep ? stringify(dep.token) : '?';
            }).join(', ');
            throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
          }
          return dependenciesMetadata;
        };
        CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
          token = _angular_core.resolveForwardRef(token);
          var compileToken;
          if (typeof token === 'string') {
            compileToken = new CompileTokenMetadata({ value: token });
          } else {
            compileToken = new CompileTokenMetadata({ identifier: new CompileIdentifierMetadata({
                reference: token,
                name: this.sanitizeTokenName(token),
                moduleUrl: staticTypeModuleUrl(token)
              }) });
          }
          return compileToken;
        };
        CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo) {
          var _this = this;
          var compileProviders = [];
          providers.forEach(function (provider, providerIdx) {
            provider = _angular_core.resolveForwardRef(provider);
            if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
              provider = new ProviderMeta(provider.provide, provider);
            }
            var compileProvider;
            if (Array.isArray(provider)) {
              compileProvider = _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo);
            } else if (provider instanceof ProviderMeta) {
              var tokenMeta = _this._getTokenMetadata(provider.token);
              if (tokenMeta.reference === resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
                targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
              } else {
                compileProvider = _this.getProviderMetadata(provider);
              }
            } else if (isValidType(provider)) {
              compileProvider = _this._getTypeMetadata(provider, staticTypeModuleUrl(provider));
            } else {
              var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
                if (seenProviderIdx < providerIdx) {
                  soFar.push("" + stringify(seenProvider));
                } else if (seenProviderIdx == providerIdx) {
                  soFar.push("?" + stringify(seenProvider) + "?");
                } else if (seenProviderIdx == providerIdx + 1) {
                  soFar.push('...');
                }
                return soFar;
              }, []).join(', ');
              throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
            }
            if (compileProvider) {
              compileProviders.push(compileProvider);
            }
          });
          return compileProviders;
        };
        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider) {
          var _this = this;
          var components = [];
          var collectedIdentifiers = [];
          if (provider.useFactory || provider.useExisting || provider.useClass) {
            throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
          }
          if (!provider.multi) {
            throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
          }
          convertToCompileValue(provider.useValue, collectedIdentifiers);
          collectedIdentifiers.forEach(function (identifier) {
            if (_this._directiveResolver.isDirective(identifier.reference)) {
              components.push(identifier);
            }
          });
          return components;
        };
        CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
          var compileDeps;
          var compileTypeMetadata = null;
          var compileFactoryMetadata = null;
          if (provider.useClass) {
            compileTypeMetadata = this._getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
            compileDeps = compileTypeMetadata.diDeps;
          } else if (provider.useFactory) {
            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
            compileDeps = compileFactoryMetadata.diDeps;
          }
          return new CompileProviderMetadata({
            token: this._getTokenMetadata(provider.token),
            useClass: compileTypeMetadata,
            useValue: convertToCompileValue(provider.useValue, []),
            useFactory: compileFactoryMetadata,
            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
            deps: compileDeps,
            multi: provider.multi
          });
        };
        CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
          var _this = this;
          var res = [];
          Object.keys(queries).forEach(function (propertyName) {
            var query = queries[propertyName];
            if (query.isViewQuery === isViewQuery) {
              res.push(_this._getQueryMetadata(query, propertyName, directiveType));
            }
          });
          return res;
        };
        CompileMetadataResolver.prototype._queryVarBindings = function (selector) {
          return selector.split(/\s*,\s*/);
        };
        CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
          var _this = this;
          var selectors;
          if (typeof q.selector === 'string') {
            selectors = this._queryVarBindings(q.selector).map(function (varName) {
              return _this._getTokenMetadata(varName);
            });
          } else {
            if (!q.selector) {
              throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
            }
            selectors = [this._getTokenMetadata(q.selector)];
          }
          return new CompileQueryMetadata({
            selectors: selectors,
            first: q.first,
            descendants: q.descendants,
            propertyName: propertyName,
            read: q.read ? this._getTokenMetadata(q.read) : null
          });
        };
        CompileMetadataResolver.decorators = [{ type: _angular_core.Injectable }];
        CompileMetadataResolver.ctorParameters = [{ type: NgModuleResolver }, { type: DirectiveResolver }, { type: PipeResolver }, { type: ElementSchemaRegistry }, { type: DirectiveNormalizer }, { type: ReflectorReader }];
        return CompileMetadataResolver;
      }();
      function getTransitiveExportedModules(modules, targetModules, visitedModules) {
        if (targetModules === void 0) {
          targetModules = [];
        }
        if (visitedModules === void 0) {
          visitedModules = new Set();
        }
        modules.forEach(function (ngModule) {
          if (!visitedModules.has(ngModule.type.reference)) {
            visitedModules.add(ngModule.type.reference);
            getTransitiveExportedModules(ngModule.exportedModules, targetModules, visitedModules);
            targetModules.push(ngModule);
          }
        });
        return targetModules;
      }
      function getTransitiveImportedModules(modules, targetModules, visitedModules) {
        if (targetModules === void 0) {
          targetModules = [];
        }
        if (visitedModules === void 0) {
          visitedModules = new Set();
        }
        modules.forEach(function (ngModule) {
          if (!visitedModules.has(ngModule.type.reference)) {
            visitedModules.add(ngModule.type.reference);
            var nestedModules = ngModule.importedModules.concat(ngModule.exportedModules);
            getTransitiveImportedModules(nestedModules, targetModules, visitedModules);
            targetModules.push(ngModule);
          }
        });
        return targetModules;
      }
      function flattenArray(tree, out) {
        if (out === void 0) {
          out = [];
        }
        if (tree) {
          for (var i = 0; i < tree.length; i++) {
            var item = _angular_core.resolveForwardRef(tree[i]);
            if (Array.isArray(item)) {
              flattenArray(item, out);
            } else {
              out.push(item);
            }
          }
        }
        return out;
      }
      function dedupeArray(array) {
        if (array) {
          return Array.from(new Set(array));
        }
        return [];
      }
      function flattenAndDedupeArray(tree) {
        return dedupeArray(flattenArray(tree));
      }
      function isValidType(value) {
        return isStaticSymbol(value) || value instanceof _angular_core.Type;
      }
      function staticTypeModuleUrl(value) {
        return isStaticSymbol(value) ? value.filePath : null;
      }
      function componentModuleUrl(reflector, type, cmpMetadata) {
        if (isStaticSymbol(type)) {
          return staticTypeModuleUrl(type);
        }
        var moduleId = cmpMetadata.moduleId;
        if (typeof moduleId === 'string') {
          var scheme = getUrlScheme(moduleId);
          return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
        } else if (moduleId !== null && moduleId !== void 0) {
          throw new Error("moduleId should be a string in \"" + stringify(type) + "\". See https://goo.gl/wIDDiL for more information.\n" + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
        }
        return reflector.importUri(type);
      }
      function convertToCompileValue(value, targetIdentifiers) {
        return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
      }
      var _CompileValueConverter = function (_super) {
        __extends$17(_CompileValueConverter, _super);
        function _CompileValueConverter() {
          _super.apply(this, arguments);
        }
        _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
          var identifier;
          if (isStaticSymbol(value)) {
            identifier = new CompileIdentifierMetadata({
              name: value.name,
              moduleUrl: value.filePath,
              reference: value
            });
          } else {
            identifier = new CompileIdentifierMetadata({ reference: value });
          }
          targetIdentifiers.push(identifier);
          return identifier;
        };
        return _CompileValueConverter;
      }(ValueTransformer);
      var ComponentFactoryDependency$1 = function () {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }();
      var NgModuleCompileResult = function () {
        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
          this.statements = statements;
          this.ngModuleFactoryVar = ngModuleFactoryVar;
          this.dependencies = dependencies;
        }
        return NgModuleCompileResult;
      }();
      var NgModuleCompiler = function () {
        function NgModuleCompiler() {}
        NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
          var sourceFile = new ParseSourceFile('', sourceFileName);
          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
          var deps = [];
          var bootstrapComponentFactories = [];
          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
            var id = new CompileIdentifierMetadata({ name: entryComponent.name });
            if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
              bootstrapComponentFactories.push(id);
            }
            deps.push(new ComponentFactoryDependency$1(entryComponent, id));
            return id;
          });
          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
          providerParser.parse().forEach(function (provider) {
            return builder.addProvider(provider);
          });
          var injectorClass = builder.build();
          var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
          var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
          var stmts = [injectorClass, ngModuleFactoryStmt];
          if (ngModuleMeta.id) {
            var registerFactoryStmt = importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt();
            stmts.push(registerFactoryStmt);
          }
          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
        };
        NgModuleCompiler.decorators = [{ type: _angular_core.Injectable }];
        NgModuleCompiler.ctorParameters = [];
        return NgModuleCompiler;
      }();
      var _InjectorBuilder = function () {
        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
          this._ngModuleMeta = _ngModuleMeta;
          this._entryComponentFactories = _entryComponentFactories;
          this._bootstrapComponentFactories = _bootstrapComponentFactories;
          this._sourceSpan = _sourceSpan;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          this._tokens = [];
          this._instances = new Map();
          this._createStmts = [];
          this._destroyStmts = [];
        }
        _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
          var _this = this;
          var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
            return _this._getProviderValue(provider);
          });
          var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
            this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
          }
          this._tokens.push(resolvedProvider.token);
          this._instances.set(resolvedProvider.token.reference, instance);
        };
        _InjectorBuilder.prototype.build = function () {
          var _this = this;
          var getMethodStmts = this._tokens.map(function (token) {
            var providerExpr = _this._instances.get(token.reference);
            return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
          });
          var methods = [new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod('getInternal', [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod('destroyInternal', [], this._destroyStmts)];
          var parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function (componentFactory) {
            return importExpr(componentFactory);
          })), literalArr(this._bootstrapComponentFactories.map(function (componentFactory) {
            return importExpr(componentFactory);
          }))];
          var injClassName = this._ngModuleMeta.type.name + "Injector";
          return createClassStmt({
            name: injClassName,
            ctorParams: [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))],
            parent: importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
            parentArgs: parentArgs,
            builders: [{ methods: methods }, this]
          });
        };
        _InjectorBuilder.prototype._getProviderValue = function (provider) {
          var _this = this;
          var result;
          if (isPresent(provider.useExisting)) {
            result = this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }));
          } else if (isPresent(provider.useFactory)) {
            var deps = provider.deps || provider.useFactory.diDeps;
            var depsExpr = deps.map(function (dep) {
              return _this._getDependency(dep);
            });
            result = importExpr(provider.useFactory).callFn(depsExpr);
          } else if (isPresent(provider.useClass)) {
            var deps = provider.deps || provider.useClass.diDeps;
            var depsExpr = deps.map(function (dep) {
              return _this._getDependency(dep);
            });
            result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
          } else {
            result = convertValueToOutputAst(provider.useValue);
          }
          return result;
        };
        _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
          var resolvedProviderValueExpr;
          var type;
          if (isMulti) {
            resolvedProviderValueExpr = literalArr(providerValueExpressions);
            type = new ArrayType(DYNAMIC_TYPE);
          } else {
            resolvedProviderValueExpr = providerValueExpressions[0];
            type = providerValueExpressions[0].type;
          }
          if (!type) {
            type = DYNAMIC_TYPE;
          }
          if (isEager) {
            this.fields.push(new ClassField(propName, type));
            this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
          } else {
            var internalField = "_" + propName;
            this.fields.push(new ClassField(internalField, type));
            var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
            this.getters.push(new ClassGetter(propName, getterStmts, type));
          }
          return THIS_EXPR.prop(propName);
        };
        _InjectorBuilder.prototype._getDependency = function (dep) {
          var result = null;
          if (dep.isValue) {
            result = literal(dep.value);
          }
          if (!dep.isSkipSelf) {
            if (dep.token && (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
              result = THIS_EXPR;
            }
            if (!result) {
              result = this._instances.get(dep.token.reference);
            }
          }
          if (!result) {
            var args = [createDiTokenExpression(dep.token)];
            if (dep.isOptional) {
              args.push(NULL_EXPR);
            }
            result = InjectorProps.parent.callMethod('get', args);
          }
          return result;
        };
        return _InjectorBuilder;
      }();
      var InjectorProps = function () {
        function InjectorProps() {}
        InjectorProps.parent = THIS_EXPR.prop('parent');
        return InjectorProps;
      }();
      var InjectMethodVars$1 = function () {
        function InjectMethodVars() {}
        InjectMethodVars.token = variable('token');
        InjectMethodVars.notFoundResult = variable('notFoundResult');
        return InjectMethodVars;
      }();
      var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
      var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
      var CATCH_ERROR_VAR$2 = variable('error');
      var CATCH_STACK_VAR$2 = variable('stack');
      var _EmittedLine = function () {
        function _EmittedLine(indent) {
          this.indent = indent;
          this.parts = [];
        }
        return _EmittedLine;
      }();
      var EmitterVisitorContext = function () {
        function EmitterVisitorContext(_exportedVars, _indent) {
          this._exportedVars = _exportedVars;
          this._indent = _indent;
          this._classes = [];
          this._lines = [new _EmittedLine(_indent)];
        }
        EmitterVisitorContext.createRoot = function (exportedVars) {
          return new EmitterVisitorContext(exportedVars, 0);
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
          get: function () {
            return this._lines[this._lines.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        EmitterVisitorContext.prototype.isExportedVar = function (varName) {
          return this._exportedVars.indexOf(varName) !== -1;
        };
        EmitterVisitorContext.prototype.println = function (lastPart) {
          if (lastPart === void 0) {
            lastPart = '';
          }
          this.print(lastPart, true);
        };
        EmitterVisitorContext.prototype.lineIsEmpty = function () {
          return this._currentLine.parts.length === 0;
        };
        EmitterVisitorContext.prototype.print = function (part, newLine) {
          if (newLine === void 0) {
            newLine = false;
          }
          if (part.length > 0) {
            this._currentLine.parts.push(part);
          }
          if (newLine) {
            this._lines.push(new _EmittedLine(this._indent));
          }
        };
        EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
          if (this.lineIsEmpty()) {
            this._lines.pop();
          }
        };
        EmitterVisitorContext.prototype.incIndent = function () {
          this._indent++;
          this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.decIndent = function () {
          this._indent--;
          this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.pushClass = function (clazz) {
          this._classes.push(clazz);
        };
        EmitterVisitorContext.prototype.popClass = function () {
          return this._classes.pop();
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
          get: function () {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
          },
          enumerable: true,
          configurable: true
        });
        EmitterVisitorContext.prototype.toSource = function () {
          var lines = this._lines;
          if (lines[lines.length - 1].parts.length === 0) {
            lines = lines.slice(0, lines.length - 1);
          }
          return lines.map(function (line) {
            if (line.parts.length > 0) {
              return _createIndent(line.indent) + line.parts.join('');
            } else {
              return '';
            }
          }).join('\n');
        };
        return EmitterVisitorContext;
      }();
      var AbstractEmitterVisitor = function () {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
          this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
          stmt.expr.visitExpression(this, ctx);
          ctx.println(';');
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
          ctx.print("return ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(';');
          return null;
        };
        AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
          ctx.print("if (");
          stmt.condition.visitExpression(this, ctx);
          ctx.print(") {");
          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
          if (stmt.trueCase.length <= 1 && !hasElseCase) {
            ctx.print(" ");
            this.visitAllStatements(stmt.trueCase, ctx);
            ctx.removeEmptyLastLine();
            ctx.print(" ");
          } else {
            ctx.println();
            ctx.incIndent();
            this.visitAllStatements(stmt.trueCase, ctx);
            ctx.decIndent();
            if (hasElseCase) {
              ctx.println("} else {");
              ctx.incIndent();
              this.visitAllStatements(stmt.falseCase, ctx);
              ctx.decIndent();
            }
          }
          ctx.println("}");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
          ctx.print("throw ");
          stmt.error.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
          var lines = stmt.comment.split('\n');
          lines.forEach(function (line) {
            ctx.println("// " + line);
          });
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          ctx.print(expr.name + " = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print("[");
          expr.index.visitExpression(this, ctx);
          ctx.print("] = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print("." + expr.name + " = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
          expr.receiver.visitExpression(this, ctx);
          var name = expr.name;
          if (isPresent(expr.builtin)) {
            name = this.getBuiltinMethodName(expr.builtin);
            if (isBlank(name)) {
              return null;
            }
          }
          ctx.print("." + name + "(");
          this.visitAllExpressions(expr.args, ctx, ",");
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
          expr.fn.visitExpression(this, ctx);
          ctx.print("(");
          this.visitAllExpressions(expr.args, ctx, ',');
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin)) {
            switch (ast.builtin) {
              case BuiltinVar.Super:
                varName = 'super';
                break;
              case BuiltinVar.This:
                varName = 'this';
                break;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$2.name;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$2.name;
                break;
              default:
                throw new Error("Unknown builtin variable " + ast.builtin);
            }
          }
          ctx.print(varName);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
          ctx.print("new ");
          ast.classExpr.visitExpression(this, ctx);
          ctx.print("(");
          this.visitAllExpressions(ast.args, ctx, ',');
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
          var value = ast.value;
          if (typeof value === 'string') {
            ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
          } else {
            ctx.print("" + value);
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
          ctx.print("(");
          ast.condition.visitExpression(this, ctx);
          ctx.print('? ');
          ast.trueCase.visitExpression(this, ctx);
          ctx.print(': ');
          ast.falseCase.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
          ctx.print('!');
          ast.condition.visitExpression(this, ctx);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
          var opStr;
          switch (ast.operator) {
            case BinaryOperator.Equals:
              opStr = '==';
              break;
            case BinaryOperator.Identical:
              opStr = '===';
              break;
            case BinaryOperator.NotEquals:
              opStr = '!=';
              break;
            case BinaryOperator.NotIdentical:
              opStr = '!==';
              break;
            case BinaryOperator.And:
              opStr = '&&';
              break;
            case BinaryOperator.Or:
              opStr = '||';
              break;
            case BinaryOperator.Plus:
              opStr = '+';
              break;
            case BinaryOperator.Minus:
              opStr = '-';
              break;
            case BinaryOperator.Divide:
              opStr = '/';
              break;
            case BinaryOperator.Multiply:
              opStr = '*';
              break;
            case BinaryOperator.Modulo:
              opStr = '%';
              break;
            case BinaryOperator.Lower:
              opStr = '<';
              break;
            case BinaryOperator.LowerEquals:
              opStr = '<=';
              break;
            case BinaryOperator.Bigger:
              opStr = '>';
              break;
            case BinaryOperator.BiggerEquals:
              opStr = '>=';
              break;
            default:
              throw new Error("Unknown operator " + ast.operator);
          }
          ctx.print("(");
          ast.lhs.visitExpression(this, ctx);
          ctx.print(" " + opStr + " ");
          ast.rhs.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print(".");
          ctx.print(ast.name);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print("[");
          ast.index.visitExpression(this, ctx);
          ctx.print("]");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
          var useNewLine = ast.entries.length > 1;
          ctx.print("[", useNewLine);
          ctx.incIndent();
          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print("]", useNewLine);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
          var _this = this;
          var useNewLine = ast.entries.length > 1;
          ctx.print("{", useNewLine);
          ctx.incIndent();
          this.visitAllObjects(function (entry) {
            ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
            entry[1].visitExpression(_this, ctx);
          }, ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print("}", useNewLine);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
          var _this = this;
          if (newLine === void 0) {
            newLine = false;
          }
          this.visitAllObjects(function (expr) {
            return expr.visitExpression(_this, ctx);
          }, expressions, ctx, separator, newLine);
        };
        AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
          if (newLine === void 0) {
            newLine = false;
          }
          for (var i = 0; i < expressions.length; i++) {
            if (i > 0) {
              ctx.print(separator, newLine);
            }
            handler(expressions[i]);
          }
          if (newLine) {
            ctx.println();
          }
        };
        AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
          var _this = this;
          statements.forEach(function (stmt) {
            return stmt.visitStatement(_this, ctx);
          });
        };
        return AbstractEmitterVisitor;
      }();
      function escapeIdentifier(input, escapeDollar, alwaysQuote) {
        if (alwaysQuote === void 0) {
          alwaysQuote = true;
        }
        if (isBlank(input)) {
          return null;
        }
        var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
          var match = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            match[_i - 0] = arguments[_i];
          }
          if (match[0] == '$') {
            return escapeDollar ? '\\$' : '$';
          } else if (match[0] == '\n') {
            return '\\n';
          } else if (match[0] == '\r') {
            return '\\r';
          } else {
            return "\\" + match[0];
          }
        });
        var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
        return requiresQuotes ? "'" + body + "'" : body;
      }
      function _createIndent(count) {
        var res = '';
        for (var i = 0; i < count; i++) {
          res += '  ';
        }
        return res;
      }
      var __extends$18 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _debugModuleUrl = 'asset://debug/lib';
      function debugOutputAstAsTypeScript(ast) {
        var converter = new _TsEmitterVisitor(_debugModuleUrl);
        var ctx = EmitterVisitorContext.createRoot([]);
        var asts = Array.isArray(ast) ? ast : [ast];
        asts.forEach(function (ast) {
          if (ast instanceof Statement) {
            ast.visitStatement(converter, ctx);
          } else if (ast instanceof Expression) {
            ast.visitExpression(converter, ctx);
          } else if (ast instanceof Type$1) {
            ast.visitType(converter, ctx);
          } else {
            throw new Error("Don't know how to print debug info for " + ast);
          }
        });
        return ctx.toSource();
      }
      var TypeScriptEmitter = function () {
        function TypeScriptEmitter(_importGenerator) {
          this._importGenerator = _importGenerator;
        }
        TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
          var _this = this;
          var converter = new _TsEmitterVisitor(moduleUrl);
          var ctx = EmitterVisitorContext.createRoot(exportedVars);
          converter.visitAllStatements(stmts, ctx);
          var srcParts = [];
          converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
            srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
          });
          srcParts.push(ctx.toSource());
          return srcParts.join('\n');
        };
        return TypeScriptEmitter;
      }();
      var _TsEmitterVisitor = function (_super) {
        __extends$18(_TsEmitterVisitor, _super);
        function _TsEmitterVisitor(_moduleUrl) {
          _super.call(this, false);
          this._moduleUrl = _moduleUrl;
          this.importsWithPrefixes = new Map();
        }
        _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
          if (defaultType === void 0) {
            defaultType = 'any';
          }
          if (isPresent(t)) {
            t.visitType(this, ctx);
          } else {
            ctx.print(defaultType);
          }
        };
        _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
          var value = ast.value;
          if (isBlank(value) && ast.type != NULL_TYPE) {
            ctx.print("(" + value + " as any)");
            return null;
          }
          return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
        };
        _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
          if (ast.entries.length === 0) {
            ctx.print('(');
          }
          var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
          if (ast.entries.length === 0) {
            ctx.print(' as any[])');
          }
          return result;
        };
        _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
          this._visitIdentifier(ast.value, ast.typeParams, ctx);
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          if (stmt.hasModifier(StmtModifier.Final)) {
            ctx.print("const");
          } else {
            ctx.print("var");
          }
          ctx.print(" " + stmt.name + ":");
          this.visitType(stmt.type, ctx);
          ctx.print(" = ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
          ctx.print("(<");
          ast.type.visitType(this, ctx);
          ctx.print(">");
          ast.value.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
          var _this = this;
          ctx.pushClass(stmt);
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          ctx.print("class " + stmt.name);
          if (isPresent(stmt.parent)) {
            ctx.print(" extends ");
            stmt.parent.visitExpression(this, ctx);
          }
          ctx.println(" {");
          ctx.incIndent();
          stmt.fields.forEach(function (field) {
            return _this._visitClassField(field, ctx);
          });
          if (isPresent(stmt.constructorMethod)) {
            this._visitClassConstructor(stmt, ctx);
          }
          stmt.getters.forEach(function (getter) {
            return _this._visitClassGetter(getter, ctx);
          });
          stmt.methods.forEach(function (method) {
            return _this._visitClassMethod(method, ctx);
          });
          ctx.decIndent();
          ctx.println("}");
          ctx.popClass();
          return null;
        };
        _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
          if (field.hasModifier(StmtModifier.Private)) {
            ctx.print("/*private*/ ");
          }
          ctx.print(field.name);
          ctx.print(':');
          this.visitType(field.type, ctx);
          ctx.println(";");
        };
        _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
          if (getter.hasModifier(StmtModifier.Private)) {
            ctx.print("private ");
          }
          ctx.print("get " + getter.name + "()");
          ctx.print(':');
          this.visitType(getter.type, ctx);
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(getter.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
          ctx.print("constructor(");
          this._visitParams(stmt.constructorMethod.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
          if (method.hasModifier(StmtModifier.Private)) {
            ctx.print("private ");
          }
          ctx.print(method.name + "(");
          this._visitParams(method.params, ctx);
          ctx.print("):");
          this.visitType(method.type, ctx, 'void');
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(method.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
          ctx.print("(");
          this._visitParams(ast.params, ctx);
          ctx.print("):");
          this.visitType(ast.type, ctx, 'void');
          ctx.println(" => {");
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          ctx.print("function " + stmt.name + "(");
          this._visitParams(stmt.params, ctx);
          ctx.print("):");
          this.visitType(stmt.type, ctx, 'void');
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
          ctx.println("try {");
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
          ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
          var typeStr;
          switch (type.name) {
            case BuiltinTypeName.Bool:
              typeStr = 'boolean';
              break;
            case BuiltinTypeName.Dynamic:
              typeStr = 'any';
              break;
            case BuiltinTypeName.Function:
              typeStr = 'Function';
              break;
            case BuiltinTypeName.Number:
              typeStr = 'number';
              break;
            case BuiltinTypeName.Int:
              typeStr = 'number';
              break;
            case BuiltinTypeName.String:
              typeStr = 'string';
              break;
            default:
              throw new Error("Unsupported builtin type " + type.name);
          }
          ctx.print(typeStr);
          return null;
        };
        _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
          this._visitIdentifier(ast.value, ast.typeParams, ctx);
          return null;
        };
        _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
          this.visitType(type.of, ctx);
          ctx.print("[]");
          return null;
        };
        _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
          ctx.print("{[key: string]:");
          this.visitType(type.valueType, ctx);
          ctx.print("}");
          return null;
        };
        _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = 'concat';
              break;
            case BuiltinMethod.SubscribeObservable:
              name = 'subscribe';
              break;
            case BuiltinMethod.Bind:
              name = 'bind';
              break;
            default:
              throw new Error("Unknown builtin method: " + method);
          }
          return name;
        };
        _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
          var _this = this;
          this.visitAllObjects(function (param) {
            ctx.print(param.name);
            ctx.print(':');
            _this.visitType(param.type, ctx);
          }, params, ctx, ',');
        };
        _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
          var _this = this;
          if (isBlank(value.name)) {
            throw new Error("Internal error: unknown identifier " + value);
          }
          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
            if (isBlank(prefix)) {
              prefix = "import" + this.importsWithPrefixes.size;
              this.importsWithPrefixes.set(value.moduleUrl, prefix);
            }
            ctx.print(prefix + ".");
          }
          if (value.reference && value.reference.members) {
            ctx.print(value.reference.name);
            ctx.print('.');
            ctx.print(value.reference.members.join('.'));
          } else {
            ctx.print(value.name);
          }
          if (isPresent(typeParams) && typeParams.length > 0) {
            ctx.print("<");
            this.visitAllObjects(function (type) {
              return type.visitType(_this, ctx);
            }, typeParams, ctx, ',');
            ctx.print(">");
          }
        };
        return _TsEmitterVisitor;
      }(AbstractEmitterVisitor);
      function interpretStatements(statements, resultVar) {
        var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
        var ctx = new _ExecutionContext(null, null, null, new Map());
        var visitor = new StatementInterpreter();
        var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
        return isPresent(result) ? result.value : null;
      }
      function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
        var childCtx = ctx.createChildWihtLocalVars();
        for (var i = 0; i < varNames.length; i++) {
          childCtx.vars.set(varNames[i], varValues[i]);
        }
        var result = visitor.visitAllStatements(statements, childCtx);
        return isPresent(result) ? result.value : null;
      }
      var _ExecutionContext = function () {
        function _ExecutionContext(parent, instance, className, vars) {
          this.parent = parent;
          this.instance = instance;
          this.className = className;
          this.vars = vars;
        }
        _ExecutionContext.prototype.createChildWihtLocalVars = function () {
          return new _ExecutionContext(this, this.instance, this.className, new Map());
        };
        return _ExecutionContext;
      }();
      var ReturnValue = function () {
        function ReturnValue(value) {
          this.value = value;
        }
        return ReturnValue;
      }();
      function createDynamicClass(_classStmt, _ctx, _visitor) {
        var propertyDescriptors = {};
        _classStmt.getters.forEach(function (getter) {
          propertyDescriptors[getter.name] = {
            configurable: false,
            get: function () {
              var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
              return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
            }
          };
        });
        _classStmt.methods.forEach(function (method) {
          var paramNames = method.params.map(function (param) {
            return param.name;
          });
          propertyDescriptors[method.name] = {
            writable: false,
            configurable: false,
            value: function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
              }
              var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
              return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
            }
          };
        });
        var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) {
          return param.name;
        });
        var ctor = function () {
          var _this = this;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          _classStmt.fields.forEach(function (field) {
            _this[field.name] = undefined;
          });
          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
        };
        var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
        ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
        return ctor;
      }
      var StatementInterpreter = function () {
        function StatementInterpreter() {}
        StatementInterpreter.prototype.debugAst = function (ast) {
          return debugOutputAstAsTypeScript(ast);
        };
        StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
          return null;
        };
        StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
          var value = expr.value.visitExpression(this, ctx);
          var currCtx = ctx;
          while (currCtx != null) {
            if (currCtx.vars.has(expr.name)) {
              currCtx.vars.set(expr.name, value);
              return value;
            }
            currCtx = currCtx.parent;
          }
          throw new Error("Not declared variable " + expr.name);
        };
        StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin)) {
            switch (ast.builtin) {
              case BuiltinVar.Super:
                return ctx.instance.__proto__;
              case BuiltinVar.This:
                return ctx.instance;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$1;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$1;
                break;
              default:
                throw new Error("Unknown builtin variable " + ast.builtin);
            }
          }
          var currCtx = ctx;
          while (currCtx != null) {
            if (currCtx.vars.has(varName)) {
              return currCtx.vars.get(varName);
            }
            currCtx = currCtx.parent;
          }
          throw new Error("Not declared variable " + varName);
        };
        StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var index = expr.index.visitExpression(this, ctx);
          var value = expr.value.visitExpression(this, ctx);
          receiver[index] = value;
          return value;
        };
        StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var value = expr.value.visitExpression(this, ctx);
          receiver[expr.name] = value;
          return value;
        };
        StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var args = this.visitAllExpressions(expr.args, ctx);
          var result;
          if (isPresent(expr.builtin)) {
            switch (expr.builtin) {
              case BuiltinMethod.ConcatArray:
                result = receiver.concat.apply(receiver, args);
                break;
              case BuiltinMethod.SubscribeObservable:
                result = receiver.subscribe({ next: args[0] });
                break;
              case BuiltinMethod.Bind:
                result = receiver.bind.apply(receiver, args);
                break;
              default:
                throw new Error("Unknown builtin method " + expr.builtin);
            }
          } else {
            result = receiver[expr.name].apply(receiver, args);
          }
          return result;
        };
        StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
          var args = this.visitAllExpressions(stmt.args, ctx);
          var fnExpr = stmt.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
            return null;
          } else {
            var fn = stmt.fn.visitExpression(this, ctx);
            return fn.apply(null, args);
          }
        };
        StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
          return new ReturnValue(stmt.value.visitExpression(this, ctx));
        };
        StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
          var clazz = createDynamicClass(stmt, ctx, this);
          ctx.vars.set(stmt.name, clazz);
          return null;
        };
        StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
          var condition = stmt.condition.visitExpression(this, ctx);
          if (condition) {
            return this.visitAllStatements(stmt.trueCase, ctx);
          } else if (isPresent(stmt.falseCase)) {
            return this.visitAllStatements(stmt.falseCase, ctx);
          }
          return null;
        };
        StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
          try {
            return this.visitAllStatements(stmt.bodyStmts, ctx);
          } catch (e) {
            var childCtx = ctx.createChildWihtLocalVars();
            childCtx.vars.set(CATCH_ERROR_VAR$1, e);
            childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
            return this.visitAllStatements(stmt.catchStmts, childCtx);
          }
        };
        StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
          throw stmt.error.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) {
          return null;
        };
        StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
          var args = this.visitAllExpressions(ast.args, ctx);
          var clazz = ast.classExpr.visitExpression(this, ctx);
          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
        };
        StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) {
          return ast.value;
        };
        StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
          return ast.value.reference;
        };
        StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
          if (ast.condition.visitExpression(this, ctx)) {
            return ast.trueCase.visitExpression(this, ctx);
          } else if (isPresent(ast.falseCase)) {
            return ast.falseCase.visitExpression(this, ctx);
          }
          return null;
        };
        StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
          return !ast.condition.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
          return ast.value.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
          var paramNames = ast.params.map(function (param) {
            return param.name;
          });
          return _declareFn(paramNames, ast.statements, ctx, this);
        };
        StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
          var paramNames = stmt.params.map(function (param) {
            return param.name;
          });
          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
          return null;
        };
        StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
          var _this = this;
          var lhs = function () {
            return ast.lhs.visitExpression(_this, ctx);
          };
          var rhs = function () {
            return ast.rhs.visitExpression(_this, ctx);
          };
          switch (ast.operator) {
            case BinaryOperator.Equals:
              return lhs() == rhs();
            case BinaryOperator.Identical:
              return lhs() === rhs();
            case BinaryOperator.NotEquals:
              return lhs() != rhs();
            case BinaryOperator.NotIdentical:
              return lhs() !== rhs();
            case BinaryOperator.And:
              return lhs() && rhs();
            case BinaryOperator.Or:
              return lhs() || rhs();
            case BinaryOperator.Plus:
              return lhs() + rhs();
            case BinaryOperator.Minus:
              return lhs() - rhs();
            case BinaryOperator.Divide:
              return lhs() / rhs();
            case BinaryOperator.Multiply:
              return lhs() * rhs();
            case BinaryOperator.Modulo:
              return lhs() % rhs();
            case BinaryOperator.Lower:
              return lhs() < rhs();
            case BinaryOperator.LowerEquals:
              return lhs() <= rhs();
            case BinaryOperator.Bigger:
              return lhs() > rhs();
            case BinaryOperator.BiggerEquals:
              return lhs() >= rhs();
            default:
              throw new Error("Unknown operator " + ast.operator);
          }
        };
        StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
          var result;
          var receiver = ast.receiver.visitExpression(this, ctx);
          result = receiver[ast.name];
          return result;
        };
        StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
          var receiver = ast.receiver.visitExpression(this, ctx);
          var prop = ast.index.visitExpression(this, ctx);
          return receiver[prop];
        };
        StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
          return this.visitAllExpressions(ast.entries, ctx);
        };
        StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
          var _this = this;
          var result = {};
          ast.entries.forEach(function (entry) {
            return result[entry[0]] = entry[1].visitExpression(_this, ctx);
          });
          return result;
        };
        StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
          var _this = this;
          return expressions.map(function (expr) {
            return expr.visitExpression(_this, ctx);
          });
        };
        StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
          for (var i = 0; i < statements.length; i++) {
            var stmt = statements[i];
            var val = stmt.visitStatement(this, ctx);
            if (val instanceof ReturnValue) {
              return val;
            }
          }
          return null;
        };
        return StatementInterpreter;
      }();
      function _declareFn(varNames, statements, ctx, visitor) {
        return function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
        };
      }
      var CATCH_ERROR_VAR$1 = 'error';
      var CATCH_STACK_VAR$1 = 'stack';
      var __extends$20 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var AbstractJsEmitterVisitor = function (_super) {
        __extends$20(AbstractJsEmitterVisitor, _super);
        function AbstractJsEmitterVisitor() {
          _super.call(this, false);
        }
        AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
          var _this = this;
          ctx.pushClass(stmt);
          this._visitClassConstructor(stmt, ctx);
          if (isPresent(stmt.parent)) {
            ctx.print(stmt.name + ".prototype = Object.create(");
            stmt.parent.visitExpression(this, ctx);
            ctx.println(".prototype);");
          }
          stmt.getters.forEach(function (getter) {
            return _this._visitClassGetter(stmt, getter, ctx);
          });
          stmt.methods.forEach(function (method) {
            return _this._visitClassMethod(stmt, method, ctx);
          });
          ctx.popClass();
          return null;
        };
        AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
          ctx.print("function " + stmt.name + "(");
          if (isPresent(stmt.constructorMethod)) {
            this._visitParams(stmt.constructorMethod.params, ctx);
          }
          ctx.println(") {");
          ctx.incIndent();
          if (isPresent(stmt.constructorMethod)) {
            if (stmt.constructorMethod.body.length > 0) {
              ctx.println("var self = this;");
              this.visitAllStatements(stmt.constructorMethod.body, ctx);
            }
          }
          ctx.decIndent();
          ctx.println("}");
        };
        AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
          ctx.incIndent();
          if (getter.body.length > 0) {
            ctx.println("var self = this;");
            this.visitAllStatements(getter.body, ctx);
          }
          ctx.decIndent();
          ctx.println("}});");
        };
        AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
          ctx.print(stmt.name + ".prototype." + method.name + " = function(");
          this._visitParams(method.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          if (method.body.length > 0) {
            ctx.println("var self = this;");
            this.visitAllStatements(method.body, ctx);
          }
          ctx.decIndent();
          ctx.println("};");
        };
        AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
          if (ast.builtin === BuiltinVar.This) {
            ctx.print('self');
          } else if (ast.builtin === BuiltinVar.Super) {
            throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
          } else {
            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
          }
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
          ctx.print("var " + stmt.name + " = ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
          ast.value.visitExpression(this, ctx);
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
          var fnExpr = expr.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
            ctx.currentClass.parent.visitExpression(this, ctx);
            ctx.print(".call(this");
            if (expr.args.length > 0) {
              ctx.print(", ");
              this.visitAllExpressions(expr.args, ctx, ',');
            }
            ctx.print(")");
          } else {
            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
          }
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
          ctx.print("function(");
          this._visitParams(ast.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
          ctx.print("function " + stmt.name + "(");
          this._visitParams(stmt.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
          ctx.println("try {");
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
          ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
          this.visitAllObjects(function (param) {
            return ctx.print(param.name);
          }, params, ctx, ',');
        };
        AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = 'concat';
              break;
            case BuiltinMethod.SubscribeObservable:
              name = 'subscribe';
              break;
            case BuiltinMethod.Bind:
              name = 'bind';
              break;
            default:
              throw new Error("Unknown builtin method: " + method);
          }
          return name;
        };
        return AbstractJsEmitterVisitor;
      }(AbstractEmitterVisitor);
      var __extends$19 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
          fnArgNames.push(argName);
          fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
      }
      function jitStatements(sourceUrl, statements, resultVar) {
        var converter = new JitEmitterVisitor();
        var ctx = EmitterVisitorContext.createRoot([resultVar]);
        converter.visitAllStatements(statements, ctx);
        return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
      }
      var JitEmitterVisitor = function (_super) {
        __extends$19(JitEmitterVisitor, _super);
        function JitEmitterVisitor() {
          _super.apply(this, arguments);
          this._evalArgNames = [];
          this._evalArgValues = [];
        }
        JitEmitterVisitor.prototype.getArgs = function () {
          var result = {};
          for (var i = 0; i < this._evalArgNames.length; i++) {
            result[this._evalArgNames[i]] = this._evalArgValues[i];
          }
          return result;
        };
        JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
          var value = ast.value.reference;
          var id = this._evalArgValues.indexOf(value);
          if (id === -1) {
            id = this._evalArgValues.length;
            this._evalArgValues.push(value);
            var name_1 = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
            this._evalArgNames.push(sanitizeIdentifier("jit_" + name_1 + id));
          }
          ctx.print(this._evalArgNames[id]);
          return null;
        };
        return JitEmitterVisitor;
      }(AbstractJsEmitterVisitor);
      var ShadowCss = function () {
        function ShadowCss() {
          this.strictStyling = true;
        }
        ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
          if (hostSelector === void 0) {
            hostSelector = '';
          }
          var sourceMappingUrl = extractSourceMappingUrl(cssText);
          cssText = stripComments(cssText);
          cssText = this._insertDirectives(cssText);
          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
        };
        ShadowCss.prototype._insertDirectives = function (cssText) {
          cssText = this._insertPolyfillDirectivesInCssText(cssText);
          return this._insertPolyfillRulesInCssText(cssText);
        };
        ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
          return cssText.replace(_cssContentNextSelectorRe, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            return m[2] + '{';
          });
        };
        ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
          return cssText.replace(_cssContentRuleRe, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            var rule = m[0].replace(m[1], '').replace(m[2], '');
            return m[4] + rule;
          });
        };
        ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
          var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
          cssText = this._insertPolyfillHostInCssText(cssText);
          cssText = this._convertColonHost(cssText);
          cssText = this._convertColonHostContext(cssText);
          cssText = this._convertShadowDOMSelectors(cssText);
          if (scopeSelector) {
            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
          }
          cssText = cssText + '\n' + unscopedRules;
          return cssText.trim();
        };
        ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
          var r = '';
          var m;
          _cssContentUnscopedRuleRe.lastIndex = 0;
          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
            var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
            r += rule + '\n\n';
          }
          return r;
        };
        ShadowCss.prototype._convertColonHost = function (cssText) {
          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        };
        ShadowCss.prototype._convertColonHostContext = function (cssText) {
          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        };
        ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
          return cssText.replace(regExp, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            if (m[2]) {
              var parts = m[2].split(',');
              var r = [];
              for (var i = 0; i < parts.length; i++) {
                var p = parts[i].trim();
                if (!p) break;
                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
              }
              return r.join(',');
            } else {
              return _polyfillHostNoCombinator + m[3];
            }
          });
        };
        ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
          if (part.indexOf(_polyfillHost) > -1) {
            return this._colonHostPartReplacer(host, part, suffix);
          } else {
            return host + part + suffix + ', ' + part + ' ' + host + suffix;
          }
        };
        ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
          return host + part.replace(_polyfillHost, '') + suffix;
        };
        ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
          return _shadowDOMSelectorsRe.reduce(function (result, pattern) {
            return result.replace(pattern, ' ');
          }, cssText);
        };
        ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
          var _this = this;
          return processRules(cssText, function (rule) {
            var selector = rule.selector;
            var content = rule.content;
            if (rule.selector[0] != '@') {
              selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
            } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
              content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
            }
            return new CssRule(selector, content);
          });
        };
        ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
          var _this = this;
          return selector.split(',').map(function (part) {
            return part.trim().split(_shadowDeepSelectors);
          }).map(function (deepParts) {
            var shallowPart = deepParts[0],
                otherParts = deepParts.slice(1);
            var applyScope = function (shallowPart) {
              if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
              } else {
                return shallowPart;
              }
            };
            return [applyScope(shallowPart)].concat(otherParts).join(' ');
          }).join(', ');
        };
        ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
          var re = this._makeScopeMatcher(scopeSelector);
          return !re.test(selector);
        };
        ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
          var lre = /\[/g;
          var rre = /\]/g;
          scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
        };
        ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        };
        ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
          _polyfillHostRe.lastIndex = 0;
          if (_polyfillHostRe.test(selector)) {
            var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
            return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
              return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
                return before + replaceBy_1 + colon + after;
              });
            }).replace(_polyfillHostRe, replaceBy_1 + ' ');
          }
          return scopeSelector + ' ' + selector;
        };
        ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
          var _this = this;
          var isRe = /\[is=([^\]]*)\]/g;
          scopeSelector = scopeSelector.replace(isRe, function (_) {
            var parts = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              parts[_i - 1] = arguments[_i];
            }
            return parts[0];
          });
          var attrName = '[' + scopeSelector + ']';
          var _scopeSelectorPart = function (p) {
            var scopedP = p.trim();
            if (!scopedP) {
              return '';
            }
            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
              scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
            } else {
              var t = p.replace(_polyfillHostRe, '');
              if (t.length > 0) {
                var matches = t.match(/([^:]*)(:*)(.*)/);
                if (matches) {
                  scopedP = matches[1] + attrName + matches[2] + matches[3];
                }
              }
            }
            return scopedP;
          };
          var safeContent = new SafeSelector(selector);
          selector = safeContent.content();
          var scopedSelector = '';
          var startIndex = 0;
          var res;
          var sep = /( |>|\+|~(?!=))\s*/g;
          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
          while ((res = sep.exec(selector)) !== null) {
            var separator = res[1];
            var part = selector.slice(startIndex, res.index).trim();
            var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
            scopedSelector += scopedPart + " " + separator + " ";
            startIndex = sep.lastIndex;
          }
          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
          return safeContent.restore(scopedSelector);
        };
        ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
          return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
        };
        return ShadowCss;
      }();
      var SafeSelector = function () {
        function SafeSelector(selector) {
          var _this = this;
          this.placeholders = [];
          this.index = 0;
          selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
            var replaceBy = "__ph-" + _this.index + "__";
            _this.placeholders.push(keep);
            _this.index++;
            return replaceBy;
          });
          this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
            var replaceBy = "__ph-" + _this.index + "__";
            _this.placeholders.push(exp);
            _this.index++;
            return pseudo + replaceBy;
          });
        }
        ;
        SafeSelector.prototype.restore = function (content) {
          var _this = this;
          return content.replace(/__ph-(\d+)__/g, function (ph, index) {
            return _this.placeholders[+index];
          });
        };
        SafeSelector.prototype.content = function () {
          return this._content;
        };
        return SafeSelector;
      }();
      var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
      var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      var _polyfillHost = '-shadowcsshost';
      var _polyfillHostContext = '-shadowcsscontext';
      var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
      var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
      var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
      var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
      var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
      var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g];
      var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
      var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
      var _polyfillHostRe = /-shadowcsshost/gim;
      var _colonHostRe = /:host/gim;
      var _colonHostContextRe = /:host-context/gim;
      var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
      function stripComments(input) {
        return input.replace(_commentRe, '');
      }
      var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
      function extractSourceMappingUrl(input) {
        var matcher = input.match(_sourceMappingUrlRe);
        return matcher ? matcher[0] : '';
      }
      var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
      var _curlyRe = /([{}])/g;
      var OPEN_CURLY = '{';
      var CLOSE_CURLY = '}';
      var BLOCK_PLACEHOLDER = '%BLOCK%';
      var CssRule = function () {
        function CssRule(selector, content) {
          this.selector = selector;
          this.content = content;
        }
        return CssRule;
      }();
      function processRules(input, ruleCallback) {
        var inputWithEscapedBlocks = escapeBlocks(input);
        var nextBlockIndex = 0;
        return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
          var m = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
          }
          var selector = m[2];
          var content = '';
          var suffix = m[4];
          var contentPrefix = '';
          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
            contentPrefix = '{';
          }
          var rule = ruleCallback(new CssRule(selector, content));
          return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
        });
      }
      var StringWithEscapedBlocks = function () {
        function StringWithEscapedBlocks(escapedString, blocks) {
          this.escapedString = escapedString;
          this.blocks = blocks;
        }
        return StringWithEscapedBlocks;
      }();
      function escapeBlocks(input) {
        var inputParts = input.split(_curlyRe);
        var resultParts = [];
        var escapedBlocks = [];
        var bracketCount = 0;
        var currentBlockParts = [];
        for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
          var part = inputParts[partIndex];
          if (part == CLOSE_CURLY) {
            bracketCount--;
          }
          if (bracketCount > 0) {
            currentBlockParts.push(part);
          } else {
            if (currentBlockParts.length > 0) {
              escapedBlocks.push(currentBlockParts.join(''));
              resultParts.push(BLOCK_PLACEHOLDER);
              currentBlockParts = [];
            }
            resultParts.push(part);
          }
          if (part == OPEN_CURLY) {
            bracketCount++;
          }
        }
        if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
        }
        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
      }
      var COMPONENT_VARIABLE = '%COMP%';
      var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
      var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
      var StylesCompileDependency = function () {
        function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
          this.moduleUrl = moduleUrl;
          this.isShimmed = isShimmed;
          this.valuePlaceholder = valuePlaceholder;
        }
        return StylesCompileDependency;
      }();
      var StylesCompileResult = function () {
        function StylesCompileResult(componentStylesheet, externalStylesheets) {
          this.componentStylesheet = componentStylesheet;
          this.externalStylesheets = externalStylesheets;
        }
        return StylesCompileResult;
      }();
      var CompiledStylesheet = function () {
        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
          this.statements = statements;
          this.stylesVar = stylesVar;
          this.dependencies = dependencies;
          this.isShimmed = isShimmed;
          this.meta = meta;
        }
        return CompiledStylesheet;
      }();
      var StyleCompiler = function () {
        function StyleCompiler(_urlResolver) {
          this._urlResolver = _urlResolver;
          this._shadowCss = new ShadowCss();
        }
        StyleCompiler.prototype.compileComponent = function (comp) {
          var _this = this;
          var externalStylesheets = [];
          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
            styles: comp.template.styles,
            styleUrls: comp.template.styleUrls,
            moduleUrl: comp.type.moduleUrl
          }), true);
          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
            var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
            externalStylesheets.push(compiledStylesheet);
          });
          return new StylesCompileResult(componentStylesheet, externalStylesheets);
        };
        StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
          var _this = this;
          var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
          var styleExpressions = stylesheet.styles.map(function (plainStyle) {
            return literal(_this._shimIfNeeded(plainStyle, shim));
          });
          var dependencies = [];
          for (var i = 0; i < stylesheet.styleUrls.length; i++) {
            var identifier = new CompileIdentifierMetadata({ name: getStylesVarName(null) });
            dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
            styleExpressions.push(new ExternalExpr(identifier));
          }
          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
          var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        };
        StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        };
        StyleCompiler.decorators = [{ type: _angular_core.Injectable }];
        StyleCompiler.ctorParameters = [{ type: UrlResolver }];
        return StyleCompiler;
      }();
      function getStylesVarName(component) {
        var result = "styles";
        if (component) {
          result += "_" + component.type.name;
        }
        return result;
      }
      var RuntimeCompiler = function () {
        function RuntimeCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
          this._injector = _injector;
          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._directiveWrapperCompiler = _directiveWrapperCompiler;
          this._compilerConfig = _compilerConfig;
          this._animationParser = _animationParser;
          this._compiledTemplateCache = new Map();
          this._compiledHostTemplateCache = new Map();
          this._compiledDirectiveWrapperCache = new Map();
          this._compiledNgModuleCache = new Map();
          this._animationCompiler = new AnimationCompiler();
        }
        Object.defineProperty(RuntimeCompiler.prototype, "injector", {
          get: function () {
            return this._injector;
          },
          enumerable: true,
          configurable: true
        });
        RuntimeCompiler.prototype.compileModuleSync = function (moduleType) {
          return this._compileModuleAndComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAsync = function (moduleType) {
          return this._compileModuleAndComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
          var _this = this;
          var loadingPromise = this._loadModules(moduleType, isSync);
          var createResult = function () {
            _this._compileComponents(moduleType, null);
            return _this._compileModule(moduleType);
          };
          if (isSync) {
            return new SyncAsyncResult(createResult());
          } else {
            return new SyncAsyncResult(null, loadingPromise.then(createResult));
          }
        };
        RuntimeCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
          var _this = this;
          var loadingPromise = this._loadModules(moduleType, isSync);
          var createResult = function () {
            var componentFactories = [];
            _this._compileComponents(moduleType, componentFactories);
            return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
          };
          if (isSync) {
            return new SyncAsyncResult(createResult());
          } else {
            return new SyncAsyncResult(null, loadingPromise.then(createResult));
          }
        };
        RuntimeCompiler.prototype._loadModules = function (mainModule, isSync) {
          var _this = this;
          var loadingPromises = [];
          var _a = this._metadataResolver.loadNgModuleMetadata(mainModule, isSync),
              ngModule = _a.ngModule,
              loading = _a.loading;
          loadingPromises.push(loading);
          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
            loadingPromises.push(_this._metadataResolver.loadNgModuleMetadata(localModuleMeta.type.reference, isSync).loading);
          });
          return Promise.all(loadingPromises);
        };
        RuntimeCompiler.prototype._compileModule = function (moduleType) {
          var _this = this;
          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
          if (!ngModuleFactory) {
            var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
            var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () {
                return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
              } }))];
            var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
            compileResult.dependencies.forEach(function (dep) {
              dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
              dep.placeholder.name = "compFactory_" + dep.comp.name;
            });
            if (!this._compilerConfig.useJit) {
              ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
            } else {
              ngModuleFactory = jitStatements("/" + moduleMeta_1.type.name + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
            }
            this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
          }
          return ngModuleFactory;
        };
        RuntimeCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
          var _this = this;
          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
          var moduleByDirective = new Map();
          var templates = new Set();
          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
            var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
              moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
              var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
              _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
              if (dirMeta.isComponent) {
                templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
                if (allComponentFactories) {
                  var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
                  templates.add(template);
                  allComponentFactories.push(template.proxyComponentFactory);
                }
              }
            });
          });
          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
            var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
              var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
              if (dirMeta.isComponent) {
                dirMeta.entryComponents.forEach(function (entryComponentType) {
                  var moduleMeta = moduleByDirective.get(entryComponentType.reference);
                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
                });
              }
            });
            localModuleMeta.entryComponents.forEach(function (entryComponentType) {
              var moduleMeta = moduleByDirective.get(entryComponentType.reference);
              templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
            });
          });
          templates.forEach(function (template) {
            return _this._compileTemplate(template);
          });
        };
        RuntimeCompiler.prototype.clearCacheFor = function (type) {
          this._compiledNgModuleCache.delete(type);
          this._metadataResolver.clearCacheFor(type);
          this._compiledHostTemplateCache.delete(type);
          var compiledTemplate = this._compiledTemplateCache.get(type);
          if (compiledTemplate) {
            this._compiledTemplateCache.delete(type);
          }
        };
        RuntimeCompiler.prototype.clearCache = function () {
          this._metadataResolver.clearCache();
          this._compiledTemplateCache.clear();
          this._compiledHostTemplateCache.clear();
          this._compiledNgModuleCache.clear();
        };
        RuntimeCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
          if (!ngModule) {
            throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
          }
          var compiledTemplate = this._compiledHostTemplateCache.get(compType);
          if (!compiledTemplate) {
            var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
            assertComponent(compMeta);
            var hostMeta = createHostComponentMeta(compMeta);
            compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
            this._compiledHostTemplateCache.set(compType, compiledTemplate);
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
          if (!compiledTemplate) {
            assertComponent(compMeta);
            compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertComponentKnown = function (compType, isHost) {
          var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
          if (!compiledTemplate) {
            throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertDirectiveWrapper = function (dirType) {
          var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
          if (!dirWrapper) {
            throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
          }
          return dirWrapper;
        };
        RuntimeCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {
          var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
          var statements = compileResult.statements;
          var directiveWrapperClass;
          if (!this._compilerConfig.useJit) {
            directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
          } else {
            directiveWrapperClass = jitStatements("/" + moduleMeta.type.name + "/" + dirMeta.type.name + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
          }
          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
        };
        RuntimeCompiler.prototype._compileTemplate = function (template) {
          var _this = this;
          if (template.isCompiled) {
            return;
          }
          var compMeta = template.compMeta;
          var externalStylesheetsByModuleUrl = new Map();
          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
          stylesCompileResult.externalStylesheets.forEach(function (r) {
            externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
          });
          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
          var parsedAnimations = this._animationParser.parseComponent(compMeta);
          var directives = template.directives.map(function (dir) {
            return _this._metadataResolver.getDirectiveSummary(dir.reference);
          });
          var pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) {
            return _this._metadataResolver.getPipeSummary(pipe.reference);
          });
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, compMeta.type.name);
          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
          compileResult.dependencies.forEach(function (dep) {
            var depTemplate;
            if (dep instanceof ViewClassDependency) {
              var vfd = dep;
              depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
              vfd.placeholder.reference = depTemplate.proxyViewClass;
              vfd.placeholder.name = "View_" + vfd.comp.name;
            } else if (dep instanceof ComponentFactoryDependency) {
              var cfd = dep;
              depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
              cfd.placeholder.reference = depTemplate.proxyComponentFactory;
              cfd.placeholder.name = "compFactory_" + cfd.comp.name;
            } else if (dep instanceof DirectiveWrapperDependency) {
              var dwd = dep;
              dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
            }
          });
          var statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) {
            return ca.statements;
          })).concat(compileResult.statements);
          var viewClass;
          if (!this._compilerConfig.useJit) {
            viewClass = interpretStatements(statements, compileResult.viewClassVar);
          } else {
            viewClass = jitStatements("/" + template.ngModule.type.name + "/" + template.compType.name + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
          }
          template.compiled(viewClass);
          var _a;
        };
        RuntimeCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
          var _this = this;
          result.dependencies.forEach(function (dep, i) {
            var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
            var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
            dep.valuePlaceholder.reference = nestedStylesArr;
            dep.valuePlaceholder.name = "importedStyles" + i;
          });
        };
        RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
          if (!this._compilerConfig.useJit) {
            return interpretStatements(result.statements, result.stylesVar);
          } else {
            return jitStatements("/" + result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
          }
        };
        RuntimeCompiler.decorators = [{ type: _angular_core.Injectable }];
        RuntimeCompiler.ctorParameters = [{ type: _angular_core.Injector }, { type: CompileMetadataResolver }, { type: TemplateParser }, { type: StyleCompiler }, { type: ViewCompiler }, { type: NgModuleCompiler }, { type: DirectiveWrapperCompiler }, { type: CompilerConfig }, { type: AnimationParser }];
        return RuntimeCompiler;
      }();
      var CompiledTemplate = function () {
        function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
          this.isHost = isHost;
          this.compType = compType;
          this.compMeta = compMeta;
          this.ngModule = ngModule;
          this.directives = directives;
          this._viewClass = null;
          this.isCompiled = false;
          var self = this;
          this.proxyViewClass = function () {
            if (!self._viewClass) {
              throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
            }
            return self._viewClass.apply(this, arguments);
          };
          this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) : null;
        }
        CompiledTemplate.prototype.compiled = function (viewClass) {
          this._viewClass = viewClass;
          this.proxyViewClass.prototype = viewClass.prototype;
          this.isCompiled = true;
        };
        return CompiledTemplate;
      }();
      function assertComponent(meta) {
        if (!meta.isComponent) {
          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
        }
      }
      var ModuleBoundCompiler = function () {
        function ModuleBoundCompiler(_delegate, _ngModule) {
          this._delegate = _delegate;
          this._ngModule = _ngModule;
        }
        Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
          get: function () {
            return this._delegate.injector;
          },
          enumerable: true,
          configurable: true
        });
        ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
          return this._delegate.compileModuleSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
          return this._delegate.compileModuleAsync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
        };
        ModuleBoundCompiler.prototype.clearCache = function () {
          this._delegate.clearCache();
        };
        ModuleBoundCompiler.prototype.clearCacheFor = function (type) {
          this._delegate.clearCacheFor(type);
        };
        return ModuleBoundCompiler;
      }();
      var SECURITY_SCHEMA = {};
      function registerContext(ctx, specs) {
        for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
          var spec = specs_1[_i];
          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
        }
      }
      registerContext(_angular_core.SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
      registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
      registerContext(_angular_core.SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
      registerContext(_angular_core.SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
      var __extends$21 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var BOOLEAN = 'boolean';
      var NUMBER = 'number';
      var STRING = 'string';
      var OBJECT = 'object';
      var SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime'];
      var _ATTR_TO_PROP = {
        'class': 'className',
        'for': 'htmlFor',
        'formaction': 'formAction',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
      };
      var DomElementSchemaRegistry = function (_super) {
        __extends$21(DomElementSchemaRegistry, _super);
        function DomElementSchemaRegistry() {
          var _this = this;
          _super.call(this);
          this._schema = {};
          SCHEMA.forEach(function (encodedType) {
            var type = {};
            var _a = encodedType.split('|'),
                strType = _a[0],
                strProperties = _a[1];
            var properties = strProperties.split(',');
            var _b = strType.split('^'),
                typeNames = _b[0],
                superName = _b[1];
            typeNames.split(',').forEach(function (tag) {
              return _this._schema[tag.toLowerCase()] = type;
            });
            var superType = superName && _this._schema[superName.toLowerCase()];
            if (superType) {
              Object.keys(superType).forEach(function (prop) {
                type[prop] = superType[prop];
              });
            }
            properties.forEach(function (property) {
              if (property.length > 0) {
                switch (property[0]) {
                  case '*':
                    break;
                  case '!':
                    type[property.substring(1)] = BOOLEAN;
                    break;
                  case '#':
                    type[property.substring(1)] = NUMBER;
                    break;
                  case '%':
                    type[property.substring(1)] = OBJECT;
                    break;
                  default:
                    type[property] = STRING;
                }
              }
            });
          });
        }
        DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
          if (schemaMetas.some(function (schema) {
            return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
          })) {
            return true;
          }
          if (tagName.indexOf('-') > -1) {
            if (tagName === 'ng-container' || tagName === 'ng-content') {
              return false;
            }
            if (schemaMetas.some(function (schema) {
              return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
            })) {
              return true;
            }
          }
          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
          return !!elementProperties[propName];
        };
        DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
          if (schemaMetas.some(function (schema) {
            return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
          })) {
            return true;
          }
          if (tagName.indexOf('-') > -1) {
            if (tagName === 'ng-container' || tagName === 'ng-content') {
              return true;
            }
            if (schemaMetas.some(function (schema) {
              return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
            })) {
              return true;
            }
          }
          return !!this._schema[tagName.toLowerCase()];
        };
        DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
          if (isAttribute) {
            propName = this.getMappedPropName(propName);
          }
          tagName = tagName.toLowerCase();
          propName = propName.toLowerCase();
          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
          if (ctx) {
            return ctx;
          }
          ctx = SECURITY_SCHEMA['*|' + propName];
          return ctx ? ctx : _angular_core.SecurityContext.NONE;
        };
        DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
          return _ATTR_TO_PROP[propName] || propName;
        };
        DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {
          return 'ng-component';
        };
        DomElementSchemaRegistry.prototype.validateProperty = function (name) {
          if (name.toLowerCase().startsWith('on')) {
            var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
            return {
              error: true,
              msg: msg
            };
          } else {
            return { error: false };
          }
        };
        DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
          if (name.toLowerCase().startsWith('on')) {
            var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...");
            return {
              error: true,
              msg: msg
            };
          } else {
            return { error: false };
          }
        };
        DomElementSchemaRegistry.prototype.allKnownElementNames = function () {
          return Object.keys(this._schema);
        };
        DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
          return dashCaseToCamelCase(propName);
        };
        DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
          var unit = '';
          var strVal = val.toString().trim();
          var errorMsg = null;
          if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
            if (typeof val === 'number') {
              unit = 'px';
            } else {
              var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
              if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
              }
            }
          }
          return {
            error: errorMsg,
            value: strVal + unit
          };
        };
        DomElementSchemaRegistry.decorators = [{ type: _angular_core.Injectable }];
        DomElementSchemaRegistry.ctorParameters = [];
        return DomElementSchemaRegistry;
      }(ElementSchemaRegistry);
      function _isPixelDimensionStyle(prop) {
        switch (prop) {
          case 'width':
          case 'height':
          case 'minWidth':
          case 'minHeight':
          case 'maxWidth':
          case 'maxHeight':
          case 'left':
          case 'top':
          case 'bottom':
          case 'right':
          case 'fontSize':
          case 'outlineWidth':
          case 'outlineOffset':
          case 'paddingTop':
          case 'paddingLeft':
          case 'paddingBottom':
          case 'paddingRight':
          case 'marginTop':
          case 'marginLeft':
          case 'marginBottom':
          case 'marginRight':
          case 'borderRadius':
          case 'borderWidth':
          case 'borderTopWidth':
          case 'borderLeftWidth':
          case 'borderRightWidth':
          case 'borderBottomWidth':
          case 'textIndent':
            return true;
          default:
            return false;
        }
      }
      var _NO_RESOURCE_LOADER = { get: function (url) {
          throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
        } };
      var COMPILER_PROVIDERS = [{
        provide: Reflector,
        useValue: reflector
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, {
        provide: ResourceLoader,
        useValue: _NO_RESOURCE_LOADER
      }, Console, Lexer, Parser, HtmlParser, {
        provide: I18NHtmlParser,
        useFactory: function (parser, translations, format) {
          return new I18NHtmlParser(parser, translations, format);
        },
        deps: [HtmlParser, [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)]]
      }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, {
        provide: CompilerConfig,
        useValue: new CompilerConfig()
      }, RuntimeCompiler, {
        provide: _angular_core.Compiler,
        useExisting: RuntimeCompiler
      }, DomElementSchemaRegistry, {
        provide: ElementSchemaRegistry,
        useExisting: DomElementSchemaRegistry
      }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver, AnimationParser];
      var RuntimeCompilerFactory = function () {
        function RuntimeCompilerFactory(defaultOptions) {
          this._defaultOptions = [{
            useDebug: _angular_core.isDevMode(),
            useJit: true,
            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
          }].concat(defaultOptions);
        }
        RuntimeCompilerFactory.prototype.createCompiler = function (options) {
          if (options === void 0) {
            options = [];
          }
          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
          var injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
            provide: CompilerConfig,
            useFactory: function () {
              return new CompilerConfig({
                genDebugInfo: mergedOptions.useDebug,
                useJit: mergedOptions.useJit,
                defaultEncapsulation: mergedOptions.defaultEncapsulation,
                logBindingUpdate: mergedOptions.useDebug
              });
            },
            deps: []
          }, mergedOptions.providers]);
          return injector.get(_angular_core.Compiler);
        };
        RuntimeCompilerFactory.decorators = [{ type: _angular_core.Injectable }];
        RuntimeCompilerFactory.ctorParameters = [{
          type: Array,
          decorators: [{
            type: _angular_core.Inject,
            args: [_angular_core.COMPILER_OPTIONS]
          }]
        }];
        return RuntimeCompilerFactory;
      }();
      function _initReflector() {
        reflector.reflectionCapabilities = new ReflectionCapabilities();
      }
      var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [{
        provide: _angular_core.COMPILER_OPTIONS,
        useValue: {},
        multi: true
      }, {
        provide: _angular_core.CompilerFactory,
        useClass: RuntimeCompilerFactory
      }, {
        provide: _angular_core.PLATFORM_INITIALIZER,
        useValue: _initReflector,
        multi: true
      }]);
      function _mergeOptions(optionsArr) {
        return {
          useDebug: _lastDefined(optionsArr.map(function (options) {
            return options.useDebug;
          })),
          useJit: _lastDefined(optionsArr.map(function (options) {
            return options.useJit;
          })),
          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) {
            return options.defaultEncapsulation;
          })),
          providers: _mergeArrays(optionsArr.map(function (options) {
            return options.providers;
          }))
        };
      }
      function _lastDefined(args) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (args[i] !== undefined) {
            return args[i];
          }
        }
        return undefined;
      }
      function _mergeArrays(parts) {
        var result = [];
        parts.forEach(function (part) {
          return part && result.push.apply(result, part);
        });
        return result;
      }
      var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
      var ImportGenerator = function () {
        function ImportGenerator() {}
        ImportGenerator.parseAssetUrl = function (url) {
          return AssetUrl.parse(url);
        };
        return ImportGenerator;
      }();
      var AssetUrl = function () {
        function AssetUrl(packageName, firstLevelDir, modulePath) {
          this.packageName = packageName;
          this.firstLevelDir = firstLevelDir;
          this.modulePath = modulePath;
        }
        AssetUrl.parse = function (url, allowNonMatching) {
          if (allowNonMatching === void 0) {
            allowNonMatching = true;
          }
          var match = url.match(_ASSET_URL_RE);
          if (match !== null) {
            return new AssetUrl(match[1], match[2], match[3]);
          }
          if (allowNonMatching) {
            return null;
          }
          throw new Error("Url " + url + " is not a valid asset: url");
        };
        return AssetUrl;
      }();
      exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
      exports.CompilerConfig = CompilerConfig;
      exports.RenderTypes = RenderTypes;
      exports.RuntimeCompiler = RuntimeCompiler;
      exports.DirectiveResolver = DirectiveResolver;
      exports.PipeResolver = PipeResolver;
      exports.NgModuleResolver = NgModuleResolver;
      exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
      exports.InterpolationConfig = InterpolationConfig;
      exports.NgModuleCompiler = NgModuleCompiler;
      exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
      exports.ViewCompiler = ViewCompiler;
      exports.AnimationParser = AnimationParser;
      exports.TextAst = TextAst;
      exports.BoundTextAst = BoundTextAst;
      exports.AttrAst = AttrAst;
      exports.BoundElementPropertyAst = BoundElementPropertyAst;
      exports.BoundEventAst = BoundEventAst;
      exports.ReferenceAst = ReferenceAst;
      exports.VariableAst = VariableAst;
      exports.ElementAst = ElementAst;
      exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
      exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
      exports.DirectiveAst = DirectiveAst;
      exports.ProviderAst = ProviderAst;
      exports.NgContentAst = NgContentAst;
      exports.templateVisitAll = templateVisitAll;
      exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
      exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
      exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
      exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
      exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
      exports.CompileAnimationMetadata = CompileAnimationMetadata;
      exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
      exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
      exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
      exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
      exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
      exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
      exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
      exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
      exports.CompileProviderMetadata = CompileProviderMetadata;
      exports.CompileFactoryMetadata = CompileFactoryMetadata;
      exports.CompileTokenMetadata = CompileTokenMetadata;
      exports.CompileTypeMetadata = CompileTypeMetadata;
      exports.CompileQueryMetadata = CompileQueryMetadata;
      exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
      exports.CompileTemplateMetadata = CompileTemplateMetadata;
      exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
      exports.createHostComponentMeta = createHostComponentMeta;
      exports.CompilePipeMetadata = CompilePipeMetadata;
      exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
      exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
      exports.removeIdentifierDuplicates = removeIdentifierDuplicates;
      exports.isStaticSymbol = isStaticSymbol;
      exports.ProviderMeta = ProviderMeta;
      exports.SourceModule = SourceModule;
      exports.analyzeNgModules = analyzeNgModules;
      exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
      exports.loadNgModuleDirectives = loadNgModuleDirectives;
      exports.OfflineCompiler = OfflineCompiler;
      exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
      exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
      exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
      exports.UrlResolver = UrlResolver;
      exports.getUrlScheme = getUrlScheme;
      exports.ResourceLoader = ResourceLoader;
      exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
      exports.RuntimeCompilerFactory = RuntimeCompilerFactory;
      exports.platformCoreDynamic = platformCoreDynamic;
      exports.ElementSchemaRegistry = ElementSchemaRegistry;
      exports.I18NHtmlParser = I18NHtmlParser;
      exports.MessageBundle = MessageBundle;
      exports.Xliff = Xliff;
      exports.Xmb = Xmb;
      exports.Xtb = Xtb;
      exports.DirectiveNormalizer = DirectiveNormalizer;
      exports.Lexer = Lexer;
      exports.Token = Token;
      exports.EOF = EOF;
      exports.isIdentifier = isIdentifier;
      exports.isQuote = isQuote;
      exports.SplitInterpolation = SplitInterpolation;
      exports.TemplateBindingParseResult = TemplateBindingParseResult;
      exports.Parser = Parser;
      exports._ParseAST = _ParseAST;
      exports.CompileMetadataResolver = CompileMetadataResolver;
      exports.HtmlParser = HtmlParser;
      exports.ParseTreeResult = ParseTreeResult;
      exports.TreeError = TreeError;
      exports.ImportGenerator = ImportGenerator;
      exports.AssetUrl = AssetUrl;
      exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
      exports.TypeScriptEmitter = TypeScriptEmitter;
      exports.ParseLocation = ParseLocation;
      exports.ParseSourceFile = ParseSourceFile;
      exports.ParseSourceSpan = ParseSourceSpan;
      exports.ParseError = ParseError;
      exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
      exports.CssSelector = CssSelector;
      exports.SelectorMatcher = SelectorMatcher;
      exports.SelectorListContext = SelectorListContext;
      exports.SelectorContext = SelectorContext;
      exports.StylesCompileDependency = StylesCompileDependency;
      exports.StylesCompileResult = StylesCompileResult;
      exports.CompiledStylesheet = CompiledStylesheet;
      exports.StyleCompiler = StyleCompiler;
      exports.TemplateParseError = TemplateParseError;
      exports.TemplateParseResult = TemplateParseResult;
      exports.TemplateParser = TemplateParser;
      exports.splitClasses = splitClasses;
      exports.removeSummaryDuplicates = removeSummaryDuplicates;
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("9", ["7"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("7");
  return module.exports;
});
$__System.registerDynamic('a', ['9', '8', 'b'], true, function ($__require, exports, module) {
    /* */
    "format cjs";
    /**
     * @license Angular v2.2.1
     * (c) 2010-2016 Google, Inc. https://angular.io/
     * License: MIT
     */

    var define,
        global = this || self,
        GLOBAL = global;
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('9'), $__require('8'), $__require('b')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser);
    })(this, function (exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
        'use strict';

        var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;

        var __extends = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        var ResourceLoaderImpl = function (_super) {
            __extends(ResourceLoaderImpl, _super);
            function ResourceLoaderImpl() {
                _super.apply(this, arguments);
            }
            ResourceLoaderImpl.prototype.get = function (url) {
                var resolve;
                var reject;
                var promise = new Promise(function (res, rej) {
                    resolve = res;
                    reject = rej;
                });
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.responseType = 'text';
                xhr.onload = function () {
                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                    // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
                    // by IE10)
                    var response = xhr.response || xhr.responseText;
                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                    var status = xhr.status === 1223 ? 204 : xhr.status;
                    // fix status code when it is 0 (0 status is undocumented).
                    // Occurs when accessing file resources or on Android 4.1 stock browser
                    // while retrieving files from application cache.
                    if (status === 0) {
                        status = response ? 200 : 0;
                    }
                    if (200 <= status && status <= 300) {
                        resolve(response);
                    } else {
                        reject("Failed to load " + url);
                    }
                };
                xhr.onerror = function () {
                    reject("Failed to load " + url);
                };
                xhr.send();
                return promise;
            };
            ResourceLoaderImpl.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            ResourceLoaderImpl.ctorParameters = [];
            return ResourceLoaderImpl;
        }(_angular_compiler.ResourceLoader);

        var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
            provide: _angular_core.COMPILER_OPTIONS,
            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
            multi: true
        }];

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var globalScope;
        if (typeof window === 'undefined') {
            if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
                // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
                globalScope = self;
            } else {
                globalScope = global;
            }
        } else {
            globalScope = window;
        }
        // Need to declare a new variable for global here since TypeScript
        // exports the original value of the symbol.
        var _global = globalScope;
        // TODO: remove calls to assert in production environment
        // Note: Can't just export this and import in in other files
        // as `assert` is a reserved keyword in Dart
        _global.assert = function assert(condition) {
            // TODO: to be fixed properly via #2830, noop for now
        };

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$1 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
         * ResourceLoader.
         *
         * The template cache needs to be built and loaded into window.$templateCache
         * via a separate mechanism.
         */
        var CachedResourceLoader = function (_super) {
            __extends$1(CachedResourceLoader, _super);
            function CachedResourceLoader() {
                _super.call(this);
                this._cache = _global.$templateCache;
                if (this._cache == null) {
                    throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
                }
            }
            CachedResourceLoader.prototype.get = function (url) {
                if (this._cache.hasOwnProperty(url)) {
                    return Promise.resolve(this._cache[url]);
                } else {
                    return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
                }
            };
            return CachedResourceLoader;
        }(_angular_compiler.ResourceLoader);

        var __platform_browser_dynamic_private__ = {
            INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
            ResourceLoaderImpl: ResourceLoaderImpl
        };

        /**
         * @experimental
         */
        var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
        /**
         * @stable
         */
        var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

        exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
        exports.platformBrowserDynamic = platformBrowserDynamic;
        exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;
    });
    return module.exports;
});
$__System.registerDynamic("c", ["a"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("a");
  return module.exports;
});
$__System.registerDynamic('d', ['e'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  function toPromise(PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
        PromiseCtor = root_1.root.Rx.config.Promise;
      } else if (root_1.root.Promise) {
        PromiseCtor = root_1.root.Promise;
      }
    }
    if (!PromiseCtor) {
      throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function (resolve, reject) {
      var value;
      _this.subscribe(function (x) {
        return value = x;
      }, function (err) {
        return reject(err);
      }, function () {
        return resolve(value);
      });
    });
  }
  exports.toPromise = toPromise;
  return module.exports;
});
$__System.registerDynamic('f', ['8', 'd', '10', '11', '12', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('8'), $__require('d'), $__require('10'), $__require('11'), $__require('12')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) : factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx.Observable);
    })(this, function (exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_fromPromise) {
      'use strict';

      var AbstractControlDirective = function () {
        function AbstractControlDirective() {}
        Object.defineProperty(AbstractControlDirective.prototype, "control", {
          get: function () {
            throw new Error('unimplemented');
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "value", {
          get: function () {
            return this.control ? this.control.value : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
          get: function () {
            return this.control ? this.control.valid : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
          get: function () {
            return this.control ? this.control.invalid : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
          get: function () {
            return this.control ? this.control.pending : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
          get: function () {
            return this.control ? this.control.errors : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
          get: function () {
            return this.control ? this.control.pristine : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
          get: function () {
            return this.control ? this.control.dirty : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
          get: function () {
            return this.control ? this.control.touched : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
          get: function () {
            return this.control ? this.control.untouched : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
          get: function () {
            return this.control ? this.control.disabled : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
          get: function () {
            return this.control ? this.control.enabled : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
          get: function () {
            return this.control ? this.control.statusChanges : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
          get: function () {
            return this.control ? this.control.valueChanges : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "path", {
          get: function () {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControlDirective.prototype.reset = function (value) {
          if (value === void 0) {
            value = undefined;
          }
          if (this.control) this.control.reset(value);
        };
        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          return this.control ? this.control.hasError(errorCode, path) : false;
        };
        AbstractControlDirective.prototype.getError = function (errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          return this.control ? this.control.getError(errorCode, path) : null;
        };
        return AbstractControlDirective;
      }();
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ControlContainer = function (_super) {
        __extends$1(ControlContainer, _super);
        function ControlContainer() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(ControlContainer.prototype, "formDirective", {
          get: function () {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ControlContainer.prototype, "path", {
          get: function () {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        return ControlContainer;
      }(AbstractControlDirective);
      function isPresent(obj) {
        return obj != null;
      }
      function isBlank(obj) {
        return obj == null;
      }
      function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
      }
      function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
      }
      function isPrimitive(obj) {
        return !isJsObject(obj);
      }
      var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function (m1, m2) {
          var m = {};
          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }();
      var ListWrapper = function () {
        function ListWrapper() {}
        ListWrapper.removeAll = function (list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            if (index > -1) {
              list.splice(index, 1);
            }
          }
        };
        ListWrapper.remove = function (list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function (a, b) {
          if (a.length != b.length) return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return false;
          }
          return true;
        };
        ListWrapper.flatten = function (list) {
          return list.reduce(function (flat, item) {
            var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return flat.concat(flatItem);
          }, []);
        };
        return ListWrapper;
      }();
      var isPromise = _angular_core.__core_private__.isPromise;
      function isEmptyInputValue(value) {
        return value == null || typeof value === 'string' && value.length === 0;
      }
      var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
      var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
      var Validators = function () {
        function Validators() {}
        Validators.required = function (control) {
          return isEmptyInputValue(control.value) ? { 'required': true } : null;
        };
        Validators.minLength = function (minLength) {
          return function (control) {
            if (isEmptyInputValue(control.value)) {
              return null;
            }
            var length = typeof control.value === 'string' ? control.value.length : 0;
            return length < minLength ? { 'minlength': {
                'requiredLength': minLength,
                'actualLength': length
              } } : null;
          };
        };
        Validators.maxLength = function (maxLength) {
          return function (control) {
            var length = typeof control.value === 'string' ? control.value.length : 0;
            return length > maxLength ? { 'maxlength': {
                'requiredLength': maxLength,
                'actualLength': length
              } } : null;
          };
        };
        Validators.pattern = function (pattern) {
          if (!pattern) return Validators.nullValidator;
          var regex;
          var regexStr;
          if (typeof pattern === 'string') {
            regexStr = "^" + pattern + "$";
            regex = new RegExp(regexStr);
          } else {
            regexStr = pattern.toString();
            regex = pattern;
          }
          return function (control) {
            if (isEmptyInputValue(control.value)) {
              return null;
            }
            var value = control.value;
            return regex.test(value) ? null : { 'pattern': {
                'requiredPattern': regexStr,
                'actualValue': value
              } };
          };
        };
        Validators.nullValidator = function (c) {
          return null;
        };
        Validators.compose = function (validators) {
          if (!validators) return null;
          var presentValidators = validators.filter(isPresent);
          if (presentValidators.length == 0) return null;
          return function (control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
          };
        };
        Validators.composeAsync = function (validators) {
          if (!validators) return null;
          var presentValidators = validators.filter(isPresent);
          if (presentValidators.length == 0) return null;
          return function (control) {
            var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
            return Promise.all(promises).then(_mergeErrors);
          };
        };
        return Validators;
      }();
      function _convertToPromise(obj) {
        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
      }
      function _executeValidators(control, validators) {
        return validators.map(function (v) {
          return v(control);
        });
      }
      function _executeAsyncValidators(control, validators) {
        return validators.map(function (v) {
          return v(control);
        });
      }
      function _mergeErrors(arrayOfErrors) {
        var res = arrayOfErrors.reduce(function (res, errors) {
          return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
        }, {});
        return Object.keys(res).length === 0 ? null : res;
      }
      var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
      var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return CheckboxControlValueAccessor;
        }),
        multi: true
      };
      var CheckboxControlValueAccessor = function () {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
        };
        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) {
          this.onChange = fn;
        };
        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        CheckboxControlValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            host: {
              '(change)': 'onChange($event.target.checked)',
              '(blur)': 'onTouched()'
            },
            providers: [CHECKBOX_VALUE_ACCESSOR]
          }]
        }];
        CheckboxControlValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return CheckboxControlValueAccessor;
      }();
      var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return DefaultValueAccessor;
        }),
        multi: true
      };
      var DefaultValueAccessor = function () {
        function DefaultValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        DefaultValueAccessor.prototype.writeValue = function (value) {
          var normalizedValue = value == null ? '' : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        DefaultValueAccessor.prototype.registerOnChange = function (fn) {
          this.onChange = fn;
        };
        DefaultValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        DefaultValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            host: {
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [DEFAULT_VALUE_ACCESSOR]
          }]
        }];
        DefaultValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return DefaultValueAccessor;
      }();
      function normalizeValidator(validator) {
        if (validator.validate) {
          return function (c) {
            return validator.validate(c);
          };
        } else {
          return validator;
        }
      }
      function normalizeAsyncValidator(validator) {
        if (validator.validate) {
          return function (c) {
            return validator.validate(c);
          };
        } else {
          return validator;
        }
      }
      var NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return NumberValueAccessor;
        }),
        multi: true
      };
      var NumberValueAccessor = function () {
        function NumberValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        NumberValueAccessor.prototype.writeValue = function (value) {
          var normalizedValue = value == null ? '' : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        NumberValueAccessor.prototype.registerOnChange = function (fn) {
          this.onChange = function (value) {
            fn(value == '' ? null : parseFloat(value));
          };
        };
        NumberValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        NumberValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [NUMBER_VALUE_ACCESSOR]
          }]
        }];
        NumberValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return NumberValueAccessor;
      }();
      var __extends$2 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function unimplemented() {
        throw new Error('unimplemented');
      }
      var NgControl = function (_super) {
        __extends$2(NgControl, _super);
        function NgControl() {
          _super.apply(this, arguments);
          this._parent = null;
          this.name = null;
          this.valueAccessor = null;
          this._rawValidators = [];
          this._rawAsyncValidators = [];
        }
        Object.defineProperty(NgControl.prototype, "validator", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgControl.prototype, "asyncValidator", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return NgControl;
      }(AbstractControlDirective);
      var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return RadioControlValueAccessor;
        }),
        multi: true
      };
      var RadioControlRegistry = function () {
        function RadioControlRegistry() {
          this._accessors = [];
        }
        RadioControlRegistry.prototype.add = function (control, accessor) {
          this._accessors.push([control, accessor]);
        };
        RadioControlRegistry.prototype.remove = function (accessor) {
          for (var i = this._accessors.length - 1; i >= 0; --i) {
            if (this._accessors[i][1] === accessor) {
              this._accessors.splice(i, 1);
              return;
            }
          }
        };
        RadioControlRegistry.prototype.select = function (accessor) {
          var _this = this;
          this._accessors.forEach(function (c) {
            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
              c[1].fireUncheck(accessor.value);
            }
          });
        };
        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
          if (!controlPair[0].control) return false;
          return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
        };
        RadioControlRegistry.decorators = [{ type: _angular_core.Injectable }];
        RadioControlRegistry.ctorParameters = [];
        return RadioControlRegistry;
      }();
      var RadioControlValueAccessor = function () {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._registry = _registry;
          this._injector = _injector;
          this.onChange = function () {};
          this.onTouched = function () {};
        }
        RadioControlValueAccessor.prototype.ngOnInit = function () {
          this._control = this._injector.get(NgControl);
          this._checkName();
          this._registry.add(this._control, this);
        };
        RadioControlValueAccessor.prototype.ngOnDestroy = function () {
          this._registry.remove(this);
        };
        RadioControlValueAccessor.prototype.writeValue = function (value) {
          this._state = value === this.value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
        };
        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
          var _this = this;
          this._fn = fn;
          this.onChange = function () {
            fn(_this.value);
            _this._registry.select(_this);
          };
        };
        RadioControlValueAccessor.prototype.fireUncheck = function (value) {
          this.writeValue(value);
        };
        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        RadioControlValueAccessor.prototype._checkName = function () {
          if (this.name && this.formControlName && this.name !== this.formControlName) {
            this._throwNameError();
          }
          if (!this.name && this.formControlName) this.name = this.formControlName;
        };
        RadioControlValueAccessor.prototype._throwNameError = function () {
          throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
        };
        RadioControlValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            host: {
              '(change)': 'onChange()',
              '(blur)': 'onTouched()'
            },
            providers: [RADIO_VALUE_ACCESSOR]
          }]
        }];
        RadioControlValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }, { type: RadioControlRegistry }, { type: _angular_core.Injector }];
        RadioControlValueAccessor.propDecorators = {
          'name': [{ type: _angular_core.Input }],
          'formControlName': [{ type: _angular_core.Input }],
          'value': [{ type: _angular_core.Input }]
        };
        return RadioControlValueAccessor;
      }();
      var RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return RangeValueAccessor;
        }),
        multi: true
      };
      var RangeValueAccessor = function () {
        function RangeValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        RangeValueAccessor.prototype.writeValue = function (value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
        };
        RangeValueAccessor.prototype.registerOnChange = function (fn) {
          this.onChange = function (value) {
            fn(value == '' ? null : parseFloat(value));
          };
        };
        RangeValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        RangeValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [RANGE_VALUE_ACCESSOR]
          }]
        }];
        RangeValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return RangeValueAccessor;
      }();
      var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return SelectControlValueAccessor;
        }),
        multi: true
      };
      function _buildValueString(id, value) {
        if (id == null) return "" + value;
        if (!isPrimitive(value)) value = 'Object';
        return (id + ": " + value).slice(0, 50);
      }
      function _extractId(valueString) {
        return valueString.split(':')[0];
      }
      var SelectControlValueAccessor = function () {
        function SelectControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._optionMap = new Map();
          this._idCounter = 0;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        SelectControlValueAccessor.prototype.writeValue = function (value) {
          this.value = value;
          var valueString = _buildValueString(this._getOptionId(value), value);
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
          var _this = this;
          this.onChange = function (valueString) {
            _this.value = valueString;
            fn(_this._getOptionValue(valueString));
          };
        };
        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectControlValueAccessor.prototype._registerOption = function () {
          return (this._idCounter++).toString();
        };
        SelectControlValueAccessor.prototype._getOptionId = function (value) {
          for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id), value)) return id;
          }
          return null;
        };
        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
          var id = _extractId(valueString);
          return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
        };
        SelectControlValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_VALUE_ACCESSOR]
          }]
        }];
        SelectControlValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return SelectControlValueAccessor;
      }();
      var NgSelectOption = function () {
        function NgSelectOption(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select) this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
          set: function (value) {
            if (this._select == null) return;
            this._select._optionMap.set(this.id, value);
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
          set: function (value) {
            this._setElementValue(value);
            if (this._select) this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        NgSelectOption.prototype._setElementValue = function (value) {
          this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectOption.prototype.ngOnDestroy = function () {
          if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        };
        NgSelectOption.decorators = [{
          type: _angular_core.Directive,
          args: [{ selector: 'option' }]
        }];
        NgSelectOption.ctorParameters = [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, {
          type: SelectControlValueAccessor,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }]
        }];
        NgSelectOption.propDecorators = {
          'ngValue': [{
            type: _angular_core.Input,
            args: ['ngValue']
          }],
          'value': [{
            type: _angular_core.Input,
            args: ['value']
          }]
        };
        return NgSelectOption;
      }();
      var SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return SelectMultipleControlValueAccessor;
        }),
        multi: true
      };
      function _buildValueString$1(id, value) {
        if (id == null) return "" + value;
        if (typeof value === 'string') value = "'" + value + "'";
        if (!isPrimitive(value)) value = 'Object';
        return (id + ": " + value).slice(0, 50);
      }
      function _extractId$1(valueString) {
        return valueString.split(':')[0];
      }
      var SelectMultipleControlValueAccessor = function () {
        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._optionMap = new Map();
          this._idCounter = 0;
          this.onChange = function (_) {};
          this.onTouched = function () {};
        }
        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
          var _this = this;
          this.value = value;
          if (value == null) return;
          var values = value;
          var ids = values.map(function (v) {
            return _this._getOptionId(v);
          });
          this._optionMap.forEach(function (opt, o) {
            opt._setSelected(ids.indexOf(o.toString()) > -1);
          });
        };
        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
          var _this = this;
          this.onChange = function (_) {
            var selected = [];
            if (_.hasOwnProperty('selectedOptions')) {
              var options = _.selectedOptions;
              for (var i = 0; i < options.length; i++) {
                var opt = options.item(i);
                var val = _this._getOptionValue(opt.value);
                selected.push(val);
              }
            } else {
              var options = _.options;
              for (var i = 0; i < options.length; i++) {
                var opt = options.item(i);
                if (opt.selected) {
                  var val = _this._getOptionValue(opt.value);
                  selected.push(val);
                }
              }
            }
            fn(selected);
          };
        };
        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
          var id = (this._idCounter++).toString();
          this._optionMap.set(id, value);
          return id;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
          for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id)._value, value)) return id;
          }
          return null;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
          var id = _extractId$1(valueString);
          return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
        };
        SelectMultipleControlValueAccessor.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
            host: {
              '(change)': 'onChange($event.target)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
          }]
        }];
        SelectMultipleControlValueAccessor.ctorParameters = [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
        return SelectMultipleControlValueAccessor;
      }();
      var NgSelectMultipleOption = function () {
        function NgSelectMultipleOption(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select) {
            this.id = this._select._registerOption(this);
          }
        }
        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
          set: function (value) {
            if (this._select == null) return;
            this._value = value;
            this._setElementValue(_buildValueString$1(this.id, value));
            this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
          set: function (value) {
            if (this._select) {
              this._value = value;
              this._setElementValue(_buildValueString$1(this.id, value));
              this._select.writeValue(this._select.value);
            } else {
              this._setElementValue(value);
            }
          },
          enumerable: true,
          configurable: true
        });
        NgSelectMultipleOption.prototype._setElementValue = function (value) {
          this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectMultipleOption.prototype._setSelected = function (selected) {
          this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
        };
        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
          if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        };
        NgSelectMultipleOption.decorators = [{
          type: _angular_core.Directive,
          args: [{ selector: 'option' }]
        }];
        NgSelectMultipleOption.ctorParameters = [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, {
          type: SelectMultipleControlValueAccessor,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }]
        }];
        NgSelectMultipleOption.propDecorators = {
          'ngValue': [{
            type: _angular_core.Input,
            args: ['ngValue']
          }],
          'value': [{
            type: _angular_core.Input,
            args: ['value']
          }]
        };
        return NgSelectMultipleOption;
      }();
      function controlPath(name, parent) {
        return parent.path.concat([name]);
      }
      function setUpControl(control, dir) {
        if (!control) _throwError(dir, 'Cannot find control with');
        if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
        dir.valueAccessor.writeValue(control.value);
        dir.valueAccessor.registerOnChange(function (newValue) {
          dir.viewToModelUpdate(newValue);
          control.markAsDirty();
          control.setValue(newValue, { emitModelToViewChange: false });
        });
        dir.valueAccessor.registerOnTouched(function () {
          return control.markAsTouched();
        });
        control.registerOnChange(function (newValue, emitModelEvent) {
          dir.valueAccessor.writeValue(newValue);
          if (emitModelEvent) dir.viewToModelUpdate(newValue);
        });
        if (dir.valueAccessor.setDisabledState) {
          control.registerOnDisabledChange(function (isDisabled) {
            dir.valueAccessor.setDisabledState(isDisabled);
          });
        }
        dir._rawValidators.forEach(function (validator) {
          if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function () {
            return control.updateValueAndValidity();
          });
        });
        dir._rawAsyncValidators.forEach(function (validator) {
          if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function () {
            return control.updateValueAndValidity();
          });
        });
      }
      function cleanUpControl(control, dir) {
        dir.valueAccessor.registerOnChange(function () {
          return _noControlError(dir);
        });
        dir.valueAccessor.registerOnTouched(function () {
          return _noControlError(dir);
        });
        dir._rawValidators.forEach(function (validator) {
          if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
          }
        });
        dir._rawAsyncValidators.forEach(function (validator) {
          if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
          }
        });
        if (control) control._clearChangeFns();
      }
      function setUpFormContainer(control, dir) {
        if (isBlank(control)) _throwError(dir, 'Cannot find control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
      }
      function _noControlError(dir) {
        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
      }
      function _throwError(dir, message) {
        var messageEnd;
        if (dir.path.length > 1) {
          messageEnd = "path: '" + dir.path.join(' -> ') + "'";
        } else if (dir.path[0]) {
          messageEnd = "name: '" + dir.path + "'";
        } else {
          messageEnd = 'unspecified name attribute';
        }
        throw new Error(message + " " + messageEnd);
      }
      function composeValidators(validators) {
        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
      }
      function composeAsyncValidators(validators) {
        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
      }
      function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model')) return false;
        var change = changes['model'];
        if (change.isFirstChange()) return true;
        return !looseIdentical(viewModel, change.currentValue);
      }
      var BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];
      function isBuiltInAccessor(valueAccessor) {
        return BUILTIN_ACCESSORS.some(function (a) {
          return valueAccessor.constructor === a;
        });
      }
      function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors) return null;
        var defaultAccessor;
        var builtinAccessor;
        var customAccessor;
        valueAccessors.forEach(function (v) {
          if (v.constructor === DefaultValueAccessor) {
            defaultAccessor = v;
          } else if (isBuiltInAccessor(v)) {
            if (builtinAccessor) _throwError(dir, 'More than one built-in value accessor matches form control with');
            builtinAccessor = v;
          } else {
            if (customAccessor) _throwError(dir, 'More than one custom value accessor matches form control with');
            customAccessor = v;
          }
        });
        if (customAccessor) return customAccessor;
        if (builtinAccessor) return builtinAccessor;
        if (defaultAccessor) return defaultAccessor;
        _throwError(dir, 'No valid value accessor for form control with');
        return null;
      }
      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var AbstractFormGroupDirective = function (_super) {
        __extends(AbstractFormGroupDirective, _super);
        function AbstractFormGroupDirective() {
          _super.apply(this, arguments);
        }
        AbstractFormGroupDirective.prototype.ngOnInit = function () {
          this._checkParentType();
          this.formDirective.addFormGroup(this);
        };
        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
          if (this.formDirective) {
            this.formDirective.removeFormGroup(this);
          }
        };
        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
          get: function () {
            return this.formDirective.getFormGroup(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
          get: function () {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
          get: function () {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
          get: function () {
            return composeValidators(this._validators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
          get: function () {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        AbstractFormGroupDirective.prototype._checkParentType = function () {};
        return AbstractFormGroupDirective;
      }(ControlContainer);
      var __extends$3 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var AbstractControlStatus = function () {
        function AbstractControlStatus(cd) {
          this._cd = cd;
        }
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
          get: function () {
            return this._cd.control ? this._cd.control.untouched : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
          get: function () {
            return this._cd.control ? this._cd.control.touched : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
          get: function () {
            return this._cd.control ? this._cd.control.pristine : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
          get: function () {
            return this._cd.control ? this._cd.control.dirty : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
          get: function () {
            return this._cd.control ? this._cd.control.valid : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
          get: function () {
            return this._cd.control ? this._cd.control.invalid : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
          get: function () {
            return this._cd.control ? this._cd.control.pending : false;
          },
          enumerable: true,
          configurable: true
        });
        return AbstractControlStatus;
      }();
      var ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid',
        '[class.ng-pending]': 'ngClassPending'
      };
      var NgControlStatus = function (_super) {
        __extends$3(NgControlStatus, _super);
        function NgControlStatus(cd) {
          _super.call(this, cd);
        }
        NgControlStatus.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formControlName],[ngModel],[formControl]',
            host: ngControlStatusHost
          }]
        }];
        NgControlStatus.ctorParameters = [{
          type: NgControl,
          decorators: [{ type: _angular_core.Self }]
        }];
        return NgControlStatus;
      }(AbstractControlStatus);
      var NgControlStatusGroup = function (_super) {
        __extends$3(NgControlStatusGroup, _super);
        function NgControlStatusGroup(cd) {
          _super.call(this, cd);
        }
        NgControlStatusGroup.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            host: ngControlStatusHost
          }]
        }];
        NgControlStatusGroup.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Self }]
        }];
        return NgControlStatusGroup;
      }(AbstractControlStatus);
      var __extends$5 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var EventEmitter = function (_super) {
        __extends$5(EventEmitter, _super);
        function EventEmitter(isAsync) {
          if (isAsync === void 0) {
            isAsync = false;
          }
          _super.call(this);
          this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function (value) {
          _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
          var schedulerFn;
          var errorFn = function (err) {
            return null;
          };
          var completeFn = function () {
            return null;
          };
          if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext.next(value);
              });
            } : function (value) {
              generatorOrNext.next(value);
            };
            if (generatorOrNext.error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return generatorOrNext.error(err);
                });
              } : function (err) {
                generatorOrNext.error(err);
              };
            }
            if (generatorOrNext.complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return generatorOrNext.complete();
                });
              } : function () {
                generatorOrNext.complete();
              };
            }
          } else {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext(value);
              });
            } : function (value) {
              generatorOrNext(value);
            };
            if (error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return error(err);
                });
              } : function (err) {
                error(err);
              };
            }
            if (complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return complete();
                });
              } : function () {
                complete();
              };
            }
          }
          return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
      }(rxjs_Subject.Subject);
      var __extends$6 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var VALID = 'VALID';
      var INVALID = 'INVALID';
      var PENDING = 'PENDING';
      var DISABLED = 'DISABLED';
      function _find(control, path, delimiter) {
        if (path == null) return null;
        if (!(path instanceof Array)) {
          path = path.split(delimiter);
        }
        if (path instanceof Array && path.length === 0) return null;
        return path.reduce(function (v, name) {
          if (v instanceof FormGroup) {
            return v.controls[name] || null;
          }
          if (v instanceof FormArray) {
            return v.at(name) || null;
          }
          return null;
        }, control);
      }
      function toObservable(r) {
        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
      }
      function coerceToValidator(validator) {
        return Array.isArray(validator) ? composeValidators(validator) : validator;
      }
      function coerceToAsyncValidator(asyncValidator) {
        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
      }
      var AbstractControl = function () {
        function AbstractControl(validator, asyncValidator) {
          this.validator = validator;
          this.asyncValidator = asyncValidator;
          this._onCollectionChange = function () {};
          this._pristine = true;
          this._touched = false;
          this._onDisabledChange = [];
        }
        Object.defineProperty(AbstractControl.prototype, "value", {
          get: function () {
            return this._value;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "parent", {
          get: function () {
            return this._parent;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "status", {
          get: function () {
            return this._status;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valid", {
          get: function () {
            return this._status === VALID;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "invalid", {
          get: function () {
            return this._status === INVALID;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pending", {
          get: function () {
            return this._status == PENDING;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "disabled", {
          get: function () {
            return this._status === DISABLED;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "enabled", {
          get: function () {
            return this._status !== DISABLED;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "errors", {
          get: function () {
            return this._errors;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pristine", {
          get: function () {
            return this._pristine;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "dirty", {
          get: function () {
            return !this.pristine;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "touched", {
          get: function () {
            return this._touched;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "untouched", {
          get: function () {
            return !this._touched;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
          get: function () {
            return this._valueChanges;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
          get: function () {
            return this._statusChanges;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControl.prototype.setValidators = function (newValidator) {
          this.validator = coerceToValidator(newValidator);
        };
        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
          this.asyncValidator = coerceToAsyncValidator(newValidator);
        };
        AbstractControl.prototype.clearValidators = function () {
          this.validator = null;
        };
        AbstractControl.prototype.clearAsyncValidators = function () {
          this.asyncValidator = null;
        };
        AbstractControl.prototype.markAsTouched = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = true;
          if (this._parent && !onlySelf) {
            this._parent.markAsTouched({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype.markAsUntouched = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = false;
          this._forEachChild(function (control) {
            control.markAsUntouched({ onlySelf: true });
          });
          if (this._parent && !onlySelf) {
            this._parent._updateTouched({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype.markAsDirty = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = false;
          if (this._parent && !onlySelf) {
            this._parent.markAsDirty({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype.markAsPristine = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = true;
          this._forEachChild(function (control) {
            control.markAsPristine({ onlySelf: true });
          });
          if (this._parent && !onlySelf) {
            this._parent._updatePristine({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype.markAsPending = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._status = PENDING;
          if (this._parent && !onlySelf) {
            this._parent.markAsPending({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype.disable = function (_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._status = DISABLED;
          this._errors = null;
          this._forEachChild(function (control) {
            control.disable({ onlySelf: true });
          });
          this._updateValue();
          if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
          }
          this._updateAncestors(onlySelf);
          this._onDisabledChange.forEach(function (changeFn) {
            return changeFn(true);
          });
        };
        AbstractControl.prototype.enable = function (_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._status = VALID;
          this._forEachChild(function (control) {
            control.enable({ onlySelf: true });
          });
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: emitEvent
          });
          this._updateAncestors(onlySelf);
          this._onDisabledChange.forEach(function (changeFn) {
            return changeFn(false);
          });
        };
        AbstractControl.prototype._updateAncestors = function (onlySelf) {
          if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity();
            this._parent._updatePristine();
            this._parent._updateTouched();
          }
        };
        AbstractControl.prototype.setParent = function (parent) {
          this._parent = parent;
        };
        AbstractControl.prototype.updateValueAndValidity = function (_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._setInitialStatus();
          this._updateValue();
          if (this.enabled) {
            this._errors = this._runValidator();
            this._status = this._calculateStatus();
            if (this._status === VALID || this._status === PENDING) {
              this._runAsyncValidator(emitEvent);
            }
          }
          if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
          }
          if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity({
              onlySelf: onlySelf,
              emitEvent: emitEvent
            });
          }
        };
        AbstractControl.prototype._updateTreeValidity = function (_a) {
          var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
          this._forEachChild(function (ctrl) {
            return ctrl._updateTreeValidity({ emitEvent: emitEvent });
          });
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: emitEvent
          });
        };
        AbstractControl.prototype._setInitialStatus = function () {
          this._status = this._allControlsDisabled() ? DISABLED : VALID;
        };
        AbstractControl.prototype._runValidator = function () {
          return this.validator ? this.validator(this) : null;
        };
        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
          var _this = this;
          if (this.asyncValidator) {
            this._status = PENDING;
            this._cancelExistingSubscription();
            var obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription = obs.subscribe({ next: function (res) {
                return _this.setErrors(res, { emitEvent: emitEvent });
              } });
          }
        };
        AbstractControl.prototype._cancelExistingSubscription = function () {
          if (this._asyncValidationSubscription) {
            this._asyncValidationSubscription.unsubscribe();
          }
        };
        AbstractControl.prototype.setErrors = function (errors, _a) {
          var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
          this._errors = errors;
          this._updateControlsErrors(emitEvent !== false);
        };
        AbstractControl.prototype.get = function (path) {
          return _find(this, path, '.');
        };
        AbstractControl.prototype.getError = function (errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          var control = path ? this.get(path) : this;
          return control && control._errors ? control._errors[errorCode] : null;
        };
        AbstractControl.prototype.hasError = function (errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          return !!this.getError(errorCode, path);
        };
        Object.defineProperty(AbstractControl.prototype, "root", {
          get: function () {
            var x = this;
            while (x._parent) {
              x = x._parent;
            }
            return x;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
          this._status = this._calculateStatus();
          if (emitEvent) {
            this._statusChanges.emit(this._status);
          }
          if (this._parent) {
            this._parent._updateControlsErrors(emitEvent);
          }
        };
        AbstractControl.prototype._initObservables = function () {
          this._valueChanges = new EventEmitter();
          this._statusChanges = new EventEmitter();
        };
        AbstractControl.prototype._calculateStatus = function () {
          if (this._allControlsDisabled()) return DISABLED;
          if (this._errors) return INVALID;
          if (this._anyControlsHaveStatus(PENDING)) return PENDING;
          if (this._anyControlsHaveStatus(INVALID)) return INVALID;
          return VALID;
        };
        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
          return this._anyControls(function (control) {
            return control.status === status;
          });
        };
        AbstractControl.prototype._anyControlsDirty = function () {
          return this._anyControls(function (control) {
            return control.dirty;
          });
        };
        AbstractControl.prototype._anyControlsTouched = function () {
          return this._anyControls(function (control) {
            return control.touched;
          });
        };
        AbstractControl.prototype._updatePristine = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = !this._anyControlsDirty();
          if (this._parent && !onlySelf) {
            this._parent._updatePristine({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype._updateTouched = function (_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = this._anyControlsTouched();
          if (this._parent && !onlySelf) {
            this._parent._updateTouched({ onlySelf: onlySelf });
          }
        };
        AbstractControl.prototype._isBoxedValue = function (formState) {
          return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
        };
        AbstractControl.prototype._registerOnCollectionChange = function (fn) {
          this._onCollectionChange = fn;
        };
        return AbstractControl;
      }();
      var FormControl = function (_super) {
        __extends$6(FormControl, _super);
        function FormControl(formState, validator, asyncValidator) {
          if (formState === void 0) {
            formState = null;
          }
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
          this._onChange = [];
          this._applyFormState(formState);
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
          this._initObservables();
        }
        FormControl.prototype.setValue = function (value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent,
              emitModelToViewChange = _b.emitModelToViewChange,
              emitViewToModelChange = _b.emitViewToModelChange;
          this._value = value;
          if (this._onChange.length && emitModelToViewChange !== false) {
            this._onChange.forEach(function (changeFn) {
              return changeFn(_this._value, emitViewToModelChange !== false);
            });
          }
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormControl.prototype.patchValue = function (value, options) {
          if (options === void 0) {
            options = {};
          }
          this.setValue(value, options);
        };
        FormControl.prototype.reset = function (formState, _a) {
          if (formState === void 0) {
            formState = null;
          }
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._applyFormState(formState);
          this.markAsPristine({ onlySelf: onlySelf });
          this.markAsUntouched({ onlySelf: onlySelf });
          this.setValue(this._value, {
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormControl.prototype._updateValue = function () {};
        FormControl.prototype._anyControls = function (condition) {
          return false;
        };
        FormControl.prototype._allControlsDisabled = function () {
          return this.disabled;
        };
        FormControl.prototype.registerOnChange = function (fn) {
          this._onChange.push(fn);
        };
        FormControl.prototype._clearChangeFns = function () {
          this._onChange = [];
          this._onDisabledChange = [];
          this._onCollectionChange = function () {};
        };
        FormControl.prototype.registerOnDisabledChange = function (fn) {
          this._onDisabledChange.push(fn);
        };
        FormControl.prototype._forEachChild = function (cb) {};
        FormControl.prototype._applyFormState = function (formState) {
          if (this._isBoxedValue(formState)) {
            this._value = formState.value;
            formState.disabled ? this.disable({
              onlySelf: true,
              emitEvent: false
            }) : this.enable({
              onlySelf: true,
              emitEvent: false
            });
          } else {
            this._value = formState;
          }
        };
        return FormControl;
      }(AbstractControl);
      var FormGroup = function (_super) {
        __extends$6(FormGroup, _super);
        function FormGroup(controls, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, validator, asyncValidator);
          this.controls = controls;
          this._initObservables();
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
        }
        FormGroup.prototype.registerControl = function (name, control) {
          if (this.controls[name]) return this.controls[name];
          this.controls[name] = control;
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
          return control;
        };
        FormGroup.prototype.addControl = function (name, control) {
          this.registerControl(name, control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.removeControl = function (name) {
          if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
          delete this.controls[name];
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.setControl = function (name, control) {
          if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
          delete this.controls[name];
          if (control) this.registerControl(name, control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.contains = function (controlName) {
          return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
        };
        FormGroup.prototype.setValue = function (value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._checkAllValuesPresent(value);
          Object.keys(value).forEach(function (name) {
            _this._throwIfControlMissing(name);
            _this.controls[name].setValue(value[name], {
              onlySelf: true,
              emitEvent: emitEvent
            });
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormGroup.prototype.patchValue = function (value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          Object.keys(value).forEach(function (name) {
            if (_this.controls[name]) {
              _this.controls[name].patchValue(value[name], {
                onlySelf: true,
                emitEvent: emitEvent
              });
            }
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormGroup.prototype.reset = function (value, _a) {
          if (value === void 0) {
            value = {};
          }
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._forEachChild(function (control, name) {
            control.reset(value[name], {
              onlySelf: true,
              emitEvent: emitEvent
            });
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
          this._updatePristine({ onlySelf: onlySelf });
          this._updateTouched({ onlySelf: onlySelf });
        };
        FormGroup.prototype.getRawValue = function () {
          return this._reduceChildren({}, function (acc, control, name) {
            acc[name] = control.value;
            return acc;
          });
        };
        FormGroup.prototype._throwIfControlMissing = function (name) {
          if (!Object.keys(this.controls).length) {
            throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
          }
          if (!this.controls[name]) {
            throw new Error("Cannot find form control with name: " + name + ".");
          }
        };
        FormGroup.prototype._forEachChild = function (cb) {
          var _this = this;
          Object.keys(this.controls).forEach(function (k) {
            return cb(_this.controls[k], k);
          });
        };
        FormGroup.prototype._setUpControls = function () {
          var _this = this;
          this._forEachChild(function (control) {
            control.setParent(_this);
            control._registerOnCollectionChange(_this._onCollectionChange);
          });
        };
        FormGroup.prototype._updateValue = function () {
          this._value = this._reduceValue();
        };
        FormGroup.prototype._anyControls = function (condition) {
          var _this = this;
          var res = false;
          this._forEachChild(function (control, name) {
            res = res || _this.contains(name) && condition(control);
          });
          return res;
        };
        FormGroup.prototype._reduceValue = function () {
          var _this = this;
          return this._reduceChildren({}, function (acc, control, name) {
            if (control.enabled || _this.disabled) {
              acc[name] = control.value;
            }
            return acc;
          });
        };
        FormGroup.prototype._reduceChildren = function (initValue, fn) {
          var res = initValue;
          this._forEachChild(function (control, name) {
            res = fn(res, control, name);
          });
          return res;
        };
        FormGroup.prototype._allControlsDisabled = function () {
          for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
            var controlName = _a[_i];
            if (this.controls[controlName].enabled) {
              return false;
            }
          }
          return Object.keys(this.controls).length > 0 || this.disabled;
        };
        FormGroup.prototype._checkAllValuesPresent = function (value) {
          this._forEachChild(function (control, name) {
            if (value[name] === undefined) {
              throw new Error("Must supply a value for form control with name: '" + name + "'.");
            }
          });
        };
        return FormGroup;
      }(AbstractControl);
      var FormArray = function (_super) {
        __extends$6(FormArray, _super);
        function FormArray(controls, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, validator, asyncValidator);
          this.controls = controls;
          this._initObservables();
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
        }
        FormArray.prototype.at = function (index) {
          return this.controls[index];
        };
        FormArray.prototype.push = function (control) {
          this.controls.push(control);
          this._registerControl(control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.insert = function (index, control) {
          this.controls.splice(index, 0, control);
          this._registerControl(control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.removeAt = function (index) {
          if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
          this.controls.splice(index, 1);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.setControl = function (index, control) {
          if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
          this.controls.splice(index, 1);
          if (control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
          }
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        Object.defineProperty(FormArray.prototype, "length", {
          get: function () {
            return this.controls.length;
          },
          enumerable: true,
          configurable: true
        });
        FormArray.prototype.setValue = function (value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._checkAllValuesPresent(value);
          value.forEach(function (newValue, index) {
            _this._throwIfControlMissing(index);
            _this.at(index).setValue(newValue, {
              onlySelf: true,
              emitEvent: emitEvent
            });
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormArray.prototype.patchValue = function (value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          value.forEach(function (newValue, index) {
            if (_this.at(index)) {
              _this.at(index).patchValue(newValue, {
                onlySelf: true,
                emitEvent: emitEvent
              });
            }
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormArray.prototype.reset = function (value, _a) {
          if (value === void 0) {
            value = [];
          }
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._forEachChild(function (control, index) {
            control.reset(value[index], {
              onlySelf: true,
              emitEvent: emitEvent
            });
          });
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
          this._updatePristine({ onlySelf: onlySelf });
          this._updateTouched({ onlySelf: onlySelf });
        };
        FormArray.prototype.getRawValue = function () {
          return this.controls.map(function (control) {
            return control.value;
          });
        };
        FormArray.prototype._throwIfControlMissing = function (index) {
          if (!this.controls.length) {
            throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
          }
          if (!this.at(index)) {
            throw new Error("Cannot find form control at index " + index);
          }
        };
        FormArray.prototype._forEachChild = function (cb) {
          this.controls.forEach(function (control, index) {
            cb(control, index);
          });
        };
        FormArray.prototype._updateValue = function () {
          var _this = this;
          this._value = this.controls.filter(function (control) {
            return control.enabled || _this.disabled;
          }).map(function (control) {
            return control.value;
          });
        };
        FormArray.prototype._anyControls = function (condition) {
          return this.controls.some(function (control) {
            return control.enabled && condition(control);
          });
        };
        FormArray.prototype._setUpControls = function () {
          var _this = this;
          this._forEachChild(function (control) {
            return _this._registerControl(control);
          });
        };
        FormArray.prototype._checkAllValuesPresent = function (value) {
          this._forEachChild(function (control, i) {
            if (value[i] === undefined) {
              throw new Error("Must supply a value for form control at index: " + i + ".");
            }
          });
        };
        FormArray.prototype._allControlsDisabled = function () {
          for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            if (control.enabled) return false;
          }
          return this.controls.length > 0 || this.disabled;
        };
        FormArray.prototype._registerControl = function (control) {
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
        };
        return FormArray;
      }(AbstractControl);
      var __extends$4 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function () {
          return NgForm;
        })
      };
      var resolvedPromise = Promise.resolve(null);
      var NgForm = function (_super) {
        __extends$4(NgForm, _super);
        function NgForm(validators, asyncValidators) {
          _super.call(this);
          this._submitted = false;
          this.ngSubmit = new EventEmitter();
          this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
        }
        Object.defineProperty(NgForm.prototype, "submitted", {
          get: function () {
            return this._submitted;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "formDirective", {
          get: function () {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
          get: function () {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
          get: function () {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
          get: function () {
            return this.form.controls;
          },
          enumerable: true,
          configurable: true
        });
        NgForm.prototype.addControl = function (dir) {
          var _this = this;
          resolvedPromise.then(function () {
            var container = _this._findContainer(dir.path);
            dir._control = container.registerControl(dir.name, dir.control);
            setUpControl(dir.control, dir);
            dir.control.updateValueAndValidity({ emitEvent: false });
          });
        };
        NgForm.prototype.getControl = function (dir) {
          return this.form.get(dir.path);
        };
        NgForm.prototype.removeControl = function (dir) {
          var _this = this;
          resolvedPromise.then(function () {
            var container = _this._findContainer(dir.path);
            if (container) {
              container.removeControl(dir.name);
            }
          });
        };
        NgForm.prototype.addFormGroup = function (dir) {
          var _this = this;
          resolvedPromise.then(function () {
            var container = _this._findContainer(dir.path);
            var group = new FormGroup({});
            setUpFormContainer(group, dir);
            container.registerControl(dir.name, group);
            group.updateValueAndValidity({ emitEvent: false });
          });
        };
        NgForm.prototype.removeFormGroup = function (dir) {
          var _this = this;
          resolvedPromise.then(function () {
            var container = _this._findContainer(dir.path);
            if (container) {
              container.removeControl(dir.name);
            }
          });
        };
        NgForm.prototype.getFormGroup = function (dir) {
          return this.form.get(dir.path);
        };
        NgForm.prototype.updateModel = function (dir, value) {
          var _this = this;
          resolvedPromise.then(function () {
            var ctrl = _this.form.get(dir.path);
            ctrl.setValue(value);
          });
        };
        NgForm.prototype.setValue = function (value) {
          this.control.setValue(value);
        };
        NgForm.prototype.onSubmit = function ($event) {
          this._submitted = true;
          this.ngSubmit.emit($event);
          return false;
        };
        NgForm.prototype.onReset = function () {
          this.resetForm();
        };
        NgForm.prototype.resetForm = function (value) {
          if (value === void 0) {
            value = undefined;
          }
          this.form.reset(value);
          this._submitted = false;
        };
        NgForm.prototype._findContainer = function (path) {
          path.pop();
          return path.length ? this.form.get(path) : this.form;
        };
        NgForm.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
            providers: [formDirectiveProvider],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            outputs: ['ngSubmit'],
            exportAs: 'ngForm'
          }]
        }];
        NgForm.ctorParameters = [{
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        return NgForm;
      }(ControlContainer);
      var Examples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
      };
      var TemplateDrivenErrors = function () {
        function TemplateDrivenErrors() {}
        TemplateDrivenErrors.modelParentException = function () {
          throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
        };
        TemplateDrivenErrors.formGroupNameException = function () {
          throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
        };
        TemplateDrivenErrors.missingNameException = function () {
          throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
        };
        TemplateDrivenErrors.modelGroupParentException = function () {
          throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
        };
        return TemplateDrivenErrors;
      }();
      var __extends$8 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var modelGroupProvider = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function () {
          return NgModelGroup;
        })
      };
      var NgModelGroup = function (_super) {
        __extends$8(NgModelGroup, _super);
        function NgModelGroup(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        NgModelGroup.prototype._checkParentType = function () {
          if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelGroupParentException();
          }
        };
        NgModelGroup.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[ngModelGroup]',
            providers: [modelGroupProvider],
            exportAs: 'ngModelGroup'
          }]
        }];
        NgModelGroup.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        NgModelGroup.propDecorators = { 'name': [{
            type: _angular_core.Input,
            args: ['ngModelGroup']
          }] };
        return NgModelGroup;
      }(AbstractFormGroupDirective);
      var __extends$7 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var formControlBinding = {
        provide: NgControl,
        useExisting: _angular_core.forwardRef(function () {
          return NgModel;
        })
      };
      var resolvedPromise$1 = Promise.resolve(null);
      var NgModel = function (_super) {
        __extends$7(NgModel, _super);
        function NgModel(parent, validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this._control = new FormControl();
          this._registered = false;
          this.update = new EventEmitter();
          this._parent = parent;
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        NgModel.prototype.ngOnChanges = function (changes) {
          this._checkForErrors();
          if (!this._registered) this._setUpControl();
          if ('isDisabled' in changes) {
            this._updateDisabled(changes);
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            this._updateValue(this.model);
            this.viewModel = this.model;
          }
        };
        NgModel.prototype.ngOnDestroy = function () {
          this.formDirective && this.formDirective.removeControl(this);
        };
        Object.defineProperty(NgModel.prototype, "control", {
          get: function () {
            return this._control;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "path", {
          get: function () {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "formDirective", {
          get: function () {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "validator", {
          get: function () {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "asyncValidator", {
          get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        NgModel.prototype.viewToModelUpdate = function (newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        NgModel.prototype._setUpControl = function () {
          this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
          this._registered = true;
        };
        NgModel.prototype._isStandalone = function () {
          return !this._parent || this.options && this.options.standalone;
        };
        NgModel.prototype._setUpStandalone = function () {
          setUpControl(this._control, this);
          this._control.updateValueAndValidity({ emitEvent: false });
        };
        NgModel.prototype._checkForErrors = function () {
          if (!this._isStandalone()) {
            this._checkParentType();
          }
          this._checkName();
        };
        NgModel.prototype._checkParentType = function () {
          if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
            TemplateDrivenErrors.formGroupNameException();
          } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelParentException();
          }
        };
        NgModel.prototype._checkName = function () {
          if (this.options && this.options.name) this.name = this.options.name;
          if (!this._isStandalone() && !this.name) {
            TemplateDrivenErrors.missingNameException();
          }
        };
        NgModel.prototype._updateValue = function (value) {
          var _this = this;
          resolvedPromise$1.then(function () {
            _this.control.setValue(value, { emitViewToModelChange: false });
          });
        };
        NgModel.prototype._updateDisabled = function (changes) {
          var _this = this;
          var disabledValue = changes['isDisabled'].currentValue;
          var isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';
          resolvedPromise$1.then(function () {
            if (isDisabled && !_this.control.disabled) {
              _this.control.disable();
            } else if (!isDisabled && _this.control.disabled) {
              _this.control.enable();
            }
          });
        };
        NgModel.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[ngModel]:not([formControlName]):not([formControl])',
            providers: [formControlBinding],
            exportAs: 'ngModel'
          }]
        }];
        NgModel.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        NgModel.propDecorators = {
          'name': [{ type: _angular_core.Input }],
          'isDisabled': [{
            type: _angular_core.Input,
            args: ['disabled']
          }],
          'model': [{
            type: _angular_core.Input,
            args: ['ngModel']
          }],
          'options': [{
            type: _angular_core.Input,
            args: ['ngModelOptions']
          }],
          'update': [{
            type: _angular_core.Output,
            args: ['ngModelChange']
          }]
        };
        return NgModel;
      }(NgControl);
      var ReactiveErrors = function () {
        function ReactiveErrors() {}
        ReactiveErrors.controlParentException = function () {
          throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
        };
        ReactiveErrors.ngModelGroupException = function () {
          throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
        };
        ReactiveErrors.missingFormException = function () {
          throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
        };
        ReactiveErrors.groupParentException = function () {
          throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
        };
        ReactiveErrors.arrayParentException = function () {
          throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
        };
        ReactiveErrors.disabledAttrWarning = function () {
          console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
        };
        return ReactiveErrors;
      }();
      var __extends$9 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var formControlBinding$1 = {
        provide: NgControl,
        useExisting: _angular_core.forwardRef(function () {
          return FormControlDirective;
        })
      };
      var FormControlDirective = function (_super) {
        __extends$9(FormControlDirective, _super);
        function FormControlDirective(validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this.update = new EventEmitter();
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
          set: function (isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          },
          enumerable: true,
          configurable: true
        });
        FormControlDirective.prototype.ngOnChanges = function (changes) {
          if (this._isControlChanged(changes)) {
            setUpControl(this.form, this);
            if (this.control.disabled && this.valueAccessor.setDisabledState) {
              this.valueAccessor.setDisabledState(true);
            }
            this.form.updateValueAndValidity({ emitEvent: false });
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            this.form.setValue(this.model);
            this.viewModel = this.model;
          }
        };
        Object.defineProperty(FormControlDirective.prototype, "path", {
          get: function () {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "validator", {
          get: function () {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
          get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "control", {
          get: function () {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        FormControlDirective.prototype._isControlChanged = function (changes) {
          return changes.hasOwnProperty('form');
        };
        FormControlDirective.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formControl]',
            providers: [formControlBinding$1],
            exportAs: 'ngForm'
          }]
        }];
        FormControlDirective.ctorParameters = [{
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        FormControlDirective.propDecorators = {
          'form': [{
            type: _angular_core.Input,
            args: ['formControl']
          }],
          'model': [{
            type: _angular_core.Input,
            args: ['ngModel']
          }],
          'update': [{
            type: _angular_core.Output,
            args: ['ngModelChange']
          }],
          'isDisabled': [{
            type: _angular_core.Input,
            args: ['disabled']
          }]
        };
        return FormControlDirective;
      }(NgControl);
      var __extends$11 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function () {
          return FormGroupDirective;
        })
      };
      var FormGroupDirective = function (_super) {
        __extends$11(FormGroupDirective, _super);
        function FormGroupDirective(_validators, _asyncValidators) {
          _super.call(this);
          this._validators = _validators;
          this._asyncValidators = _asyncValidators;
          this._submitted = false;
          this.directives = [];
          this.form = null;
          this.ngSubmit = new EventEmitter();
        }
        FormGroupDirective.prototype.ngOnChanges = function (changes) {
          this._checkFormPresent();
          if (changes.hasOwnProperty('form')) {
            this._updateValidators();
            this._updateDomValue();
            this._updateRegistrations();
          }
        };
        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
          get: function () {
            return this._submitted;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
          get: function () {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "control", {
          get: function () {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "path", {
          get: function () {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        FormGroupDirective.prototype.addControl = function (dir) {
          var ctrl = this.form.get(dir.path);
          setUpControl(ctrl, dir);
          ctrl.updateValueAndValidity({ emitEvent: false });
          this.directives.push(dir);
          return ctrl;
        };
        FormGroupDirective.prototype.getControl = function (dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.removeControl = function (dir) {
          ListWrapper.remove(this.directives, dir);
        };
        FormGroupDirective.prototype.addFormGroup = function (dir) {
          var ctrl = this.form.get(dir.path);
          setUpFormContainer(ctrl, dir);
          ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormGroup = function (dir) {};
        FormGroupDirective.prototype.getFormGroup = function (dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.addFormArray = function (dir) {
          var ctrl = this.form.get(dir.path);
          setUpFormContainer(ctrl, dir);
          ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormArray = function (dir) {};
        FormGroupDirective.prototype.getFormArray = function (dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.updateModel = function (dir, value) {
          var ctrl = this.form.get(dir.path);
          ctrl.setValue(value);
        };
        FormGroupDirective.prototype.onSubmit = function ($event) {
          this._submitted = true;
          this.ngSubmit.emit($event);
          return false;
        };
        FormGroupDirective.prototype.onReset = function () {
          this.resetForm();
        };
        FormGroupDirective.prototype.resetForm = function (value) {
          if (value === void 0) {
            value = undefined;
          }
          this.form.reset(value);
          this._submitted = false;
        };
        FormGroupDirective.prototype._updateDomValue = function () {
          var _this = this;
          this.directives.forEach(function (dir) {
            var newCtrl = _this.form.get(dir.path);
            if (dir._control !== newCtrl) {
              cleanUpControl(dir._control, dir);
              if (newCtrl) setUpControl(newCtrl, dir);
              dir._control = newCtrl;
            }
          });
          this.form._updateTreeValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype._updateRegistrations = function () {
          var _this = this;
          this.form._registerOnCollectionChange(function () {
            return _this._updateDomValue();
          });
          if (this._oldForm) this._oldForm._registerOnCollectionChange(function () {});
          this._oldForm = this.form;
        };
        FormGroupDirective.prototype._updateValidators = function () {
          var sync = composeValidators(this._validators);
          this.form.validator = Validators.compose([this.form.validator, sync]);
          var async = composeAsyncValidators(this._asyncValidators);
          this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        };
        FormGroupDirective.prototype._checkFormPresent = function () {
          if (!this.form) {
            ReactiveErrors.missingFormException();
          }
        };
        FormGroupDirective.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formGroup]',
            providers: [formDirectiveProvider$1],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            exportAs: 'ngForm'
          }]
        }];
        FormGroupDirective.ctorParameters = [{
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormGroupDirective.propDecorators = {
          'form': [{
            type: _angular_core.Input,
            args: ['formGroup']
          }],
          'ngSubmit': [{ type: _angular_core.Output }]
        };
        return FormGroupDirective;
      }(ControlContainer);
      var __extends$12 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function () {
          return FormGroupName;
        })
      };
      var FormGroupName = function (_super) {
        __extends$12(FormGroupName, _super);
        function FormGroupName(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        FormGroupName.prototype._checkParentType = function () {
          if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.groupParentException();
          }
        };
        FormGroupName.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formGroupName]',
            providers: [formGroupNameProvider]
          }]
        }];
        FormGroupName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormGroupName.propDecorators = { 'name': [{
            type: _angular_core.Input,
            args: ['formGroupName']
          }] };
        return FormGroupName;
      }(AbstractFormGroupDirective);
      var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function () {
          return FormArrayName;
        })
      };
      var FormArrayName = function (_super) {
        __extends$12(FormArrayName, _super);
        function FormArrayName(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        FormArrayName.prototype.ngOnInit = function () {
          this._checkParentType();
          this.formDirective.addFormArray(this);
        };
        FormArrayName.prototype.ngOnDestroy = function () {
          if (this.formDirective) {
            this.formDirective.removeFormArray(this);
          }
        };
        Object.defineProperty(FormArrayName.prototype, "control", {
          get: function () {
            return this.formDirective.getFormArray(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "formDirective", {
          get: function () {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "path", {
          get: function () {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "validator", {
          get: function () {
            return composeValidators(this._validators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
          get: function () {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        FormArrayName.prototype._checkParentType = function () {
          if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.arrayParentException();
          }
        };
        FormArrayName.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formArrayName]',
            providers: [formArrayNameProvider]
          }]
        }];
        FormArrayName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormArrayName.propDecorators = { 'name': [{
            type: _angular_core.Input,
            args: ['formArrayName']
          }] };
        return FormArrayName;
      }(ControlContainer);
      function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
      }
      var __extends$10 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var controlNameBinding = {
        provide: NgControl,
        useExisting: _angular_core.forwardRef(function () {
          return FormControlName;
        })
      };
      var FormControlName = function (_super) {
        __extends$10(FormControlName, _super);
        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this._added = false;
          this.update = new EventEmitter();
          this._parent = parent;
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        Object.defineProperty(FormControlName.prototype, "isDisabled", {
          set: function (isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          },
          enumerable: true,
          configurable: true
        });
        FormControlName.prototype.ngOnChanges = function (changes) {
          if (!this._added) this._setUpControl();
          if (isPropertyUpdated(changes, this.viewModel)) {
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
          }
        };
        FormControlName.prototype.ngOnDestroy = function () {
          if (this.formDirective) {
            this.formDirective.removeControl(this);
          }
        };
        FormControlName.prototype.viewToModelUpdate = function (newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        Object.defineProperty(FormControlName.prototype, "path", {
          get: function () {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "formDirective", {
          get: function () {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "validator", {
          get: function () {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
          get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "control", {
          get: function () {
            return this._control;
          },
          enumerable: true,
          configurable: true
        });
        FormControlName.prototype._checkParentType = function () {
          if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
            ReactiveErrors.ngModelGroupException();
          } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
            ReactiveErrors.controlParentException();
          }
        };
        FormControlName.prototype._setUpControl = function () {
          this._checkParentType();
          this._control = this.formDirective.addControl(this);
          if (this.control.disabled && this.valueAccessor.setDisabledState) {
            this.valueAccessor.setDisabledState(true);
          }
          this._added = true;
        };
        FormControlName.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[formControlName]',
            providers: [controlNameBinding]
          }]
        }];
        FormControlName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, {
            type: _angular_core.Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        FormControlName.propDecorators = {
          'name': [{
            type: _angular_core.Input,
            args: ['formControlName']
          }],
          'model': [{
            type: _angular_core.Input,
            args: ['ngModel']
          }],
          'update': [{
            type: _angular_core.Output,
            args: ['ngModelChange']
          }],
          'isDisabled': [{
            type: _angular_core.Input,
            args: ['disabled']
          }]
        };
        return FormControlName;
      }(NgControl);
      var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: _angular_core.forwardRef(function () {
          return RequiredValidator;
        }),
        multi: true
      };
      var RequiredValidator = function () {
        function RequiredValidator() {}
        Object.defineProperty(RequiredValidator.prototype, "required", {
          get: function () {
            return this._required;
          },
          set: function (value) {
            this._required = value != null && value !== false && "" + value !== 'false';
            if (this._onChange) this._onChange();
          },
          enumerable: true,
          configurable: true
        });
        RequiredValidator.prototype.validate = function (c) {
          return this.required ? Validators.required(c) : null;
        };
        RequiredValidator.prototype.registerOnValidatorChange = function (fn) {
          this._onChange = fn;
        };
        RequiredValidator.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[required][formControlName],[required][formControl],[required][ngModel]',
            providers: [REQUIRED_VALIDATOR],
            host: { '[attr.required]': 'required ? "" : null' }
          }]
        }];
        RequiredValidator.ctorParameters = [];
        RequiredValidator.propDecorators = { 'required': [{ type: _angular_core.Input }] };
        return RequiredValidator;
      }();
      var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: _angular_core.forwardRef(function () {
          return MinLengthValidator;
        }),
        multi: true
      };
      var MinLengthValidator = function () {
        function MinLengthValidator() {}
        MinLengthValidator.prototype.ngOnChanges = function (changes) {
          if ('minlength' in changes) {
            this._createValidator();
            if (this._onChange) this._onChange();
          }
        };
        MinLengthValidator.prototype.validate = function (c) {
          return this.minlength == null ? null : this._validator(c);
        };
        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) {
          this._onChange = fn;
        };
        MinLengthValidator.prototype._createValidator = function () {
          this._validator = Validators.minLength(parseInt(this.minlength, 10));
        };
        MinLengthValidator.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            providers: [MIN_LENGTH_VALIDATOR],
            host: { '[attr.minlength]': 'minlength ? minlength : null' }
          }]
        }];
        MinLengthValidator.ctorParameters = [];
        MinLengthValidator.propDecorators = { 'minlength': [{ type: _angular_core.Input }] };
        return MinLengthValidator;
      }();
      var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: _angular_core.forwardRef(function () {
          return MaxLengthValidator;
        }),
        multi: true
      };
      var MaxLengthValidator = function () {
        function MaxLengthValidator() {}
        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
          if ('maxlength' in changes) {
            this._createValidator();
            if (this._onChange) this._onChange();
          }
        };
        MaxLengthValidator.prototype.validate = function (c) {
          return this.maxlength != null ? this._validator(c) : null;
        };
        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) {
          this._onChange = fn;
        };
        MaxLengthValidator.prototype._createValidator = function () {
          this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
        };
        MaxLengthValidator.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            providers: [MAX_LENGTH_VALIDATOR],
            host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
          }]
        }];
        MaxLengthValidator.ctorParameters = [];
        MaxLengthValidator.propDecorators = { 'maxlength': [{ type: _angular_core.Input }] };
        return MaxLengthValidator;
      }();
      var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: _angular_core.forwardRef(function () {
          return PatternValidator;
        }),
        multi: true
      };
      var PatternValidator = function () {
        function PatternValidator() {}
        PatternValidator.prototype.ngOnChanges = function (changes) {
          if ('pattern' in changes) {
            this._createValidator();
            if (this._onChange) this._onChange();
          }
        };
        PatternValidator.prototype.validate = function (c) {
          return this._validator(c);
        };
        PatternValidator.prototype.registerOnValidatorChange = function (fn) {
          this._onChange = fn;
        };
        PatternValidator.prototype._createValidator = function () {
          this._validator = Validators.pattern(this.pattern);
        };
        PatternValidator.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            providers: [PATTERN_VALIDATOR],
            host: { '[attr.pattern]': 'pattern ? pattern : null' }
          }]
        }];
        PatternValidator.ctorParameters = [];
        PatternValidator.propDecorators = { 'pattern': [{ type: _angular_core.Input }] };
        return PatternValidator;
      }();
      var FormBuilder = function () {
        function FormBuilder() {}
        FormBuilder.prototype.group = function (controlsConfig, extra) {
          if (extra === void 0) {
            extra = null;
          }
          var controls = this._reduceControls(controlsConfig);
          var validator = isPresent(extra) ? extra['validator'] : null;
          var asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
          return new FormGroup(controls, validator, asyncValidator);
        };
        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          return new FormControl(formState, validator, asyncValidator);
        };
        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
          var _this = this;
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          var controls = controlsConfig.map(function (c) {
            return _this._createControl(c);
          });
          return new FormArray(controls, validator, asyncValidator);
        };
        FormBuilder.prototype._reduceControls = function (controlsConfig) {
          var _this = this;
          var controls = {};
          Object.keys(controlsConfig).forEach(function (controlName) {
            controls[controlName] = _this._createControl(controlsConfig[controlName]);
          });
          return controls;
        };
        FormBuilder.prototype._createControl = function (controlConfig) {
          if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
            return controlConfig;
          } else if (Array.isArray(controlConfig)) {
            var value = controlConfig[0];
            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
          } else {
            return this.control(controlConfig);
          }
        };
        FormBuilder.decorators = [{ type: _angular_core.Injectable }];
        FormBuilder.ctorParameters = [];
        return FormBuilder;
      }();
      var SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator];
      var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
      var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
      var InternalFormsSharedModule = function () {
        function InternalFormsSharedModule() {}
        InternalFormsSharedModule.decorators = [{
          type: _angular_core.NgModule,
          args: [{
            declarations: SHARED_FORM_DIRECTIVES,
            exports: SHARED_FORM_DIRECTIVES
          }]
        }];
        InternalFormsSharedModule.ctorParameters = [];
        return InternalFormsSharedModule;
      }();
      var FormsModule = function () {
        function FormsModule() {}
        FormsModule.decorators = [{
          type: _angular_core.NgModule,
          args: [{
            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
            providers: [RadioControlRegistry],
            exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
          }]
        }];
        FormsModule.ctorParameters = [];
        return FormsModule;
      }();
      var ReactiveFormsModule = function () {
        function ReactiveFormsModule() {}
        ReactiveFormsModule.decorators = [{
          type: _angular_core.NgModule,
          args: [{
            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
            providers: [FormBuilder, RadioControlRegistry],
            exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
          }]
        }];
        ReactiveFormsModule.ctorParameters = [];
        return ReactiveFormsModule;
      }();
      exports.AbstractControlDirective = AbstractControlDirective;
      exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
      exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
      exports.ControlContainer = ControlContainer;
      exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
      exports.DefaultValueAccessor = DefaultValueAccessor;
      exports.NgControl = NgControl;
      exports.NgControlStatus = NgControlStatus;
      exports.NgControlStatusGroup = NgControlStatusGroup;
      exports.NgForm = NgForm;
      exports.NgModel = NgModel;
      exports.NgModelGroup = NgModelGroup;
      exports.RadioControlValueAccessor = RadioControlValueAccessor;
      exports.FormControlDirective = FormControlDirective;
      exports.FormControlName = FormControlName;
      exports.FormGroupDirective = FormGroupDirective;
      exports.FormArrayName = FormArrayName;
      exports.FormGroupName = FormGroupName;
      exports.NgSelectOption = NgSelectOption;
      exports.SelectControlValueAccessor = SelectControlValueAccessor;
      exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
      exports.MaxLengthValidator = MaxLengthValidator;
      exports.MinLengthValidator = MinLengthValidator;
      exports.PatternValidator = PatternValidator;
      exports.RequiredValidator = RequiredValidator;
      exports.FormBuilder = FormBuilder;
      exports.AbstractControl = AbstractControl;
      exports.FormArray = FormArray;
      exports.FormControl = FormControl;
      exports.FormGroup = FormGroup;
      exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
      exports.NG_VALIDATORS = NG_VALIDATORS;
      exports.Validators = Validators;
      exports.FormsModule = FormsModule;
      exports.ReactiveFormsModule = ReactiveFormsModule;
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("13", ["f"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("f");
  return module.exports;
});
$__System.registerDynamic('14', ['11', '15', '16', '17', '18'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('11');
  var EmptyObservable_1 = $__require('15');
  var isArray_1 = $__require('16');
  var subscribeToResult_1 = $__require('17');
  var OuterSubscriber_1 = $__require('18');
  var ForkJoinObservable = function (_super) {
    __extends(ForkJoinObservable, _super);
    function ForkJoinObservable(sources, resultSelector) {
      _super.call(this);
      this.sources = sources;
      this.resultSelector = resultSelector;
    }
    ForkJoinObservable.create = function () {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i - 0] = arguments[_i];
      }
      if (sources === null || arguments.length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      }
      var resultSelector = null;
      if (typeof sources[sources.length - 1] === 'function') {
        resultSelector = sources.pop();
      }
      if (sources.length === 1 && isArray_1.isArray(sources[0])) {
        sources = sources[0];
      }
      if (sources.length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      }
      return new ForkJoinObservable(sources, resultSelector);
    };
    ForkJoinObservable.prototype._subscribe = function (subscriber) {
      return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
    };
    return ForkJoinObservable;
  }(Observable_1.Observable);
  exports.ForkJoinObservable = ForkJoinObservable;
  var ForkJoinSubscriber = function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources, resultSelector) {
      _super.call(this, destination);
      this.sources = sources;
      this.resultSelector = resultSelector;
      this.completed = 0;
      this.haveValues = 0;
      var len = sources.length;
      this.total = len;
      this.values = new Array(len);
      for (var i = 0; i < len; i++) {
        var source = sources[i];
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
        if (innerSubscription) {
          innerSubscription.outerIndex = i;
          this.add(innerSubscription);
        }
      }
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.values[outerIndex] = innerValue;
      if (!innerSub._hasValue) {
        innerSub._hasValue = true;
        this.haveValues++;
      }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
      var destination = this.destination;
      var _a = this,
          haveValues = _a.haveValues,
          resultSelector = _a.resultSelector,
          values = _a.values;
      var len = values.length;
      if (!innerSub._hasValue) {
        destination.complete();
        return;
      }
      this.completed++;
      if (this.completed !== len) {
        return;
      }
      if (haveValues === len) {
        var value = resultSelector ? resultSelector.apply(this, values) : values;
        destination.next(value);
      }
      destination.complete();
    };
    return ForkJoinSubscriber;
  }(OuterSubscriber_1.OuterSubscriber);
  return module.exports;
});
$__System.registerDynamic("19", ["14"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ForkJoinObservable_1 = $__require("14");
  exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
  return module.exports;
});
$__System.registerDynamic('1a', ['11', '19'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var forkJoin_1 = $__require('19');
  Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
  return module.exports;
});
$__System.registerDynamic('1b', ['11', '1c'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var of_1 = $__require('1c');
  Observable_1.Observable.of = of_1.of;
  return module.exports;
});
$__System.registerDynamic('1d', ['11', '1e'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var filter_1 = $__require('1e');
  Observable_1.Observable.prototype.filter = filter_1.filter;
  return module.exports;
});
$__System.registerDynamic("1f", ["20"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require("20");
  function _do(nextOrObserver, error, complete) {
    return this.lift(new DoOperator(nextOrObserver, error, complete));
  }
  exports._do = _do;
  var DoOperator = function () {
    function DoOperator(nextOrObserver, error, complete) {
      this.nextOrObserver = nextOrObserver;
      this.error = error;
      this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
  }();
  var DoSubscriber = function (_super) {
    __extends(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
      _super.call(this, destination);
      var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
      safeSubscriber.syncErrorThrowable = true;
      this.add(safeSubscriber);
      this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function (value) {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.next(value);
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.next(value);
      }
    };
    DoSubscriber.prototype._error = function (err) {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.error(err);
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.error(err);
      }
    };
    DoSubscriber.prototype._complete = function () {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.complete();
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.complete();
      }
    };
    return DoSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('21', ['11', '1f'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var do_1 = $__require('1f');
  Observable_1.Observable.prototype.do = do_1._do;
  Observable_1.Observable.prototype._do = do_1._do;
  return module.exports;
});
$__System.registerDynamic('22', ['11', '23'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('11');
  var ConnectableObservable_1 = $__require('23');
  var MulticastObservable = function (_super) {
    __extends(MulticastObservable, _super);
    function MulticastObservable(source, subjectFactory, selector) {
      _super.call(this);
      this.source = source;
      this.subjectFactory = subjectFactory;
      this.selector = selector;
    }
    MulticastObservable.prototype._subscribe = function (subscriber) {
      var _a = this,
          selector = _a.selector,
          source = _a.source;
      var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);
      var subscription = selector(connectable).subscribe(subscriber);
      subscription.add(connectable.connect());
      return subscription;
    };
    return MulticastObservable;
  }(Observable_1.Observable);
  exports.MulticastObservable = MulticastObservable;
  return module.exports;
});
$__System.registerDynamic('23', ['10', '11', '20', '24'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('10');
  var Observable_1 = $__require('11');
  var Subscriber_1 = $__require('20');
  var Subscription_1 = $__require('24');
  var ConnectableObservable = function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
      _super.call(this);
      this.source = source;
      this.subjectFactory = subjectFactory;
      this._refCount = 0;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
      return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
      var subject = this._subject;
      if (!subject || subject.isStopped) {
        this._subject = this.subjectFactory();
      }
      return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
      var connection = this._connection;
      if (!connection) {
        connection = this._connection = new Subscription_1.Subscription();
        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
        if (connection.closed) {
          this._connection = null;
          connection = Subscription_1.Subscription.EMPTY;
        } else {
          this._connection = connection;
        }
      }
      return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
      return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
  }(Observable_1.Observable);
  exports.ConnectableObservable = ConnectableObservable;
  var ConnectableSubscriber = function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
      _super.call(this, destination);
      this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
      this._unsubscribe();
      _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
      this._unsubscribe();
      _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
      var connectable = this.connectable;
      if (connectable) {
        this.connectable = null;
        var connection = connectable._connection;
        connectable._refCount = 0;
        connectable._subject = null;
        connectable._connection = null;
        if (connection) {
          connection.unsubscribe();
        }
      }
    };
    return ConnectableSubscriber;
  }(Subject_1.SubjectSubscriber);
  var RefCountOperator = function () {
    function RefCountOperator(connectable) {
      this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
      var connectable = this.connectable;
      connectable._refCount++;
      var refCounter = new RefCountSubscriber(subscriber, connectable);
      var subscription = source._subscribe(refCounter);
      if (!refCounter.closed) {
        refCounter.connection = connectable.connect();
      }
      return subscription;
    };
    return RefCountOperator;
  }();
  var RefCountSubscriber = function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
      _super.call(this, destination);
      this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
      var connectable = this.connectable;
      if (!connectable) {
        this.connection = null;
        return;
      }
      this.connectable = null;
      var refCount = connectable._refCount;
      if (refCount <= 0) {
        this.connection = null;
        return;
      }
      connectable._refCount = refCount - 1;
      if (refCount > 1) {
        this.connection = null;
        return;
      }
      var connection = this.connection;
      var sharedConnection = connectable._connection;
      this.connection = null;
      if (sharedConnection && (!connection || sharedConnection === connection)) {
        sharedConnection.unsubscribe();
      }
    };
    return RefCountSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('25', ['22', '23'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var MulticastObservable_1 = $__require('22');
  var ConnectableObservable_1 = $__require('23');
  function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
      subjectFactory = subjectOrSubjectFactory;
    } else {
      subjectFactory = function subjectFactory() {
        return subjectOrSubjectFactory;
      };
    }
    return !selector ? new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) : new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);
  }
  exports.multicast = multicast;
  return module.exports;
});
$__System.registerDynamic('26', ['25', '10'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var multicast_1 = $__require('25');
  var Subject_1 = $__require('10');
  function shareSubjectFactory() {
    return new Subject_1.Subject();
  }
  function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
  }
  exports.share = share;
  ;
  return module.exports;
});
$__System.registerDynamic('27', ['11', '26'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var share_1 = $__require('26');
  Observable_1.Observable.prototype.share = share_1.share;
  return module.exports;
});
$__System.registerDynamic('28', ['20', '24'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  var Subscription_1 = $__require('24');
  function _finally(callback) {
    return this.lift(new FinallyOperator(callback));
  }
  exports._finally = _finally;
  var FinallyOperator = function () {
    function FinallyOperator(callback) {
      this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
  }();
  var FinallySubscriber = function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
      _super.call(this, destination);
      this.add(new Subscription_1.Subscription(callback));
    }
    return FinallySubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('29', ['11', '28'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var finally_1 = $__require('28');
  Observable_1.Observable.prototype.finally = finally_1._finally;
  Observable_1.Observable.prototype._finally = finally_1._finally;
  return module.exports;
});
$__System.registerDynamic('2a', ['11', '2b'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var catch_1 = $__require('2b');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  Observable_1.Observable.prototype._catch = catch_1._catch;
  return module.exports;
});
$__System.registerDynamic('2c', [], true, function ($__require, exports, module) {
	var define,
	    global = this || self,
	    GLOBAL = global;
	/* */
	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

		var PLUS = '+'.charCodeAt(0);
		var SLASH = '/'.charCodeAt(0);
		var NUMBER = '0'.charCodeAt(0);
		var LOWER = 'a'.charCodeAt(0);
		var UPPER = 'A'.charCodeAt(0);
		var PLUS_URL_SAFE = '-'.charCodeAt(0);
		var SLASH_URL_SAFE = '_'.charCodeAt(0);

		function decode(elt) {
			var code = elt.charCodeAt(0);
			if (code === PLUS || code === PLUS_URL_SAFE) return 62; // '+'
			if (code === SLASH || code === SLASH_URL_SAFE) return 63; // '/'
			if (code < NUMBER) return -1; //no match
			if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
			if (code < UPPER + 26) return code - UPPER;
			if (code < LOWER + 26) return code - LOWER + 26;
		}

		function b64ToByteArray(b64) {
			var i, j, l, tmp, placeHolders, arr;

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4');
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length;
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders);

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length;

			var L = 0;

			function push(v) {
				arr[L++] = v;
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
				push((tmp & 0xFF0000) >> 16);
				push((tmp & 0xFF00) >> 8);
				push(tmp & 0xFF);
			}

			if (placeHolders === 2) {
				tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
				push(tmp & 0xFF);
			} else if (placeHolders === 1) {
				tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
				push(tmp >> 8 & 0xFF);
				push(tmp & 0xFF);
			}

			return arr;
		}

		function uint8ToBase64(uint8) {
			var i,
			    extraBytes = uint8.length % 3,
			    // if we have 1 byte left, pad 2 bytes
			output = "",
			    temp,
			    length;

			function encode(num) {
				return lookup.charAt(num);
			}

			function tripletToBase64(num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
				output += tripletToBase64(temp);
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1];
					output += encode(temp >> 2);
					output += encode(temp << 4 & 0x3F);
					output += '==';
					break;
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
					output += encode(temp >> 10);
					output += encode(temp >> 4 & 0x3F);
					output += encode(temp << 2 & 0x3F);
					output += '=';
					break;
			}

			return output;
		}

		exports.toByteArray = b64ToByteArray;
		exports.fromByteArray = uint8ToBase64;
	})(typeof exports === 'undefined' ? this.base64js = {} : exports);
	return module.exports;
});
$__System.registerDynamic("2d", ["2c"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("2c");
  return module.exports;
});
$__System.registerDynamic("2e", [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };
  return module.exports;
});
$__System.registerDynamic("2f", ["2e"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("2e");
  return module.exports;
});
$__System.registerDynamic('30', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };
  return module.exports;
});
$__System.registerDynamic("31", ["30"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("30");
  return module.exports;
});
$__System.registerDynamic('32', ['2d', '2f', '31'], true, function ($__require, exports, module) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  var base64 = $__require('2d');
  var ieee754 = $__require('2f');
  var isArray = $__require('31');

  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  Buffer.poolSize = 8192; // not used by this implementation

  var rootParent = {};

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
   *     on objects.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.
  
   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

  function typedArraySupport() {
    function Bar() {}
    try {
      var arr = new Uint8Array(1);
      arr.foo = function () {
        return 42;
      };
      arr.constructor = Bar;
      return arr.foo() === 42 && // typed array instances can be augmented
      arr.constructor === Bar && // constructor can be set
      typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
      arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
    } catch (e) {
      return false;
    }
  }

  function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }

  /**
   * Class: Buffer
   * =============
   *
   * The Buffer constructor returns instances of `Uint8Array` that are augmented
   * with function properties for all the node `Buffer` API functions. We use
   * `Uint8Array` so that square bracket notation works as expected -- it returns
   * a single octet.
   *
   * By augmenting the instances, we can avoid modifying the `Uint8Array`
   * prototype.
   */
  function Buffer(arg) {
    if (!(this instanceof Buffer)) {
      // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
      if (arguments.length > 1) return new Buffer(arg, arguments[1]);
      return new Buffer(arg);
    }

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      this.length = 0;
      this.parent = undefined;
    }

    // Common case.
    if (typeof arg === 'number') {
      return fromNumber(this, arg);
    }

    // Slightly less common case.
    if (typeof arg === 'string') {
      return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8');
    }

    // Unusual.
    return fromObject(this, arg);
  }

  function fromNumber(that, length) {
    that = allocate(that, length < 0 ? 0 : checked(length) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < length; i++) {
        that[i] = 0;
      }
    }
    return that;
  }

  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';

    // Assumption: byteLength() return value is always < kMaxLength.
    var length = byteLength(string, encoding) | 0;
    that = allocate(that, length);

    that.write(string, encoding);
    return that;
  }

  function fromObject(that, object) {
    if (Buffer.isBuffer(object)) return fromBuffer(that, object);

    if (isArray(object)) return fromArray(that, object);

    if (object == null) {
      throw new TypeError('must start with number, buffer, array or string');
    }

    if (typeof ArrayBuffer !== 'undefined') {
      if (object.buffer instanceof ArrayBuffer) {
        return fromTypedArray(that, object);
      }
      if (object instanceof ArrayBuffer) {
        return fromArrayBuffer(that, object);
      }
    }

    if (object.length) return fromArrayLike(that, object);

    return fromJsonObject(that, object);
  }

  function fromBuffer(that, buffer) {
    var length = checked(buffer.length) | 0;
    that = allocate(that, length);
    buffer.copy(that, 0, 0, length);
    return that;
  }

  function fromArray(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }

  // Duplicate of fromArray() to keep fromArray() monomorphic.
  function fromTypedArray(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    // Truncating the elements is probably not what people expect from typed
    // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
    // of the old Buffer constructor.
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }

  function fromArrayBuffer(that, array) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      array.byteLength;
      that = Buffer._augment(new Uint8Array(array));
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromTypedArray(that, new Uint8Array(array));
    }
    return that;
  }

  function fromArrayLike(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }

  // Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
  // Returns a zero-length buffer for inputs that don't conform to the spec.
  function fromJsonObject(that, object) {
    var array;
    var length = 0;

    if (object.type === 'Buffer' && isArray(object.data)) {
      array = object.data;
      length = checked(array.length) | 0;
    }
    that = allocate(that, length);

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  } else {
    // pre-set for values that may exist in the future
    Buffer.prototype.length = undefined;
    Buffer.prototype.parent = undefined;
  }

  function allocate(that, length) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = Buffer._augment(new Uint8Array(length));
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that.length = length;
      that._isBuffer = true;
    }

    var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
    if (fromPool) that.parent = rootParent;

    return that;
  }

  function checked(length) {
    // Note: cannot use `length < kMaxLength` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
    }
    return length | 0;
  }

  function SlowBuffer(subject, encoding) {
    if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding);

    var buf = new Buffer(subject, encoding);
    delete buf.parent;
    return buf;
  }

  Buffer.isBuffer = function isBuffer(b) {
    return !!(b != null && b._isBuffer);
  };

  Buffer.compare = function compare(a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }

    if (a === b) return 0;

    var x = a.length;
    var y = b.length;

    var i = 0;
    var len = Math.min(x, y);
    while (i < len) {
      if (a[i] !== b[i]) break;

      ++i;
    }

    if (i !== len) {
      x = a[i];
      y = b[i];
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
      default:
        return false;
    }
  };

  Buffer.concat = function concat(list, length) {
    if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.');

    if (list.length === 0) {
      return new Buffer(0);
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; i++) {
        length += list[i].length;
      }
    }

    var buf = new Buffer(length);
    var pos = 0;
    for (i = 0; i < list.length; i++) {
      var item = list[i];
      item.copy(buf, pos);
      pos += item.length;
    }
    return buf;
  };

  function byteLength(string, encoding) {
    if (typeof string !== 'string') string = '' + string;

    var len = string.length;
    if (len === 0) return 0;

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        // Deprecated
        case 'raw':
        case 'raws':
          return len;
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
        case 'hex':
          return len >>> 1;
        case 'base64':
          return base64ToBytes(string).length;
        default:
          if (loweredCase) return utf8ToBytes(string).length; // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false;

    start = start | 0;
    end = end === undefined || end === Infinity ? this.length : end | 0;

    if (!encoding) encoding = 'utf8';
    if (start < 0) start = 0;
    if (end > this.length) end = this.length;
    if (end <= start) return '';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'binary':
          return binarySlice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };

  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>';
  };

  Buffer.prototype.compare = function compare(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return 0;
    return Buffer.compare(this, b);
  };

  Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
    if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;else if (byteOffset < -0x80000000) byteOffset = -0x80000000;
    byteOffset >>= 0;

    if (this.length === 0) return -1;
    if (byteOffset >= this.length) return -1;

    // Negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0);

    if (typeof val === 'string') {
      if (val.length === 0) return -1; // special case: looking for empty string always fails
      return String.prototype.indexOf.call(this, val, byteOffset);
    }
    if (Buffer.isBuffer(val)) {
      return arrayIndexOf(this, val, byteOffset);
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
      }
      return arrayIndexOf(this, [val], byteOffset);
    }

    function arrayIndexOf(arr, val, byteOffset) {
      var foundIndex = -1;
      for (var i = 0; byteOffset + i < arr.length; i++) {
        if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex;
        } else {
          foundIndex = -1;
        }
      }
      return -1;
    }

    throw new TypeError('val must be string, number or Buffer');
  };

  // `get` is deprecated
  Buffer.prototype.get = function get(offset) {
    console.log('.get() is deprecated. Access using array indexes instead.');
    return this.readUInt8(offset);
  };

  // `set` is deprecated
  Buffer.prototype.set = function set(v, offset) {
    console.log('.set() is deprecated. Access using array indexes instead.');
    return this.writeUInt8(v, offset);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new Error('Invalid hex string');

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) throw new Error('Invalid hex string');
      buf[offset + i] = parsed;
    }
    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function binaryWrite(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
      // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
      // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      var swap = encoding;
      encoding = offset;
      offset = length | 0;
      length = swap;
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'binary':
          return binaryWrite(this, string, offset, length);

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
  }

  function binarySlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; i++) {
      out += toHex(buf[i]);
    }
    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }

  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = Buffer._augment(this.subarray(start, end));
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start];
      }
    }

    if (newBuf.length) newBuf.parent = this.parent || this;

    return newBuf;
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val;
  };

  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val;
  };

  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };

  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('value is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('index out of range');
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
  };

  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
  };

  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = value < 0 ? 1 : 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = value < 0 ? 1 : 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (value > max || value < min) throw new RangeError('value is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('index out of range');
    if (offset < 0) throw new RangeError('index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      target._set(this.subarray(start, start + len), targetStart);
    }

    return len;
  };

  // fill(value, start=0, end=buffer.length)
  Buffer.prototype.fill = function fill(value, start, end) {
    if (!value) value = 0;
    if (!start) start = 0;
    if (!end) end = this.length;

    if (end < start) throw new RangeError('end < start');

    // Fill 0 bytes; we're done
    if (end === start) return;
    if (this.length === 0) return;

    if (start < 0 || start >= this.length) throw new RangeError('start out of bounds');
    if (end < 0 || end > this.length) throw new RangeError('end out of bounds');

    var i;
    if (typeof value === 'number') {
      for (i = start; i < end; i++) {
        this[i] = value;
      }
    } else {
      var bytes = utf8ToBytes(value.toString());
      var len = bytes.length;
      for (i = start; i < end; i++) {
        this[i] = bytes[i % len];
      }
    }

    return this;
  };

  /**
   * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
   * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
   */
  Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
    if (typeof Uint8Array !== 'undefined') {
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        return new Buffer(this).buffer;
      } else {
        var buf = new Uint8Array(this.length);
        for (var i = 0, len = buf.length; i < len; i += 1) {
          buf[i] = this[i];
        }
        return buf.buffer;
      }
    } else {
      throw new TypeError('Buffer.toArrayBuffer not supported in this browser');
    }
  };

  // HELPER FUNCTIONS
  // ================

  var BP = Buffer.prototype;

  /**
   * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
   */
  Buffer._augment = function _augment(arr) {
    arr.constructor = Buffer;
    arr._isBuffer = true;

    // save reference to original Uint8Array set method before overwriting
    arr._set = arr.set;

    // deprecated
    arr.get = BP.get;
    arr.set = BP.set;

    arr.write = BP.write;
    arr.toString = BP.toString;
    arr.toLocaleString = BP.toString;
    arr.toJSON = BP.toJSON;
    arr.equals = BP.equals;
    arr.compare = BP.compare;
    arr.indexOf = BP.indexOf;
    arr.copy = BP.copy;
    arr.slice = BP.slice;
    arr.readUIntLE = BP.readUIntLE;
    arr.readUIntBE = BP.readUIntBE;
    arr.readUInt8 = BP.readUInt8;
    arr.readUInt16LE = BP.readUInt16LE;
    arr.readUInt16BE = BP.readUInt16BE;
    arr.readUInt32LE = BP.readUInt32LE;
    arr.readUInt32BE = BP.readUInt32BE;
    arr.readIntLE = BP.readIntLE;
    arr.readIntBE = BP.readIntBE;
    arr.readInt8 = BP.readInt8;
    arr.readInt16LE = BP.readInt16LE;
    arr.readInt16BE = BP.readInt16BE;
    arr.readInt32LE = BP.readInt32LE;
    arr.readInt32BE = BP.readInt32BE;
    arr.readFloatLE = BP.readFloatLE;
    arr.readFloatBE = BP.readFloatBE;
    arr.readDoubleLE = BP.readDoubleLE;
    arr.readDoubleBE = BP.readDoubleBE;
    arr.writeUInt8 = BP.writeUInt8;
    arr.writeUIntLE = BP.writeUIntLE;
    arr.writeUIntBE = BP.writeUIntBE;
    arr.writeUInt16LE = BP.writeUInt16LE;
    arr.writeUInt16BE = BP.writeUInt16BE;
    arr.writeUInt32LE = BP.writeUInt32LE;
    arr.writeUInt32BE = BP.writeUInt32BE;
    arr.writeIntLE = BP.writeIntLE;
    arr.writeIntBE = BP.writeIntBE;
    arr.writeInt8 = BP.writeInt8;
    arr.writeInt16LE = BP.writeInt16LE;
    arr.writeInt16BE = BP.writeInt16BE;
    arr.writeInt32LE = BP.writeInt32LE;
    arr.writeInt32BE = BP.writeInt32BE;
    arr.writeFloatLE = BP.writeFloatLE;
    arr.writeFloatBE = BP.writeFloatBE;
    arr.writeDoubleLE = BP.writeDoubleLE;
    arr.writeDoubleBE = BP.writeDoubleBE;
    arr.fill = BP.fill;
    arr.inspect = BP.inspect;
    arr.toArrayBuffer = BP.toArrayBuffer;

    return arr;
  };

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str;
  }

  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          // valid lead
          leadSurrogate = codePoint;

          continue;
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; i++) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0) break;

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  return module.exports;
});
$__System.registerDynamic("33", ["32"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("32");
  return module.exports;
});
$__System.registerDynamic('34', ['33'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('buffer') : $__require('33');
  return module.exports;
});
$__System.registerDynamic("35", ["34"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("34");
  return module.exports;
});
$__System.registerDynamic('36', ['8', '10', 'b', '13', '11', '39', '37', '1a', '1b', '38', '1d', '21', '27', '29', '2a', '35', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (Buffer, process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('8'), $__require('10'), $__require('b'), $__require('13'), $__require('11'), $__require('39'), $__require('37'), $__require('1a'), $__require('1b'), $__require('38'), $__require('1d'), $__require('21'), $__require('27'), $__require('29'), $__require('2a')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Subject', '@angular/platform-browser', '@angular/forms', 'rxjs/Observable', '@angular/common', '@angular/http', 'rxjs/add/observable/forkJoin', 'rxjs/add/observable/of', 'rxjs/add/operator/map', 'rxjs/add/operator/filter', 'rxjs/add/operator/do', 'rxjs/add/operator/share', 'rxjs/add/operator/finally', 'rxjs/add/operator/catch'], factory) : factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}), global.ng.core, global.Rx, global.ng.platformBrowser, global.ng.forms, global.Rx, global.ng.common, global.ng.http, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype);
    })(this, function (exports, _angular_core, rxjs_Subject, _angular_platformBrowser, _angular_forms, rxjs_Observable, _angular_common, _angular_http, rxjs_add_observable_forkJoin, rxjs_add_observable_of, rxjs_add_operator_map, rxjs_add_operator_filter, rxjs_add_operator_do, rxjs_add_operator_share, rxjs_add_operator_finally, rxjs_add_operator_catch) {
      'use strict';

      var __decorate$1 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$1 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdLine = function () {
        function MdLine() {}
        MdLine = __decorate$1([_angular_core.Directive({ selector: '[md-line]' }), __metadata$1('design:paramtypes', [])], MdLine);
        return MdLine;
      }();
      var MdLineSetter = function () {
        function MdLineSetter(_lines, _renderer, _element) {
          var _this = this;
          this._lines = _lines;
          this._renderer = _renderer;
          this._element = _element;
          this._setLineClass(this._lines.length);
          this._lines.changes.subscribe(function () {
            _this._setLineClass(_this._lines.length);
          });
        }
        MdLineSetter.prototype._setLineClass = function (count) {
          this._resetClasses();
          if (count === 2 || count === 3) {
            this._setClass("md-" + count + "-line", true);
          }
        };
        MdLineSetter.prototype._resetClasses = function () {
          this._setClass('md-2-line', false);
          this._setClass('md-3-line', false);
        };
        MdLineSetter.prototype._setClass = function (className, bool) {
          this._renderer.setElementClass(this._element.nativeElement, className, bool);
        };
        return MdLineSetter;
      }();
      var MdLineModule = function () {
        function MdLineModule() {}
        MdLineModule = __decorate$1([_angular_core.NgModule({
          exports: [MdLine],
          declarations: [MdLine]
        }), __metadata$1('design:paramtypes', [])], MdLineModule);
        return MdLineModule;
      }();
      var __decorate$2 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$2 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var Dir = function () {
        function Dir() {
          this._dir = 'ltr';
          this.dirChange = new _angular_core.EventEmitter();
        }
        Object.defineProperty(Dir.prototype, "dir", {
          get: function () {
            return this._dir;
          },
          set: function (v) {
            var old = this._dir;
            this._dir = v;
            if (old != this._dir) {
              this.dirChange.emit(null);
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Dir.prototype, "value", {
          get: function () {
            return this.dir;
          },
          set: function (v) {
            this.dir = v;
          },
          enumerable: true,
          configurable: true
        });
        __decorate$2([_angular_core.Input('dir'), __metadata$2('design:type', String)], Dir.prototype, "_dir", void 0);
        __decorate$2([_angular_core.Output(), __metadata$2('design:type', Object)], Dir.prototype, "dirChange", void 0);
        __decorate$2([_angular_core.HostBinding('attr.dir'), __metadata$2('design:type', String)], Dir.prototype, "dir", null);
        Dir = __decorate$2([_angular_core.Directive({
          selector: '[dir]',
          exportAs: '$implicit'
        }), __metadata$2('design:paramtypes', [])], Dir);
        return Dir;
      }();
      var RtlModule = function () {
        function RtlModule() {}
        RtlModule.forRoot = function () {
          return {
            ngModule: RtlModule,
            providers: []
          };
        };
        RtlModule = __decorate$2([_angular_core.NgModule({
          exports: [Dir],
          declarations: [Dir]
        }), __metadata$2('design:paramtypes', [])], RtlModule);
        return RtlModule;
      }();
      var ForegroundRippleState;
      (function (ForegroundRippleState) {
        ForegroundRippleState[ForegroundRippleState["NEW"] = 0] = "NEW";
        ForegroundRippleState[ForegroundRippleState["EXPANDING"] = 1] = "EXPANDING";
        ForegroundRippleState[ForegroundRippleState["FADING_OUT"] = 2] = "FADING_OUT";
      })(ForegroundRippleState || (ForegroundRippleState = {}));
      var ForegroundRipple = function () {
        function ForegroundRipple(rippleElement) {
          this.rippleElement = rippleElement;
          this.state = ForegroundRippleState.NEW;
        }
        return ForegroundRipple;
      }();
      var RIPPLE_SPEED_PX_PER_SECOND = 1000;
      var MIN_RIPPLE_FILL_TIME_SECONDS = 0.1;
      var MAX_RIPPLE_FILL_TIME_SECONDS = 0.3;
      var distanceToFurthestCorner = function (x, y, rect) {
        var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
        var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
        return Math.sqrt(distX * distX + distY * distY);
      };
      var RippleRenderer = function () {
        function RippleRenderer(_elementRef, _eventHandlers) {
          this._eventHandlers = _eventHandlers;
          this._rippleElement = _elementRef.nativeElement;
          this._backgroundDiv = document.createElement('div');
          this._backgroundDiv.classList.add('md-ripple-background');
          this._rippleElement.appendChild(this._backgroundDiv);
        }
        RippleRenderer.prototype.setTriggerElement = function (newTrigger) {
          var _this = this;
          if (this._triggerElement !== newTrigger) {
            if (this._triggerElement) {
              this._eventHandlers.forEach(function (eventHandler, eventName) {
                _this._triggerElement.removeEventListener(eventName, eventHandler);
              });
            }
            this._triggerElement = newTrigger;
            if (this._triggerElement) {
              this._eventHandlers.forEach(function (eventHandler, eventName) {
                _this._triggerElement.addEventListener(eventName, eventHandler);
              });
            }
          }
        };
        RippleRenderer.prototype.setTriggerElementToHost = function () {
          this.setTriggerElement(this._rippleElement);
        };
        RippleRenderer.prototype.clearTriggerElement = function () {
          this.setTriggerElement(null);
        };
        RippleRenderer.prototype.createForegroundRipple = function (rippleOriginLeft, rippleOriginTop, color, centered, radius, speedFactor, transitionEndCallback) {
          var parentRect = this._rippleElement.getBoundingClientRect();
          var startX = centered ? parentRect.left + parentRect.width / 2 : rippleOriginLeft;
          var startY = centered ? parentRect.top + parentRect.height / 2 : rippleOriginTop;
          var offsetX = startX - parentRect.left;
          var offsetY = startY - parentRect.top;
          var maxRadius = radius > 0 ? radius : distanceToFurthestCorner(startX, startY, parentRect);
          var rippleDiv = document.createElement('div');
          this._rippleElement.appendChild(rippleDiv);
          rippleDiv.classList.add('md-ripple-foreground');
          rippleDiv.style.left = offsetX - maxRadius + "px";
          rippleDiv.style.top = offsetY - maxRadius + "px";
          rippleDiv.style.width = 2 * maxRadius + "px";
          rippleDiv.style.height = rippleDiv.style.width;
          rippleDiv.style.backgroundColor = color;
          rippleDiv.style.transform = "scale(0.001)";
          var fadeInSeconds = 1 / (speedFactor || 1) * Math.max(MIN_RIPPLE_FILL_TIME_SECONDS, Math.min(MAX_RIPPLE_FILL_TIME_SECONDS, maxRadius / RIPPLE_SPEED_PX_PER_SECOND));
          rippleDiv.style.transitionDuration = fadeInSeconds + "s";
          window.getComputedStyle(rippleDiv).opacity;
          rippleDiv.classList.add('md-ripple-fade-in');
          rippleDiv.style.transform = '';
          var ripple = new ForegroundRipple(rippleDiv);
          ripple.state = ForegroundRippleState.EXPANDING;
          rippleDiv.addEventListener('transitionend', function (event) {
            return transitionEndCallback(ripple, event);
          });
        };
        RippleRenderer.prototype.fadeOutForegroundRipple = function (ripple) {
          ripple.classList.remove('md-ripple-fade-in');
          ripple.classList.add('md-ripple-fade-out');
        };
        RippleRenderer.prototype.removeRippleFromDom = function (ripple) {
          ripple.parentElement.removeChild(ripple);
        };
        RippleRenderer.prototype.fadeInRippleBackground = function (color) {
          this._backgroundDiv.classList.add('md-ripple-active');
          this._backgroundDiv.style.backgroundColor = color;
        };
        RippleRenderer.prototype.fadeOutRippleBackground = function () {
          if (this._backgroundDiv) {
            this._backgroundDiv.classList.remove('md-ripple-active');
          }
        };
        return RippleRenderer;
      }();
      var __decorate$3 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$3 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdRipple = function () {
        function MdRipple(_elementRef) {
          var _this = this;
          this.maxRadius = 0;
          this.speedFactor = 1;
          var eventHandlers = new Map();
          eventHandlers.set('mousedown', function (event) {
            return _this._mouseDown(event);
          });
          eventHandlers.set('click', function (event) {
            return _this._click(event);
          });
          eventHandlers.set('mouseleave', function (event) {
            return _this._mouseLeave(event);
          });
          this._rippleRenderer = new RippleRenderer(_elementRef, eventHandlers);
        }
        MdRipple.prototype.ngOnInit = function () {
          if (!this.trigger) {
            this._rippleRenderer.setTriggerElementToHost();
          }
        };
        MdRipple.prototype.ngOnDestroy = function () {
          this._rippleRenderer.clearTriggerElement();
        };
        MdRipple.prototype.ngOnChanges = function (changes) {
          var changedInputs = Object.keys(changes);
          if (changedInputs.indexOf('trigger') !== -1) {
            this._rippleRenderer.setTriggerElement(this.trigger);
          }
        };
        MdRipple.prototype.start = function () {
          this._rippleRenderer.fadeInRippleBackground(this.backgroundColor);
        };
        MdRipple.prototype.end = function (left, top, forceCenter) {
          var _this = this;
          if (forceCenter === void 0) {
            forceCenter = true;
          }
          this._rippleRenderer.createForegroundRipple(left, top, this.color, this.centered || forceCenter, this.maxRadius, this.speedFactor, function (ripple, e) {
            return _this._rippleTransitionEnded(ripple, e);
          });
          this._rippleRenderer.fadeOutRippleBackground();
        };
        MdRipple.prototype._rippleTransitionEnded = function (ripple, event) {
          if (event.propertyName === 'opacity') {
            switch (ripple.state) {
              case ForegroundRippleState.EXPANDING:
                this._rippleRenderer.fadeOutForegroundRipple(ripple.rippleElement);
                ripple.state = ForegroundRippleState.FADING_OUT;
                break;
              case ForegroundRippleState.FADING_OUT:
                this._rippleRenderer.removeRippleFromDom(ripple.rippleElement);
                break;
            }
          }
        };
        MdRipple.prototype._mouseDown = function (event) {
          if (!this.disabled && event.button === 0) {
            this.start();
          }
        };
        MdRipple.prototype._click = function (event) {
          if (!this.disabled && event.button === 0) {
            var isKeyEvent = event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0;
            this.end(event.pageX, event.pageY, isKeyEvent);
          }
        };
        MdRipple.prototype._mouseLeave = function (event) {
          this._rippleRenderer.fadeOutRippleBackground();
        };
        __decorate$3([_angular_core.Input('md-ripple-trigger'), __metadata$3('design:type', Object)], MdRipple.prototype, "trigger", void 0);
        __decorate$3([_angular_core.Input('md-ripple-centered'), __metadata$3('design:type', Boolean)], MdRipple.prototype, "centered", void 0);
        __decorate$3([_angular_core.Input('md-ripple-disabled'), __metadata$3('design:type', Boolean)], MdRipple.prototype, "disabled", void 0);
        __decorate$3([_angular_core.Input('md-ripple-max-radius'), __metadata$3('design:type', Number)], MdRipple.prototype, "maxRadius", void 0);
        __decorate$3([_angular_core.Input('md-ripple-speed-factor'), __metadata$3('design:type', Number)], MdRipple.prototype, "speedFactor", void 0);
        __decorate$3([_angular_core.Input('md-ripple-color'), __metadata$3('design:type', String)], MdRipple.prototype, "color", void 0);
        __decorate$3([_angular_core.Input('md-ripple-background-color'), __metadata$3('design:type', String)], MdRipple.prototype, "backgroundColor", void 0);
        __decorate$3([_angular_core.HostBinding('class.md-ripple-focused'), _angular_core.Input('md-ripple-focused'), __metadata$3('design:type', Boolean)], MdRipple.prototype, "focused", void 0);
        __decorate$3([_angular_core.HostBinding('class.md-ripple-unbounded'), _angular_core.Input('md-ripple-unbounded'), __metadata$3('design:type', Boolean)], MdRipple.prototype, "unbounded", void 0);
        MdRipple = __decorate$3([_angular_core.Directive({ selector: '[md-ripple]' }), __metadata$3('design:paramtypes', [_angular_core.ElementRef])], MdRipple);
        return MdRipple;
      }();
      var MdRippleModule = function () {
        function MdRippleModule() {}
        MdRippleModule.forRoot = function () {
          return {
            ngModule: MdRippleModule,
            providers: []
          };
        };
        MdRippleModule = __decorate$3([_angular_core.NgModule({
          exports: [MdRipple],
          declarations: [MdRipple]
        }), __metadata$3('design:paramtypes', [])], MdRippleModule);
        return MdRippleModule;
      }();
      var __extends$3 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdError = function (_super) {
        __extends$3(MdError, _super);
        function MdError(value) {
          _super.call(this);
          this.message = value;
        }
        return MdError;
      }(Error);
      var __extends$2 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdComponentPortalAttachedToDomWithoutOriginError = function (_super) {
        __extends$2(MdComponentPortalAttachedToDomWithoutOriginError, _super);
        function MdComponentPortalAttachedToDomWithoutOriginError() {
          _super.call(this, 'A ComponentPortal must have an origin set when attached to a DomPortalHost ' + 'because the DOM element is not part of the Angular application context.');
        }
        return MdComponentPortalAttachedToDomWithoutOriginError;
      }(MdError);
      var MdNullPortalError = function (_super) {
        __extends$2(MdNullPortalError, _super);
        function MdNullPortalError() {
          _super.call(this, 'Must provide a portal to attach');
        }
        return MdNullPortalError;
      }(MdError);
      var MdPortalAlreadyAttachedError = function (_super) {
        __extends$2(MdPortalAlreadyAttachedError, _super);
        function MdPortalAlreadyAttachedError() {
          _super.call(this, 'Host already has a portal attached');
        }
        return MdPortalAlreadyAttachedError;
      }(MdError);
      var MdPortalHostAlreadyDisposedError = function (_super) {
        __extends$2(MdPortalHostAlreadyDisposedError, _super);
        function MdPortalHostAlreadyDisposedError() {
          _super.call(this, 'This PortalHost has already been disposed');
        }
        return MdPortalHostAlreadyDisposedError;
      }(MdError);
      var MdUnknownPortalTypeError = function (_super) {
        __extends$2(MdUnknownPortalTypeError, _super);
        function MdUnknownPortalTypeError() {
          _super.call(this, 'Attempting to attach an unknown Portal type. ' + 'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');
        }
        return MdUnknownPortalTypeError;
      }(MdError);
      var MdNullPortalHostError = function (_super) {
        __extends$2(MdNullPortalHostError, _super);
        function MdNullPortalHostError() {
          _super.call(this, 'Attempting to attach a portal to a null PortalHost');
        }
        return MdNullPortalHostError;
      }(MdError);
      var MdNoPortalAttachedError = function (_super) {
        __extends$2(MdNoPortalAttachedError, _super);
        function MdNoPortalAttachedError() {
          _super.call(this, 'Attempting to detach a portal that is not attached to a host');
        }
        return MdNoPortalAttachedError;
      }(MdError);
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var Portal = function () {
        function Portal() {}
        Portal.prototype.attach = function (host) {
          if (host == null) {
            throw new MdNullPortalHostError();
          }
          if (host.hasAttached()) {
            throw new MdPortalAlreadyAttachedError();
          }
          this._attachedHost = host;
          return host.attach(this);
        };
        Portal.prototype.detach = function () {
          var host = this._attachedHost;
          if (host == null) {
            throw new MdNoPortalAttachedError();
          }
          this._attachedHost = null;
          return host.detach();
        };
        Object.defineProperty(Portal.prototype, "isAttached", {
          get: function () {
            return this._attachedHost != null;
          },
          enumerable: true,
          configurable: true
        });
        Portal.prototype.setAttachedHost = function (host) {
          this._attachedHost = host;
        };
        return Portal;
      }();
      var ComponentPortal = function (_super) {
        __extends$1(ComponentPortal, _super);
        function ComponentPortal(component, viewContainerRef, injector) {
          if (viewContainerRef === void 0) {
            viewContainerRef = null;
          }
          if (injector === void 0) {
            injector = null;
          }
          _super.call(this);
          this.component = component;
          this.viewContainerRef = viewContainerRef;
          this.injector = injector;
        }
        return ComponentPortal;
      }(Portal);
      var TemplatePortal = function (_super) {
        __extends$1(TemplatePortal, _super);
        function TemplatePortal(template, viewContainerRef) {
          _super.call(this);
          this.locals = new Map();
          this.templateRef = template;
          this.viewContainerRef = viewContainerRef;
        }
        Object.defineProperty(TemplatePortal.prototype, "origin", {
          get: function () {
            return this.templateRef.elementRef;
          },
          enumerable: true,
          configurable: true
        });
        TemplatePortal.prototype.attach = function (host, locals) {
          this.locals = locals == null ? new Map() : locals;
          return _super.prototype.attach.call(this, host);
        };
        TemplatePortal.prototype.detach = function () {
          this.locals = new Map();
          return _super.prototype.detach.call(this);
        };
        return TemplatePortal;
      }(Portal);
      var BasePortalHost = function () {
        function BasePortalHost() {
          this._isDisposed = false;
        }
        BasePortalHost.prototype.hasAttached = function () {
          return this._attachedPortal != null;
        };
        BasePortalHost.prototype.attach = function (portal) {
          if (portal == null) {
            throw new MdNullPortalError();
          }
          if (this.hasAttached()) {
            throw new MdPortalAlreadyAttachedError();
          }
          if (this._isDisposed) {
            throw new MdPortalHostAlreadyDisposedError();
          }
          if (portal instanceof ComponentPortal) {
            this._attachedPortal = portal;
            return this.attachComponentPortal(portal);
          } else if (portal instanceof TemplatePortal) {
            this._attachedPortal = portal;
            return this.attachTemplatePortal(portal);
          }
          throw new MdUnknownPortalTypeError();
        };
        BasePortalHost.prototype.detach = function () {
          if (this._attachedPortal) {
            this._attachedPortal.setAttachedHost(null);
          }
          this._attachedPortal = null;
          if (this._disposeFn != null) {
            this._disposeFn();
            this._disposeFn = null;
          }
        };
        BasePortalHost.prototype.dispose = function () {
          if (this.hasAttached()) {
            this.detach();
          }
          this._isDisposed = true;
        };
        BasePortalHost.prototype.setDisposeFn = function (fn) {
          this._disposeFn = fn;
        };
        return BasePortalHost;
      }();
      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$4 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$4 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var TemplatePortalDirective = function (_super) {
        __extends(TemplatePortalDirective, _super);
        function TemplatePortalDirective(templateRef, viewContainerRef) {
          _super.call(this, templateRef, viewContainerRef);
        }
        TemplatePortalDirective = __decorate$4([_angular_core.Directive({
          selector: '[portal]',
          exportAs: 'portal'
        }), __metadata$4('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])], TemplatePortalDirective);
        return TemplatePortalDirective;
      }(TemplatePortal);
      var PortalHostDirective = function (_super) {
        __extends(PortalHostDirective, _super);
        function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {
          _super.call(this);
          this._componentFactoryResolver = _componentFactoryResolver;
          this._viewContainerRef = _viewContainerRef;
        }
        Object.defineProperty(PortalHostDirective.prototype, "portal", {
          get: function () {
            return this._portal;
          },
          set: function (p) {
            this._replaceAttachedPortal(p);
          },
          enumerable: true,
          configurable: true
        });
        PortalHostDirective.prototype.attachComponentPortal = function (portal) {
          portal.setAttachedHost(this);
          var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
          var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
          var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);
          this.setDisposeFn(function () {
            return ref.destroy();
          });
          return ref;
        };
        PortalHostDirective.prototype.attachTemplatePortal = function (portal) {
          var _this = this;
          portal.setAttachedHost(this);
          this._viewContainerRef.createEmbeddedView(portal.templateRef);
          this.setDisposeFn(function () {
            return _this._viewContainerRef.clear();
          });
          return new Map();
        };
        PortalHostDirective.prototype._replaceAttachedPortal = function (p) {
          if (this.hasAttached()) {
            this.detach();
          }
          if (p) {
            this.attach(p);
            this._portal = p;
          }
        };
        PortalHostDirective = __decorate$4([_angular_core.Directive({
          selector: '[portalHost]',
          inputs: ['portal: portalHost']
        }), __metadata$4('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.ViewContainerRef])], PortalHostDirective);
        return PortalHostDirective;
      }(BasePortalHost);
      var PortalModule = function () {
        function PortalModule() {}
        PortalModule.forRoot = function () {
          return {
            ngModule: PortalModule,
            providers: []
          };
        };
        PortalModule = __decorate$4([_angular_core.NgModule({
          exports: [TemplatePortalDirective, PortalHostDirective],
          declarations: [TemplatePortalDirective, PortalHostDirective]
        }), __metadata$4('design:paramtypes', [])], PortalModule);
        return PortalModule;
      }();
      var OverlayState = function () {
        function OverlayState() {
          this.hasBackdrop = false;
        }
        return OverlayState;
      }();
      var __extends$4 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var DomPortalHost = function (_super) {
        __extends$4(DomPortalHost, _super);
        function DomPortalHost(_hostDomElement, _componentFactoryResolver) {
          _super.call(this);
          this._hostDomElement = _hostDomElement;
          this._componentFactoryResolver = _componentFactoryResolver;
        }
        DomPortalHost.prototype.attachComponentPortal = function (portal) {
          if (portal.viewContainerRef == null) {
            throw new MdComponentPortalAttachedToDomWithoutOriginError();
          }
          var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
          var ref = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);
          var hostView = ref.hostView;
          this._hostDomElement.appendChild(hostView.rootNodes[0]);
          this.setDisposeFn(function () {
            return ref.destroy();
          });
          return ref;
        };
        DomPortalHost.prototype.attachTemplatePortal = function (portal) {
          var _this = this;
          var viewContainer = portal.viewContainerRef;
          var viewRef = viewContainer.createEmbeddedView(portal.templateRef);
          viewRef.rootNodes.forEach(function (rootNode) {
            return _this._hostDomElement.appendChild(rootNode);
          });
          this.setDisposeFn(function () {
            var index = viewContainer.indexOf(viewRef);
            if (index != -1) {
              viewContainer.remove(index);
            }
          });
          return new Map();
        };
        DomPortalHost.prototype.dispose = function () {
          _super.prototype.dispose.call(this);
          if (this._hostDomElement.parentNode != null) {
            this._hostDomElement.parentNode.removeChild(this._hostDomElement);
          }
        };
        return DomPortalHost;
      }(BasePortalHost);
      var OverlayRef = function () {
        function OverlayRef(_portalHost, _pane, _state) {
          this._portalHost = _portalHost;
          this._pane = _pane;
          this._state = _state;
          this._backdropElement = null;
          this._backdropClick = new rxjs_Subject.Subject();
        }
        OverlayRef.prototype.attach = function (portal) {
          if (this._state.hasBackdrop) {
            this._attachBackdrop();
          }
          var attachResult = this._portalHost.attach(portal);
          this.updatePosition();
          return attachResult;
        };
        OverlayRef.prototype.detach = function () {
          this._detatchBackdrop();
          return this._portalHost.detach();
        };
        OverlayRef.prototype.dispose = function () {
          this._detatchBackdrop();
          this._portalHost.dispose();
        };
        OverlayRef.prototype.hasAttached = function () {
          return this._portalHost.hasAttached();
        };
        OverlayRef.prototype.backdropClick = function () {
          return this._backdropClick.asObservable();
        };
        OverlayRef.prototype.getState = function () {
          return this._state;
        };
        OverlayRef.prototype.updatePosition = function () {
          if (this._state.positionStrategy) {
            this._state.positionStrategy.apply(this._pane);
          }
        };
        OverlayRef.prototype._attachBackdrop = function () {
          var _this = this;
          this._backdropElement = document.createElement('div');
          this._backdropElement.classList.add('md-overlay-backdrop');
          this._pane.parentElement.appendChild(this._backdropElement);
          this._backdropElement.addEventListener('click', function () {
            _this._backdropClick.next(null);
          });
          requestAnimationFrame(function () {
            _this._backdropElement.classList.add('md-overlay-backdrop-showing');
          });
        };
        OverlayRef.prototype._detatchBackdrop = function () {
          var _this = this;
          var backdropToDetach = this._backdropElement;
          if (backdropToDetach) {
            backdropToDetach.classList.remove('md-overlay-backdrop-showing');
            backdropToDetach.addEventListener('transitionend', function () {
              backdropToDetach.parentNode.removeChild(backdropToDetach);
              if (_this._backdropElement == backdropToDetach) {
                _this._backdropElement = null;
              }
            });
          }
        };
        return OverlayRef;
      }();
      var __decorate$8 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$8 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var ViewportRuler = function () {
        function ViewportRuler() {}
        ViewportRuler.prototype.getViewportRect = function () {
          var documentRect = document.documentElement.getBoundingClientRect();
          var scrollPosition = this.getViewportScrollPosition(documentRect);
          var height = window.innerHeight;
          var width = window.innerWidth;
          return {
            top: scrollPosition.top,
            left: scrollPosition.left,
            bottom: scrollPosition.top + height,
            right: scrollPosition.left + width,
            height: height,
            width: width
          };
        };
        ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {
          if (documentRect === void 0) {
            documentRect = document.documentElement.getBoundingClientRect();
          }
          var top = documentRect.top < 0 && document.body.scrollTop == 0 ? -documentRect.top : document.body.scrollTop;
          var left = documentRect.left < 0 && document.body.scrollLeft == 0 ? -documentRect.left : document.body.scrollLeft;
          return {
            top: top,
            left: left
          };
        };
        ViewportRuler = __decorate$8([_angular_core.Injectable(), __metadata$8('design:paramtypes', [])], ViewportRuler);
        return ViewportRuler;
      }();
      function applyCssTransform(element, transformValue) {
        var value = transformValue.trim();
        element.style.transform = value;
        element.style.webkitTransform = value;
      }
      var ConnectionPositionPair = function () {
        function ConnectionPositionPair(origin, overlay) {
          this.originX = origin.originX;
          this.originY = origin.originY;
          this.overlayX = overlay.overlayX;
          this.overlayY = overlay.overlayY;
        }
        return ConnectionPositionPair;
      }();
      var ConnectedPositionStrategy = function () {
        function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {
          this._connectedTo = _connectedTo;
          this._originPos = _originPos;
          this._overlayPos = _overlayPos;
          this._viewportRuler = _viewportRuler;
          this._isRtl = false;
          this._preferredPositions = [];
          this._origin = this._connectedTo.nativeElement;
          this.withFallbackPosition(_originPos, _overlayPos);
        }
        Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
          get: function () {
            return this._preferredPositions;
          },
          enumerable: true,
          configurable: true
        });
        ConnectedPositionStrategy.prototype.apply = function (element) {
          var originRect = this._origin.getBoundingClientRect();
          var overlayRect = element.getBoundingClientRect();
          var viewportRect = this._viewportRuler.getViewportRect();
          var firstOverlayPoint = null;
          for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {
            var pos = _a[_i];
            var originPoint = this._getOriginConnectionPoint(originRect, pos);
            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);
            firstOverlayPoint = firstOverlayPoint || overlayPoint;
            if (this._willOverlayFitWithinViewport(overlayPoint, overlayRect, viewportRect)) {
              this._setElementPosition(element, overlayPoint);
              return Promise.resolve(null);
            }
          }
          this._setElementPosition(element, firstOverlayPoint);
          return Promise.resolve(null);
        };
        ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {
          this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));
          return this;
        };
        ConnectedPositionStrategy.prototype._getStartX = function (rect) {
          return this._isRtl ? rect.right : rect.left;
        };
        ConnectedPositionStrategy.prototype._getEndX = function (rect) {
          return this._isRtl ? rect.left : rect.right;
        };
        ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {
          var originStartX = this._getStartX(originRect);
          var originEndX = this._getEndX(originRect);
          var x;
          if (pos.originX == 'center') {
            x = originStartX + originRect.width / 2;
          } else {
            x = pos.originX == 'start' ? originStartX : originEndX;
          }
          var y;
          if (pos.originY == 'center') {
            y = originRect.top + originRect.height / 2;
          } else {
            y = pos.originY == 'top' ? originRect.top : originRect.bottom;
          }
          return {
            x: x,
            y: y
          };
        };
        ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {
          var overlayStartX;
          if (pos.overlayX == 'center') {
            overlayStartX = -overlayRect.width / 2;
          } else {
            overlayStartX = pos.overlayX == 'start' ? 0 : -overlayRect.width;
          }
          var overlayStartY;
          if (pos.overlayY == 'center') {
            overlayStartY = -overlayRect.height / 2;
          } else {
            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
          }
          return {
            x: originPoint.x + overlayStartX,
            y: originPoint.y + overlayStartY
          };
        };
        ConnectedPositionStrategy.prototype._willOverlayFitWithinViewport = function (overlayPoint, overlayRect, viewportRect) {
          return overlayPoint.x >= viewportRect.left && overlayPoint.x + overlayRect.width <= viewportRect.right && overlayPoint.y >= viewportRect.top && overlayPoint.y + overlayRect.height <= viewportRect.bottom;
        };
        ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {
          var scrollPos = this._viewportRuler.getViewportScrollPosition();
          var x = overlayPoint.x + scrollPos.left;
          var y = overlayPoint.y + scrollPos.top;
          applyCssTransform(element, "translateX(" + x + "px) translateY(" + y + "px)");
        };
        return ConnectedPositionStrategy;
      }();
      var GlobalPositionStrategy = function () {
        function GlobalPositionStrategy() {
          this._cssPosition = 'absolute';
          this._top = '';
          this._bottom = '';
          this._left = '';
          this._right = '';
          this._translateX = [];
          this._translateY = [];
        }
        GlobalPositionStrategy.prototype.fixed = function () {
          this._cssPosition = 'fixed';
          return this;
        };
        GlobalPositionStrategy.prototype.absolute = function () {
          this._cssPosition = 'absolute';
          return this;
        };
        GlobalPositionStrategy.prototype.top = function (value) {
          this._bottom = '';
          this._translateY = [];
          this._top = value;
          return this;
        };
        GlobalPositionStrategy.prototype.left = function (value) {
          this._right = '';
          this._translateX = [];
          this._left = value;
          return this;
        };
        GlobalPositionStrategy.prototype.bottom = function (value) {
          this._top = '';
          this._translateY = [];
          this._bottom = value;
          return this;
        };
        GlobalPositionStrategy.prototype.right = function (value) {
          this._left = '';
          this._translateX = [];
          this._right = value;
          return this;
        };
        GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {
          if (offset === void 0) {
            offset = '0px';
          }
          this._left = '50%';
          this._right = '';
          this._translateX = ['-50%', offset];
          return this;
        };
        GlobalPositionStrategy.prototype.centerVertically = function (offset) {
          if (offset === void 0) {
            offset = '0px';
          }
          this._top = '50%';
          this._bottom = '';
          this._translateY = ['-50%', offset];
          return this;
        };
        GlobalPositionStrategy.prototype.apply = function (element) {
          element.style.position = this._cssPosition;
          element.style.top = this._top;
          element.style.left = this._left;
          element.style.bottom = this._bottom;
          element.style.right = this._right;
          var tranlateX = this._reduceTranslateValues('translateX', this._translateX);
          var translateY = this._reduceTranslateValues('translateY', this._translateY);
          applyCssTransform(element, tranlateX + " " + translateY);
          return Promise.resolve(null);
        };
        GlobalPositionStrategy.prototype._reduceTranslateValues = function (translateFn, values) {
          return values.map(function (t) {
            return translateFn + "(" + t + ")";
          }).join(' ');
        };
        return GlobalPositionStrategy;
      }();
      var __decorate$7 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$7 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var OverlayPositionBuilder = function () {
        function OverlayPositionBuilder(_viewportRuler) {
          this._viewportRuler = _viewportRuler;
        }
        OverlayPositionBuilder.prototype.global = function () {
          return new GlobalPositionStrategy();
        };
        OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {
          return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);
        };
        OverlayPositionBuilder = __decorate$7([_angular_core.Injectable(), __metadata$7('design:paramtypes', [ViewportRuler])], OverlayPositionBuilder);
        return OverlayPositionBuilder;
      }();
      var OverlayContainer = function () {
        function OverlayContainer() {}
        OverlayContainer.prototype.getContainerElement = function () {
          if (!this._containerElement) {
            this._createContainer();
          }
          return this._containerElement;
        };
        OverlayContainer.prototype._createContainer = function () {
          var container = document.createElement('div');
          container.classList.add('md-overlay-container');
          document.body.appendChild(container);
          this._containerElement = container;
        };
        return OverlayContainer;
      }();
      var __decorate$6 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$6 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var nextUniqueId = 0;
      var defaultState = new OverlayState();
      var Overlay = function () {
        function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder) {
          this._overlayContainer = _overlayContainer;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._positionBuilder = _positionBuilder;
        }
        Overlay.prototype.create = function (state) {
          if (state === void 0) {
            state = defaultState;
          }
          return this._createOverlayRef(this._createPaneElement(), state);
        };
        Overlay.prototype.position = function () {
          return this._positionBuilder;
        };
        Overlay.prototype._createPaneElement = function () {
          var pane = document.createElement('div');
          pane.id = "md-overlay-" + nextUniqueId++;
          pane.classList.add('md-overlay-pane');
          this._overlayContainer.getContainerElement().appendChild(pane);
          return pane;
        };
        Overlay.prototype._createPortalHost = function (pane) {
          return new DomPortalHost(pane, this._componentFactoryResolver);
        };
        Overlay.prototype._createOverlayRef = function (pane, state) {
          return new OverlayRef(this._createPortalHost(pane), pane, state);
        };
        Overlay = __decorate$6([_angular_core.Injectable(), __metadata$6('design:paramtypes', [OverlayContainer, _angular_core.ComponentFactoryResolver, OverlayPositionBuilder])], Overlay);
        return Overlay;
      }();
      var OVERLAY_PROVIDERS = [ViewportRuler, OverlayPositionBuilder, Overlay, OverlayContainer];
      var __decorate$5 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$5 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var defaultPositionList = [new ConnectionPositionPair({
        originX: 'start',
        originY: 'bottom'
      }, {
        overlayX: 'start',
        overlayY: 'top'
      }), new ConnectionPositionPair({
        originX: 'start',
        originY: 'top'
      }, {
        overlayX: 'start',
        overlayY: 'bottom'
      })];
      var OverlayOrigin = function () {
        function OverlayOrigin(_elementRef) {
          this._elementRef = _elementRef;
        }
        Object.defineProperty(OverlayOrigin.prototype, "elementRef", {
          get: function () {
            return this._elementRef;
          },
          enumerable: true,
          configurable: true
        });
        OverlayOrigin = __decorate$5([_angular_core.Directive({
          selector: '[overlay-origin]',
          exportAs: 'overlayOrigin'
        }), __metadata$5('design:paramtypes', [_angular_core.ElementRef])], OverlayOrigin);
        return OverlayOrigin;
      }();
      var ConnectedOverlayDirective = function () {
        function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef) {
          this._overlay = _overlay;
          this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);
        }
        Object.defineProperty(ConnectedOverlayDirective.prototype, "overlayRef", {
          get: function () {
            return this._overlayRef;
          },
          enumerable: true,
          configurable: true
        });
        ConnectedOverlayDirective.prototype.ngOnInit = function () {
          this._createOverlay();
        };
        ConnectedOverlayDirective.prototype.ngOnDestroy = function () {
          this._destroyOverlay();
        };
        ConnectedOverlayDirective.prototype._createOverlay = function () {
          if (!this.positions || !this.positions.length) {
            this.positions = defaultPositionList;
          }
          var overlayConfig = new OverlayState();
          overlayConfig.positionStrategy = this._overlay.position().connectedTo(this.origin.elementRef, {
            originX: this.positions[0].overlayX,
            originY: this.positions[0].originY
          }, {
            overlayX: this.positions[0].overlayX,
            overlayY: this.positions[0].overlayY
          });
          this._overlayRef = this._overlay.create(overlayConfig);
          this._overlayRef.attach(this._templatePortal);
        };
        ConnectedOverlayDirective.prototype._destroyOverlay = function () {
          this._overlayRef.dispose();
        };
        __decorate$5([_angular_core.Input(), __metadata$5('design:type', OverlayOrigin)], ConnectedOverlayDirective.prototype, "origin", void 0);
        __decorate$5([_angular_core.Input(), __metadata$5('design:type', Array)], ConnectedOverlayDirective.prototype, "positions", void 0);
        ConnectedOverlayDirective = __decorate$5([_angular_core.Directive({ selector: '[connected-overlay]' }), __metadata$5('design:paramtypes', [Overlay, _angular_core.TemplateRef, _angular_core.ViewContainerRef])], ConnectedOverlayDirective);
        return ConnectedOverlayDirective;
      }();
      var OverlayModule = function () {
        function OverlayModule() {}
        OverlayModule.forRoot = function () {
          return {
            ngModule: OverlayModule,
            providers: OVERLAY_PROVIDERS
          };
        };
        OverlayModule = __decorate$5([_angular_core.NgModule({
          imports: [PortalModule],
          exports: [ConnectedOverlayDirective, OverlayOrigin],
          declarations: [ConnectedOverlayDirective, OverlayOrigin]
        }), __metadata$5('design:paramtypes', [])], OverlayModule);
        return OverlayModule;
      }();
      var __decorate$9 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$9 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core.OpaqueToken('mdLiveAnnouncerElement');
      var MdLiveAnnouncer = function () {
        function MdLiveAnnouncer(elementToken) {
          this._liveElement = elementToken || this._createLiveElement();
        }
        MdLiveAnnouncer.prototype.announce = function (message, politeness) {
          var _this = this;
          if (politeness === void 0) {
            politeness = 'polite';
          }
          this._liveElement.textContent = '';
          this._liveElement.setAttribute('aria-live', politeness);
          setTimeout(function () {
            return _this._liveElement.textContent = message;
          }, 100);
        };
        MdLiveAnnouncer.prototype._createLiveElement = function () {
          var liveEl = document.createElement('div');
          liveEl.classList.add('md-visually-hidden');
          liveEl.setAttribute('aria-atomic', 'true');
          liveEl.setAttribute('aria-live', 'polite');
          document.body.appendChild(liveEl);
          return liveEl;
        };
        MdLiveAnnouncer = __decorate$9([_angular_core.Injectable(), __param(0, _angular_core.Optional()), __param(0, _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)), __metadata$9('design:paramtypes', [Object])], MdLiveAnnouncer);
        return MdLiveAnnouncer;
      }();
      var __extends$5 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$10 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$10 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdGestureConfig = function (_super) {
        __extends$5(MdGestureConfig, _super);
        function MdGestureConfig() {
          _super.apply(this, arguments);
          this.events = ['drag', 'dragstart', 'dragend', 'dragright', 'dragleft', 'longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'];
        }
        MdGestureConfig.prototype.buildHammer = function (element) {
          var mc = new Hammer(element);
          var pan = new Hammer.Pan();
          var swipe = new Hammer.Swipe();
          var press = new Hammer.Press();
          var slide = this._createRecognizer(pan, {
            event: 'slide',
            threshold: 0
          }, swipe);
          var drag = this._createRecognizer(slide, {
            event: 'drag',
            threshold: 6
          }, swipe);
          var longpress = this._createRecognizer(press, {
            event: 'longpress',
            time: 500
          });
          pan.recognizeWith(swipe);
          mc.add([swipe, press, pan, drag, slide, longpress]);
          return mc;
        };
        MdGestureConfig.prototype._createRecognizer = function (base, options) {
          var inheritances = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            inheritances[_i - 2] = arguments[_i];
          }
          var recognizer = new base.constructor(options);
          inheritances.push(base);
          inheritances.forEach(function (item) {
            return recognizer.recognizeWith(item);
          });
          return recognizer;
        };
        MdGestureConfig = __decorate$10([_angular_core.Injectable(), __metadata$10('design:paramtypes', [])], MdGestureConfig);
        return MdGestureConfig;
      }(_angular_platformBrowser.HammerGestureConfig);
      var InteractivityChecker = function () {
        function InteractivityChecker() {}
        InteractivityChecker.prototype.isDisabled = function (element) {
          return element.hasAttribute('disabled');
        };
        InteractivityChecker.prototype.isVisible = function (element) {
          if (!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)) {
            return false;
          }
          return getComputedStyle(element).getPropertyValue('visibility') == 'visible';
        };
        InteractivityChecker.prototype.isTabbable = function (element) {
          return element.tabIndex >= 0;
        };
        InteractivityChecker.prototype.isFocusable = function (element) {
          return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
        };
        return InteractivityChecker;
      }();
      function isNativeFormElement(element) {
        var nodeName = element.nodeName.toLowerCase();
        return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
      }
      function isHiddenInput(element) {
        return isInputElement(element) && element.type == 'hidden';
      }
      function isAnchorWithHref(element) {
        return isAnchorElement(element) && element.hasAttribute('href');
      }
      function isInputElement(element) {
        return element.nodeName == 'input';
      }
      function isAnchorElement(element) {
        return element.nodeName.toLowerCase() == 'a';
      }
      function hasValidTabIndex(element) {
        if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
          return false;
        }
        var tabIndex = element.getAttribute('tabindex');
        if (tabIndex == '-32768') {
          return false;
        }
        return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
      }
      function isPotentiallyFocusable(element) {
        if (isHiddenInput(element)) {
          return false;
        }
        return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
      }
      var __decorate$11 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$11 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var FocusTrap = function () {
        function FocusTrap(_checker) {
          this._checker = _checker;
        }
        FocusTrap.prototype.wrapFocus = function () {
          var redirectToElement = this._getFirstTabbableElement(this.trappedContent.nativeElement);
          if (redirectToElement) {
            redirectToElement.focus();
          }
        };
        FocusTrap.prototype.reverseWrapFocus = function () {
          var redirectToElement = this._getLastTabbableElement(this.trappedContent.nativeElement);
          if (redirectToElement) {
            redirectToElement.focus();
          }
        };
        FocusTrap.prototype._getFirstTabbableElement = function (root) {
          if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
            return root;
          }
          var childCount = root.children.length;
          for (var i = 0; i < childCount; i++) {
            var tabbableChild = this._getFirstTabbableElement(root.children[i]);
            if (tabbableChild) {
              return tabbableChild;
            }
          }
          return null;
        };
        FocusTrap.prototype._getLastTabbableElement = function (root) {
          if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
            return root;
          }
          for (var i = root.children.length - 1; i >= 0; i--) {
            var tabbableChild = this._getLastTabbableElement(root.children[i]);
            if (tabbableChild) {
              return tabbableChild;
            }
          }
          return null;
        };
        __decorate$11([_angular_core.ViewChild('trappedContent'), __metadata$11('design:type', _angular_core.ElementRef)], FocusTrap.prototype, "trappedContent", void 0);
        FocusTrap = __decorate$11([_angular_core.Component({
          selector: 'focus-trap',
          template: "\n  <div tabindex=\"0\" (focus)=\"reverseWrapFocus()\"></div>\n  <div #trappedContent><ng-content></ng-content></div>\n  <div tabindex=\"0\" (focus)=\"wrapFocus()\"></div>",
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$11('design:paramtypes', [InteractivityChecker])], FocusTrap);
        return FocusTrap;
      }();
      var __decorate$12 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$12 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdUniqueSelectionDispatcher = function () {
        function MdUniqueSelectionDispatcher() {
          this._listeners = [];
        }
        MdUniqueSelectionDispatcher.prototype.notify = function (id, name) {
          for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
            var listener = _a[_i];
            listener(id, name);
          }
        };
        MdUniqueSelectionDispatcher.prototype.listen = function (listener) {
          this._listeners.push(listener);
        };
        MdUniqueSelectionDispatcher = __decorate$12([_angular_core.Injectable(), __metadata$12('design:paramtypes', [])], MdUniqueSelectionDispatcher);
        return MdUniqueSelectionDispatcher;
      }();
      function BooleanFieldValue() {
        return function booleanFieldValueMetadata(target, key) {
          var defaultValue = target[key];
          var localKey = "__md_private_symbol_" + key;
          target[localKey] = defaultValue;
          Object.defineProperty(target, key, {
            get: function () {
              return this[localKey];
            },
            set: function (value) {
              this[localKey] = value != null && "" + value !== 'false';
            }
          });
        };
      }
      var UP_ARROW = 38;
      var DOWN_ARROW = 40;
      var RIGHT_ARROW = 39;
      var LEFT_ARROW = 37;
      var ENTER = 13;
      var TAB = 9;
      var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdCoreModule = function () {
        function MdCoreModule() {}
        MdCoreModule.forRoot = function () {
          return {
            ngModule: MdCoreModule,
            providers: [MdLiveAnnouncer]
          };
        };
        MdCoreModule = __decorate([_angular_core.NgModule({
          imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule],
          exports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule]
        }), __metadata('design:paramtypes', [])], MdCoreModule);
        return MdCoreModule;
      }();
      var __decorate$14 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$14 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param$1 = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdButtonToggleGroup;
        }),
        multi: true
      };
      var _uniqueIdCounter = 0;
      var MdButtonToggleChange = function () {
        function MdButtonToggleChange() {}
        return MdButtonToggleChange;
      }();
      var MdButtonToggleGroup = function () {
        function MdButtonToggleGroup() {
          this._value = null;
          this._name = "md-radio-group-" + _uniqueIdCounter++;
          this._disabled = null;
          this._selected = null;
          this._isInitialized = false;
          this._controlValueAccessorChangeFn = function (value) {};
          this.onTouched = function () {};
          this._change = new _angular_core.EventEmitter();
          this._buttonToggles = null;
        }
        Object.defineProperty(MdButtonToggleGroup.prototype, "change", {
          get: function () {
            return this._change.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        MdButtonToggleGroup.prototype.ngAfterViewInit = function () {
          this._isInitialized = true;
        };
        Object.defineProperty(MdButtonToggleGroup.prototype, "name", {
          get: function () {
            return this._name;
          },
          set: function (value) {
            this._name = value;
            this._updateButtonToggleNames();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdButtonToggleGroup.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value != null && value !== false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdButtonToggleGroup.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (newValue) {
            if (this._value != newValue) {
              this._value = newValue;
              this._updateSelectedButtonToggleFromValue();
              if (this._isInitialized) {
                this._emitChangeEvent();
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdButtonToggleGroup.prototype, "selected", {
          get: function () {
            return this._selected;
          },
          set: function (selected) {
            this._selected = selected;
            this.value = selected ? selected.value : null;
            if (selected && !selected.checked) {
              selected.checked = true;
            }
          },
          enumerable: true,
          configurable: true
        });
        MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {
          var _this = this;
          if (this._buttonToggles) {
            this._buttonToggles.forEach(function (toggle) {
              toggle.name = _this._name;
            });
          }
        };
        MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {
          var _this = this;
          var isAlreadySelected = this._selected != null && this._selected.value == this._value;
          if (this._buttonToggles != null && !isAlreadySelected) {
            var matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) {
              return buttonToggle.value == _this._value;
            })[0];
            if (matchingButtonToggle) {
              this.selected = matchingButtonToggle;
            } else if (this.value == null) {
              this.selected = null;
              this._buttonToggles.forEach(function (buttonToggle) {
                buttonToggle.checked = false;
              });
            }
          }
        };
        MdButtonToggleGroup.prototype._emitChangeEvent = function () {
          var event = new MdButtonToggleChange();
          event.source = this._selected;
          event.value = this._value;
          this._controlValueAccessorChangeFn(event.value);
          this._change.emit(event);
        };
        MdButtonToggleGroup.prototype.writeValue = function (value) {
          this.value = value;
        };
        MdButtonToggleGroup.prototype.registerOnChange = function (fn) {
          this._controlValueAccessorChangeFn = fn;
        };
        MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        __decorate$14([_angular_core.Output(), __metadata$14('design:type', rxjs_Observable.Observable)], MdButtonToggleGroup.prototype, "change", null);
        __decorate$14([_angular_core.ContentChildren(_angular_core.forwardRef(function () {
          return MdButtonToggle;
        })), __metadata$14('design:type', _angular_core.QueryList)], MdButtonToggleGroup.prototype, "_buttonToggles", void 0);
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', String)], MdButtonToggleGroup.prototype, "name", null);
        __decorate$14([_angular_core.Input(), BooleanFieldValue(), __metadata$14('design:type', Boolean)], MdButtonToggleGroup.prototype, "disabled", null);
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', Object)], MdButtonToggleGroup.prototype, "value", null);
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', Object)], MdButtonToggleGroup.prototype, "selected", null);
        MdButtonToggleGroup = __decorate$14([_angular_core.Directive({
          selector: 'md-button-toggle-group:not([multiple])',
          providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
          host: { 'role': 'radiogroup' }
        }), __metadata$14('design:paramtypes', [])], MdButtonToggleGroup);
        return MdButtonToggleGroup;
      }();
      var MdButtonToggleGroupMultiple = function () {
        function MdButtonToggleGroupMultiple() {
          this._disabled = null;
        }
        Object.defineProperty(MdButtonToggleGroupMultiple.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value != null && value !== false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', Boolean)], MdButtonToggleGroupMultiple.prototype, "disabled", null);
        MdButtonToggleGroupMultiple = __decorate$14([_angular_core.Directive({ selector: 'md-button-toggle-group[multiple]' }), __metadata$14('design:paramtypes', [])], MdButtonToggleGroupMultiple);
        return MdButtonToggleGroupMultiple;
      }();
      var MdButtonToggle = function () {
        function MdButtonToggle(toggleGroup, toggleGroupMultiple, buttonToggleDispatcher) {
          var _this = this;
          this.buttonToggleDispatcher = buttonToggleDispatcher;
          this._checked = false;
          this._disabled = null;
          this._value = null;
          this._isSingleSelector = null;
          this._change = new _angular_core.EventEmitter();
          this.buttonToggleGroup = toggleGroup;
          this.buttonToggleGroupMultiple = toggleGroupMultiple;
          if (this.buttonToggleGroup) {
            buttonToggleDispatcher.listen(function (id, name) {
              if (id != _this.id && name == _this.name) {
                _this.checked = false;
              }
            });
            this._type = 'radio';
            this.name = this.buttonToggleGroup.name;
            this._isSingleSelector = true;
          } else {
            this._type = 'checkbox';
            this._isSingleSelector = false;
          }
        }
        Object.defineProperty(MdButtonToggle.prototype, "change", {
          get: function () {
            return this._change.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        MdButtonToggle.prototype.ngOnInit = function () {
          if (this.id == null) {
            this.id = "md-button-toggle-" + _uniqueIdCounter++;
          }
          if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {
            this._checked = true;
          }
        };
        Object.defineProperty(MdButtonToggle.prototype, "inputId", {
          get: function () {
            return this.id + "-input";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdButtonToggle.prototype, "checked", {
          get: function () {
            return this._checked;
          },
          set: function (newCheckedState) {
            if (this._isSingleSelector) {
              if (newCheckedState) {
                this.buttonToggleDispatcher.notify(this.id, this.name);
              }
            }
            this._checked = newCheckedState;
            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {
              this.buttonToggleGroup.selected = this;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdButtonToggle.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (value) {
            if (this._value != value) {
              if (this.buttonToggleGroup != null && this.checked) {
                this.buttonToggleGroup.value = value;
              }
              this._value = value;
            }
          },
          enumerable: true,
          configurable: true
        });
        MdButtonToggle.prototype._emitChangeEvent = function () {
          var event = new MdButtonToggleChange();
          event.source = this;
          event.value = this._value;
          this._change.emit(event);
        };
        Object.defineProperty(MdButtonToggle.prototype, "disabled", {
          get: function () {
            return this._disabled || this.buttonToggleGroup != null && this.buttonToggleGroup.disabled || this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled;
          },
          set: function (value) {
            this._disabled = value != null && value !== false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        MdButtonToggle.prototype._toggle = function () {
          this.checked = !this.checked;
        };
        MdButtonToggle.prototype._onInputChange = function (event) {
          event.stopPropagation();
          if (this._isSingleSelector) {
            this.checked = true;
            this.buttonToggleGroup.selected = this;
            this.buttonToggleGroup.onTouched();
          } else {
            this._toggle();
          }
          this._emitChangeEvent();
        };
        MdButtonToggle.prototype._onInputClick = function (event) {
          event.stopPropagation();
        };
        __decorate$14([_angular_core.HostBinding(), _angular_core.Input(), __metadata$14('design:type', String)], MdButtonToggle.prototype, "id", void 0);
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', String)], MdButtonToggle.prototype, "name", void 0);
        __decorate$14([_angular_core.Output(), __metadata$14('design:type', rxjs_Observable.Observable)], MdButtonToggle.prototype, "change", null);
        __decorate$14([_angular_core.HostBinding('class.md-button-toggle-checked'), _angular_core.Input(), __metadata$14('design:type', Boolean)], MdButtonToggle.prototype, "checked", null);
        __decorate$14([_angular_core.Input(), __metadata$14('design:type', Object)], MdButtonToggle.prototype, "value", null);
        __decorate$14([_angular_core.HostBinding('class.md-button-toggle-disabled'), _angular_core.Input(), __metadata$14('design:type', Boolean)], MdButtonToggle.prototype, "disabled", null);
        MdButtonToggle = __decorate$14([_angular_core.Component({
          selector: 'md-button-toggle',
          template: "<label [attr.for]=\"inputId\" class=\"md-button-toggle-label\"> <input #input class=\"md-button-toggle-input md-visually-hidden\" [type]=\"_type\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"> <div class=\"md-button-toggle-label-content\"> <ng-content></ng-content> </div> </label> ",
          styles: ["md-button-toggle-group { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); position: relative; display: inline-flex; border-radius: 3px; cursor: pointer; white-space: nowrap; } .md-button-toggle-disabled .md-button-toggle-label-content { cursor: default; } md-button-toggle { white-space: nowrap; } .md-button-toggle-label-content { display: inline-block; line-height: 36px; padding: 0 16px; cursor: pointer; } .md-button-toggle-label-content > * { vertical-align: middle; } /*# sourceMappingURL=button-toggle.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __param$1(0, _angular_core.Optional()), __param$1(1, _angular_core.Optional()), __metadata$14('design:paramtypes', [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdUniqueSelectionDispatcher])], MdButtonToggle);
        return MdButtonToggle;
      }();
      var MdButtonToggleModule = function () {
        function MdButtonToggleModule() {}
        MdButtonToggleModule.forRoot = function () {
          return {
            ngModule: MdButtonToggleModule,
            providers: [MdUniqueSelectionDispatcher]
          };
        };
        MdButtonToggleModule = __decorate$14([_angular_core.NgModule({
          imports: [_angular_forms.FormsModule],
          exports: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],
          declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle]
        }), __metadata$14('design:paramtypes', [])], MdButtonToggleModule);
        return MdButtonToggleModule;
      }();
      var __extends$6 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$15 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$15 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdButton = function () {
        function MdButton(_elementRef, _renderer) {
          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this._isKeyboardFocused = false;
          this._isMouseDown = false;
          this.disableRipple = false;
        }
        Object.defineProperty(MdButton.prototype, "color", {
          get: function () {
            return this._color;
          },
          set: function (value) {
            this._updateColor(value);
          },
          enumerable: true,
          configurable: true
        });
        MdButton.prototype._setMousedown = function () {
          var _this = this;
          this._isMouseDown = true;
          setTimeout(function () {
            _this._isMouseDown = false;
          }, 100);
        };
        MdButton.prototype._updateColor = function (newColor) {
          this._setElementColor(this._color, false);
          this._setElementColor(newColor, true);
          this._color = newColor;
        };
        MdButton.prototype._setElementColor = function (color, isAdd) {
          if (color != null && color != '') {
            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
          }
        };
        MdButton.prototype._setKeyboardFocus = function () {
          this._isKeyboardFocused = !this._isMouseDown;
        };
        MdButton.prototype._removeKeyboardFocus = function () {
          this._isKeyboardFocused = false;
        };
        MdButton.prototype.focus = function () {
          this._elementRef.nativeElement.focus();
        };
        MdButton.prototype.getHostElement = function () {
          return this._elementRef.nativeElement;
        };
        MdButton.prototype.isRoundButton = function () {
          var el = this._elementRef.nativeElement;
          return el.hasAttribute('md-icon-button') || el.hasAttribute('md-fab') || el.hasAttribute('md-mini-fab');
        };
        MdButton.prototype.isRippleEnabled = function () {
          return !this.disableRipple;
        };
        __decorate$15([_angular_core.Input(), BooleanFieldValue(), __metadata$15('design:type', Boolean)], MdButton.prototype, "disableRipple", void 0);
        __decorate$15([_angular_core.Input(), __metadata$15('design:type', String)], MdButton.prototype, "color", null);
        MdButton = __decorate$15([_angular_core.Component({
          selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' + 'button[md-fab], button[md-mini-fab]',
          host: {
            '[class.md-button-focus]': '_isKeyboardFocused',
            '(mousedown)': '_setMousedown()',
            '(focus)': '_setKeyboardFocus()',
            '(blur)': '_removeKeyboardFocus()'
          },
          template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span> ",
          styles: ["[md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$15('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])], MdButton);
        return MdButton;
      }();
      var MdAnchor = function (_super) {
        __extends$6(MdAnchor, _super);
        function MdAnchor(elementRef, renderer) {
          _super.call(this, elementRef, renderer);
          this._disabled = null;
        }
        Object.defineProperty(MdAnchor.prototype, "tabIndex", {
          get: function () {
            return this.disabled ? -1 : 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdAnchor.prototype, "isAriaDisabled", {
          get: function () {
            return this.disabled ? 'true' : 'false';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdAnchor.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value != null && value != false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        MdAnchor.prototype._haltDisabledEvents = function (event) {
          if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
          }
        };
        __decorate$15([_angular_core.HostBinding('tabIndex'), __metadata$15('design:type', Number)], MdAnchor.prototype, "tabIndex", null);
        __decorate$15([_angular_core.HostBinding('attr.aria-disabled'), __metadata$15('design:type', String)], MdAnchor.prototype, "isAriaDisabled", null);
        __decorate$15([_angular_core.HostBinding('attr.disabled'), _angular_core.Input('disabled'), __metadata$15('design:type', Object)], MdAnchor.prototype, "disabled", null);
        MdAnchor = __decorate$15([_angular_core.Component({
          selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',
          inputs: ['color'],
          host: {
            '[class.md-button-focus]': '_isKeyboardFocused',
            '(mousedown)': '_setMousedown()',
            '(focus)': '_setKeyboardFocus()',
            '(blur)': '_removeKeyboardFocus()',
            '(click)': '_haltDisabledEvents($event)'
          },
          template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span> ",
          styles: ["[md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$15('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])], MdAnchor);
        return MdAnchor;
      }(MdButton);
      var MdButtonModule = function () {
        function MdButtonModule() {}
        MdButtonModule.forRoot = function () {
          return {
            ngModule: MdButtonModule,
            providers: []
          };
        };
        MdButtonModule = __decorate$15([_angular_core.NgModule({
          imports: [_angular_common.CommonModule, MdRippleModule],
          exports: [MdButton, MdAnchor],
          declarations: [MdButton, MdAnchor]
        }), __metadata$15('design:paramtypes', [])], MdButtonModule);
        return MdButtonModule;
      }();
      var __decorate$16 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$16 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var nextId = 0;
      var MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdCheckbox;
        }),
        multi: true
      };
      (function (TransitionCheckState) {
        TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
        TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
        TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
        TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
      })(exports.TransitionCheckState || (exports.TransitionCheckState = {}));
      var MdCheckboxChange = function () {
        function MdCheckboxChange() {}
        return MdCheckboxChange;
      }();
      var MdCheckbox = function () {
        function MdCheckbox(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.ariaLabel = '';
          this.ariaLabelledby = null;
          this.id = "md-checkbox-" + ++nextId;
          this.required = false;
          this.align = 'start';
          this.disabled = false;
          this.tabindex = 0;
          this.name = null;
          this.change = new _angular_core.EventEmitter();
          this.onTouched = function () {};
          this._currentAnimationClass = '';
          this._currentCheckState = exports.TransitionCheckState.Init;
          this._checked = false;
          this._indeterminate = false;
          this._controlValueAccessorChangeFn = function (value) {};
          this.hasFocus = false;
        }
        Object.defineProperty(MdCheckbox.prototype, "inputId", {
          get: function () {
            return "input-" + this.id;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdCheckbox.prototype, "checked", {
          get: function () {
            return this._checked;
          },
          set: function (checked) {
            if (checked != this.checked) {
              this._indeterminate = false;
              this._checked = checked;
              this._transitionCheckState(this._checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdCheckbox.prototype, "indeterminate", {
          get: function () {
            return this._indeterminate;
          },
          set: function (indeterminate) {
            this._indeterminate = indeterminate;
            if (this._indeterminate) {
              this._transitionCheckState(exports.TransitionCheckState.Indeterminate);
            } else {
              this._transitionCheckState(this.checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
            }
          },
          enumerable: true,
          configurable: true
        });
        MdCheckbox.prototype.writeValue = function (value) {
          this.checked = !!value;
        };
        MdCheckbox.prototype.registerOnChange = function (fn) {
          this._controlValueAccessorChangeFn = fn;
        };
        MdCheckbox.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        MdCheckbox.prototype._transitionCheckState = function (newState) {
          var oldState = this._currentCheckState;
          var renderer = this._renderer;
          var elementRef = this._elementRef;
          if (oldState === newState) {
            return;
          }
          if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);
          }
          this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
          this._currentCheckState = newState;
          if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);
          }
        };
        MdCheckbox.prototype._emitChangeEvent = function () {
          var event = new MdCheckboxChange();
          event.source = this;
          event.checked = this.checked;
          this._controlValueAccessorChangeFn(this.checked);
          this.change.emit(event);
        };
        MdCheckbox.prototype._onInputFocus = function () {
          this.hasFocus = true;
        };
        MdCheckbox.prototype._onInputBlur = function () {
          this.hasFocus = false;
          this.onTouched();
        };
        MdCheckbox.prototype.toggle = function () {
          this.checked = !this.checked;
        };
        MdCheckbox.prototype._onInteractionEvent = function (event) {
          event.stopPropagation();
          if (!this.disabled) {
            this.toggle();
            this._emitChangeEvent();
          }
        };
        MdCheckbox.prototype._onInputClick = function (event) {
          event.stopPropagation();
        };
        MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
          var animSuffix;
          switch (oldState) {
            case exports.TransitionCheckState.Init:
              if (newState === exports.TransitionCheckState.Checked) {
                animSuffix = 'unchecked-checked';
              } else {
                return '';
              }
              break;
            case exports.TransitionCheckState.Unchecked:
              animSuffix = newState === exports.TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';
              break;
            case exports.TransitionCheckState.Checked:
              animSuffix = newState === exports.TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';
              break;
            case exports.TransitionCheckState.Indeterminate:
              animSuffix = newState === exports.TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';
          }
          return "md-checkbox-anim-" + animSuffix;
        };
        __decorate$16([_angular_core.Input('aria-label'), __metadata$16('design:type', String)], MdCheckbox.prototype, "ariaLabel", void 0);
        __decorate$16([_angular_core.Input('aria-labelledby'), __metadata$16('design:type', String)], MdCheckbox.prototype, "ariaLabelledby", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', String)], MdCheckbox.prototype, "id", void 0);
        __decorate$16([_angular_core.Input(), BooleanFieldValue(), __metadata$16('design:type', Boolean)], MdCheckbox.prototype, "required", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', Object)], MdCheckbox.prototype, "align", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', Boolean)], MdCheckbox.prototype, "disabled", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', Number)], MdCheckbox.prototype, "tabindex", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', String)], MdCheckbox.prototype, "name", void 0);
        __decorate$16([_angular_core.Output(), __metadata$16('design:type', _angular_core.EventEmitter)], MdCheckbox.prototype, "change", void 0);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', Object)], MdCheckbox.prototype, "checked", null);
        __decorate$16([_angular_core.Input(), __metadata$16('design:type', Object)], MdCheckbox.prototype, "indeterminate", null);
        MdCheckbox = __decorate$16([_angular_core.Component({
          selector: 'md-checkbox',
          template: "<label class=\"md-checkbox-layout\"> <div class=\"md-checkbox-inner-container\"> <input class=\"md-checkbox-input md-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [tabIndex]=\"tabindex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"> <div class=\"md-ink-ripple\"></div> <div class=\"md-checkbox-frame\"></div> <div class=\"md-checkbox-background\"> <svg version=\"1.1\" class=\"md-checkbox-checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"> <path class=\"md-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/> </svg> <!-- Element for rendering the indeterminate state checkbox. --> <div class=\"md-checkbox-mixedmark\"></div> </div> </div> <span class=\"md-checkbox-label\"> <ng-content></ng-content> </span> </label> ",
          styles: ["@keyframes md-checkbox-fade-in-background { 0% { opacity: 0; } 50% { opacity: 1; } } @keyframes md-checkbox-fade-out-background { 0%, 50% { opacity: 1; } 100% { opacity: 0; } } @keyframes md-checkbox-unchecked-checked-checkmark-path { 0%, 50% { stroke-dashoffset: 22.91026; } 50% { animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1); } 100% { stroke-dashoffset: 0; } } @keyframes md-checkbox-unchecked-indeterminate-mixedmark { 0%, 68.2% { transform: scaleX(0); } 68.2% { animation-timing-function: cubic-bezier(0, 0, 0, 1); } 100% { transform: scaleX(1); } } @keyframes md-checkbox-checked-unchecked-checkmark-path { from { animation-timing-function: cubic-bezier(0.4, 0, 1, 1); stroke-dashoffset: 0; } to { stroke-dashoffset: -22.91026; } } @keyframes md-checkbox-checked-indeterminate-checkmark { from { animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1); opacity: 1; transform: rotate(0deg); } to { opacity: 0; transform: rotate(45deg); } } @keyframes md-checkbox-indeterminate-checked-checkmark { from { animation-timing-function: cubic-bezier(0.14, 0, 0, 1); opacity: 0; transform: rotate(45deg); } to { opacity: 1; transform: rotate(360deg); } } @keyframes md-checkbox-checked-indeterminate-mixedmark { from { animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1); opacity: 0; transform: rotate(-45deg); } to { opacity: 1; transform: rotate(0deg); } } @keyframes md-checkbox-indeterminate-checked-mixedmark { from { animation-timing-function: cubic-bezier(0.14, 0, 0, 1); opacity: 1; transform: rotate(0deg); } to { opacity: 0; transform: rotate(315deg); } } @keyframes md-checkbox-indeterminate-unchecked-mixedmark { 0% { animation-timing-function: linear; opacity: 1; transform: scaleX(1); } 32.8%, 100% { opacity: 0; transform: scaleX(0); } } .md-checkbox-frame, .md-checkbox-background, .md-checkbox-checkmark { bottom: 0; left: 0; position: absolute; right: 0; top: 0; } .md-checkbox-checkmark, .md-checkbox-mixedmark { width: calc(100% - 4px); } .md-checkbox-frame, .md-checkbox-background { border-radius: 2px; box-sizing: border-box; pointer-events: none; } md-checkbox { cursor: pointer; } .md-checkbox-layout { cursor: inherit; align-items: baseline; display: inline-flex; } .md-checkbox-inner-container { display: inline-block; height: 20px; line-height: 0; margin: auto; margin-right: 8px; order: 0; position: relative; vertical-align: middle; white-space: nowrap; width: 20px; } [dir='rtl'] .md-checkbox-inner-container { margin-left: 8px; margin-right: auto; } .md-checkbox-layout .md-checkbox-label { line-height: 24px; } .md-checkbox-frame { background-color: transparent; border: 2px solid; transition: border-color 90ms cubic-bezier(0, 0, 0.2, 0.1); will-change: border-color; } .md-checkbox-background { align-items: center; display: inline-flex; justify-content: center; transition: background-color 90ms cubic-bezier(0, 0, 0.2, 0.1), opacity 90ms cubic-bezier(0, 0, 0.2, 0.1); will-change: background-color, opacity; } .md-checkbox-checkmark { width: 100%; } .md-checkbox-checkmark-path { stroke-dashoffset: 22.91026; stroke-dasharray: 22.91026; stroke-width: 2.66667px; } .md-checkbox-mixedmark { height: 2px; opacity: 0; transform: scaleX(0) rotate(0deg); } .md-checkbox-align-end .md-checkbox-inner-container { order: 1; margin-left: 8px; margin-right: auto; } [dir='rtl'] .md-checkbox-align-end .md-checkbox-inner-container { margin-left: auto; margin-right: 8px; } .md-checkbox-checked .md-checkbox-checkmark { opacity: 1; } .md-checkbox-checked .md-checkbox-checkmark-path { stroke-dashoffset: 0; } .md-checkbox-checked .md-checkbox-mixedmark { transform: scaleX(1) rotate(-45deg); } .md-checkbox-indeterminate .md-checkbox-checkmark { opacity: 0; transform: rotate(45deg); } .md-checkbox-indeterminate .md-checkbox-checkmark-path { stroke-dashoffset: 0; } .md-checkbox-indeterminate .md-checkbox-mixedmark { opacity: 1; transform: scaleX(1) rotate(0deg); } .md-checkbox-unchecked .md-checkbox-background { background-color: transparent; } .md-checkbox-disabled { cursor: default; } .md-checkbox-anim-unchecked-checked .md-checkbox-background { animation: 180ms linear 0ms md-checkbox-fade-in-background; } .md-checkbox-anim-unchecked-checked .md-checkbox-checkmark-path { animation: 180ms linear 0ms md-checkbox-unchecked-checked-checkmark-path; } .md-checkbox-anim-unchecked-indeterminate .md-checkbox-background { animation: 180ms linear 0ms md-checkbox-fade-in-background; } .md-checkbox-anim-unchecked-indeterminate .md-checkbox-mixedmark { animation: 90ms linear 0ms md-checkbox-unchecked-indeterminate-mixedmark; } .md-checkbox-anim-checked-unchecked .md-checkbox-background { animation: 180ms linear 0ms md-checkbox-fade-out-background; } .md-checkbox-anim-checked-unchecked .md-checkbox-checkmark-path { animation: 90ms linear 0ms md-checkbox-checked-unchecked-checkmark-path; } .md-checkbox-anim-checked-indeterminate .md-checkbox-checkmark { animation: 90ms linear 0ms md-checkbox-checked-indeterminate-checkmark; } .md-checkbox-anim-checked-indeterminate .md-checkbox-mixedmark { animation: 90ms linear 0ms md-checkbox-checked-indeterminate-mixedmark; } .md-checkbox-anim-indeterminate-checked .md-checkbox-checkmark { animation: 500ms linear 0ms md-checkbox-indeterminate-checked-checkmark; } .md-checkbox-anim-indeterminate-checked .md-checkbox-mixedmark { animation: 500ms linear 0ms md-checkbox-indeterminate-checked-mixedmark; } .md-checkbox-anim-indeterminate-unchecked .md-checkbox-background { animation: 180ms linear 0ms md-checkbox-fade-out-background; } .md-checkbox-anim-indeterminate-unchecked .md-checkbox-mixedmark { animation: 300ms linear 0ms md-checkbox-indeterminate-unchecked-mixedmark; } .md-checkbox-input { bottom: 0; left: 50%; } .md-ink-ripple { border-radius: 50%; opacity: 0; height: 48px; left: 50%; overflow: hidden; pointer-events: none; position: absolute; top: 50%; transform: translate(-50%, -50%); transition: opacity ease 280ms, background-color ease 280ms; width: 48px; } .md-checkbox-focused .md-ink-ripple { opacity: 1; } .md-checkbox-disabled .md-ink-ripple { background-color: #000; } /*# sourceMappingURL=checkbox.css.map */ "],
          host: {
            '[class.md-checkbox-indeterminate]': 'indeterminate',
            '[class.md-checkbox-checked]': 'checked',
            '[class.md-checkbox-disabled]': 'disabled',
            '[class.md-checkbox-align-end]': 'align == "end"',
            '[class.md-checkbox-focused]': 'hasFocus'
          },
          providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$16('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdCheckbox);
        return MdCheckbox;
      }();
      var MdCheckboxModule = function () {
        function MdCheckboxModule() {}
        MdCheckboxModule.forRoot = function () {
          return {
            ngModule: MdCheckboxModule,
            providers: []
          };
        };
        MdCheckboxModule = __decorate$16([_angular_core.NgModule({
          exports: [MdCheckbox],
          declarations: [MdCheckbox]
        }), __metadata$16('design:paramtypes', [])], MdCheckboxModule);
        return MdCheckboxModule;
      }();
      var __decorate$17 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$17 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param$2 = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdRadioGroup;
        }),
        multi: true
      };
      var _uniqueIdCounter$1 = 0;
      var MdRadioChange = function () {
        function MdRadioChange() {}
        return MdRadioChange;
      }();
      var MdRadioGroup = function () {
        function MdRadioGroup() {
          this._value = null;
          this._name = "md-radio-group-" + _uniqueIdCounter$1++;
          this._disabled = false;
          this._selected = null;
          this._isInitialized = false;
          this._controlValueAccessorChangeFn = function (value) {};
          this.onTouched = function () {};
          this.change = new _angular_core.EventEmitter();
          this._radios = null;
        }
        Object.defineProperty(MdRadioGroup.prototype, "name", {
          get: function () {
            return this._name;
          },
          set: function (value) {
            this._name = value;
            this._updateRadioButtonNames();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioGroup.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value != null && value !== false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioGroup.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (newValue) {
            if (this._value != newValue) {
              this._value = newValue;
              this._updateSelectedRadioFromValue();
              if (this._isInitialized) {
                this._emitChangeEvent();
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioGroup.prototype, "selected", {
          get: function () {
            return this._selected;
          },
          set: function (selected) {
            this._selected = selected;
            this.value = selected ? selected.value : null;
            if (selected && !selected.checked) {
              selected.checked = true;
            }
          },
          enumerable: true,
          configurable: true
        });
        MdRadioGroup.prototype.ngAfterContentInit = function () {
          this._isInitialized = true;
        };
        MdRadioGroup.prototype._touch = function () {
          if (this.onTouched) {
            this.onTouched();
          }
        };
        MdRadioGroup.prototype._updateRadioButtonNames = function () {
          var _this = this;
          if (this._radios) {
            this._radios.forEach(function (radio) {
              radio.name = _this.name;
            });
          }
        };
        MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {
          var _this = this;
          var isAlreadySelected = this._selected != null && this._selected.value == this._value;
          if (this._radios != null && !isAlreadySelected) {
            var matchingRadio = this._radios.filter(function (radio) {
              return radio.value == _this._value;
            })[0];
            if (matchingRadio) {
              this.selected = matchingRadio;
            } else if (this.value == null) {
              this.selected = null;
              this._radios.forEach(function (radio) {
                radio.checked = false;
              });
            }
          }
        };
        MdRadioGroup.prototype._emitChangeEvent = function () {
          var event = new MdRadioChange();
          event.source = this._selected;
          event.value = this._value;
          this._controlValueAccessorChangeFn(event.value);
          this.change.emit(event);
        };
        MdRadioGroup.prototype.writeValue = function (value) {
          this.value = value;
        };
        MdRadioGroup.prototype.registerOnChange = function (fn) {
          this._controlValueAccessorChangeFn = fn;
        };
        MdRadioGroup.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        __decorate$17([_angular_core.Output(), __metadata$17('design:type', _angular_core.EventEmitter)], MdRadioGroup.prototype, "change", void 0);
        __decorate$17([_angular_core.ContentChildren(_angular_core.forwardRef(function () {
          return MdRadioButton;
        })), __metadata$17('design:type', _angular_core.QueryList)], MdRadioGroup.prototype, "_radios", void 0);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', String)], MdRadioGroup.prototype, "name", null);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Object)], MdRadioGroup.prototype, "align", void 0);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Boolean)], MdRadioGroup.prototype, "disabled", null);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Object)], MdRadioGroup.prototype, "value", null);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Object)], MdRadioGroup.prototype, "selected", null);
        MdRadioGroup = __decorate$17([_angular_core.Directive({
          selector: 'md-radio-group',
          providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],
          host: { 'role': 'radiogroup' }
        }), __metadata$17('design:paramtypes', [])], MdRadioGroup);
        return MdRadioGroup;
      }();
      var MdRadioButton = function () {
        function MdRadioButton(radioGroup, radioDispatcher) {
          var _this = this;
          this.radioDispatcher = radioDispatcher;
          this._checked = false;
          this.id = "md-radio-" + _uniqueIdCounter$1++;
          this._value = null;
          this.change = new _angular_core.EventEmitter();
          this.radioGroup = radioGroup;
          radioDispatcher.listen(function (id, name) {
            if (id != _this.id && name == _this.name) {
              _this.checked = false;
            }
          });
        }
        Object.defineProperty(MdRadioButton.prototype, "inputId", {
          get: function () {
            return this.id + "-input";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioButton.prototype, "checked", {
          get: function () {
            return this._checked;
          },
          set: function (newCheckedState) {
            if (newCheckedState) {
              this.radioDispatcher.notify(this.id, this.name);
            }
            this._checked = newCheckedState;
            if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {
              this.radioGroup.selected = this;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioButton.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (value) {
            if (this._value != value) {
              if (this.radioGroup != null && this.checked) {
                this.radioGroup.value = value;
              }
              this._value = value;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioButton.prototype, "align", {
          get: function () {
            return this._align || this.radioGroup != null && this.radioGroup.align || 'start';
          },
          set: function (value) {
            this._align = value;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdRadioButton.prototype, "disabled", {
          get: function () {
            return this._disabled || this.radioGroup != null && this.radioGroup.disabled;
          },
          set: function (value) {
            this._disabled = value != null && value !== false ? true : null;
          },
          enumerable: true,
          configurable: true
        });
        MdRadioButton.prototype.ngOnInit = function () {
          if (this.radioGroup) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
          }
        };
        MdRadioButton.prototype._emitChangeEvent = function () {
          var event = new MdRadioChange();
          event.source = this;
          event.value = this._value;
          this.change.emit(event);
        };
        MdRadioButton.prototype._onInputFocus = function () {
          this._isFocused = true;
        };
        MdRadioButton.prototype._onInputBlur = function () {
          this._isFocused = false;
          if (this.radioGroup) {
            this.radioGroup._touch();
          }
        };
        MdRadioButton.prototype._onInputClick = function (event) {
          event.stopPropagation();
        };
        MdRadioButton.prototype._onInputChange = function (event) {
          event.stopPropagation();
          this.checked = true;
          this._emitChangeEvent();
          if (this.radioGroup) {
            this.radioGroup._touch();
          }
        };
        __decorate$17([_angular_core.HostBinding('class.md-radio-focused'), __metadata$17('design:type', Boolean)], MdRadioButton.prototype, "_isFocused", void 0);
        __decorate$17([_angular_core.HostBinding('id'), _angular_core.Input(), __metadata$17('design:type', String)], MdRadioButton.prototype, "id", void 0);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', String)], MdRadioButton.prototype, "name", void 0);
        __decorate$17([_angular_core.Input('aria-label'), __metadata$17('design:type', String)], MdRadioButton.prototype, "ariaLabel", void 0);
        __decorate$17([_angular_core.Input('aria-labelledby'), __metadata$17('design:type', String)], MdRadioButton.prototype, "ariaLabelledby", void 0);
        __decorate$17([_angular_core.Output(), __metadata$17('design:type', _angular_core.EventEmitter)], MdRadioButton.prototype, "change", void 0);
        __decorate$17([_angular_core.HostBinding('class.md-radio-checked'), _angular_core.Input(), __metadata$17('design:type', Boolean)], MdRadioButton.prototype, "checked", null);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Object)], MdRadioButton.prototype, "value", null);
        __decorate$17([_angular_core.Input(), __metadata$17('design:type', Object)], MdRadioButton.prototype, "align", null);
        __decorate$17([_angular_core.HostBinding('class.md-radio-disabled'), _angular_core.Input(), __metadata$17('design:type', Boolean)], MdRadioButton.prototype, "disabled", null);
        MdRadioButton = __decorate$17([_angular_core.Component({
          selector: 'md-radio-button',
          template: "<!-- TODO(jelbourn): render the radio on either side of the content --> <!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. --> <label [attr.for]=\"inputId\" class=\"md-radio-label\"> <!-- The actual 'radio' part of the control. --> <div class=\"md-radio-container\"> <div class=\"md-radio-outer-circle\"></div> <div class=\"md-radio-inner-circle\"></div> <div class=\"md-ink-ripple\"></div> </div> <input #input class=\"md-radio-input md-visually-hidden\" type=\"radio\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onInputChange($event)\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (click)=\"_onInputClick($event)\"> <!-- The label content for radio control. --> <div class=\"md-radio-label-content\" [class.md-radio-align-end]=\"align == 'end'\"> <ng-content></ng-content> </div> </label> ",
          styles: ["md-radio-button { display: inline-block; } .md-radio-label { cursor: pointer; display: inline-flex; align-items: baseline; white-space: nowrap; } .md-radio-container { box-sizing: border-box; display: inline-block; height: 20px; position: relative; width: 20px; top: 2px; } .md-radio-outer-circle { border: solid 2px; border-radius: 50%; box-sizing: border-box; height: 20px; left: 0; position: absolute; top: 0; transition: border-color ease 280ms; width: 20px; } .md-radio-inner-circle { border-radius: 50%; box-sizing: border-box; height: 20px; left: 0; position: absolute; top: 0; transition: transform ease 280ms, background-color ease 280ms; transform: scale(0); width: 20px; } .md-radio-checked .md-radio-inner-circle { transform: scale(0.5); } .md-radio-label-content { display: inline-block; order: 0; line-height: inherit; padding-left: 8px; padding-right: 0; } [dir='rtl'] .md-radio-label-content { padding-right: 8px; padding-left: 0; } .md-radio-label-content.md-radio-align-end { order: -1; padding-left: 0; padding-right: 8px; } [dir='rtl'] .md-radio-label-content.md-radio-align-end { padding-right: 0; padding-left: 8px; } .md-radio-disabled, .md-radio-disabled .md-radio-label { cursor: default; } .md-ink-ripple { border-radius: 50%; opacity: 0; height: 48px; left: 50%; overflow: hidden; pointer-events: none; position: absolute; top: 50%; transform: translate(-50%, -50%); transition: opacity ease 280ms, background-color ease 280ms; width: 48px; } .md-radio-focused .md-ink-ripple { opacity: 1; } .md-radio-disabled .md-ink-ripple { background-color: #000; } /*# sourceMappingURL=radio.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __param$2(0, _angular_core.Optional()), __metadata$17('design:paramtypes', [MdRadioGroup, MdUniqueSelectionDispatcher])], MdRadioButton);
        return MdRadioButton;
      }();
      var MdRadioModule = function () {
        function MdRadioModule() {}
        MdRadioModule.forRoot = function () {
          return {
            ngModule: MdRadioModule,
            providers: [MdUniqueSelectionDispatcher]
          };
        };
        MdRadioModule = __decorate$17([_angular_core.NgModule({
          exports: [MdRadioGroup, MdRadioButton],
          declarations: [MdRadioGroup, MdRadioButton]
        }), __metadata$17('design:paramtypes', [])], MdRadioModule);
        return MdRadioModule;
      }();
      var __decorate$19 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$19 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdSelect = function () {
        function MdSelect() {}
        MdSelect = __decorate$19([_angular_core.Component({
          selector: 'md-select',
          template: "I'm a select!",
          styles: [" /*# sourceMappingURL=select.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$19('design:paramtypes', [])], MdSelect);
        return MdSelect;
      }();
      var __decorate$18 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$18 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdSelectModule = function () {
        function MdSelectModule() {}
        MdSelectModule.forRoot = function () {
          return {
            ngModule: MdSelectModule,
            providers: []
          };
        };
        MdSelectModule = __decorate$18([_angular_core.NgModule({
          imports: [],
          exports: [MdSelect],
          declarations: [MdSelect]
        }), __metadata$18('design:paramtypes', [])], MdSelectModule);
        return MdSelectModule;
      }();
      var __decorate$20 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$20 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdSlideToggle;
        }),
        multi: true
      };
      var MdSlideToggleChange = function () {
        function MdSlideToggleChange() {}
        return MdSlideToggleChange;
      }();
      var nextId$1 = 0;
      var MdSlideToggle = function () {
        function MdSlideToggle(_elementRef, _renderer) {
          var _this = this;
          this._elementRef = _elementRef;
          this._renderer = _renderer;
          this.onChange = function (_) {};
          this.onTouched = function () {};
          this._uniqueId = "md-slide-toggle-" + ++nextId$1;
          this._checked = false;
          this._hasFocus = false;
          this._isMousedown = false;
          this._slideRenderer = null;
          this.disabled = false;
          this.required = false;
          this.name = null;
          this.id = this._uniqueId;
          this.tabIndex = 0;
          this.ariaLabel = null;
          this.ariaLabelledby = null;
          this._change = new _angular_core.EventEmitter();
          this.change = this._change.asObservable();
          this.getInputId = function () {
            return (_this.id || _this._uniqueId) + "-input";
          };
        }
        MdSlideToggle.prototype.ngAfterContentInit = function () {
          this._slideRenderer = new SlideToggleRenderer(this._elementRef);
        };
        MdSlideToggle.prototype._onChangeEvent = function (event) {
          event.stopPropagation();
          if (!this.disabled && !this._slideRenderer.isDragging()) {
            this.toggle();
            this._emitChangeEvent();
          }
        };
        MdSlideToggle.prototype._onInputClick = function (event) {
          this.onTouched();
          event.stopPropagation();
        };
        MdSlideToggle.prototype._setMousedown = function () {
          var _this = this;
          this._isMousedown = true;
          setTimeout(function () {
            return _this._isMousedown = false;
          }, 100);
        };
        MdSlideToggle.prototype._onInputFocus = function () {
          if (!this._isMousedown) {
            this._hasFocus = true;
          }
        };
        MdSlideToggle.prototype._onInputBlur = function () {
          this._hasFocus = false;
          this.onTouched();
        };
        MdSlideToggle.prototype.writeValue = function (value) {
          this.checked = value;
        };
        MdSlideToggle.prototype.registerOnChange = function (fn) {
          this.onChange = fn;
        };
        MdSlideToggle.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        Object.defineProperty(MdSlideToggle.prototype, "checked", {
          get: function () {
            return !!this._checked;
          },
          set: function (value) {
            if (this.checked !== !!value) {
              this._checked = value;
              this.onChange(this._checked);
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSlideToggle.prototype, "color", {
          get: function () {
            return this._color;
          },
          set: function (value) {
            this._updateColor(value);
          },
          enumerable: true,
          configurable: true
        });
        MdSlideToggle.prototype.toggle = function () {
          this.checked = !this.checked;
        };
        MdSlideToggle.prototype._updateColor = function (newColor) {
          this._setElementColor(this._color, false);
          this._setElementColor(newColor, true);
          this._color = newColor;
        };
        MdSlideToggle.prototype._setElementColor = function (color, isAdd) {
          if (color != null && color != '') {
            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
          }
        };
        MdSlideToggle.prototype._emitChangeEvent = function () {
          var event = new MdSlideToggleChange();
          event.source = this;
          event.checked = this.checked;
          this._change.emit(event);
        };
        MdSlideToggle.prototype._onDragStart = function () {
          this._slideRenderer.startThumbDrag(this.checked);
        };
        MdSlideToggle.prototype._onDrag = function (event) {
          this._slideRenderer.updateThumbPosition(event.deltaX);
        };
        MdSlideToggle.prototype._onDragEnd = function () {
          var _this = this;
          setTimeout(function () {
            _this.checked = _this._slideRenderer.stopThumbDrag();
          }, 0);
        };
        __decorate$20([_angular_core.Input(), BooleanFieldValue(), __metadata$20('design:type', Boolean)], MdSlideToggle.prototype, "disabled", void 0);
        __decorate$20([_angular_core.Input(), BooleanFieldValue(), __metadata$20('design:type', Boolean)], MdSlideToggle.prototype, "required", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', String)], MdSlideToggle.prototype, "name", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', String)], MdSlideToggle.prototype, "id", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', Number)], MdSlideToggle.prototype, "tabIndex", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', String)], MdSlideToggle.prototype, "ariaLabel", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', String)], MdSlideToggle.prototype, "ariaLabelledby", void 0);
        __decorate$20([_angular_core.Output(), __metadata$20('design:type', rxjs_Observable.Observable)], MdSlideToggle.prototype, "change", void 0);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', Object)], MdSlideToggle.prototype, "checked", null);
        __decorate$20([_angular_core.Input(), __metadata$20('design:type', String)], MdSlideToggle.prototype, "color", null);
        MdSlideToggle = __decorate$20([_angular_core.Component({
          selector: 'md-slide-toggle',
          host: {
            '[class.md-checked]': 'checked',
            '[class.md-disabled]': 'disabled',
            '[class.md-slide-toggle-focused]': '_hasFocus',
            '(mousedown)': '_setMousedown()'
          },
          template: "<label class=\"md-slide-toggle-label\"> <div class=\"md-slide-toggle-container\"> <div class=\"md-slide-toggle-bar\"></div> <div class=\"md-slide-toggle-thumb-container\" (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"> <div class=\"md-slide-toggle-thumb\"> <div class=\"md-ink-ripple\"></div> </div> </div> <input #input class=\"md-slide-toggle-input md-visually-hidden\" type=\"checkbox\" [id]=\"getInputId()\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (blur)=\"_onInputBlur()\" (focus)=\"_onInputFocus()\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"> </div> <span class=\"md-slide-toggle-content\"> <ng-content></ng-content> </span> </label> ",
          styles: [":host { display: flex; height: 24px; margin: 16px 0; line-height: 24px; white-space: nowrap; user-select: none; outline: none; } :host.md-checked .md-slide-toggle-thumb-container { transform: translate3d(100%, 0, 0); } :host .md-ink-ripple { border-radius: 50%; opacity: 0; height: 48px; left: 50%; overflow: hidden; pointer-events: none; position: absolute; top: 50%; transform: translate(-50%, -50%); transition: opacity ease 280ms, background-color ease 280ms; width: 48px; } :host.md-slide-toggle-focused .md-ink-ripple { opacity: 1; } :host.md-slide-toggle-disabled .md-ink-ripple { background-color: #000; } :host.md-disabled .md-slide-toggle-label, :host.md-disabled .md-slide-toggle-container { cursor: default; } .md-slide-toggle-content { font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; } .md-slide-toggle-label { display: flex; flex: 1; cursor: pointer; } .md-slide-toggle-container { cursor: grab; width: 36px; height: 24px; position: relative; user-select: none; margin-right: 8px; } .md-slide-toggle-thumb-container { position: absolute; top: 2px; left: 0; z-index: 1; width: 16px; transform: translate3d(0, 0, 0); transition: all 80ms linear; transition-property: transform; } .md-slide-toggle-thumb-container.md-dragging { transition-duration: 0ms; } .md-slide-toggle-thumb { position: absolute; margin: 0; left: 0; top: 0; height: 20px; width: 20px; border-radius: 50%; box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); } .md-slide-toggle-bar { position: absolute; left: 1px; top: 5px; width: 34px; height: 14px; border-radius: 8px; } .md-slide-toggle-input { bottom: 0; left: 10px; } .md-slide-toggle-bar, .md-slide-toggle-thumb { transition: all 80ms linear; transition-property: background-color; transition-delay: 50ms; } /*# sourceMappingURL=slide-toggle.css.map */ "],
          providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$20('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])], MdSlideToggle);
        return MdSlideToggle;
      }();
      var SlideToggleRenderer = function () {
        function SlideToggleRenderer(_elementRef) {
          this._elementRef = _elementRef;
          this._thumbEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-thumb-container');
          this._thumbBarEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-bar');
        }
        SlideToggleRenderer.prototype.isDragging = function () {
          return !!this._thumbBarWidth;
        };
        SlideToggleRenderer.prototype.startThumbDrag = function (checked) {
          if (!this._thumbBarWidth) {
            this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;
            this._checked = checked;
            this._thumbEl.classList.add('md-dragging');
          }
        };
        SlideToggleRenderer.prototype.stopThumbDrag = function () {
          if (this._thumbBarWidth) {
            this._thumbBarWidth = null;
            this._thumbEl.classList.remove('md-dragging');
            applyCssTransform(this._thumbEl, '');
            return this._percentage > 50;
          }
        };
        SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {
          if (this._thumbBarWidth) {
            this._percentage = this._getThumbPercentage(distance);
            applyCssTransform(this._thumbEl, "translate3d(" + this._percentage + "%, 0, 0)");
          }
        };
        SlideToggleRenderer.prototype._getThumbPercentage = function (distance) {
          var percentage = distance / this._thumbBarWidth * 100;
          if (this._checked) {
            percentage += 100;
          }
          return Math.max(0, Math.min(percentage, 100));
        };
        return SlideToggleRenderer;
      }();
      var MdSlideToggleModule = function () {
        function MdSlideToggleModule() {}
        MdSlideToggleModule.forRoot = function () {
          return {
            ngModule: MdSlideToggleModule,
            providers: [{
              provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG,
              useClass: MdGestureConfig
            }]
          };
        };
        MdSlideToggleModule = __decorate$20([_angular_core.NgModule({
          imports: [_angular_forms.FormsModule],
          exports: [MdSlideToggle],
          declarations: [MdSlideToggle]
        }), __metadata$20('design:paramtypes', [])], MdSlideToggleModule);
        return MdSlideToggleModule;
      }();
      var __decorate$21 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$21 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MIN_AUTO_TICK_SEPARATION = 30;
      var MD_SLIDER_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdSlider;
        }),
        multi: true
      };
      var MdSlider = function () {
        function MdSlider(elementRef) {
          this._renderer = null;
          this._sliderDimensions = null;
          this.disabled = false;
          this.thumbLabel = false;
          this._min = 0;
          this._max = 100;
          this._percent = 0;
          this._controlValueAccessorChangeFn = function (value) {};
          this.onTouched = function () {};
          this.step = 1;
          this.isSliding = false;
          this.isActive = false;
          this._isInitialized = false;
          this._value = 0;
          this._renderer = new SliderRenderer(elementRef);
        }
        Object.defineProperty(MdSlider.prototype, "min", {
          get: function () {
            return this._min;
          },
          set: function (v) {
            this._min = Number(v);
            if (!this._isInitialized) {
              this.value = this._min;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSlider.prototype, "max", {
          get: function () {
            return this._max;
          },
          set: function (v) {
            this._max = Number(v);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSlider.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (v) {
            if (isNaN(parseFloat(v))) {
              return;
            }
            this._value = Number(v);
            this._isInitialized = true;
            this._controlValueAccessorChangeFn(this._value);
          },
          enumerable: true,
          configurable: true
        });
        MdSlider.prototype.ngAfterContentInit = function () {
          this._sliderDimensions = this._renderer.getSliderDimensions();
          this._controlValueAccessorChangeFn(this.value);
          this.snapThumbToValue();
          this._updateTickSeparation();
        };
        MdSlider.prototype.onClick = function (event) {
          if (this.disabled) {
            return;
          }
          this.isActive = true;
          this.isSliding = false;
          this._renderer.addFocus();
          this.updateValueFromPosition(event.clientX);
          this.snapThumbToValue();
        };
        MdSlider.prototype.onSlide = function (event) {
          if (this.disabled) {
            return;
          }
          event.preventDefault();
          this.updateValueFromPosition(event.center.x);
        };
        MdSlider.prototype.onSlideStart = function (event) {
          if (this.disabled) {
            return;
          }
          event.preventDefault();
          this.isSliding = true;
          this.isActive = true;
          this._renderer.addFocus();
          this.updateValueFromPosition(event.center.x);
        };
        MdSlider.prototype.onSlideEnd = function () {
          this.isSliding = false;
          this.snapThumbToValue();
        };
        MdSlider.prototype.onResize = function () {
          this.isSliding = true;
          this._sliderDimensions = this._renderer.getSliderDimensions();
          this._renderer.updateThumbAndFillPosition(this._percent, this._sliderDimensions.width);
        };
        MdSlider.prototype.onBlur = function () {
          this.isActive = false;
          this.onTouched();
        };
        MdSlider.prototype.updatePercentFromValue = function () {
          this._percent = this.calculatePercentage(this.value);
        };
        MdSlider.prototype.updateValueFromPosition = function (pos) {
          var offset = this._sliderDimensions.left;
          var size = this._sliderDimensions.width;
          this._percent = this.clamp((pos - offset) / size);
          var exactValue = this.calculateValue(this._percent);
          var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
          this.value = this.clamp(closestValue, this.min, this.max);
          this._renderer.updateThumbAndFillPosition(this._percent, this._sliderDimensions.width);
        };
        MdSlider.prototype.snapThumbToValue = function () {
          this.updatePercentFromValue();
          this._renderer.updateThumbAndFillPosition(this._percent, this._sliderDimensions.width);
        };
        MdSlider.prototype._updateTickSeparation = function () {
          if (this._tickInterval == 'auto') {
            this._updateAutoTickSeparation();
          } else if (Number(this._tickInterval)) {
            this._updateTickSeparationFromInterval();
          }
        };
        MdSlider.prototype._updateAutoTickSeparation = function () {
          var sliderWidth = this._sliderDimensions.width;
          var valueWidth = this.max - this.min;
          var valuePerPixel = valueWidth / sliderWidth;
          var valuePerSeparation = valuePerPixel * MIN_AUTO_TICK_SEPARATION;
          var stepsPerSeparation = Math.ceil(valuePerSeparation / this.step);
          var tickPercentage = this.calculatePercentage(this.step * stepsPerSeparation + this.min);
          this._renderer.drawTicks(sliderWidth * tickPercentage);
        };
        MdSlider.prototype._updateTickSeparationFromInterval = function () {
          var interval = this._tickInterval;
          var tickValue = this.step * interval + this.min;
          var tickPercentage = this.calculatePercentage(tickValue);
          this._renderer.drawTicks(this._sliderDimensions.width * tickPercentage);
        };
        MdSlider.prototype.calculatePercentage = function (value) {
          return (value - this.min) / (this.max - this.min);
        };
        MdSlider.prototype.calculateValue = function (percentage) {
          return this.min + percentage * (this.max - this.min);
        };
        MdSlider.prototype.clamp = function (value, min, max) {
          if (min === void 0) {
            min = 0;
          }
          if (max === void 0) {
            max = 1;
          }
          return Math.max(min, Math.min(value, max));
        };
        MdSlider.prototype.writeValue = function (value) {
          this.value = value;
          if (this._sliderDimensions) {
            this.snapThumbToValue();
          }
        };
        MdSlider.prototype.registerOnChange = function (fn) {
          this._controlValueAccessorChangeFn = fn;
        };
        MdSlider.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
        };
        __decorate$21([_angular_core.Input(), BooleanFieldValue(), _angular_core.HostBinding('class.md-slider-disabled'), _angular_core.HostBinding('attr.aria-disabled'), __metadata$21('design:type', Boolean)], MdSlider.prototype, "disabled", void 0);
        __decorate$21([_angular_core.Input('thumb-label'), BooleanFieldValue(), __metadata$21('design:type', Boolean)], MdSlider.prototype, "thumbLabel", void 0);
        __decorate$21([_angular_core.Input(), __metadata$21('design:type', Number)], MdSlider.prototype, "step", void 0);
        __decorate$21([_angular_core.Input('tick-interval'), __metadata$21('design:type', Object)], MdSlider.prototype, "_tickInterval", void 0);
        __decorate$21([_angular_core.Input(), _angular_core.HostBinding('attr.aria-valuemin'), __metadata$21('design:type', Object)], MdSlider.prototype, "min", null);
        __decorate$21([_angular_core.Input(), _angular_core.HostBinding('attr.aria-valuemax'), __metadata$21('design:type', Object)], MdSlider.prototype, "max", null);
        __decorate$21([_angular_core.Input(), _angular_core.HostBinding('attr.aria-valuenow'), __metadata$21('design:type', Object)], MdSlider.prototype, "value", null);
        MdSlider = __decorate$21([_angular_core.Component({
          selector: 'md-slider',
          providers: [MD_SLIDER_VALUE_ACCESSOR],
          host: {
            'tabindex': '0',
            '(click)': 'onClick($event)',
            '(slide)': 'onSlide($event)',
            '(slidestart)': 'onSlideStart($event)',
            '(slideend)': 'onSlideEnd()',
            '(window:resize)': 'onResize()',
            '(blur)': 'onBlur()'
          },
          template: "<div class=\"md-slider-wrapper\"> <div class=\"md-slider-container\" [class.md-slider-sliding]=\"isSliding\" [class.md-slider-active]=\"isActive\" [class.md-slider-thumb-label-showing]=\"thumbLabel\"> <div class=\"md-slider-track-container\"> <div class=\"md-slider-track\"></div> <div class=\"md-slider-track md-slider-track-fill\"></div> <div class=\"md-slider-tick-container\"></div> <div class=\"md-slider-last-tick-container\"></div> </div> <div class=\"md-slider-thumb-container\"> <div class=\"md-slider-thumb-position\"> <div class=\"md-slider-thumb\"></div> <div class=\"md-slider-thumb-label\"> <span class=\"md-slider-thumb-label-text\">{{value}}</span> </div> </div> </div> </div> </div> ",
          styles: ["md-slider { height: 48px; min-width: 128px; position: relative; padding: 0; display: inline-block; outline: none; vertical-align: middle; } md-slider *, md-slider *::after { box-sizing: border-box; } .md-slider-wrapper { width: 100%; height: 100%; padding-left: 8px; padding-right: 8px; } .md-slider-container { position: relative; } .md-slider-track-container { width: 100%; position: absolute; top: 23px; height: 2px; } .md-slider-track { position: absolute; left: 0; right: 0; height: 100%; } .md-slider-track-fill { transition-duration: 400ms; transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1); transition-property: width, height; } .md-slider-tick-container, .md-slider-last-tick-container { position: absolute; left: 0; right: 0; height: 100%; } .md-slider-thumb-container { position: absolute; left: 0; top: 50%; transform: translate3d(-50%, -50%, 0); transition-duration: 400ms; transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1); transition-property: left, bottom; } .md-slider-thumb-position { transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-slider-thumb { z-index: 1; position: absolute; top: 14px; left: -10px; width: 20px; height: 20px; border-radius: 20px; transform: scale(0.7); transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-slider-thumb::after { content: ''; position: absolute; width: 20px; height: 20px; border-radius: 20px; border-width: 3px; border-style: solid; transition: inherit; } .md-slider-thumb-label { display: flex; align-items: center; justify-content: center; position: absolute; left: -14px; top: -17px; width: 28px; height: 28px; border-radius: 50%; transform: scale(0.4) translate3d(0, 67.5px, 0) rotate(45deg); transition: 300ms cubic-bezier(0.35, 0, 0.25, 1); transition-property: transform, border-radius; } .md-slider-thumb-label-text { z-index: 1; font-size: 12px; font-weight: bold; opacity: 0; transform: rotate(-45deg); transition: opacity 300ms cubic-bezier(0.35, 0, 0.25, 1); } .md-slider-container:not(.md-slider-thumb-label-showing) .md-slider-thumb-label { display: none; } .md-slider-active.md-slider-thumb-label-showing .md-slider-thumb { transform: scale(0); } .md-slider-sliding .md-slider-thumb-position, .md-slider-sliding .md-slider-track-fill { transition: none; cursor: default; } .md-slider-active .md-slider-thumb { transform: scale(1); } .md-slider-active .md-slider-thumb-label { border-radius: 50% 50% 0; transform: rotate(45deg); } .md-slider-active .md-slider-thumb-label-text { opacity: 1; } /*# sourceMappingURL=slider.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$21('design:paramtypes', [_angular_core.ElementRef])], MdSlider);
        return MdSlider;
      }();
      var SliderRenderer = function () {
        function SliderRenderer(elementRef) {
          this._sliderElement = elementRef.nativeElement;
        }
        SliderRenderer.prototype.getSliderDimensions = function () {
          var trackElement = this._sliderElement.querySelector('.md-slider-track');
          return trackElement.getBoundingClientRect();
        };
        SliderRenderer.prototype.updateThumbAndFillPosition = function (percent, width) {
          var thumbPositionElement = this._sliderElement.querySelector('.md-slider-thumb-position');
          var fillTrackElement = this._sliderElement.querySelector('.md-slider-track-fill');
          var position = Math.round(percent * width);
          fillTrackElement.style.width = position + "px";
          applyCssTransform(thumbPositionElement, "translateX(" + position + "px)");
        };
        SliderRenderer.prototype.addFocus = function () {
          this._sliderElement.focus();
        };
        SliderRenderer.prototype.drawTicks = function (tickSeparation) {
          var tickContainer = this._sliderElement.querySelector('.md-slider-tick-container');
          var tickContainerWidth = tickContainer.getBoundingClientRect().width;
          var lastTickContainer = this._sliderElement.querySelector('.md-slider-last-tick-container');
          tickContainer.style.background = "repeating-linear-gradient(to right, black, black 2px, " + ("transparent 2px, transparent " + (tickSeparation - 1) + "px)");
          lastTickContainer.style.background = "linear-gradient(to left, black, black 2px, transparent " + "2px, transparent)";
          if (tickContainerWidth % tickSeparation < tickSeparation / 2) {
            tickContainer.style.width = tickContainerWidth - tickSeparation + 'px';
          }
        };
        return SliderRenderer;
      }();
      var MdSliderModule = function () {
        function MdSliderModule() {}
        MdSliderModule.forRoot = function () {
          return {
            ngModule: MdSliderModule,
            providers: [{
              provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG,
              useClass: MdGestureConfig
            }]
          };
        };
        MdSliderModule = __decorate$21([_angular_core.NgModule({
          imports: [_angular_forms.FormsModule],
          exports: [MdSlider],
          declarations: [MdSlider],
          providers: [{
            provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG,
            useClass: MdGestureConfig
          }]
        }), __metadata$21('design:paramtypes', [])], MdSliderModule);
        return MdSliderModule;
      }();
      var __extends$7 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$22 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$22 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param$3 = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var MdDuplicatedSidenavError = function (_super) {
        __extends$7(MdDuplicatedSidenavError, _super);
        function MdDuplicatedSidenavError(align) {
          _super.call(this, "A sidenav was already declared for 'align=\"" + align + "\"'");
        }
        return MdDuplicatedSidenavError;
      }(MdError);
      var MdSidenav = function () {
        function MdSidenav(_elementRef) {
          this._elementRef = _elementRef;
          this.align = 'start';
          this.mode = 'over';
          this._opened = false;
          this.onOpenStart = new _angular_core.EventEmitter();
          this.onOpen = new _angular_core.EventEmitter();
          this.onCloseStart = new _angular_core.EventEmitter();
          this.onClose = new _angular_core.EventEmitter();
          this._transition = false;
        }
        Object.defineProperty(MdSidenav.prototype, "opened", {
          get: function () {
            return this._opened;
          },
          set: function (v) {
            var booleanValue = v != null && "" + v !== 'false';
            this.toggle(booleanValue);
          },
          enumerable: true,
          configurable: true
        });
        MdSidenav.prototype.open = function () {
          return this.toggle(true);
        };
        MdSidenav.prototype.close = function () {
          return this.toggle(false);
        };
        MdSidenav.prototype.toggle = function (isOpen) {
          var _this = this;
          if (isOpen === void 0) {
            isOpen = !this.opened;
          }
          if (isOpen === this.opened) {
            if (!this._transition) {
              return Promise.resolve(null);
            } else {
              return isOpen ? this._openPromise : this._closePromise;
            }
          }
          this._opened = isOpen;
          this._transition = true;
          if (isOpen) {
            this.onOpenStart.emit(null);
          } else {
            this.onCloseStart.emit(null);
          }
          if (isOpen) {
            if (this._openPromise == null) {
              this._openPromise = new Promise(function (resolve, reject) {
                _this._openPromiseResolve = resolve;
                _this._openPromiseReject = reject;
              });
            }
            return this._openPromise;
          } else {
            if (this._closePromise == null) {
              this._closePromise = new Promise(function (resolve, reject) {
                _this._closePromiseResolve = resolve;
                _this._closePromiseReject = reject;
              });
            }
            return this._closePromise;
          }
        };
        MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {
          if (transitionEvent.target == this._elementRef.nativeElement && transitionEvent.propertyName.endsWith('transform')) {
            this._transition = false;
            if (this._opened) {
              if (this._openPromise != null) {
                this._openPromiseResolve();
              }
              if (this._closePromise != null) {
                this._closePromiseReject();
              }
              this.onOpen.emit(null);
            } else {
              if (this._closePromise != null) {
                this._closePromiseResolve();
              }
              if (this._openPromise != null) {
                this._openPromiseReject();
              }
              this.onClose.emit(null);
            }
            this._openPromise = null;
            this._closePromise = null;
          }
        };
        Object.defineProperty(MdSidenav.prototype, "_isClosing", {
          get: function () {
            return !this._opened && this._transition;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_isOpening", {
          get: function () {
            return this._opened && this._transition;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_isClosed", {
          get: function () {
            return !this._opened && !this._transition;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_isOpened", {
          get: function () {
            return this._opened && !this._transition;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_isEnd", {
          get: function () {
            return this.align == 'end';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_modeSide", {
          get: function () {
            return this.mode == 'side';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_modeOver", {
          get: function () {
            return this.mode == 'over';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_modePush", {
          get: function () {
            return this.mode == 'push';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenav.prototype, "_width", {
          get: function () {
            if (this._elementRef.nativeElement) {
              return this._elementRef.nativeElement.offsetWidth;
            }
            return 0;
          },
          enumerable: true,
          configurable: true
        });
        __decorate$22([_angular_core.Input(), __metadata$22('design:type', Object)], MdSidenav.prototype, "align", void 0);
        __decorate$22([_angular_core.Input(), __metadata$22('design:type', Object)], MdSidenav.prototype, "mode", void 0);
        __decorate$22([_angular_core.Output('open-start'), __metadata$22('design:type', Object)], MdSidenav.prototype, "onOpenStart", void 0);
        __decorate$22([_angular_core.Output('open'), __metadata$22('design:type', Object)], MdSidenav.prototype, "onOpen", void 0);
        __decorate$22([_angular_core.Output('close-start'), __metadata$22('design:type', Object)], MdSidenav.prototype, "onCloseStart", void 0);
        __decorate$22([_angular_core.Output('close'), __metadata$22('design:type', Object)], MdSidenav.prototype, "onClose", void 0);
        __decorate$22([_angular_core.Input(), __metadata$22('design:type', Boolean)], MdSidenav.prototype, "opened", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-closing'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_isClosing", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-opening'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_isOpening", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-closed'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_isClosed", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-opened'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_isOpened", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-end'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_isEnd", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-side'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_modeSide", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-over'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_modeOver", null);
        __decorate$22([_angular_core.HostBinding('class.md-sidenav-push'), __metadata$22('design:type', Object)], MdSidenav.prototype, "_modePush", null);
        MdSidenav = __decorate$22([_angular_core.Component({
          selector: 'md-sidenav',
          template: '<ng-content></ng-content>',
          host: {
            '(transitionend)': '_onTransitionEnd($event)',
            '[attr.align]': 'null'
          },
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$22('design:paramtypes', [_angular_core.ElementRef])], MdSidenav);
        return MdSidenav;
      }();
      var MdSidenavLayout = function () {
        function MdSidenavLayout(_dir, _element, _renderer) {
          var _this = this;
          this._dir = _dir;
          this._element = _element;
          this._renderer = _renderer;
          if (_dir != null) {
            _dir.dirChange.subscribe(function () {
              return _this._validateDrawers();
            });
          }
        }
        Object.defineProperty(MdSidenavLayout.prototype, "start", {
          get: function () {
            return this._start;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdSidenavLayout.prototype, "end", {
          get: function () {
            return this._end;
          },
          enumerable: true,
          configurable: true
        });
        MdSidenavLayout.prototype.ngAfterContentInit = function () {
          var _this = this;
          this._sidenavs.changes.subscribe(function () {
            return _this._validateDrawers();
          });
          this._sidenavs.forEach(function (sidenav) {
            return _this._watchSidenavToggle(sidenav);
          });
          this._validateDrawers();
        };
        MdSidenavLayout.prototype._watchSidenavToggle = function (sidenav) {
          var _this = this;
          if (!sidenav || sidenav.mode === 'side') {
            return;
          }
          sidenav.onOpen.subscribe(function () {
            return _this._setLayoutClass(sidenav, true);
          });
          sidenav.onClose.subscribe(function () {
            return _this._setLayoutClass(sidenav, false);
          });
        };
        MdSidenavLayout.prototype._setLayoutClass = function (sidenav, bool) {
          this._renderer.setElementClass(this._element.nativeElement, 'md-sidenav-opened', bool);
        };
        MdSidenavLayout.prototype._validateDrawers = function () {
          var _this = this;
          this._start = this._end = null;
          this._sidenavs.forEach(function (sidenav) {
            if (sidenav.align == 'end') {
              if (_this._end != null) {
                throw new MdDuplicatedSidenavError('end');
              }
              _this._end = sidenav;
            } else {
              if (_this._start != null) {
                throw new MdDuplicatedSidenavError('start');
              }
              _this._start = sidenav;
            }
          });
          this._right = this._left = null;
          if (this._dir == null || this._dir.value == 'ltr') {
            this._left = this._start;
            this._right = this._end;
          } else {
            this._left = this._end;
            this._right = this._start;
          }
        };
        MdSidenavLayout.prototype._closeModalSidenav = function () {
          if (this._start != null && this._start.mode != 'side') {
            this._start.close();
          }
          if (this._end != null && this._end.mode != 'side') {
            this._end.close();
          }
        };
        MdSidenavLayout.prototype._isShowingBackdrop = function () {
          return this._isSidenavOpen(this._start) && this._start.mode != 'side' || this._isSidenavOpen(this._end) && this._end.mode != 'side';
        };
        MdSidenavLayout.prototype._isSidenavOpen = function (side) {
          return side != null && side.opened;
        };
        MdSidenavLayout.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {
          return this._isSidenavOpen(sidenav) && sidenav.mode == mode ? sidenav._width : 0;
        };
        MdSidenavLayout.prototype._getMarginLeft = function () {
          return this._getSidenavEffectiveWidth(this._left, 'side');
        };
        MdSidenavLayout.prototype._getMarginRight = function () {
          return this._getSidenavEffectiveWidth(this._right, 'side');
        };
        MdSidenavLayout.prototype._getPositionLeft = function () {
          return this._getSidenavEffectiveWidth(this._left, 'push');
        };
        MdSidenavLayout.prototype._getPositionRight = function () {
          return this._getSidenavEffectiveWidth(this._right, 'push');
        };
        MdSidenavLayout.prototype._getPositionOffset = function () {
          return this._getPositionLeft() - this._getPositionRight();
        };
        MdSidenavLayout.prototype._getStyles = function () {
          return {
            marginLeft: this._getMarginLeft() + "px",
            marginRight: this._getMarginRight() + "px",
            transform: "translate3d(" + this._getPositionOffset() + "px, 0, 0)"
          };
        };
        __decorate$22([_angular_core.ContentChildren(MdSidenav), __metadata$22('design:type', _angular_core.QueryList)], MdSidenavLayout.prototype, "_sidenavs", void 0);
        MdSidenavLayout = __decorate$22([_angular_core.Component({
          selector: 'md-sidenav-layout',
          template: "<div class=\"md-sidenav-backdrop\" (click)=\"_closeModalSidenav()\" [class.md-sidenav-shown]=\"_isShowingBackdrop()\"></div> <ng-content select=\"md-sidenav\"></ng-content> <div class=\"md-sidenav-content\" [ngStyle]=\"_getStyles()\"> <ng-content></ng-content> </div> ",
          styles: ["md-sidenav-layout { position: relative; transform: translate3d(0, 0, 0); box-sizing: border-box; -webkit-overflow-scrolling: touch; display: block; overflow: hidden; } md-sidenav-layout[fullscreen] { position: fixed; top: 0; left: 0; right: 0; bottom: 0; } md-sidenav-layout[fullscreen].md-sidenav-opened { overflow: hidden; } .md-sidenav-backdrop { position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: block; z-index: 2; visibility: hidden; } .md-sidenav-backdrop.md-sidenav-shown { visibility: visible; } .md-sidenav-content { position: relative; transform: translate3d(0, 0, 0); display: block; height: 100%; overflow: auto; } md-sidenav { position: relative; transform: translate3d(0, 0, 0); display: block; position: absolute; top: 0; bottom: 0; z-index: 3; min-width: 5%; overflow-y: auto; transform: translate3d(-100%, 0, 0); } md-sidenav.md-sidenav-closed { visibility: hidden; } md-sidenav.md-sidenav-closing { transform: translate3d(-100%, 0, 0); will-change: transform; } md-sidenav.md-sidenav-opening { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); visibility: visible; transform: translate3d(0, 0, 0); will-change: transform; } md-sidenav.md-sidenav-opened { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); } md-sidenav.md-sidenav-side { z-index: 1; } md-sidenav.md-sidenav-end { right: 0; transform: translate3d(100%, 0, 0); } md-sidenav.md-sidenav-end.md-sidenav-closed { visibility: hidden; } md-sidenav.md-sidenav-end.md-sidenav-closing { transform: translate3d(100%, 0, 0); will-change: transform; } md-sidenav.md-sidenav-end.md-sidenav-opening { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); visibility: visible; transform: translate3d(0, 0, 0); will-change: transform; } md-sidenav.md-sidenav-end.md-sidenav-opened { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); } [dir='rtl'] md-sidenav { transform: translate3d(100%, 0, 0); } [dir='rtl'] md-sidenav.md-sidenav-closed { visibility: hidden; } [dir='rtl'] md-sidenav.md-sidenav-closing { transform: translate3d(100%, 0, 0); will-change: transform; } [dir='rtl'] md-sidenav.md-sidenav-opening { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); visibility: visible; transform: translate3d(0, 0, 0); will-change: transform; } [dir='rtl'] md-sidenav.md-sidenav-opened { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); } [dir='rtl'] md-sidenav.md-sidenav-end { left: 0; right: auto; transform: translate3d(-100%, 0, 0); } [dir='rtl'] md-sidenav.md-sidenav-end.md-sidenav-closed { visibility: hidden; } [dir='rtl'] md-sidenav.md-sidenav-end.md-sidenav-closing { transform: translate3d(-100%, 0, 0); will-change: transform; } [dir='rtl'] md-sidenav.md-sidenav-end.md-sidenav-opening { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); visibility: visible; transform: translate3d(0, 0, 0); will-change: transform; } [dir='rtl'] md-sidenav.md-sidenav-end.md-sidenav-opened { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transform: translate3d(0, 0, 0); } /*# sourceMappingURL=sidenav.css.map */ ", "md-sidenav { transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-sidenav-content { transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-sidenav-backdrop.md-sidenav-shown { transition: background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } /*# sourceMappingURL=sidenav-transitions.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __param$3(0, _angular_core.Optional()), __metadata$22('design:paramtypes', [Dir, _angular_core.ElementRef, _angular_core.Renderer])], MdSidenavLayout);
        return MdSidenavLayout;
      }();
      var MdSidenavModule = function () {
        function MdSidenavModule() {}
        MdSidenavModule.forRoot = function () {
          return {
            ngModule: MdSidenavModule,
            providers: []
          };
        };
        MdSidenavModule = __decorate$22([_angular_core.NgModule({
          imports: [_angular_common.CommonModule],
          exports: [MdSidenavLayout, MdSidenav],
          declarations: [MdSidenavLayout, MdSidenav]
        }), __metadata$22('design:paramtypes', [])], MdSidenavModule);
        return MdSidenavModule;
      }();
      var __decorate$23 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$23 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdListDivider = function () {
        function MdListDivider() {}
        MdListDivider = __decorate$23([_angular_core.Directive({ selector: 'md-divider' }), __metadata$23('design:paramtypes', [])], MdListDivider);
        return MdListDivider;
      }();
      var MdList = function () {
        function MdList() {}
        MdList = __decorate$23([_angular_core.Component({
          selector: 'md-list, md-nav-list',
          host: { 'role': 'list' },
          template: '<ng-content></ng-content>',
          styles: ["md-list, md-nav-list { padding-top: 8px; display: block; } md-list [md-subheader], md-nav-list [md-subheader] { display: block; box-sizing: border-box; height: 48px; padding: 16px; margin: 0; font-size: 14px; font-weight: 500; } md-list [md-subheader]:first-child, md-nav-list [md-subheader]:first-child { margin-top: -8px; } md-list md-list-item .md-list-item, md-list a[md-list-item] .md-list-item, md-nav-list md-list-item .md-list-item, md-nav-list a[md-list-item] .md-list-item { display: flex; flex-direction: row; align-items: center; font-family: Roboto, \"Helvetica Neue\", sans-serif; box-sizing: border-box; font-size: 16px; height: 48px; padding: 0 16px; } md-list md-list-item.md-list-avatar .md-list-item, md-list a[md-list-item].md-list-avatar .md-list-item, md-nav-list md-list-item.md-list-avatar .md-list-item, md-nav-list a[md-list-item].md-list-avatar .md-list-item { height: 56px; } md-list md-list-item.md-2-line .md-list-item, md-list a[md-list-item].md-2-line .md-list-item, md-nav-list md-list-item.md-2-line .md-list-item, md-nav-list a[md-list-item].md-2-line .md-list-item { height: 72px; } md-list md-list-item.md-3-line .md-list-item, md-list a[md-list-item].md-3-line .md-list-item, md-nav-list md-list-item.md-3-line .md-list-item, md-nav-list a[md-list-item].md-3-line .md-list-item { height: 88px; } md-list md-list-item .md-list-text, md-list a[md-list-item] .md-list-text, md-nav-list md-list-item .md-list-text, md-nav-list a[md-list-item] .md-list-text { display: flex; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; padding: 0 16px; } md-list md-list-item .md-list-text > *, md-list a[md-list-item] .md-list-text > *, md-nav-list md-list-item .md-list-text > *, md-nav-list a[md-list-item] .md-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-list md-list-item .md-list-text:empty, md-list a[md-list-item] .md-list-text:empty, md-nav-list md-list-item .md-list-text:empty, md-nav-list a[md-list-item] .md-list-text:empty { display: none; } md-list md-list-item .md-list-text:first-child, md-list a[md-list-item] .md-list-text:first-child, md-nav-list md-list-item .md-list-text:first-child, md-nav-list a[md-list-item] .md-list-text:first-child { padding: 0; } md-list md-list-item [md-list-avatar], md-list a[md-list-item] [md-list-avatar], md-nav-list md-list-item [md-list-avatar], md-nav-list a[md-list-item] [md-list-avatar] { width: 40px; height: 40px; border-radius: 50%; } md-list md-list-item [md-list-icon], md-list a[md-list-item] [md-list-icon], md-nav-list md-list-item [md-list-icon], md-nav-list a[md-list-item] [md-list-icon] { width: 24px; height: 24px; border-radius: 50%; padding: 4px; } md-list md-list-item [md-line], md-list a[md-list-item] [md-line], md-nav-list md-list-item [md-line], md-nav-list a[md-list-item] [md-line] { white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; display: block; box-sizing: border-box; } md-list md-list-item [md-line]:nth-child(n+2), md-list a[md-list-item] [md-line]:nth-child(n+2), md-nav-list md-list-item [md-line]:nth-child(n+2), md-nav-list a[md-list-item] [md-line]:nth-child(n+2) { font-size: 14px; } md-list[dense], md-nav-list[dense] { padding-top: 4px; display: block; } md-list[dense] [md-subheader], md-nav-list[dense] [md-subheader] { display: block; box-sizing: border-box; height: 40px; padding: 16px; margin: 0; font-size: 13px; font-weight: 500; } md-list[dense] [md-subheader]:first-child, md-nav-list[dense] [md-subheader]:first-child { margin-top: -4px; } md-list[dense] md-list-item .md-list-item, md-list[dense] a[md-list-item] .md-list-item, md-nav-list[dense] md-list-item .md-list-item, md-nav-list[dense] a[md-list-item] .md-list-item { display: flex; flex-direction: row; align-items: center; font-family: Roboto, \"Helvetica Neue\", sans-serif; box-sizing: border-box; font-size: 13px; height: 40px; padding: 0 16px; } md-list[dense] md-list-item.md-list-avatar .md-list-item, md-list[dense] a[md-list-item].md-list-avatar .md-list-item, md-nav-list[dense] md-list-item.md-list-avatar .md-list-item, md-nav-list[dense] a[md-list-item].md-list-avatar .md-list-item { height: 48px; } md-list[dense] md-list-item.md-2-line .md-list-item, md-list[dense] a[md-list-item].md-2-line .md-list-item, md-nav-list[dense] md-list-item.md-2-line .md-list-item, md-nav-list[dense] a[md-list-item].md-2-line .md-list-item { height: 60px; } md-list[dense] md-list-item.md-3-line .md-list-item, md-list[dense] a[md-list-item].md-3-line .md-list-item, md-nav-list[dense] md-list-item.md-3-line .md-list-item, md-nav-list[dense] a[md-list-item].md-3-line .md-list-item { height: 76px; } md-list[dense] md-list-item .md-list-text, md-list[dense] a[md-list-item] .md-list-text, md-nav-list[dense] md-list-item .md-list-text, md-nav-list[dense] a[md-list-item] .md-list-text { display: flex; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; padding: 0 16px; } md-list[dense] md-list-item .md-list-text > *, md-list[dense] a[md-list-item] .md-list-text > *, md-nav-list[dense] md-list-item .md-list-text > *, md-nav-list[dense] a[md-list-item] .md-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-list[dense] md-list-item .md-list-text:empty, md-list[dense] a[md-list-item] .md-list-text:empty, md-nav-list[dense] md-list-item .md-list-text:empty, md-nav-list[dense] a[md-list-item] .md-list-text:empty { display: none; } md-list[dense] md-list-item .md-list-text:first-child, md-list[dense] a[md-list-item] .md-list-text:first-child, md-nav-list[dense] md-list-item .md-list-text:first-child, md-nav-list[dense] a[md-list-item] .md-list-text:first-child { padding: 0; } md-list[dense] md-list-item [md-list-avatar], md-list[dense] a[md-list-item] [md-list-avatar], md-nav-list[dense] md-list-item [md-list-avatar], md-nav-list[dense] a[md-list-item] [md-list-avatar] { width: 40px; height: 40px; border-radius: 50%; } md-list[dense] md-list-item [md-list-icon], md-list[dense] a[md-list-item] [md-list-icon], md-nav-list[dense] md-list-item [md-list-icon], md-nav-list[dense] a[md-list-item] [md-list-icon] { width: 24px; height: 24px; border-radius: 50%; padding: 4px; } md-list[dense] md-list-item [md-line], md-list[dense] a[md-list-item] [md-line], md-nav-list[dense] md-list-item [md-line], md-nav-list[dense] a[md-list-item] [md-line] { white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; display: block; box-sizing: border-box; } md-list[dense] md-list-item [md-line]:nth-child(n+2), md-list[dense] a[md-list-item] [md-line]:nth-child(n+2), md-nav-list[dense] md-list-item [md-line]:nth-child(n+2), md-nav-list[dense] a[md-list-item] [md-line]:nth-child(n+2) { font-size: 13px; } md-divider { display: block; border-top: 1px solid; margin: 0; } md-nav-list a { text-decoration: none; color: inherit; } md-nav-list .md-list-item { cursor: pointer; } md-nav-list .md-list-item:hover, md-nav-list .md-list-item.md-list-item-focus { outline: none; } /*# sourceMappingURL=list.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$23('design:paramtypes', [])], MdList);
        return MdList;
      }();
      var MdListAvatar = function () {
        function MdListAvatar() {}
        MdListAvatar = __decorate$23([_angular_core.Directive({ selector: '[md-list-avatar]' }), __metadata$23('design:paramtypes', [])], MdListAvatar);
        return MdListAvatar;
      }();
      var MdListItem = function () {
        function MdListItem(_renderer, _element) {
          this._renderer = _renderer;
          this._element = _element;
          this._hasFocus = false;
        }
        Object.defineProperty(MdListItem.prototype, "_hasAvatar", {
          set: function (avatar) {
            this._renderer.setElementClass(this._element.nativeElement, 'md-list-avatar', avatar != null);
          },
          enumerable: true,
          configurable: true
        });
        MdListItem.prototype.ngAfterContentInit = function () {
          this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
        };
        MdListItem.prototype._handleFocus = function () {
          this._hasFocus = true;
        };
        MdListItem.prototype._handleBlur = function () {
          this._hasFocus = false;
        };
        __decorate$23([_angular_core.ContentChildren(MdLine), __metadata$23('design:type', _angular_core.QueryList)], MdListItem.prototype, "_lines", void 0);
        __decorate$23([_angular_core.ContentChild(MdListAvatar), __metadata$23('design:type', MdListAvatar), __metadata$23('design:paramtypes', [MdListAvatar])], MdListItem.prototype, "_hasAvatar", null);
        MdListItem = __decorate$23([_angular_core.Component({
          selector: 'md-list-item, a[md-list-item]',
          host: {
            'role': 'listitem',
            '(focus)': '_handleFocus()',
            '(blur)': '_handleBlur()'
          },
          template: "<div class=\"md-list-item\" [class.md-list-item-focus]=\"_hasFocus\"> <ng-content select=\"[md-list-avatar],[md-list-icon]\"></ng-content> <div class=\"md-list-text\"><ng-content select=\"[md-line]\"></ng-content></div> <ng-content></ng-content> </div> ",
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$23('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdListItem);
        return MdListItem;
      }();
      var MdListModule = function () {
        function MdListModule() {}
        MdListModule.forRoot = function () {
          return {
            ngModule: MdListModule,
            providers: []
          };
        };
        MdListModule = __decorate$23([_angular_core.NgModule({
          imports: [MdLineModule],
          exports: [MdList, MdListItem, MdListDivider, MdListAvatar, MdLineModule],
          declarations: [MdList, MdListItem, MdListDivider, MdListAvatar]
        }), __metadata$23('design:paramtypes', [])], MdListModule);
        return MdListModule;
      }();
      function coerceToString(value) {
        return "" + (value || '');
      }
      function coerceToNumber(value) {
        return typeof value === 'string' ? parseInt(value, 10) : value;
      }
      var __decorate$25 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$25 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdGridTile = function () {
        function MdGridTile(_renderer, _element) {
          this._renderer = _renderer;
          this._element = _element;
          this._rowspan = 1;
          this._colspan = 1;
        }
        Object.defineProperty(MdGridTile.prototype, "rowspan", {
          get: function () {
            return this._rowspan;
          },
          set: function (value) {
            this._rowspan = coerceToNumber(value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdGridTile.prototype, "colspan", {
          get: function () {
            return this._colspan;
          },
          set: function (value) {
            this._colspan = coerceToNumber(value);
          },
          enumerable: true,
          configurable: true
        });
        MdGridTile.prototype._setStyle = function (property, value) {
          this._renderer.setElementStyle(this._element.nativeElement, property, value);
        };
        __decorate$25([_angular_core.Input(), __metadata$25('design:type', Object)], MdGridTile.prototype, "rowspan", null);
        __decorate$25([_angular_core.Input(), __metadata$25('design:type', Object)], MdGridTile.prototype, "colspan", null);
        MdGridTile = __decorate$25([_angular_core.Component({
          selector: 'md-grid-tile',
          host: { 'role': 'listitem' },
          template: "<!-- TODO(kara): Revisit why this is a figure.--> <figure> <ng-content></ng-content> </figure>",
          styles: ["md-grid-list { display: block; position: relative; } md-grid-tile { display: block; position: absolute; overflow: hidden; } md-grid-tile figure { display: flex; position: absolute; align-items: center; justify-content: center; height: 100%; top: 0; right: 0; bottom: 0; left: 0; padding: 0; margin: 0; } md-grid-tile md-grid-tile-header, md-grid-tile md-grid-tile-footer { display: flex; align-items: center; height: 48px; color: #fff; background: rgba(0, 0, 0, 0.38); overflow: hidden; padding: 0 16px; font-size: 16px; position: absolute; left: 0; right: 0; } md-grid-tile md-grid-tile-header [md-line], md-grid-tile md-grid-tile-footer [md-line] { white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; display: block; box-sizing: border-box; } md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2), md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2) { font-size: 12px; } md-grid-tile md-grid-tile-header > *, md-grid-tile md-grid-tile-footer > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile md-grid-tile-header.md-2-line, md-grid-tile md-grid-tile-footer.md-2-line { height: 68px; } md-grid-tile .md-grid-list-text { display: flex; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; } md-grid-tile .md-grid-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile .md-grid-list-text:empty { display: none; } md-grid-tile md-grid-tile-header { top: 0; } md-grid-tile md-grid-tile-footer { bottom: 0; } md-grid-tile [md-grid-avatar] { padding-right: 16px; } [dir='rtl'] md-grid-tile [md-grid-avatar] { padding-right: 0; padding-left: 16px; } md-grid-tile [md-grid-avatar]:empty { display: none; } /*# sourceMappingURL=grid-list.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$25('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdGridTile);
        return MdGridTile;
      }();
      var MdGridTileText = function () {
        function MdGridTileText(_renderer, _element) {
          this._renderer = _renderer;
          this._element = _element;
        }
        MdGridTileText.prototype.ngAfterContentInit = function () {
          this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
        };
        __decorate$25([_angular_core.ContentChildren(MdLine), __metadata$25('design:type', _angular_core.QueryList)], MdGridTileText.prototype, "_lines", void 0);
        MdGridTileText = __decorate$25([_angular_core.Component({
          selector: 'md-grid-tile-header, md-grid-tile-footer',
          template: "<ng-content select=\"[md-grid-avatar]\"></ng-content> <div class=\"md-grid-list-text\"><ng-content select=\"[md-line]\"></ng-content></div> <ng-content></ng-content>"
        }), __metadata$25('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdGridTileText);
        return MdGridTileText;
      }();
      var __extends$8 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdGridListColsError = function (_super) {
        __extends$8(MdGridListColsError, _super);
        function MdGridListColsError() {
          _super.call(this, "md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">");
        }
        return MdGridListColsError;
      }(MdError);
      var MdGridTileTooWideError = function (_super) {
        __extends$8(MdGridTileTooWideError, _super);
        function MdGridTileTooWideError(cols, listLength) {
          _super.call(this, "md-grid-list: tile with colspan " + cols + " is wider than grid with cols=\"" + listLength + "\".");
        }
        return MdGridTileTooWideError;
      }(MdError);
      var MdGridListBadRatioError = function (_super) {
        __extends$8(MdGridListBadRatioError, _super);
        function MdGridListBadRatioError(value) {
          _super.call(this, "md-grid-list: invalid ratio given for row-height: \"" + value + "\"");
        }
        return MdGridListBadRatioError;
      }(MdError);
      var TileCoordinator = function () {
        function TileCoordinator(numColumns, tiles) {
          var _this = this;
          this.columnIndex = 0;
          this.rowIndex = 0;
          this.tracker = new Array(numColumns);
          this.tracker.fill(0, 0, this.tracker.length);
          this.positions = tiles.map(function (tile) {
            return _this._trackTile(tile);
          });
        }
        Object.defineProperty(TileCoordinator.prototype, "rowCount", {
          get: function () {
            return this.rowIndex + 1;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(TileCoordinator.prototype, "rowspan", {
          get: function () {
            var lastRowMax = Math.max.apply(Math, this.tracker);
            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
          },
          enumerable: true,
          configurable: true
        });
        TileCoordinator.prototype._trackTile = function (tile) {
          var gapStartIndex = this._findMatchingGap(tile.colspan);
          this._markTilePosition(gapStartIndex, tile);
          this.columnIndex = gapStartIndex + tile.colspan;
          return new TilePosition(this.rowIndex, gapStartIndex);
        };
        TileCoordinator.prototype._findMatchingGap = function (tileCols) {
          if (tileCols > this.tracker.length) {
            throw new MdGridTileTooWideError(tileCols, this.tracker.length);
          }
          var gapStartIndex = -1;
          var gapEndIndex = -1;
          do {
            if (this.columnIndex + tileCols > this.tracker.length) {
              this._nextRow();
              continue;
            }
            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
            if (gapStartIndex == -1) {
              this._nextRow();
              continue;
            }
            gapEndIndex = this._findGapEndIndex(gapStartIndex);
            this.columnIndex = gapStartIndex + 1;
          } while (gapEndIndex - gapStartIndex < tileCols);
          return gapStartIndex;
        };
        TileCoordinator.prototype._nextRow = function () {
          this.columnIndex = 0;
          this.rowIndex++;
          for (var i = 0; i < this.tracker.length; i++) {
            this.tracker[i] = Math.max(0, this.tracker[i] - 1);
          }
        };
        TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {
          for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {
            if (this.tracker[i] != 0) {
              return i;
            }
          }
          return this.tracker.length;
        };
        TileCoordinator.prototype._markTilePosition = function (start, tile) {
          for (var i = 0; i < tile.colspan; i++) {
            this.tracker[start + i] = tile.rowspan;
          }
        };
        return TileCoordinator;
      }();
      var TilePosition = function () {
        function TilePosition(row, col) {
          this.row = row;
          this.col = col;
        }
        return TilePosition;
      }();
      var __extends$9 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var TileStyler = function () {
        function TileStyler() {
          this._rows = 0;
          this._rowspan = 0;
        }
        TileStyler.prototype.init = function (_gutterSize, tracker, cols, direction) {
          this._gutterSize = normalizeUnits(_gutterSize);
          this._rows = tracker.rowCount;
          this._rowspan = tracker.rowspan;
          this._cols = cols;
          this._direction = direction;
        };
        TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {
          return "(" + sizePercent + "% - ( " + this._gutterSize + " * " + gutterFraction + " ))";
        };
        TileStyler.prototype.getTilePosition = function (baseSize, offset) {
          return calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
        };
        TileStyler.prototype.getTileSize = function (baseSize, span) {
          return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
        };
        TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {
          var percentWidthPerTile = 100 / this._cols;
          var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
          this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
          this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
        };
        TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {
          var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
          var side = this._direction === 'ltr' ? 'left' : 'right';
          tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
          tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
        };
        TileStyler.prototype.getGutterSpan = function () {
          return this._gutterSize + " * (" + this._rowspan + " - 1)";
        };
        TileStyler.prototype.getTileSpan = function (tileHeight) {
          return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
        };
        TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {};
        TileStyler.prototype.getComputedHeight = function () {
          return null;
        };
        return TileStyler;
      }();
      var FixedTileStyler = function (_super) {
        __extends$9(FixedTileStyler, _super);
        function FixedTileStyler(fixedRowHeight) {
          _super.call(this);
          this.fixedRowHeight = fixedRowHeight;
        }
        FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
          _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
          this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
        };
        FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
          tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
          tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
        };
        FixedTileStyler.prototype.getComputedHeight = function () {
          return ['height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())];
        };
        return FixedTileStyler;
      }(TileStyler);
      var RatioTileStyler = function (_super) {
        __extends$9(RatioTileStyler, _super);
        function RatioTileStyler(value) {
          _super.call(this);
          this._parseRatio(value);
        }
        RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
          var percentHeightPerTile = percentWidth / this.rowHeightRatio;
          this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
          tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
          tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
        };
        RatioTileStyler.prototype.getComputedHeight = function () {
          return ['paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())];
        };
        RatioTileStyler.prototype._parseRatio = function (value) {
          var ratioParts = value.split(':');
          if (ratioParts.length !== 2) {
            throw new MdGridListBadRatioError(value);
          }
          this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
        };
        return RatioTileStyler;
      }(TileStyler);
      var FitTileStyler = function (_super) {
        __extends$9(FitTileStyler, _super);
        function FitTileStyler() {
          _super.apply(this, arguments);
        }
        FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
          var percentHeightPerTile = 100 / this._rowspan;
          var gutterHeightPerTile = (this._rows - 1) / this._rows;
          var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
          tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
          tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
        };
        return FitTileStyler;
      }(TileStyler);
      function calc(exp) {
        return "calc(" + exp + ")";
      }
      function normalizeUnits(value) {
        return value.match(/px|em|rem/) ? value : value + 'px';
      }
      var __decorate$24 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$24 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param$4 = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var MD_FIT_MODE = 'fit';
      var MdGridList = function () {
        function MdGridList(_renderer, _element, _dir) {
          this._renderer = _renderer;
          this._element = _element;
          this._dir = _dir;
          this._gutter = '1px';
        }
        Object.defineProperty(MdGridList.prototype, "cols", {
          get: function () {
            return this._cols;
          },
          set: function (value) {
            this._cols = coerceToNumber(value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdGridList.prototype, "gutterSize", {
          get: function () {
            return this._gutter;
          },
          set: function (value) {
            this._gutter = coerceToString(value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdGridList.prototype, "rowHeight", {
          set: function (value) {
            this._rowHeight = coerceToString(value);
            this._setTileStyler();
          },
          enumerable: true,
          configurable: true
        });
        MdGridList.prototype.ngOnInit = function () {
          this._checkCols();
          this._checkRowHeight();
        };
        MdGridList.prototype.ngAfterContentChecked = function () {
          this._layoutTiles();
        };
        MdGridList.prototype._checkCols = function () {
          if (!this.cols) {
            throw new MdGridListColsError();
          }
        };
        MdGridList.prototype._checkRowHeight = function () {
          if (!this._rowHeight) {
            this._tileStyler = new RatioTileStyler('1:1');
          }
        };
        MdGridList.prototype._setTileStyler = function () {
          if (this._rowHeight === MD_FIT_MODE) {
            this._tileStyler = new FitTileStyler();
          } else if (this._rowHeight && this._rowHeight.match(/:/g)) {
            this._tileStyler = new RatioTileStyler(this._rowHeight);
          } else {
            this._tileStyler = new FixedTileStyler(this._rowHeight);
          }
        };
        MdGridList.prototype._layoutTiles = function () {
          var tiles = this._tiles.toArray();
          var tracker = new TileCoordinator(this.cols, tiles);
          var direction = this._dir ? this._dir.value : 'ltr';
          this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
          for (var i = 0; i < tiles.length; i++) {
            var pos = tracker.positions[i];
            var tile = tiles[i];
            this._tileStyler.setStyle(tile, pos.row, pos.col);
          }
          this._setListStyle(this._tileStyler.getComputedHeight());
        };
        MdGridList.prototype._setListStyle = function (style) {
          if (style) {
            this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);
          }
        };
        __decorate$24([_angular_core.ContentChildren(MdGridTile), __metadata$24('design:type', _angular_core.QueryList)], MdGridList.prototype, "_tiles", void 0);
        __decorate$24([_angular_core.Input(), __metadata$24('design:type', Object)], MdGridList.prototype, "cols", null);
        __decorate$24([_angular_core.Input('gutterSize'), __metadata$24('design:type', Object)], MdGridList.prototype, "gutterSize", null);
        __decorate$24([_angular_core.Input(), __metadata$24('design:type', Object), __metadata$24('design:paramtypes', [Object])], MdGridList.prototype, "rowHeight", null);
        MdGridList = __decorate$24([_angular_core.Component({
          selector: 'md-grid-list',
          template: "<div class=\"md-grid-list\"> <ng-content></ng-content> </div>",
          styles: ["md-grid-list { display: block; position: relative; } md-grid-tile { display: block; position: absolute; overflow: hidden; } md-grid-tile figure { display: flex; position: absolute; align-items: center; justify-content: center; height: 100%; top: 0; right: 0; bottom: 0; left: 0; padding: 0; margin: 0; } md-grid-tile md-grid-tile-header, md-grid-tile md-grid-tile-footer { display: flex; align-items: center; height: 48px; color: #fff; background: rgba(0, 0, 0, 0.38); overflow: hidden; padding: 0 16px; font-size: 16px; position: absolute; left: 0; right: 0; } md-grid-tile md-grid-tile-header [md-line], md-grid-tile md-grid-tile-footer [md-line] { white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; display: block; box-sizing: border-box; } md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2), md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2) { font-size: 12px; } md-grid-tile md-grid-tile-header > *, md-grid-tile md-grid-tile-footer > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile md-grid-tile-header.md-2-line, md-grid-tile md-grid-tile-footer.md-2-line { height: 68px; } md-grid-tile .md-grid-list-text { display: flex; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; } md-grid-tile .md-grid-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile .md-grid-list-text:empty { display: none; } md-grid-tile md-grid-tile-header { top: 0; } md-grid-tile md-grid-tile-footer { bottom: 0; } md-grid-tile [md-grid-avatar] { padding-right: 16px; } [dir='rtl'] md-grid-tile [md-grid-avatar] { padding-right: 0; padding-left: 16px; } md-grid-tile [md-grid-avatar]:empty { display: none; } /*# sourceMappingURL=grid-list.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __param$4(2, _angular_core.Optional()), __metadata$24('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, Dir])], MdGridList);
        return MdGridList;
      }();
      var MdGridListModule = function () {
        function MdGridListModule() {}
        MdGridListModule.forRoot = function () {
          return {
            ngModule: MdGridListModule,
            providers: []
          };
        };
        MdGridListModule = __decorate$24([_angular_core.NgModule({
          imports: [MdLineModule],
          exports: [MdGridList, MdGridTile, MdGridTileText, MdLineModule],
          declarations: [MdGridList, MdGridTile, MdGridTileText]
        }), __metadata$24('design:paramtypes', [])], MdGridListModule);
        return MdGridListModule;
      }();
      var __decorate$26 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$26 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdCardContent = function () {
        function MdCardContent() {}
        MdCardContent = __decorate$26([_angular_core.Directive({ selector: 'md-card-content' }), __metadata$26('design:paramtypes', [])], MdCardContent);
        return MdCardContent;
      }();
      var MdCardTitle = function () {
        function MdCardTitle() {}
        MdCardTitle = __decorate$26([_angular_core.Directive({ selector: 'md-card-title' }), __metadata$26('design:paramtypes', [])], MdCardTitle);
        return MdCardTitle;
      }();
      var MdCardSubtitle = function () {
        function MdCardSubtitle() {}
        MdCardSubtitle = __decorate$26([_angular_core.Directive({ selector: 'md-card-subtitle' }), __metadata$26('design:paramtypes', [])], MdCardSubtitle);
        return MdCardSubtitle;
      }();
      var MdCardActions = function () {
        function MdCardActions() {}
        MdCardActions = __decorate$26([_angular_core.Directive({ selector: 'md-card-actions' }), __metadata$26('design:paramtypes', [])], MdCardActions);
        return MdCardActions;
      }();
      var MdCardFooter = function () {
        function MdCardFooter() {}
        MdCardFooter = __decorate$26([_angular_core.Directive({ selector: 'md-card-footer' }), __metadata$26('design:paramtypes', [])], MdCardFooter);
        return MdCardFooter;
      }();
      var MdCard = function () {
        function MdCard() {}
        MdCard = __decorate$26([_angular_core.Component({
          selector: 'md-card',
          template: "<ng-content></ng-content> ",
          styles: ["md-card { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); will-change: box-shadow; display: block; position: relative; padding: 24px; border-radius: 2px; font-family: Roboto, \"Helvetica Neue\", sans-serif; } md-card:hover { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); } .md-card-flat { box-shadow: none; } md-card-title, md-card-subtitle, md-card-content, md-card-actions { display: block; margin-bottom: 16px; } md-card-title { font-size: 24px; font-weight: 400; } md-card-subtitle { font-size: 14px; } md-card-content { font-size: 14px; } md-card-actions { margin-left: -16px; margin-right: -16px; padding: 8px 0; } md-card-actions[align='end'] { display: flex; justify-content: flex-end; } [md-card-image] { width: calc(100% + 48px); margin: 0 -24px 16px -24px; } [md-card-xl-image] { width: 240px; height: 240px; margin: -8px; } md-card-footer { position: absolute; width: 100%; min-height: 5px; bottom: 0; left: 0; } md-card-actions [md-button], md-card-actions [md-raised-button] { margin: 0 4px; } md-card-header { display: flex; flex-direction: row; height: 40px; margin: -8px 0 16px 0; } .md-card-header-text { height: 40px; margin: 0 8px; } [md-card-avatar] { height: 40px; width: 40px; border-radius: 50%; } md-card-header md-card-title { font-size: 14px; } [md-card-sm-image], [md-card-md-image], [md-card-lg-image] { margin: -8px 0; } md-card-title-group { display: flex; justify-content: space-between; margin: 0 -8px; } [md-card-sm-image] { width: 80px; height: 80px; } [md-card-md-image] { width: 112px; height: 112px; } [md-card-lg-image] { width: 152px; height: 152px; } @media (max-width: 600px) { md-card { padding: 24px 16px; } [md-card-image] { width: calc(100% + 32px); margin: 16px -16px; } md-card-title-group { margin: 0; } [md-card-xl-image] { margin-left: 0; margin-right: 0; } md-card-header { margin: -8px 0 0 0; } } md-card > :first-child, md-card-content > :first-child { margin-top: 0; } md-card > :last-child, md-card-content > :last-child { margin-bottom: 0; } [md-card-image]:first-child { margin-top: -24px; } md-card > md-card-actions:last-child { margin-bottom: -16px; padding-bottom: 0; } md-card-actions [md-button]:first-child, md-card-actions [md-raised-button]:first-child { margin-left: 0; margin-right: 0; } md-card-title:not(:first-child), md-card-subtitle:not(:first-child) { margin-top: -4px; } md-card-header md-card-subtitle:not(:first-child) { margin-top: -8px; } md-card > [md-card-xl-image]:first-child { margin-top: -8px; } md-card > [md-card-xl-image]:last-child { margin-bottom: -8px; } /*# sourceMappingURL=card.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$26('design:paramtypes', [])], MdCard);
        return MdCard;
      }();
      var MdCardHeader = function () {
        function MdCardHeader() {}
        MdCardHeader = __decorate$26([_angular_core.Component({
          selector: 'md-card-header',
          template: "<ng-content select=\"[md-card-avatar]\"></ng-content> <div class=\"md-card-header-text\"> <ng-content select=\"md-card-title, md-card-subtitle\"></ng-content> </div> <ng-content></ng-content> ",
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$26('design:paramtypes', [])], MdCardHeader);
        return MdCardHeader;
      }();
      var MdCardTitleGroup = function () {
        function MdCardTitleGroup() {}
        MdCardTitleGroup = __decorate$26([_angular_core.Component({
          selector: 'md-card-title-group',
          template: "<div> <ng-content select=\"md-card-title, md-card-subtitle\"></ng-content> </div> <ng-content select=\"img\"></ng-content> <ng-content></ng-content> ",
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$26('design:paramtypes', [])], MdCardTitleGroup);
        return MdCardTitleGroup;
      }();
      var MdCardModule = function () {
        function MdCardModule() {}
        MdCardModule.forRoot = function () {
          return {
            ngModule: MdCardModule,
            providers: []
          };
        };
        MdCardModule = __decorate$26([_angular_core.NgModule({
          exports: [MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle, MdCardActions, MdCardFooter],
          declarations: [MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle, MdCardActions, MdCardFooter]
        }), __metadata$26('design:paramtypes', [])], MdCardModule);
        return MdCardModule;
      }();
      var __extends$11 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$28 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$28 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdIconNameNotFoundError = function (_super) {
        __extends$11(MdIconNameNotFoundError, _super);
        function MdIconNameNotFoundError(iconName) {
          _super.call(this, "Unable to find icon with the name \"" + iconName + "\"");
        }
        return MdIconNameNotFoundError;
      }(MdError);
      var MdIconSvgTagNotFoundError = function (_super) {
        __extends$11(MdIconSvgTagNotFoundError, _super);
        function MdIconSvgTagNotFoundError() {
          _super.call(this, '<svg> tag not found');
        }
        return MdIconSvgTagNotFoundError;
      }(MdError);
      var SvgIconConfig = function () {
        function SvgIconConfig(url) {
          this.url = url;
          this.svgElement = null;
        }
        return SvgIconConfig;
      }();
      var iconKey = function (namespace, name) {
        return namespace + ':' + name;
      };
      var MdIconRegistry = function () {
        function MdIconRegistry(_http) {
          this._http = _http;
          this._svgIconConfigs = new Map();
          this._iconSetConfigs = new Map();
          this._cachedIconsByUrl = new Map();
          this._inProgressUrlFetches = new Map();
          this._fontCssClassesByAlias = new Map();
          this._defaultFontSetClass = 'material-icons';
        }
        MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {
          return this.addSvgIconInNamespace('', iconName, url);
        };
        MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {
          var key = iconKey(namespace, iconName);
          this._svgIconConfigs.set(key, new SvgIconConfig(url));
          return this;
        };
        MdIconRegistry.prototype.addSvgIconSet = function (url) {
          return this.addSvgIconSetInNamespace('', url);
        };
        MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {
          var config = new SvgIconConfig(url);
          if (this._iconSetConfigs.has(namespace)) {
            this._iconSetConfigs.get(namespace).push(config);
          } else {
            this._iconSetConfigs.set(namespace, [config]);
          }
          return this;
        };
        MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {
          if (className === void 0) {
            className = alias;
          }
          this._fontCssClassesByAlias.set(alias, className);
          return this;
        };
        MdIconRegistry.prototype.classNameForFontAlias = function (alias) {
          return this._fontCssClassesByAlias.get(alias) || alias;
        };
        MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {
          this._defaultFontSetClass = className;
          return this;
        };
        MdIconRegistry.prototype.getDefaultFontSetClass = function () {
          return this._defaultFontSetClass;
        };
        MdIconRegistry.prototype.getSvgIconFromUrl = function (url) {
          var _this = this;
          if (this._cachedIconsByUrl.has(url)) {
            return rxjs_Observable.Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));
          }
          return this._loadSvgIconFromConfig(new SvgIconConfig(url)).do(function (svg) {
            return _this._cachedIconsByUrl.set(url, svg);
          }).map(function (svg) {
            return cloneSvg(svg);
          });
        };
        MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {
          if (namespace === void 0) {
            namespace = '';
          }
          var key = iconKey(namespace, name);
          if (this._svgIconConfigs.has(key)) {
            return this._getSvgFromConfig(this._svgIconConfigs.get(key));
          }
          var iconSetConfigs = this._iconSetConfigs.get(namespace);
          if (iconSetConfigs) {
            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
          }
          return rxjs_Observable.Observable.throw(new MdIconNameNotFoundError(key));
        };
        MdIconRegistry.prototype._getSvgFromConfig = function (config) {
          if (config.svgElement) {
            return rxjs_Observable.Observable.of(cloneSvg(config.svgElement));
          } else {
            return this._loadSvgIconFromConfig(config).do(function (svg) {
              return config.svgElement = svg;
            }).map(function (svg) {
              return cloneSvg(svg);
            });
          }
        };
        MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {
          var _this = this;
          var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);
          if (namedIcon) {
            return rxjs_Observable.Observable.of(namedIcon);
          }
          var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {
            return !iconSetConfig.svgElement;
          }).map(function (iconSetConfig) {
            return _this._loadSvgIconSetFromConfig(iconSetConfig).catch(function (err, caught) {
              console.log("Loading icon set URL: " + iconSetConfig.url + " failed: " + err);
              return rxjs_Observable.Observable.of(null);
            }).do(function (svg) {
              if (svg) {
                iconSetConfig.svgElement = svg;
              }
            });
          });
          return rxjs_Observable.Observable.forkJoin(iconSetFetchRequests).map(function (ignoredResults) {
            var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);
            if (!foundIcon) {
              throw new MdIconNameNotFoundError(name);
            }
            return foundIcon;
          });
        };
        MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {
          for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
            var config = iconSetConfigs[i];
            if (config.svgElement) {
              var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config);
              if (foundIcon) {
                return foundIcon;
              }
            }
          }
          return null;
        };
        MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {
          var _this = this;
          return this._fetchUrl(config.url).map(function (svgText) {
            return _this._createSvgElementForSingleIcon(svgText, config);
          });
        };
        MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {
          var _this = this;
          return this._fetchUrl(config.url).map(function (svgText) {
            return _this._svgElementFromString(svgText);
          });
        };
        MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText, config) {
          var svg = this._svgElementFromString(responseText);
          this._setSvgAttributes(svg, config);
          return svg;
        };
        MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName, config) {
          var iconNode = iconSet.querySelector('#' + iconName);
          if (!iconNode) {
            return null;
          }
          if (iconNode.tagName.toLowerCase() == 'svg') {
            return this._setSvgAttributes(iconNode.cloneNode(true), config);
          }
          var svg = this._svgElementFromString('<svg></svg>');
          svg.appendChild(iconNode.cloneNode(true));
          return this._setSvgAttributes(svg, config);
        };
        MdIconRegistry.prototype._svgElementFromString = function (str) {
          var div = document.createElement('DIV');
          div.innerHTML = str;
          var svg = div.querySelector('svg');
          if (!svg) {
            throw new MdIconSvgTagNotFoundError();
          }
          return svg;
        };
        MdIconRegistry.prototype._setSvgAttributes = function (svg, config) {
          if (!svg.getAttribute('xmlns')) {
            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
          }
          svg.setAttribute('fit', '');
          svg.setAttribute('height', '100%');
          svg.setAttribute('width', '100%');
          svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
          svg.setAttribute('focusable', 'false');
          return svg;
        };
        MdIconRegistry.prototype._fetchUrl = function (url) {
          var _this = this;
          if (this._inProgressUrlFetches.has(url)) {
            return this._inProgressUrlFetches.get(url);
          }
          var req = this._http.get(url).map(function (response) {
            return response.text();
          }).finally(function () {
            _this._inProgressUrlFetches.delete(url);
          }).share();
          this._inProgressUrlFetches.set(url, req);
          return req;
        };
        MdIconRegistry = __decorate$28([_angular_core.Injectable(), __metadata$28('design:paramtypes', [_angular_http.Http])], MdIconRegistry);
        return MdIconRegistry;
      }();
      function cloneSvg(svg) {
        return svg.cloneNode(true);
      }
      var __extends$10 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$27 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$27 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdIconInvalidNameError = function (_super) {
        __extends$10(MdIconInvalidNameError, _super);
        function MdIconInvalidNameError(iconName) {
          _super.call(this, "Invalid icon name: \"" + iconName + "\"");
        }
        return MdIconInvalidNameError;
      }(MdError);
      var MdIcon = function () {
        function MdIcon(_element, _renderer, _mdIconRegistry) {
          this._element = _element;
          this._renderer = _renderer;
          this._mdIconRegistry = _mdIconRegistry;
          this.hostAriaLabel = '';
        }
        MdIcon.prototype._splitIconName = function (iconName) {
          if (!iconName) {
            return ['', ''];
          }
          var parts = iconName.split(':');
          switch (parts.length) {
            case 1:
              return ['', parts[0]];
            case 2:
              return parts;
            default:
              throw new MdIconInvalidNameError(iconName);
          }
        };
        MdIcon.prototype.ngOnChanges = function (changes) {
          var _this = this;
          var changedInputs = Object.keys(changes);
          if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {
            if (this.svgIcon) {
              var _a = this._splitIconName(this.svgIcon),
                  namespace = _a[0],
                  iconName = _a[1];
              this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).subscribe(function (svg) {
                return _this._setSvgElement(svg);
              }, function (err) {
                return console.log("Error retrieving icon: " + err);
              });
            } else if (this.svgSrc) {
              this._mdIconRegistry.getSvgIconFromUrl(this.svgSrc).subscribe(function (svg) {
                return _this._setSvgElement(svg);
              }, function (err) {
                return console.log("Error retrieving icon: " + err);
              });
            }
          }
          if (this._usingFontIcon()) {
            this._updateFontIconClasses();
          }
          this._updateAriaLabel();
        };
        MdIcon.prototype.ngOnInit = function () {
          if (this._usingFontIcon()) {
            this._updateFontIconClasses();
          }
        };
        MdIcon.prototype.ngAfterViewChecked = function () {
          this._updateAriaLabel();
        };
        MdIcon.prototype._updateAriaLabel = function () {
          var ariaLabel = this._getAriaLabel();
          if (ariaLabel) {
            this._renderer.setElementAttribute(this._element.nativeElement, 'aria-label', ariaLabel);
          }
        };
        MdIcon.prototype._getAriaLabel = function () {
          var label = this.hostAriaLabel || this.alt || this.fontIcon || this._splitIconName(this.svgIcon)[1];
          if (label) {
            return label;
          }
          if (this._usingFontIcon()) {
            var text = this._element.nativeElement.textContent;
            if (text) {
              return text;
            }
          }
          return null;
        };
        MdIcon.prototype._usingFontIcon = function () {
          return !(this.svgIcon || this.svgSrc);
        };
        MdIcon.prototype._setSvgElement = function (svg) {
          var layoutElement = this._element.nativeElement;
          layoutElement.innerHTML = '';
          this._renderer.projectNodes(layoutElement, [svg]);
        };
        MdIcon.prototype._updateFontIconClasses = function () {
          if (!this._usingFontIcon()) {
            return;
          }
          var elem = this._element.nativeElement;
          var fontSetClass = this.fontSet ? this._mdIconRegistry.classNameForFontAlias(this.fontSet) : this._mdIconRegistry.getDefaultFontSetClass();
          if (fontSetClass != this._previousFontSetClass) {
            if (this._previousFontSetClass) {
              this._renderer.setElementClass(elem, this._previousFontSetClass, false);
            }
            if (fontSetClass) {
              this._renderer.setElementClass(elem, fontSetClass, true);
            }
            this._previousFontSetClass = fontSetClass;
          }
          if (this.fontIcon != this._previousFontIconClass) {
            if (this._previousFontIconClass) {
              this._renderer.setElementClass(elem, this._previousFontIconClass, false);
            }
            if (this.fontIcon) {
              this._renderer.setElementClass(elem, this.fontIcon, true);
            }
            this._previousFontIconClass = this.fontIcon;
          }
        };
        __decorate$27([_angular_core.Input(), __metadata$27('design:type', String)], MdIcon.prototype, "svgSrc", void 0);
        __decorate$27([_angular_core.Input(), __metadata$27('design:type', String)], MdIcon.prototype, "svgIcon", void 0);
        __decorate$27([_angular_core.Input(), __metadata$27('design:type', String)], MdIcon.prototype, "fontSet", void 0);
        __decorate$27([_angular_core.Input(), __metadata$27('design:type', String)], MdIcon.prototype, "fontIcon", void 0);
        __decorate$27([_angular_core.Input(), __metadata$27('design:type', String)], MdIcon.prototype, "alt", void 0);
        __decorate$27([_angular_core.Input('aria-label'), __metadata$27('design:type', String)], MdIcon.prototype, "hostAriaLabel", void 0);
        MdIcon = __decorate$27([_angular_core.Component({
          template: '<ng-content></ng-content>',
          selector: 'md-icon',
          styles: ["md-icon { background-repeat: no-repeat; display: inline-block; fill: currentColor; height: 24px; width: 24px; } /*# sourceMappingURL=icon.css.map */ "],
          host: { 'role': 'img' },
          encapsulation: _angular_core.ViewEncapsulation.None,
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$27('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, MdIconRegistry])], MdIcon);
        return MdIcon;
      }();
      var MdIconModule = function () {
        function MdIconModule() {}
        MdIconModule.forRoot = function () {
          return {
            ngModule: MdIconModule,
            providers: [MdIconRegistry]
          };
        };
        MdIconModule = __decorate$27([_angular_core.NgModule({
          imports: [_angular_http.HttpModule],
          exports: [MdIcon],
          declarations: [MdIcon]
        }), __metadata$27('design:paramtypes', [])], MdIconModule);
        return MdIconModule;
      }();
      var __extends$12 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$29 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$29 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var DEGREE_IN_RADIANS = Math.PI / 180;
      var DURATION_INDETERMINATE = 667;
      var DURATION_DETERMINATE = 225;
      var startIndeterminate = 3;
      var endIndeterminate = 80;
      var MdProgressCircle = function () {
        function MdProgressCircle(_changeDetectorRef) {
          this._changeDetectorRef = _changeDetectorRef;
          this._lastAnimationId = 0;
          this._mode = 'determinate';
        }
        Object.defineProperty(MdProgressCircle.prototype, "_ariaValueMin", {
          get: function () {
            return this.mode == 'determinate' ? 0 : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdProgressCircle.prototype, "_ariaValueMax", {
          get: function () {
            return this.mode == 'determinate' ? 100 : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdProgressCircle.prototype, "interdeterminateInterval", {
          get: function () {
            return this._interdeterminateInterval;
          },
          set: function (interval) {
            clearInterval(this._interdeterminateInterval);
            this._interdeterminateInterval = interval;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdProgressCircle.prototype, "currentPath", {
          get: function () {
            return this._currentPath;
          },
          set: function (path) {
            this._currentPath = path;
            this._changeDetectorRef.markForCheck();
          },
          enumerable: true,
          configurable: true
        });
        MdProgressCircle.prototype.ngOnDestroy = function () {
          this._cleanupIndeterminateAnimation();
        };
        Object.defineProperty(MdProgressCircle.prototype, "value", {
          get: function () {
            if (this.mode == 'determinate') {
              return this._value;
            }
          },
          set: function (v) {
            if (v && this.mode == 'determinate') {
              var newValue = clamp(v);
              this._animateCircle(this.value || 0, newValue, linearEase, DURATION_DETERMINATE, 0);
              this._value = newValue;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdProgressCircle.prototype, "mode", {
          get: function () {
            return this._mode;
          },
          set: function (m) {
            if (m == 'indeterminate') {
              this._startIndeterminateAnimation();
            } else {
              this._cleanupIndeterminateAnimation();
            }
            this._mode = m;
          },
          enumerable: true,
          configurable: true
        });
        MdProgressCircle.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {
          var _this = this;
          var id = ++this._lastAnimationId;
          var startTime = Date.now();
          var changeInValue = animateTo - animateFrom;
          if (animateTo === animateFrom) {
            this.currentPath = getSvgArc(animateTo, rotation);
          } else {
            var animation_1 = function () {
              var elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));
              _this.currentPath = getSvgArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);
              if (id === _this._lastAnimationId && elapsedTime < duration) {
                requestAnimationFrame(animation_1);
              }
            };
            requestAnimationFrame(animation_1);
          }
        };
        MdProgressCircle.prototype._startIndeterminateAnimation = function () {
          var _this = this;
          var rotationStartPoint = 0;
          var start = startIndeterminate;
          var end = endIndeterminate;
          var duration = DURATION_INDETERMINATE;
          var animate = function () {
            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);
            rotationStartPoint = (rotationStartPoint + end) % 100;
            var temp = start;
            start = -end;
            end = -temp;
          };
          if (!this.interdeterminateInterval) {
            this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);
            animate();
          }
        };
        MdProgressCircle.prototype._cleanupIndeterminateAnimation = function () {
          this.interdeterminateInterval = null;
        };
        __decorate$29([_angular_core.Input(), _angular_core.HostBinding('attr.aria-valuenow'), __metadata$29('design:type', Object)], MdProgressCircle.prototype, "value", null);
        __decorate$29([_angular_core.HostBinding('attr.mode'), _angular_core.Input(), __metadata$29('design:type', Object)], MdProgressCircle.prototype, "mode", null);
        MdProgressCircle = __decorate$29([_angular_core.Component({
          selector: 'md-progress-circle',
          host: {
            'role': 'progressbar',
            '[attr.aria-valuemin]': '_ariaValueMin',
            '[attr.aria-valuemax]': '_ariaValueMax'
          },
          template: "<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center.  The center of the circle with remain at the center of the md-progress-circle element containing the SVG. --> <svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"> <path [attr.d]=\"currentPath\"></path> </svg> ",
          styles: [":host { display: block; height: 100px; width: 100px; } :host svg { height: 100%; width: 100%; transform-origin: center; } :host path { fill: transparent; stroke-width: 10px; } :host[mode='indeterminate'] { animation-duration: 5250ms, 2887.5ms; animation-name: md-progress-circle-sporadic-rotate, md-progress-circle-linear-rotate; animation-timing-function: cubic-bezier(0.35, 0, 0.25, 1), linear; animation-iteration-count: infinite; transition: none; } @keyframes md-progress-circle-linear-rotate { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } @keyframes md-progress-circle-sporadic-rotate { 12.5% { transform: rotate(135deg); } 25% { transform: rotate(270deg); } 37.5% { transform: rotate(405deg); } 50% { transform: rotate(540deg); } 62.5% { transform: rotate(675deg); } 75% { transform: rotate(810deg); } 87.5% { transform: rotate(945deg); } 100% { transform: rotate(1080deg); } } /*# sourceMappingURL=progress-circle.css.map */ "],
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$29('design:paramtypes', [_angular_core.ChangeDetectorRef])], MdProgressCircle);
        return MdProgressCircle;
      }();
      var MdSpinner = function (_super) {
        __extends$12(MdSpinner, _super);
        function MdSpinner(changeDetectorRef) {
          _super.call(this, changeDetectorRef);
          this.mode = 'indeterminate';
        }
        MdSpinner = __decorate$29([_angular_core.Component({
          selector: 'md-spinner',
          host: {
            'role': 'progressbar',
            'mode': 'indeterminate'
          },
          template: "<!-- preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's center.  The center of the circle with remain at the center of the md-progress-circle element containing the SVG. --> <svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"> <path [attr.d]=\"currentPath\"></path> </svg> ",
          styles: [":host { display: block; height: 100px; width: 100px; } :host svg { height: 100%; width: 100%; transform-origin: center; } :host path { fill: transparent; stroke-width: 10px; } :host[mode='indeterminate'] { animation-duration: 5250ms, 2887.5ms; animation-name: md-progress-circle-sporadic-rotate, md-progress-circle-linear-rotate; animation-timing-function: cubic-bezier(0.35, 0, 0.25, 1), linear; animation-iteration-count: infinite; transition: none; } @keyframes md-progress-circle-linear-rotate { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } @keyframes md-progress-circle-sporadic-rotate { 12.5% { transform: rotate(135deg); } 25% { transform: rotate(270deg); } 37.5% { transform: rotate(405deg); } 50% { transform: rotate(540deg); } 62.5% { transform: rotate(675deg); } 75% { transform: rotate(810deg); } 87.5% { transform: rotate(945deg); } 100% { transform: rotate(1080deg); } } /*# sourceMappingURL=progress-circle.css.map */ "]
        }), __metadata$29('design:paramtypes', [_angular_core.ChangeDetectorRef])], MdSpinner);
        return MdSpinner;
      }(MdProgressCircle);
      function clamp(v) {
        return Math.max(0, Math.min(100, v));
      }
      function polarToCartesian(radius, pathRadius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;
        return radius + pathRadius * Math.cos(angleInRadians) + ',' + (radius + pathRadius * Math.sin(angleInRadians));
      }
      function linearEase(currentTime, startValue, changeInValue, duration) {
        return changeInValue * currentTime / duration + startValue;
      }
      function materialEase(currentTime, startValue, changeInValue, duration) {
        var time = currentTime / duration;
        var timeCubed = Math.pow(time, 3);
        var timeQuad = Math.pow(time, 4);
        var timeQuint = Math.pow(time, 5);
        return startValue + changeInValue * (6 * timeQuint + -15 * timeQuad + 10 * timeCubed);
      }
      function getSvgArc(currentValue, rotation) {
        var maximumAngle = 359.99 / 100;
        var startPoint = rotation || 0;
        var radius = 50;
        var pathRadius = 40;
        var startAngle = startPoint * maximumAngle;
        var endAngle = currentValue * maximumAngle;
        var start = polarToCartesian(radius, pathRadius, startAngle);
        var end = polarToCartesian(radius, pathRadius, endAngle + startAngle);
        var arcSweep = endAngle < 0 ? 0 : 1;
        var largeArcFlag;
        if (endAngle < 0) {
          largeArcFlag = endAngle >= -180 ? 0 : 1;
        } else {
          largeArcFlag = endAngle <= 180 ? 0 : 1;
        }
        return "M" + start + "A" + pathRadius + "," + pathRadius + " 0 " + largeArcFlag + "," + arcSweep + " " + end;
      }
      var MdProgressCircleModule = function () {
        function MdProgressCircleModule() {}
        MdProgressCircleModule.forRoot = function () {
          return {
            ngModule: MdProgressCircleModule,
            providers: []
          };
        };
        MdProgressCircleModule = __decorate$29([_angular_core.NgModule({
          exports: [MdProgressCircle, MdSpinner],
          declarations: [MdProgressCircle, MdSpinner]
        }), __metadata$29('design:paramtypes', [])], MdProgressCircleModule);
        return MdProgressCircleModule;
      }();
      var __decorate$30 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$30 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdProgressBar = function () {
        function MdProgressBar() {
          this._value = 0;
          this._bufferValue = 0;
          this.mode = 'determinate';
        }
        Object.defineProperty(MdProgressBar.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (v) {
            this._value = clamp$1(v || 0);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdProgressBar.prototype, "bufferValue", {
          get: function () {
            return this._bufferValue;
          },
          set: function (v) {
            this._bufferValue = clamp$1(v || 0);
          },
          enumerable: true,
          configurable: true
        });
        MdProgressBar.prototype._primaryTransform = function () {
          var scale = this.value / 100;
          return { transform: "scaleX(" + scale + ")" };
        };
        MdProgressBar.prototype._bufferTransform = function () {
          if (this.mode == 'buffer') {
            var scale = this.bufferValue / 100;
            return { transform: "scaleX(" + scale + ")" };
          }
        };
        __decorate$30([_angular_core.Input(), _angular_core.HostBinding('attr.aria-valuenow'), __metadata$30('design:type', Object)], MdProgressBar.prototype, "value", null);
        __decorate$30([_angular_core.Input(), __metadata$30('design:type', Object)], MdProgressBar.prototype, "bufferValue", null);
        __decorate$30([_angular_core.Input(), _angular_core.HostBinding('attr.mode'), __metadata$30('design:type', Object)], MdProgressBar.prototype, "mode", void 0);
        MdProgressBar = __decorate$30([_angular_core.Component({
          selector: 'md-progress-bar',
          host: {
            'role': 'progressbar',
            'aria-valuemin': '0',
            'aria-valuemax': '100'
          },
          template: "<!-- The background div is named as such because it appears below the other divs and is not sized based on values. --> <div class=\"md-progress-bar-background\"></div> <div class=\"md-progress-bar-buffer\" [ngStyle]=\"_bufferTransform()\"></div> <div class=\"md-progress-bar-primary md-progress-bar-fill\" [ngStyle]=\"_primaryTransform()\"></div> <div class=\"md-progress-bar-secondary md-progress-bar-fill\"></div> ",
          styles: [":host { display: block; height: 5px; overflow: hidden; position: relative; transform: translateZ(0); transition: opacity 250ms linear; width: 100%; } :host .md-progress-bar-background { background-repeat: repeat-x; background-size: 10px 4px; height: 100%; position: absolute; visibility: hidden; width: 100%; } :host .md-progress-bar-buffer { height: 100%; position: absolute; transform-origin: top left; transition: transform 250ms ease; width: 100%; } :host .md-progress-bar-secondary { visibility: hidden; } :host .md-progress-bar-fill { animation: none; height: 100%; position: absolute; transform-origin: top left; transition: transform 250ms ease; width: 100%; } :host .md-progress-bar-fill::after { animation: none; content: ''; display: inline-block; height: 100%; position: absolute; width: 100%; } :host[mode='query'] { transform: rotateZ(180deg); } :host[mode='indeterminate'] .md-progress-bar-fill, :host[mode='query'] .md-progress-bar-fill { transition: none; } :host[mode='indeterminate'] .md-progress-bar-primary, :host[mode='query'] .md-progress-bar-primary { animation: md-progress-bar-primary-indeterminate-translate 2000ms infinite linear; left: -145.166611%; } :host[mode='indeterminate'] .md-progress-bar-primary.md-progress-bar-fill::after, :host[mode='query'] .md-progress-bar-primary.md-progress-bar-fill::after { animation: md-progress-bar-primary-indeterminate-scale 2000ms infinite linear; } :host[mode='indeterminate'] .md-progress-bar-secondary, :host[mode='query'] .md-progress-bar-secondary { animation: md-progress-bar-secondary-indeterminate-translate 2000ms infinite linear; left: -54.888891%; visibility: visible; } :host[mode='indeterminate'] .md-progress-bar-secondary.md-progress-bar-fill::after, :host[mode='query'] .md-progress-bar-secondary.md-progress-bar-fill::after { animation: md-progress-bar-secondary-indeterminate-scale 2000ms infinite linear; } :host[mode='buffer'] .md-progress-bar-background { animation: md-progress-bar-background-scroll 250ms infinite linear; visibility: visible; } :host-context([dir='rtl']) { transform: rotateY(180deg); } @keyframes md-progress-bar-primary-indeterminate-translate { 0% { transform: translateX(0); } 20% { animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582); transform: translateX(0); } 59.15% { animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635); transform: translateX(83.67142%); } 100% { transform: translateX(200.61106%); } } @keyframes md-progress-bar-primary-indeterminate-scale { 0% { transform: scaleX(0.08); } 36.65% { animation-timing-function: cubic-bezier(0.33473, 0.12482, 0.78584, 1); transform: scaleX(0.08); } 69.15% { animation-timing-function: cubic-bezier(0.06, 0.11, 0.6, 1); transform: scaleX(0.66148); } 100% { transform: scaleX(0.08); } } @keyframes md-progress-bar-secondary-indeterminate-translate { 0% { animation-timing-function: cubic-bezier(0.15, 0, 0.51506, 0.40969); transform: translateX(0); } 25% { animation-timing-function: cubic-bezier(0.31033, 0.28406, 0.8, 0.73371); transform: translateX(37.65191%); } 48.35% { animation-timing-function: cubic-bezier(0.4, 0.62704, 0.6, 0.90203); transform: translateX(84.38617%); } 100% { transform: translateX(160.27778%); } } @keyframes md-progress-bar-secondary-indeterminate-scale { 0% { animation-timing-function: cubic-bezier(0.15, 0, 0.51506, 0.40969); transform: scaleX(0.08); } 19.15% { animation-timing-function: cubic-bezier(0.31033, 0.28406, 0.8, 0.73371); transform: scaleX(0.4571); } 44.15% { animation-timing-function: cubic-bezier(0.4, 0.62704, 0.6, 0.90203); transform: scaleX(0.72796); } 100% { transform: scaleX(0.08); } } @keyframes md-progress-bar-background-scroll { to { transform: translateX(-10px); } } /*# sourceMappingURL=progress-bar.css.map */ "],
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }), __metadata$30('design:paramtypes', [])], MdProgressBar);
        return MdProgressBar;
      }();
      function clamp$1(v, min, max) {
        if (min === void 0) {
          min = 0;
        }
        if (max === void 0) {
          max = 100;
        }
        return Math.max(min, Math.min(max, v));
      }
      var MdProgressBarModule = function () {
        function MdProgressBarModule() {}
        MdProgressBarModule.forRoot = function () {
          return {
            ngModule: MdProgressBarModule,
            providers: []
          };
        };
        MdProgressBarModule = __decorate$30([_angular_core.NgModule({
          imports: [_angular_common.CommonModule],
          exports: [MdProgressBar],
          declarations: [MdProgressBar]
        }), __metadata$30('design:paramtypes', [])], MdProgressBarModule);
        return MdProgressBarModule;
      }();
      var __extends$13 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$31 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$31 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var noop = function () {};
      var MD_INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () {
          return MdInput;
        }),
        multi: true
      };
      var MD_INPUT_INVALID_INPUT_TYPE = ['file', 'radio', 'checkbox'];
      var nextUniqueId$1 = 0;
      var MdInputPlaceholderConflictError = function (_super) {
        __extends$13(MdInputPlaceholderConflictError, _super);
        function MdInputPlaceholderConflictError() {
          _super.call(this, 'Placeholder attribute and child element were both specified.');
        }
        return MdInputPlaceholderConflictError;
      }(MdError);
      var MdInputUnsupportedTypeError = function (_super) {
        __extends$13(MdInputUnsupportedTypeError, _super);
        function MdInputUnsupportedTypeError(type) {
          _super.call(this, "Input type \"" + type + "\" isn't supported by md-input.");
        }
        return MdInputUnsupportedTypeError;
      }(MdError);
      var MdInputDuplicatedHintError = function (_super) {
        __extends$13(MdInputDuplicatedHintError, _super);
        function MdInputDuplicatedHintError(align) {
          _super.call(this, "A hint was already declared for 'align=\"" + align + "\"'.");
        }
        return MdInputDuplicatedHintError;
      }(MdError);
      var MdPlaceholder = function () {
        function MdPlaceholder() {}
        MdPlaceholder = __decorate$31([_angular_core.Directive({ selector: 'md-placeholder' }), __metadata$31('design:paramtypes', [])], MdPlaceholder);
        return MdPlaceholder;
      }();
      var MdHint = function () {
        function MdHint() {
          this.align = 'start';
        }
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdHint.prototype, "align", void 0);
        MdHint = __decorate$31([_angular_core.Directive({
          selector: 'md-hint',
          host: {
            '[class.md-right]': 'align == "end"',
            '[class.md-hint]': 'true'
          }
        }), __metadata$31('design:paramtypes', [])], MdHint);
        return MdHint;
      }();
      var MdInput = function () {
        function MdInput() {
          this._focused = false;
          this._value = '';
          this._onTouchedCallback = noop;
          this._onChangeCallback = noop;
          this.align = 'start';
          this.dividerColor = 'primary';
          this.floatingPlaceholder = true;
          this.hintLabel = '';
          this.autofocus = false;
          this.disabled = false;
          this.id = "md-input-" + nextUniqueId$1++;
          this.list = null;
          this.max = null;
          this.maxlength = null;
          this.min = null;
          this.minlength = null;
          this.placeholder = null;
          this.readonly = false;
          this.required = false;
          this.spellcheck = false;
          this.step = null;
          this.tabindex = null;
          this.type = 'text';
          this.name = null;
          this._blurEmitter = new _angular_core.EventEmitter();
          this._focusEmitter = new _angular_core.EventEmitter();
        }
        Object.defineProperty(MdInput.prototype, "focused", {
          get: function () {
            return this._focused;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "empty", {
          get: function () {
            return (this._value == null || this._value === '') && this.type !== 'date';
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "characterCount", {
          get: function () {
            return this.empty ? 0 : ('' + this._value).length;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "inputId", {
          get: function () {
            return this.id + "-input";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "onBlur", {
          get: function () {
            return this._blurEmitter.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "onFocus", {
          get: function () {
            return this._focusEmitter.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdInput.prototype, "value", {
          get: function () {
            return this._value;
          },
          set: function (v) {
            v = this._convertValueForInputType(v);
            if (v !== this._value) {
              this._value = v;
              this._onChangeCallback(v);
            }
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(MdInput.prototype, "_align", {
          get: function () {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        MdInput.prototype.focus = function () {
          this._inputElement.nativeElement.focus();
        };
        MdInput.prototype._handleFocus = function (event) {
          this._focused = true;
          this._focusEmitter.emit(event);
        };
        MdInput.prototype._handleBlur = function (event) {
          this._focused = false;
          this._onTouchedCallback();
          this._blurEmitter.emit(event);
        };
        MdInput.prototype._handleChange = function (event) {
          this.value = event.target.value;
          this._onTouchedCallback();
        };
        MdInput.prototype._hasPlaceholder = function () {
          return !!this.placeholder || this._placeholderChild != null;
        };
        MdInput.prototype.writeValue = function (value) {
          this._value = value;
        };
        MdInput.prototype.registerOnChange = function (fn) {
          this._onChangeCallback = fn;
        };
        MdInput.prototype.registerOnTouched = function (fn) {
          this._onTouchedCallback = fn;
        };
        MdInput.prototype.ngAfterContentInit = function () {
          var _this = this;
          this._validateConstraints();
          this._hintChildren.changes.subscribe(function () {
            _this._validateConstraints();
          });
        };
        MdInput.prototype.ngOnChanges = function (changes) {
          this._validateConstraints();
        };
        MdInput.prototype._convertValueForInputType = function (v) {
          switch (this.type) {
            case 'number':
              return parseFloat(v);
            default:
              return v;
          }
        };
        MdInput.prototype._validateConstraints = function () {
          var _this = this;
          if (this.placeholder != '' && this.placeholder != null && this._placeholderChild != null) {
            throw new MdInputPlaceholderConflictError();
          }
          if (MD_INPUT_INVALID_INPUT_TYPE.indexOf(this.type) != -1) {
            throw new MdInputUnsupportedTypeError(this.type);
          }
          if (this._hintChildren) {
            var startHint_1 = null;
            var endHint_1 = null;
            this._hintChildren.forEach(function (hint) {
              if (hint.align == 'start') {
                if (startHint_1 || _this.hintLabel) {
                  throw new MdInputDuplicatedHintError('start');
                }
                startHint_1 = hint;
              } else if (hint.align == 'end') {
                if (endHint_1) {
                  throw new MdInputDuplicatedHintError('end');
                }
                endHint_1 = hint;
              }
            });
          }
        };
        __decorate$31([_angular_core.Input('aria-label'), __metadata$31('design:type', String)], MdInput.prototype, "ariaLabel", void 0);
        __decorate$31([_angular_core.Input('aria-labelledby'), __metadata$31('design:type', String)], MdInput.prototype, "ariaLabelledBy", void 0);
        __decorate$31([_angular_core.Input('aria-disabled'), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "ariaDisabled", void 0);
        __decorate$31([_angular_core.Input('aria-required'), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "ariaRequired", void 0);
        __decorate$31([_angular_core.Input('aria-invalid'), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "ariaInvalid", void 0);
        __decorate$31([_angular_core.ContentChild(MdPlaceholder), __metadata$31('design:type', MdPlaceholder)], MdInput.prototype, "_placeholderChild", void 0);
        __decorate$31([_angular_core.ContentChildren(MdHint), __metadata$31('design:type', _angular_core.QueryList)], MdInput.prototype, "_hintChildren", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdInput.prototype, "align", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdInput.prototype, "dividerColor", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "floatingPlaceholder", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "hintLabel", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "autocomplete", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "autocorrect", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "autocapitalize", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "autofocus", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "disabled", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "id", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "list", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdInput.prototype, "max", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Number)], MdInput.prototype, "maxlength", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdInput.prototype, "min", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Number)], MdInput.prototype, "minlength", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "placeholder", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "readonly", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "required", void 0);
        __decorate$31([_angular_core.Input(), BooleanFieldValue(), __metadata$31('design:type', Boolean)], MdInput.prototype, "spellcheck", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Number)], MdInput.prototype, "step", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Number)], MdInput.prototype, "tabindex", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "type", void 0);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', String)], MdInput.prototype, "name", void 0);
        __decorate$31([_angular_core.Output('blur'), __metadata$31('design:type', rxjs_Observable.Observable)], MdInput.prototype, "onBlur", null);
        __decorate$31([_angular_core.Output('focus'), __metadata$31('design:type', rxjs_Observable.Observable)], MdInput.prototype, "onFocus", null);
        __decorate$31([_angular_core.Input(), __metadata$31('design:type', Object)], MdInput.prototype, "value", null);
        __decorate$31([_angular_core.HostBinding('attr.align'), __metadata$31('design:type', Object)], MdInput.prototype, "_align", null);
        __decorate$31([_angular_core.ViewChild('input'), __metadata$31('design:type', _angular_core.ElementRef)], MdInput.prototype, "_inputElement", void 0);
        MdInput = __decorate$31([_angular_core.Component({
          selector: 'md-input',
          template: "<div class=\"md-input-wrapper\"> <div class=\"md-input-table\"> <div class=\"md-input-prefix\"><ng-content select=\"[md-prefix]\"></ng-content></div> <div class=\"md-input-infix\"> <input #input aria-target class=\"md-input-element\" [class.md-end]=\"align == 'end'\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-disabled]=\"ariaDisabled\" [attr.aria-required]=\"ariaRequired\" [attr.aria-invalid]=\"ariaInvalid\" [attr.autocomplete]=\"autocomplete\" [attr.autocorrect]=\"autocorrect\" [attr.autocapitalize]=\"autocapitalize\" [autofocus]=\"autofocus\" [disabled]=\"disabled\" [id]=\"inputId\" [attr.list]=\"list\" [attr.max]=\"max\" [attr.maxlength]=\"maxlength\" [attr.min]=\"min\" [attr.minlength]=\"minlength\" [readonly]=\"readonly\" [required]=\"required\" [spellcheck]=\"spellcheck\" [attr.step]=\"step\" [attr.tabindex]=\"tabindex\" [type]=\"type\" [attr.name]=\"name\" (focus)=\"_handleFocus($event)\" (blur)=\"_handleBlur($event)\" [(ngModel)]=\"value\" (change)=\"_handleChange($event)\"> <label class=\"md-input-placeholder\" [attr.for]=\"inputId\" [class.md-empty]=\"empty\" [class.md-focused]=\"focused\" [class.md-float]=\"floatingPlaceholder\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\" *ngIf=\"_hasPlaceholder()\"> <ng-content select=\"md-placeholder\"></ng-content> {{placeholder}} <span class=\"md-placeholder-required\" *ngIf=\"required\">*</span> </label> </div> <div class=\"md-input-suffix\"><ng-content select=\"[md-suffix]\"></ng-content></div> </div> <div class=\"md-input-underline\" [class.md-disabled]=\"disabled\"> <span class=\"md-input-ripple\" [class.md-focused]=\"focused\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\"></span> </div> <div *ngIf=\"hintLabel != ''\" class=\"md-hint\">{{hintLabel}}</div> <ng-content select=\"md-hint\"></ng-content> </div> ",
          styles: ["md-input { display: inline-block; position: relative; font-family: Roboto, \"Helvetica Neue\", sans-serif; text-align: left; } [dir='rtl'] md-input { text-align: right; } .md-input-wrapper { margin: 16px 0; } .md-input-table { display: inline-table; flex-flow: column; vertical-align: bottom; width: 100%; } .md-input-table > * { display: table-cell; } .md-input-infix { position: relative; } .md-input-element { font: inherit; background: transparent; color: currentColor; border: none; outline: none; padding: 0; width: 100%; } .md-input-element.md-end { text-align: right; } [dir='rtl'] .md-input-element.md-end { text-align: left; } .md-input-element:-moz-ui-invalid { box-shadow: none; } .md-input-element:-webkit-autofill + .md-input-placeholder { display: block; padding-bottom: 5px; transform: translateY(-100%) scale(0.75); width: 133.33333%; } .md-input-placeholder { position: absolute; left: 0; top: 0; font-size: 100%; pointer-events: none; z-index: 1; width: 100%; display: none; white-space: nowrap; text-overflow: ellipsis; overflow-x: hidden; transform: translateY(0); transform-origin: bottom left; transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1), scale 400ms cubic-bezier(0.25, 0.8, 0.25, 1), color 400ms cubic-bezier(0.25, 0.8, 0.25, 1), width 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-input-placeholder.md-empty { display: block; cursor: text; } .md-input-placeholder.md-float:not(.md-empty), .md-input-placeholder.md-float.md-focused { display: block; padding-bottom: 5px; transform: translateY(-100%) scale(0.75); width: 133.33333%; } [dir='rtl'] .md-input-placeholder { transform-origin: bottom right; } .md-input-underline { position: absolute; height: 1px; width: 100%; margin-top: 4px; border-top-width: 1px; border-top-style: solid; } .md-input-underline.md-disabled { border-top: 0; background-image: linear-gradient(to right, rgba(0, 0, 0, 0.26) 0%, rgba(0, 0, 0, 0.26) 33%, transparent 0%); background-position: 0; background-size: 4px 1px; background-repeat: repeat-x; } .md-input-underline .md-input-ripple { position: absolute; height: 2px; z-index: 1; top: -1px; width: 100%; transform-origin: top; opacity: 0; transform: scaleY(0); transition: transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1), opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1); } .md-input-underline .md-input-ripple.md-focused { opacity: 1; transform: scaleY(1); } .md-hint { position: absolute; font-size: 75%; bottom: -0.5em; } .md-hint.md-right { right: 0; } [dir='rtl'] .md-hint { right: 0; left: auto; } [dir='rtl'] .md-hint.md-right { right: auto; left: 0; } /*# sourceMappingURL=input.css.map */ "],
          providers: [MD_INPUT_CONTROL_VALUE_ACCESSOR],
          host: { '(click)': 'focus()' },
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$31('design:paramtypes', [])], MdInput);
        return MdInput;
      }();
      var MdInputModule = function () {
        function MdInputModule() {}
        MdInputModule.forRoot = function () {
          return {
            ngModule: MdInputModule,
            providers: []
          };
        };
        MdInputModule = __decorate$31([_angular_core.NgModule({
          declarations: [MdPlaceholder, MdInput, MdHint],
          imports: [_angular_common.CommonModule, _angular_forms.FormsModule],
          exports: [MdPlaceholder, MdInput, MdHint]
        }), __metadata$31('design:paramtypes', [])], MdInputModule);
        return MdInputModule;
      }();
      var MdSnackBarRef = function () {
        function MdSnackBarRef(instance, _overlayRef) {
          this._overlayRef = _overlayRef;
          this._afterClosed = new rxjs_Subject.Subject();
          this.instance = instance;
        }
        MdSnackBarRef.prototype.dismiss = function () {
          if (!this._afterClosed.closed) {
            this._overlayRef.dispose();
            this._afterClosed.complete();
          }
        };
        MdSnackBarRef.prototype.afterDismissed = function () {
          return this._afterClosed.asObservable();
        };
        return MdSnackBarRef;
      }();
      var __extends$15 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdSnackBarContentAlreadyAttached = function (_super) {
        __extends$15(MdSnackBarContentAlreadyAttached, _super);
        function MdSnackBarContentAlreadyAttached() {
          _super.call(this, 'Attempting to attach snack bar content after content is already attached');
        }
        return MdSnackBarContentAlreadyAttached;
      }(MdError);
      var __extends$14 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$33 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$33 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdSnackBarContainer = function (_super) {
        __extends$14(MdSnackBarContainer, _super);
        function MdSnackBarContainer() {
          _super.apply(this, arguments);
        }
        MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {
          if (this._portalHost.hasAttached()) {
            throw new MdSnackBarContentAlreadyAttached();
          }
          return this._portalHost.attachComponentPortal(portal);
        };
        MdSnackBarContainer.prototype.attachTemplatePortal = function (portal) {
          throw Error('Not yet implemented');
        };
        __decorate$33([_angular_core.ViewChild(PortalHostDirective), __metadata$33('design:type', PortalHostDirective)], MdSnackBarContainer.prototype, "_portalHost", void 0);
        MdSnackBarContainer = __decorate$33([_angular_core.Component({
          selector: 'snack-bar-container',
          template: "<template portalHost></template>",
          styles: [":host { box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12); background: #323232; border-radius: 2px; display: block; height: 20px; max-width: 568px; min-width: 288px; overflow: hidden; padding: 14px 24px; } /*# sourceMappingURL=snack-bar-container.css.map */ "],
          host: { 'role': 'alert' }
        }), __metadata$33('design:paramtypes', [])], MdSnackBarContainer);
        return MdSnackBarContainer;
      }(BasePortalHost);
      var __decorate$34 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$34 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var SimpleSnackBar = function () {
        function SimpleSnackBar() {}
        SimpleSnackBar.prototype.dismiss = function () {
          this.snackBarRef.dismiss();
        };
        Object.defineProperty(SimpleSnackBar.prototype, "hasAction", {
          get: function () {
            return !!this.action;
          },
          enumerable: true,
          configurable: true
        });
        SimpleSnackBar = __decorate$34([_angular_core.Component({
          selector: 'simple-snack-bar',
          template: "<span class=\"md-simple-snackbar-message\">{{message}}</span> <button md-button class=\"md-simple-snackbar-action\" *ngIf=\"hasAction\" (click)=\"dismiss()\">{{action}}</button>",
          styles: ["md-simple-snackbar { display: flex; justify-content: space-between; } .md-simple-snackbar-message { box-sizing: border-box; border: none; color: white; font-family: Roboto, 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 20px; outline: none; text-decoration: none; word-break: break-all; } .md-simple-snackbar-action { box-sizing: border-box; color: white; float: right; font-weight: 600; line-height: 20px; margin: -5px 0 0 48px; min-width: initial; padding: 5px; text-transform: uppercase; } /*# sourceMappingURL=simple-snack-bar.css.map */ "]
        }), __metadata$34('design:paramtypes', [])], SimpleSnackBar);
        return SimpleSnackBar;
      }();
      var MdSnackBarConfig = function () {
        function MdSnackBarConfig(viewContainerRef) {
          this.politeness = 'assertive';
          this.viewContainerRef = viewContainerRef;
        }
        return MdSnackBarConfig;
      }();
      var __decorate$32 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$32 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdSnackBar = function () {
        function MdSnackBar(_overlay, _live) {
          this._overlay = _overlay;
          this._live = _live;
        }
        MdSnackBar.prototype.openFromComponent = function (component, config) {
          if (this._snackBarRef) {
            this._snackBarRef.dismiss();
          }
          var overlayRef = this._createOverlay();
          var snackBarContainer = this._attachSnackBarContainer(overlayRef, config);
          var mdSnackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);
          this._live.announce(config.announcementMessage, config.politeness);
          return mdSnackBarRef;
        };
        MdSnackBar.prototype.open = function (message, actionLabel, config) {
          config.announcementMessage = message;
          var simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);
          simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;
          simpleSnackBarRef.instance.message = message;
          simpleSnackBarRef.instance.action = actionLabel;
          return simpleSnackBarRef;
        };
        MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {
          var containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);
          var containerRef = overlayRef.attach(containerPortal);
          containerRef.instance.snackBarConfig = config;
          return containerRef.instance;
        };
        MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {
          var portal = new ComponentPortal(component);
          var contentRef = container.attachComponentPortal(portal);
          var snackBarRef = new MdSnackBarRef(contentRef.instance, overlayRef);
          this._snackBarRef = snackBarRef;
          return snackBarRef;
        };
        MdSnackBar.prototype._createOverlay = function () {
          var state = new OverlayState();
          state.positionStrategy = this._overlay.position().global().fixed().centerHorizontally().bottom('0');
          return this._overlay.create(state);
        };
        MdSnackBar = __decorate$32([_angular_core.Injectable(), __metadata$32('design:paramtypes', [Overlay, MdLiveAnnouncer])], MdSnackBar);
        return MdSnackBar;
      }();
      var MdSnackBarModule = function () {
        function MdSnackBarModule() {}
        MdSnackBarModule.forRoot = function () {
          return {
            ngModule: MdSnackBarModule,
            providers: [MdSnackBar, OVERLAY_PROVIDERS, MdLiveAnnouncer]
          };
        };
        MdSnackBarModule = __decorate$32([_angular_core.NgModule({
          imports: [OverlayModule, PortalModule, _angular_common.CommonModule],
          exports: [MdSnackBarContainer],
          declarations: [MdSnackBarContainer, SimpleSnackBar],
          entryComponents: [MdSnackBarContainer, SimpleSnackBar]
        }), __metadata$32('design:paramtypes', [])], MdSnackBarModule);
        return MdSnackBarModule;
      }();
      var __extends$16 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$36 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$36 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdTabLabel = function (_super) {
        __extends$16(MdTabLabel, _super);
        function MdTabLabel(templateRef, viewContainerRef) {
          _super.call(this, templateRef, viewContainerRef);
        }
        MdTabLabel = __decorate$36([_angular_core.Directive({ selector: '[md-tab-label]' }), __metadata$36('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])], MdTabLabel);
        return MdTabLabel;
      }(TemplatePortalDirective);
      var __extends$17 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$37 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$37 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdTabContent = function (_super) {
        __extends$17(MdTabContent, _super);
        function MdTabContent(templateRef, viewContainerRef) {
          _super.call(this, templateRef, viewContainerRef);
        }
        MdTabContent = __decorate$37([_angular_core.Directive({ selector: '[md-tab-content]' }), __metadata$37('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])], MdTabContent);
        return MdTabContent;
      }(TemplatePortalDirective);
      var __decorate$38 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$38 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdTabLabelWrapper = function () {
        function MdTabLabelWrapper(elementRef) {
          this.elementRef = elementRef;
        }
        MdTabLabelWrapper.prototype.focus = function () {
          this.elementRef.nativeElement.focus();
        };
        MdTabLabelWrapper = __decorate$38([_angular_core.Directive({ selector: '[md-tab-label-wrapper]' }), __metadata$38('design:paramtypes', [_angular_core.ElementRef])], MdTabLabelWrapper);
        return MdTabLabelWrapper;
      }();
      var __decorate$39 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$39 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdInkBar = function () {
        function MdInkBar(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
        }
        MdInkBar.prototype.alignToElement = function (element) {
          this._renderer.setElementStyle(this._elementRef.nativeElement, 'left', this._getLeftPosition(element));
          this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', this._getElementWidth(element));
        };
        MdInkBar.prototype._getLeftPosition = function (element) {
          return element ? element.offsetLeft + 'px' : '0';
        };
        MdInkBar.prototype._getElementWidth = function (element) {
          return element ? element.offsetWidth + 'px' : '0';
        };
        MdInkBar = __decorate$39([_angular_core.Directive({ selector: 'md-ink-bar' }), __metadata$39('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdInkBar);
        return MdInkBar;
      }();
      var __decorate$35 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$35 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var nextId$2 = 0;
      var MdTabChangeEvent = function () {
        function MdTabChangeEvent() {}
        return MdTabChangeEvent;
      }();
      var MdTab = function () {
        function MdTab() {
          this._disabled = false;
        }
        Object.defineProperty(MdTab.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value != null && "" + value !== 'false';
          },
          enumerable: true,
          configurable: true
        });
        __decorate$35([_angular_core.ContentChild(MdTabLabel), __metadata$35('design:type', MdTabLabel)], MdTab.prototype, "label", void 0);
        __decorate$35([_angular_core.ContentChild(MdTabContent), __metadata$35('design:type', MdTabContent)], MdTab.prototype, "content", void 0);
        __decorate$35([_angular_core.Input('disabled'), __metadata$35('design:type', Boolean), __metadata$35('design:paramtypes', [Boolean])], MdTab.prototype, "disabled", null);
        MdTab = __decorate$35([_angular_core.Directive({ selector: 'md-tab' }), __metadata$35('design:paramtypes', [])], MdTab);
        return MdTab;
      }();
      var MdTabGroup = function () {
        function MdTabGroup(_zone) {
          this._zone = _zone;
          this._isInitialized = false;
          this._selectedIndex = 0;
          this._onFocusChange = new _angular_core.EventEmitter();
          this._onSelectChange = new _angular_core.EventEmitter();
          this._focusIndex = 0;
          this._groupId = nextId$2++;
        }
        Object.defineProperty(MdTabGroup.prototype, "selectedIndex", {
          get: function () {
            return this._selectedIndex;
          },
          set: function (value) {
            if (value != this._selectedIndex && this.isValidIndex(value)) {
              this._selectedIndex = value;
              if (this._isInitialized) {
                this._onSelectChange.emit(this._createChangeEvent(value));
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        MdTabGroup.prototype.isValidIndex = function (index) {
          if (this._tabs) {
            var tab = this._tabs.toArray()[index];
            return tab && !tab.disabled;
          } else {
            return true;
          }
        };
        Object.defineProperty(MdTabGroup.prototype, "_selectedIndexChange", {
          get: function () {
            return this.selectChange.map(function (event) {
              return event.index;
            });
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdTabGroup.prototype, "focusChange", {
          get: function () {
            return this._onFocusChange.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdTabGroup.prototype, "selectChange", {
          get: function () {
            return this._onSelectChange.asObservable();
          },
          enumerable: true,
          configurable: true
        });
        MdTabGroup.prototype.ngAfterViewChecked = function () {
          var _this = this;
          this._zone.runOutsideAngular(function () {
            window.requestAnimationFrame(function () {
              _this._updateInkBar();
            });
          });
          this._isInitialized = true;
        };
        MdTabGroup.prototype._updateInkBar = function () {
          this._inkBar.toArray()[0].alignToElement(this._currentLabelWrapper);
        };
        Object.defineProperty(MdTabGroup.prototype, "_currentLabelWrapper", {
          get: function () {
            return this._labelWrappers && this._labelWrappers.length ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdTabGroup.prototype, "focusIndex", {
          get: function () {
            return this._focusIndex;
          },
          set: function (value) {
            if (this.isValidIndex(value)) {
              this._focusIndex = value;
              if (this._isInitialized) {
                this._onFocusChange.emit(this._createChangeEvent(value));
              }
              if (this._labelWrappers && this._labelWrappers.length) {
                this._labelWrappers.toArray()[value].focus();
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        MdTabGroup.prototype._createChangeEvent = function (index) {
          var event = new MdTabChangeEvent();
          event.index = index;
          if (this._tabs && this._tabs.length) {
            event.tab = this._tabs.toArray()[index];
          }
          return event;
        };
        MdTabGroup.prototype._getTabLabelId = function (i) {
          return "md-tab-label-" + this._groupId + "-" + i;
        };
        MdTabGroup.prototype._getTabContentId = function (i) {
          return "md-tab-content-" + this._groupId + "-" + i;
        };
        MdTabGroup.prototype.handleKeydown = function (event) {
          switch (event.keyCode) {
            case RIGHT_ARROW:
              this.focusNextTab();
              break;
            case LEFT_ARROW:
              this.focusPreviousTab();
              break;
            case ENTER:
              this.selectedIndex = this.focusIndex;
              break;
          }
        };
        MdTabGroup.prototype.moveFocus = function (offset) {
          if (this._labelWrappers) {
            var tabs = this._tabs.toArray();
            for (var i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {
              if (this.isValidIndex(i)) {
                this.focusIndex = i;
                return;
              }
            }
          }
        };
        MdTabGroup.prototype.focusNextTab = function () {
          this.moveFocus(1);
        };
        MdTabGroup.prototype.focusPreviousTab = function () {
          this.moveFocus(-1);
        };
        __decorate$35([_angular_core.ContentChildren(MdTab), __metadata$35('design:type', _angular_core.QueryList)], MdTabGroup.prototype, "_tabs", void 0);
        __decorate$35([_angular_core.ViewChildren(MdTabLabelWrapper), __metadata$35('design:type', _angular_core.QueryList)], MdTabGroup.prototype, "_labelWrappers", void 0);
        __decorate$35([_angular_core.ViewChildren(MdInkBar), __metadata$35('design:type', _angular_core.QueryList)], MdTabGroup.prototype, "_inkBar", void 0);
        __decorate$35([_angular_core.Input(), __metadata$35('design:type', Number), __metadata$35('design:paramtypes', [Number])], MdTabGroup.prototype, "selectedIndex", null);
        __decorate$35([_angular_core.Output('selectedIndexChange'), __metadata$35('design:type', rxjs_Observable.Observable)], MdTabGroup.prototype, "_selectedIndexChange", null);
        __decorate$35([_angular_core.Output('focusChange'), __metadata$35('design:type', rxjs_Observable.Observable)], MdTabGroup.prototype, "focusChange", null);
        __decorate$35([_angular_core.Output('selectChange'), __metadata$35('design:type', rxjs_Observable.Observable)], MdTabGroup.prototype, "selectChange", null);
        MdTabGroup = __decorate$35([_angular_core.Component({
          selector: 'md-tab-group',
          template: "<div class=\"md-tab-header\" role=\"tablist\" (keydown)=\"handleKeydown($event)\"> <div class=\"md-tab-label\" role=\"tab\" md-tab-label-wrapper *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [tabIndex]=\"selectedIndex == i ? 0 : -1\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [class.md-tab-active]=\"selectedIndex == i\" [class.md-tab-disabled]=\"tab.disabled\" (click)=\"focusIndex = selectedIndex = i\"> <template [portalHost]=\"tab.label\"></template> </div> <md-ink-bar></md-ink-bar> </div> <div class=\"md-tab-body-wrapper\"> <div class=\"md-tab-body\" role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [class.md-tab-active]=\"selectedIndex == i\" [attr.aria-labelledby]=\"_getTabLabelId(i)\"> <template [ngIf]=\"selectedIndex == i\"> <template [portalHost]=\"tab.content\"></template> </template> </div> </div> ",
          styles: [":host { display: flex; flex-direction: column; font-family: Roboto, \"Helvetica Neue\", sans-serif; } .md-tab-header { overflow: hidden; position: relative; display: flex; flex-direction: row; flex-shrink: 0; } .md-tab-label { line-height: 48px; height: 48px; padding: 0 12px; font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; cursor: pointer; box-sizing: border-box; color: currentColor; opacity: 0.6; min-width: 160px; text-align: center; } .md-tab-label:focus { outline: none; opacity: 1; } .md-tab-disabled { cursor: default; pointer-events: none; } .md-tab-body-wrapper { position: relative; overflow: hidden; flex-grow: 1; display: flex; } .md-tab-body { display: none; overflow: auto; box-sizing: border-box; flex-grow: 1; flex-shrink: 1; } .md-tab-body.md-tab-active { display: block; } md-ink-bar { position: absolute; bottom: 0; height: 2px; transition: 350ms ease-out; } /*# sourceMappingURL=tab-group.css.map */ "]
        }), __metadata$35('design:paramtypes', [_angular_core.NgZone])], MdTabGroup);
        return MdTabGroup;
      }();
      var MdTabsModule = function () {
        function MdTabsModule() {}
        MdTabsModule.forRoot = function () {
          return {
            ngModule: MdTabsModule,
            providers: []
          };
        };
        MdTabsModule = __decorate$35([_angular_core.NgModule({
          imports: [_angular_common.CommonModule, PortalModule],
          exports: [MdTabGroup, MdTabLabel, MdTabContent, MdTab],
          declarations: [MdTabGroup, MdTabLabel, MdTabContent, MdTab, MdInkBar, MdTabLabelWrapper]
        }), __metadata$35('design:paramtypes', [])], MdTabsModule);
        return MdTabsModule;
      }();
      var __decorate$40 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$40 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdToolbarRow = function () {
        function MdToolbarRow() {}
        MdToolbarRow = __decorate$40([_angular_core.Directive({ selector: 'md-toolbar-row' }), __metadata$40('design:paramtypes', [])], MdToolbarRow);
        return MdToolbarRow;
      }();
      var MdToolbar = function () {
        function MdToolbar(elementRef, renderer) {
          this.elementRef = elementRef;
          this.renderer = renderer;
        }
        Object.defineProperty(MdToolbar.prototype, "color", {
          get: function () {
            return this._color;
          },
          set: function (value) {
            this._updateColor(value);
          },
          enumerable: true,
          configurable: true
        });
        MdToolbar.prototype._updateColor = function (newColor) {
          this._setElementColor(this._color, false);
          this._setElementColor(newColor, true);
          this._color = newColor;
        };
        MdToolbar.prototype._setElementColor = function (color, isAdd) {
          if (color != null && color != '') {
            this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + color, isAdd);
          }
        };
        __decorate$40([_angular_core.Input(), __metadata$40('design:type', String)], MdToolbar.prototype, "color", null);
        MdToolbar = __decorate$40([_angular_core.Component({
          selector: 'md-toolbar',
          template: "<div class=\"md-toolbar-layout\"> <md-toolbar-row> <ng-content></ng-content> </md-toolbar-row> <ng-content select=\"md-toolbar-row\"></ng-content> </div>",
          styles: ["md-toolbar { display: flex; box-sizing: border-box; width: 100%; min-height: 64px; font-size: 20px; font-weight: 400; font-family: Roboto, \"Helvetica Neue\", sans-serif; padding: 0 16px; flex-direction: column; } md-toolbar md-toolbar-row { display: flex; box-sizing: border-box; width: 100%; height: 64px; flex-direction: row; align-items: center; } /*# sourceMappingURL=toolbar.css.map */ "],
          changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$40('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])], MdToolbar);
        return MdToolbar;
      }();
      var MdToolbarModule = function () {
        function MdToolbarModule() {}
        MdToolbarModule.forRoot = function () {
          return {
            ngModule: MdToolbarModule,
            providers: []
          };
        };
        MdToolbarModule = __decorate$40([_angular_core.NgModule({
          exports: [MdToolbar, MdToolbarRow],
          declarations: [MdToolbar, MdToolbarRow]
        }), __metadata$40('design:paramtypes', [])], MdToolbarModule);
        return MdToolbarModule;
      }();
      var __decorate$41 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$41 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdTooltip = function () {
        function MdTooltip(_overlay, _elementRef, _viewContainerRef, _changeDetectionRef) {
          this._overlay = _overlay;
          this._elementRef = _elementRef;
          this._viewContainerRef = _viewContainerRef;
          this._changeDetectionRef = _changeDetectionRef;
          this.visible = false;
          this._position = 'below';
        }
        Object.defineProperty(MdTooltip.prototype, "position", {
          get: function () {
            return this._position;
          },
          set: function (value) {
            if (value !== this._position) {
              this._position = value;
              this._createOverlay();
              this._updatePosition();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdTooltip.prototype, "message", {
          get: function () {
            return this._message;
          },
          set: function (value) {
            this._message = value;
            this._updatePosition();
          },
          enumerable: true,
          configurable: true
        });
        MdTooltip.prototype.ngOnInit = function () {
          this._createOverlay();
        };
        MdTooltip.prototype._createOverlay = function () {
          if (this._overlayRef) {
            if (this.visible) {
              this.hide();
              this._createOverlay();
            } else {
              this._overlayRef.dispose();
              this._overlayRef = null;
              this._createOverlay();
            }
          } else {
            var origin = this._getOrigin();
            var position = this._getOverlayPosition();
            var strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);
            var config = new OverlayState();
            config.positionStrategy = strategy;
            this._overlayRef = this._overlay.create(config);
          }
        };
        MdTooltip.prototype._getOrigin = function () {
          switch (this.position) {
            case 'before':
              return {
                originX: 'start',
                originY: 'center'
              };
            case 'after':
              return {
                originX: 'end',
                originY: 'center'
              };
            case 'above':
              return {
                originX: 'center',
                originY: 'top'
              };
            case 'below':
              return {
                originX: 'center',
                originY: 'bottom'
              };
          }
        };
        MdTooltip.prototype._getOverlayPosition = function () {
          switch (this.position) {
            case 'before':
              return {
                overlayX: 'end',
                overlayY: 'center'
              };
            case 'after':
              return {
                overlayX: 'start',
                overlayY: 'center'
              };
            case 'above':
              return {
                overlayX: 'center',
                overlayY: 'bottom'
              };
            case 'below':
              return {
                overlayX: 'center',
                overlayY: 'top'
              };
          }
        };
        MdTooltip.prototype._handleMouseEnter = function (event) {
          this.show();
        };
        MdTooltip.prototype._handleMouseLeave = function (event) {
          this.hide();
        };
        MdTooltip.prototype.show = function () {
          if (!this.visible && this._overlayRef && !this._overlayRef.hasAttached()) {
            this.visible = true;
            var portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);
            var tooltipRef = this._overlayRef.attach(portal);
            tooltipRef.instance.message = this.message;
            this._updatePosition();
          }
        };
        MdTooltip.prototype.hide = function () {
          if (this.visible && this._overlayRef && this._overlayRef.hasAttached()) {
            this.visible = false;
            this._overlayRef.detach();
          }
        };
        MdTooltip.prototype.toggle = function () {
          if (this.visible) {
            this.hide();
          } else {
            this.show();
          }
        };
        MdTooltip.prototype._updatePosition = function () {
          if (this._overlayRef) {
            this._changeDetectionRef.detectChanges();
            this._overlayRef.updatePosition();
          }
        };
        __decorate$41([_angular_core.Input('tooltip-position'), __metadata$41('design:type', String)], MdTooltip.prototype, "position", null);
        __decorate$41([_angular_core.Input('md-tooltip'), __metadata$41('design:type', Object)], MdTooltip.prototype, "message", null);
        MdTooltip = __decorate$41([_angular_core.Directive({
          selector: '[md-tooltip]',
          host: {
            '(mouseenter)': '_handleMouseEnter($event)',
            '(mouseleave)': '_handleMouseLeave($event)'
          }
        }), __metadata$41('design:paramtypes', [Overlay, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.ChangeDetectorRef])], MdTooltip);
        return MdTooltip;
      }();
      var TooltipComponent = function () {
        function TooltipComponent() {}
        TooltipComponent = __decorate$41([_angular_core.Component({
          selector: 'md-tooltip-component',
          template: "<div class=\"md-tooltip\">{{message}}</div>",
          styles: [":host { pointer-events: none; } .md-tooltip { color: white; padding: 0 8px; border-radius: 2px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-size: 10px; margin: 14px; height: 22px; line-height: 22px; } /*# sourceMappingURL=tooltip.css.map */ "]
        }), __metadata$41('design:paramtypes', [])], TooltipComponent);
        return TooltipComponent;
      }();
      var MdTooltipModule = function () {
        function MdTooltipModule() {}
        MdTooltipModule.forRoot = function () {
          return {
            ngModule: MdTooltipModule,
            providers: OVERLAY_PROVIDERS
          };
        };
        MdTooltipModule = __decorate$41([_angular_core.NgModule({
          imports: [OverlayModule],
          exports: [MdTooltip, TooltipComponent],
          declarations: [MdTooltip, TooltipComponent],
          entryComponents: [TooltipComponent]
        }), __metadata$41('design:paramtypes', [])], MdTooltipModule);
        return MdTooltipModule;
      }();
      var __extends$18 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdMenuMissingError = function (_super) {
        __extends$18(MdMenuMissingError, _super);
        function MdMenuMissingError() {
          _super.call(this, "md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [md-menu-trigger-for]=\"menu\"></button>\n    ");
        }
        return MdMenuMissingError;
      }(MdError);
      var MdMenuInvalidPositionX = function (_super) {
        __extends$18(MdMenuInvalidPositionX, _super);
        function MdMenuInvalidPositionX() {
          _super.call(this, "x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>\n    ");
        }
        return MdMenuInvalidPositionX;
      }(MdError);
      var MdMenuInvalidPositionY = function (_super) {
        __extends$18(MdMenuInvalidPositionY, _super);
        function MdMenuInvalidPositionY() {
          _super.call(this, "y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>\n    ");
        }
        return MdMenuInvalidPositionY;
      }(MdError);
      var __decorate$44 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$44 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdMenuItem = function () {
        function MdMenuItem(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
        }
        MdMenuItem.prototype.focus = function () {
          this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
        };
        Object.defineProperty(MdMenuItem.prototype, "disabled", {
          get: function () {
            return this._disabled;
          },
          set: function (value) {
            this._disabled = value === false || value === undefined ? null : true;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MdMenuItem.prototype, "isAriaDisabled", {
          get: function () {
            return String(this.disabled);
          },
          enumerable: true,
          configurable: true
        });
        MdMenuItem.prototype._checkDisabled = function (event) {
          if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
          }
        };
        __decorate$44([_angular_core.HostBinding('attr.disabled'), _angular_core.Input(), __metadata$44('design:type', Boolean)], MdMenuItem.prototype, "disabled", null);
        __decorate$44([_angular_core.HostBinding('attr.aria-disabled'), __metadata$44('design:type', String)], MdMenuItem.prototype, "isAriaDisabled", null);
        MdMenuItem = __decorate$44([_angular_core.Directive({
          selector: '[md-menu-item]',
          host: {
            'role': 'menuitem',
            '(click)': '_checkDisabled($event)',
            'tabindex': '-1'
          },
          exportAs: 'mdMenuItem'
        }), __metadata$44('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])], MdMenuItem);
        return MdMenuItem;
      }();
      var __decorate$43 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$43 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var __param$5 = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      var MdMenu = function () {
        function MdMenu(posX, posY) {
          this._showClickCatcher = false;
          this._focusedItemIndex = 0;
          this.positionX = 'after';
          this.positionY = 'below';
          this.close = new _angular_core.EventEmitter();
          if (posX) {
            this._setPositionX(posX);
          }
          if (posY) {
            this._setPositionY(posY);
          }
        }
        Object.defineProperty(MdMenu.prototype, "classList", {
          set: function (classes) {
            this._classList = classes.split(' ').reduce(function (obj, className) {
              obj[className] = true;
              return obj;
            }, {});
          },
          enumerable: true,
          configurable: true
        });
        MdMenu.prototype._setClickCatcher = function (bool) {
          this._showClickCatcher = bool;
        };
        MdMenu.prototype._focusFirstItem = function () {
          this.items.first.focus();
        };
        MdMenu.prototype._handleKeydown = function (event) {
          if (event.keyCode === DOWN_ARROW) {
            this._focusNextItem();
          } else if (event.keyCode === UP_ARROW) {
            this._focusPreviousItem();
          } else if (event.keyCode === TAB) {
            this._emitCloseEvent();
          }
        };
        MdMenu.prototype._emitCloseEvent = function () {
          this._focusedItemIndex = 0;
          this.close.emit(null);
        };
        MdMenu.prototype._focusNextItem = function () {
          this._updateFocusedItemIndex(1);
          this.items.toArray()[this._focusedItemIndex].focus();
        };
        MdMenu.prototype._focusPreviousItem = function () {
          this._updateFocusedItemIndex(-1);
          this.items.toArray()[this._focusedItemIndex].focus();
        };
        MdMenu.prototype._updateFocusedItemIndex = function (delta, menuItems) {
          if (menuItems === void 0) {
            menuItems = this.items.toArray();
          }
          this._focusedItemIndex = (this._focusedItemIndex + delta + this.items.length) % this.items.length;
          while (menuItems[this._focusedItemIndex].disabled) {
            this._updateFocusedItemIndex(delta, menuItems);
          }
        };
        MdMenu.prototype._setPositionX = function (pos) {
          if (pos !== 'before' && pos !== 'after') {
            throw new MdMenuInvalidPositionX();
          }
          this.positionX = pos;
        };
        MdMenu.prototype._setPositionY = function (pos) {
          if (pos !== 'above' && pos !== 'below') {
            throw new MdMenuInvalidPositionY();
          }
          this.positionY = pos;
        };
        __decorate$43([_angular_core.ViewChild(_angular_core.TemplateRef), __metadata$43('design:type', _angular_core.TemplateRef)], MdMenu.prototype, "templateRef", void 0);
        __decorate$43([_angular_core.ContentChildren(MdMenuItem), __metadata$43('design:type', _angular_core.QueryList)], MdMenu.prototype, "items", void 0);
        __decorate$43([_angular_core.Input('class'), __metadata$43('design:type', String), __metadata$43('design:paramtypes', [String])], MdMenu.prototype, "classList", null);
        __decorate$43([_angular_core.Output(), __metadata$43('design:type', Object)], MdMenu.prototype, "close", void 0);
        MdMenu = __decorate$43([_angular_core.Component({
          selector: 'md-menu',
          host: { 'role': 'menu' },
          template: "<template> <div class=\"md-menu\" [ngClass]=\"_classList\" (click)=\"_emitCloseEvent()\" (keydown)=\"_handleKeydown($event)\"> <ng-content></ng-content> </div> </template> <div class=\"md-menu-click-catcher\" *ngIf=\"_showClickCatcher\" (click)=\"_emitCloseEvent()\"></div>",
          styles: [".md-menu { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); min-width: 112px; max-width: 280px; max-height: calc(100vh + 48px); overflow: auto; -webkit-overflow-scrolling: touch; padding-top: 8px; padding-bottom: 8px; } [md-menu-item] { cursor: pointer; user-select: none; outline: none; border: none; white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; display: flex; flex-direction: row; align-items: center; height: 48px; padding: 0 16px; font-size: 16px; font-family: Roboto, \"Helvetica Neue\", sans-serif; text-align: start; text-decoration: none; } [md-menu-item][disabled] { cursor: default; } button[md-menu-item] { width: 100%; } .md-menu-click-catcher { position: fixed; top: 0; left: 0; right: 0; bottom: 0; } /*# sourceMappingURL=menu.css.map */ "],
          encapsulation: _angular_core.ViewEncapsulation.None,
          exportAs: 'mdMenu'
        }), __param$5(0, _angular_core.Attribute('x-position')), __param$5(1, _angular_core.Attribute('y-position')), __metadata$43('design:paramtypes', [String, String])], MdMenu);
        return MdMenu;
      }();
      var __decorate$45 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$45 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdMenuTrigger = function () {
        function MdMenuTrigger(_overlay, _element, _viewContainerRef, _renderer) {
          this._overlay = _overlay;
          this._element = _element;
          this._viewContainerRef = _viewContainerRef;
          this._renderer = _renderer;
          this._menuOpen = false;
          this._openedFromKeyboard = false;
          this.onMenuOpen = new _angular_core.EventEmitter();
          this.onMenuClose = new _angular_core.EventEmitter();
        }
        MdMenuTrigger.prototype.ngAfterViewInit = function () {
          var _this = this;
          this._checkMenu();
          this.menu.close.subscribe(function () {
            return _this.closeMenu();
          });
        };
        MdMenuTrigger.prototype.ngOnDestroy = function () {
          this.destroyMenu();
        };
        Object.defineProperty(MdMenuTrigger.prototype, "menuOpen", {
          get: function () {
            return this._menuOpen;
          },
          enumerable: true,
          configurable: true
        });
        MdMenuTrigger.prototype.toggleMenu = function () {
          return this._menuOpen ? this.closeMenu() : this.openMenu();
        };
        MdMenuTrigger.prototype.openMenu = function () {
          this._createOverlay();
          this._overlayRef.attach(this._portal);
          this._initMenu();
        };
        MdMenuTrigger.prototype.closeMenu = function () {
          if (this._overlayRef) {
            this._overlayRef.detach();
            this._resetMenu();
          }
        };
        MdMenuTrigger.prototype.destroyMenu = function () {
          if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
          }
        };
        MdMenuTrigger.prototype.focus = function () {
          this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');
        };
        MdMenuTrigger.prototype._initMenu = function () {
          this._setIsMenuOpen(true);
          if (this._openedFromKeyboard) {
            this.menu._focusFirstItem();
          }
        };
        ;
        MdMenuTrigger.prototype._resetMenu = function () {
          this._setIsMenuOpen(false);
          if (this._openedFromKeyboard) {
            this.focus();
            this._openedFromKeyboard = false;
          }
        };
        MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {
          this._menuOpen = isOpen;
          this.menu._setClickCatcher(isOpen);
          this._menuOpen ? this.onMenuOpen.emit(null) : this.onMenuClose.emit(null);
        };
        MdMenuTrigger.prototype._checkMenu = function () {
          if (!this.menu || !(this.menu instanceof MdMenu)) {
            throw new MdMenuMissingError();
          }
        };
        MdMenuTrigger.prototype._createOverlay = function () {
          if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);
            this._overlayRef = this._overlay.create(this._getOverlayConfig());
          }
        };
        MdMenuTrigger.prototype._getOverlayConfig = function () {
          var overlayState = new OverlayState();
          overlayState.positionStrategy = this._getPosition();
          return overlayState;
        };
        MdMenuTrigger.prototype._getPosition = function () {
          var positionX = this.menu.positionX === 'before' ? 'end' : 'start';
          var positionY = this.menu.positionY === 'above' ? 'bottom' : 'top';
          return this._overlay.position().connectedTo(this._element, {
            originX: positionX,
            originY: positionY
          }, {
            overlayX: positionX,
            overlayY: positionY
          });
        };
        MdMenuTrigger.prototype._handleKeydown = function (event) {
          if (event.keyCode === ENTER) {
            this._openedFromKeyboard = true;
          }
        };
        __decorate$45([_angular_core.Input('md-menu-trigger-for'), __metadata$45('design:type', MdMenu)], MdMenuTrigger.prototype, "menu", void 0);
        __decorate$45([_angular_core.Output(), __metadata$45('design:type', Object)], MdMenuTrigger.prototype, "onMenuOpen", void 0);
        __decorate$45([_angular_core.Output(), __metadata$45('design:type', Object)], MdMenuTrigger.prototype, "onMenuClose", void 0);
        __decorate$45([_angular_core.HostListener('click'), __metadata$45('design:type', Function), __metadata$45('design:paramtypes', []), __metadata$45('design:returntype', void 0)], MdMenuTrigger.prototype, "toggleMenu", null);
        MdMenuTrigger = __decorate$45([_angular_core.Directive({
          selector: '[md-menu-trigger-for]',
          host: {
            'aria-haspopup': 'true',
            '(keydown)': '_handleKeydown($event)'
          },
          exportAs: 'mdMenuTrigger'
        }), __metadata$45('design:paramtypes', [Overlay, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.Renderer])], MdMenuTrigger);
        return MdMenuTrigger;
      }();
      var __decorate$42 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$42 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdMenuModule = function () {
        function MdMenuModule() {}
        MdMenuModule.forRoot = function () {
          return {
            ngModule: MdMenuModule,
            providers: OVERLAY_PROVIDERS
          };
        };
        MdMenuModule = __decorate$42([_angular_core.NgModule({
          imports: [OverlayModule, _angular_common.CommonModule],
          exports: [MdMenu, MdMenuItem, MdMenuTrigger],
          declarations: [MdMenu, MdMenuItem, MdMenuTrigger]
        }), __metadata$42('design:paramtypes', [])], MdMenuModule);
        return MdMenuModule;
      }();
      var MdDialogRef = function () {
        function MdDialogRef(_overlayRef) {
          this._overlayRef = _overlayRef;
          this._afterClosed = new rxjs_Subject.Subject();
        }
        MdDialogRef.prototype.close = function (dialogResult) {
          this._overlayRef.dispose();
          this._afterClosed.next(dialogResult);
          this._afterClosed.complete();
        };
        MdDialogRef.prototype.afterClosed = function () {
          return this._afterClosed.asObservable();
        };
        return MdDialogRef;
      }();
      var DialogInjector = function () {
        function DialogInjector(_dialogRef, _parentInjector) {
          this._dialogRef = _dialogRef;
          this._parentInjector = _parentInjector;
        }
        DialogInjector.prototype.get = function (token, notFoundValue) {
          if (token === MdDialogRef) {
            return this._dialogRef;
          }
          return this._parentInjector.get(token, notFoundValue);
        };
        return DialogInjector;
      }();
      var __extends$20 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MdDialogContentAlreadyAttachedError = function (_super) {
        __extends$20(MdDialogContentAlreadyAttachedError, _super);
        function MdDialogContentAlreadyAttachedError() {
          _super.call(this, 'Attempting to attach dialog content after content is already attached');
        }
        return MdDialogContentAlreadyAttachedError;
      }(MdError);
      var __extends$19 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var __decorate$47 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$47 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdDialogContainer = function (_super) {
        __extends$19(MdDialogContainer, _super);
        function MdDialogContainer() {
          _super.apply(this, arguments);
        }
        MdDialogContainer.prototype.attachComponentPortal = function (portal) {
          if (this._portalHost.hasAttached()) {
            throw new MdDialogContentAlreadyAttachedError();
          }
          return this._portalHost.attachComponentPortal(portal);
        };
        MdDialogContainer.prototype.attachTemplatePortal = function (portal) {
          throw Error('Not yet implemented');
        };
        __decorate$47([_angular_core.ViewChild(PortalHostDirective), __metadata$47('design:type', PortalHostDirective)], MdDialogContainer.prototype, "_portalHost", void 0);
        MdDialogContainer = __decorate$47([_angular_core.Component({
          selector: 'md-dialog-container',
          template: "<template portalHost></template> ",
          styles: ["md-dialog-container { box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12); display: block; overflow: hidden; padding: 24px; } /*# sourceMappingURL=dialog-container.css.map */ "],
          host: {
            'class': 'md-dialog-container',
            '[attr.role]': 'dialogConfig?.role'
          },
          encapsulation: _angular_core.ViewEncapsulation.None
        }), __metadata$47('design:paramtypes', [])], MdDialogContainer);
        return MdDialogContainer;
      }(BasePortalHost);
      var MdDialogConfig = function () {
        function MdDialogConfig() {
          this.role = 'dialog';
        }
        return MdDialogConfig;
      }();
      var __decorate$46 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$46 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MdDialog = function () {
        function MdDialog(_overlay, _injector) {
          this._overlay = _overlay;
          this._injector = _injector;
        }
        MdDialog.prototype.open = function (component, config) {
          var overlayRef = this._createOverlay(config);
          var dialogContainer = this._attachDialogContainer(overlayRef, config);
          return this._attachDialogContent(component, dialogContainer, overlayRef);
        };
        MdDialog.prototype._createOverlay = function (dialogConfig) {
          var overlayState = this._getOverlayState(dialogConfig);
          return this._overlay.create(overlayState);
        };
        MdDialog.prototype._attachDialogContainer = function (overlay, config) {
          var containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);
          var containerRef = overlay.attach(containerPortal);
          containerRef.instance.dialogConfig = config;
          return containerRef.instance;
        };
        MdDialog.prototype._attachDialogContent = function (component, dialogContainer, overlayRef) {
          var dialogRef = new MdDialogRef(overlayRef);
          overlayRef.backdropClick().subscribe(function () {
            return dialogRef.close();
          });
          var dialogInjector = new DialogInjector(dialogRef, this._injector);
          var contentPortal = new ComponentPortal(component, null, dialogInjector);
          var contentRef = dialogContainer.attachComponentPortal(contentPortal);
          dialogRef.componentInstance = contentRef.instance;
          return dialogRef;
        };
        MdDialog.prototype._getOverlayState = function (dialogConfig) {
          var state = new OverlayState();
          state.hasBackdrop = true;
          state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();
          return state;
        };
        MdDialog = __decorate$46([_angular_core.Injectable(), __metadata$46('design:paramtypes', [Overlay, _angular_core.Injector])], MdDialog);
        return MdDialog;
      }();
      var MdDialogModule = function () {
        function MdDialogModule() {}
        MdDialogModule.forRoot = function () {
          return {
            ngModule: MdDialogModule,
            providers: [MdDialog, OVERLAY_PROVIDERS]
          };
        };
        MdDialogModule = __decorate$46([_angular_core.NgModule({
          imports: [OverlayModule, PortalModule],
          exports: [MdDialogContainer],
          declarations: [MdDialogContainer],
          entryComponents: [MdDialogContainer]
        }), __metadata$46('design:paramtypes', [])], MdDialogModule);
        return MdDialogModule;
      }();
      var __decorate$13 = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __metadata$13 = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
      };
      var MATERIAL_MODULES = [MdButtonModule, MdButtonToggleModule, MdCardModule, MdCheckboxModule, MdDialogModule, MdGridListModule, MdIconModule, MdInputModule, MdListModule, MdMenuModule, MdProgressBarModule, MdProgressCircleModule, MdRadioModule, MdRippleModule, MdSelectModule, MdSidenavModule, MdSliderModule, MdSlideToggleModule, MdSnackBarModule, MdTabsModule, MdToolbarModule, MdTooltipModule, OverlayModule, PortalModule, RtlModule];
      var MaterialRootModule = function () {
        function MaterialRootModule() {}
        MaterialRootModule = __decorate$13([_angular_core.NgModule({
          imports: [MdButtonModule.forRoot(), MdCardModule.forRoot(), MdCheckboxModule.forRoot(), MdGridListModule.forRoot(), MdInputModule.forRoot(), MdListModule.forRoot(), MdProgressBarModule.forRoot(), MdProgressCircleModule.forRoot(), MdRippleModule.forRoot(), MdSelectModule.forRoot(), MdSidenavModule.forRoot(), MdTabsModule.forRoot(), MdToolbarModule.forRoot(), PortalModule.forRoot(), RtlModule.forRoot(), MdButtonToggleModule.forRoot(), MdDialogModule.forRoot(), MdIconModule.forRoot(), MdMenuModule.forRoot(), MdRadioModule.forRoot(), MdSliderModule.forRoot(), MdSlideToggleModule.forRoot(), MdSnackBarModule.forRoot(), MdTooltipModule.forRoot(), OverlayModule.forRoot()],
          exports: MATERIAL_MODULES,
          providers: [MdLiveAnnouncer]
        }), __metadata$13('design:paramtypes', [])], MaterialRootModule);
        return MaterialRootModule;
      }();
      var MaterialModule = function () {
        function MaterialModule() {}
        MaterialModule.forRoot = function () {
          return { ngModule: MaterialRootModule };
        };
        MaterialModule = __decorate$13([_angular_core.NgModule({
          imports: MATERIAL_MODULES,
          exports: MATERIAL_MODULES
        }), __metadata$13('design:paramtypes', [])], MaterialModule);
        return MaterialModule;
      }();
      exports.MdCoreModule = MdCoreModule;
      exports.Dir = Dir;
      exports.RtlModule = RtlModule;
      exports.Portal = Portal;
      exports.BasePortalHost = BasePortalHost;
      exports.ComponentPortal = ComponentPortal;
      exports.TemplatePortal = TemplatePortal;
      exports.PortalHostDirective = PortalHostDirective;
      exports.TemplatePortalDirective = TemplatePortalDirective;
      exports.PortalModule = PortalModule;
      exports.DomPortalHost = DomPortalHost;
      exports.Overlay = Overlay;
      exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;
      exports.OverlayContainer = OverlayContainer;
      exports.OverlayRef = OverlayRef;
      exports.OverlayState = OverlayState;
      exports.ConnectedOverlayDirective = ConnectedOverlayDirective;
      exports.OverlayOrigin = OverlayOrigin;
      exports.OverlayModule = OverlayModule;
      exports.MdGestureConfig = MdGestureConfig;
      exports.MdRipple = MdRipple;
      exports.MdRippleModule = MdRippleModule;
      exports.MdLiveAnnouncer = MdLiveAnnouncer;
      exports.LIVE_ANNOUNCER_ELEMENT_TOKEN = LIVE_ANNOUNCER_ELEMENT_TOKEN;
      exports.FocusTrap = FocusTrap;
      exports.InteractivityChecker = InteractivityChecker;
      exports.MdUniqueSelectionDispatcher = MdUniqueSelectionDispatcher;
      exports.MdLineModule = MdLineModule;
      exports.MdLine = MdLine;
      exports.MdLineSetter = MdLineSetter;
      exports.applyCssTransform = applyCssTransform;
      exports.MdError = MdError;
      exports.BooleanFieldValue = BooleanFieldValue;
      exports.ConnectedPositionStrategy = ConnectedPositionStrategy;
      exports.ConnectionPositionPair = ConnectionPositionPair;
      exports.UP_ARROW = UP_ARROW;
      exports.DOWN_ARROW = DOWN_ARROW;
      exports.RIGHT_ARROW = RIGHT_ARROW;
      exports.LEFT_ARROW = LEFT_ARROW;
      exports.ENTER = ENTER;
      exports.TAB = TAB;
      exports.MaterialRootModule = MaterialRootModule;
      exports.MaterialModule = MaterialModule;
      exports.MdButton = MdButton;
      exports.MdAnchor = MdAnchor;
      exports.MdButtonModule = MdButtonModule;
      exports.MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;
      exports.MdButtonToggleChange = MdButtonToggleChange;
      exports.MdButtonToggleGroup = MdButtonToggleGroup;
      exports.MdButtonToggleGroupMultiple = MdButtonToggleGroupMultiple;
      exports.MdButtonToggle = MdButtonToggle;
      exports.MdButtonToggleModule = MdButtonToggleModule;
      exports.MdCardContent = MdCardContent;
      exports.MdCardTitle = MdCardTitle;
      exports.MdCardSubtitle = MdCardSubtitle;
      exports.MdCardActions = MdCardActions;
      exports.MdCardFooter = MdCardFooter;
      exports.MdCard = MdCard;
      exports.MdCardHeader = MdCardHeader;
      exports.MdCardTitleGroup = MdCardTitleGroup;
      exports.MdCardModule = MdCardModule;
      exports.MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = MD_CHECKBOX_CONTROL_VALUE_ACCESSOR;
      exports.MdCheckboxChange = MdCheckboxChange;
      exports.MdCheckbox = MdCheckbox;
      exports.MdCheckboxModule = MdCheckboxModule;
      exports.MdDialog = MdDialog;
      exports.MdDialogModule = MdDialogModule;
      exports.MdDialogConfig = MdDialogConfig;
      exports.MdDialogRef = MdDialogRef;
      exports.MdGridList = MdGridList;
      exports.MdGridListModule = MdGridListModule;
      exports.MdIconInvalidNameError = MdIconInvalidNameError;
      exports.MdIcon = MdIcon;
      exports.MdIconModule = MdIconModule;
      exports.MdIconRegistry = MdIconRegistry;
      exports.MD_INPUT_CONTROL_VALUE_ACCESSOR = MD_INPUT_CONTROL_VALUE_ACCESSOR;
      exports.MdInputPlaceholderConflictError = MdInputPlaceholderConflictError;
      exports.MdInputUnsupportedTypeError = MdInputUnsupportedTypeError;
      exports.MdInputDuplicatedHintError = MdInputDuplicatedHintError;
      exports.MdPlaceholder = MdPlaceholder;
      exports.MdHint = MdHint;
      exports.MdInput = MdInput;
      exports.MdInputModule = MdInputModule;
      exports.MdListDivider = MdListDivider;
      exports.MdList = MdList;
      exports.MdListAvatar = MdListAvatar;
      exports.MdListItem = MdListItem;
      exports.MdListModule = MdListModule;
      exports.MdMenuModule = MdMenuModule;
      exports.MdMenu = MdMenu;
      exports.MdMenuItem = MdMenuItem;
      exports.MdMenuTrigger = MdMenuTrigger;
      exports.MdProgressBar = MdProgressBar;
      exports.MdProgressBarModule = MdProgressBarModule;
      exports.MdProgressCircle = MdProgressCircle;
      exports.MdSpinner = MdSpinner;
      exports.MdProgressCircleModule = MdProgressCircleModule;
      exports.MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR;
      exports.MdRadioChange = MdRadioChange;
      exports.MdRadioGroup = MdRadioGroup;
      exports.MdRadioButton = MdRadioButton;
      exports.MdRadioModule = MdRadioModule;
      exports.MdSelectModule = MdSelectModule;
      exports.MdSelect = MdSelect;
      exports.MdDuplicatedSidenavError = MdDuplicatedSidenavError;
      exports.MdSidenav = MdSidenav;
      exports.MdSidenavLayout = MdSidenavLayout;
      exports.MdSidenavModule = MdSidenavModule;
      exports.MD_SLIDER_VALUE_ACCESSOR = MD_SLIDER_VALUE_ACCESSOR;
      exports.MdSlider = MdSlider;
      exports.SliderRenderer = SliderRenderer;
      exports.MdSliderModule = MdSliderModule;
      exports.MD_SLIDE_TOGGLE_VALUE_ACCESSOR = MD_SLIDE_TOGGLE_VALUE_ACCESSOR;
      exports.MdSlideToggleChange = MdSlideToggleChange;
      exports.MdSlideToggle = MdSlideToggle;
      exports.MdSlideToggleModule = MdSlideToggleModule;
      exports.MdSnackBar = MdSnackBar;
      exports.MdSnackBarModule = MdSnackBarModule;
      exports.MdSnackBarRef = MdSnackBarRef;
      exports.MdSnackBarConfig = MdSnackBarConfig;
      exports.MdTabChangeEvent = MdTabChangeEvent;
      exports.MdTab = MdTab;
      exports.MdTabGroup = MdTabGroup;
      exports.MdTabsModule = MdTabsModule;
      exports.MdToolbarRow = MdToolbarRow;
      exports.MdToolbar = MdToolbar;
      exports.MdToolbarModule = MdToolbarModule;
      exports.MdTooltip = MdTooltip;
      exports.TooltipComponent = TooltipComponent;
      exports.MdTooltipModule = MdTooltipModule;
      Object.defineProperty(exports, '__esModule', { value: true });
    });
  })($__require('35').Buffer, $__require('3'));
  return module.exports;
});
$__System.registerDynamic("3a", ["36"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("36");
  return module.exports;
});
$__System.register("3b", ["8", "3c"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, router_1, AppComponent, _a;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            }
        ],
        execute: function () {
            AppComponent = (function () {
                function AppComponent(_router) {
                    this._router = _router;
                }
                AppComponent.prototype.isChecked = function (pathToCheck) {
                    if (this._router.snapshot.firstChild) {
                        return this._router.snapshot.firstChild.url[0].path == pathToCheck;
                    }
                };
                return AppComponent;
            }());
            AppComponent = __decorate([
                core_1.Component({
                    selector: 'my-app',
                    template: "\n        <div>\n            <md-toolbar color=\"primary\">\n                <span>Angular Getting Started</span>\n            </md-toolbar>\n            <md-card>\n                <md-radio-button name=\"route\" [checked]=\"isChecked('users')\" [routerLink]=\"['/users']\">Users</md-radio-button>\n                <md-radio-button name=\"route\" [checked]=\"isChecked('usersWithDetails')\" [routerLink]=\"['/usersWithDetails']\">Users with Details</md-radio-button>\n                <md-radio-button name=\"route\" [checked]=\"isChecked('user')\" [disabled]=\"true\">User details</md-radio-button>\n            </md-card>\n            <router-outlet></router-outlet>\n        </div>\n    "
                }),
                __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object])
            ], AppComponent);
            exports_1("AppComponent", AppComponent);
        }
    };
});

$__System.register("3d", [], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var User;
    return {
        setters: [],
        execute: function () {
            User = (function () {
                function User() {
                }
                return User;
            }());
            exports_1("User", User);
        }
    };
});

$__System.register("3e", ["8", "3d"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, user_1, UserView, _a;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (user_1_1) {
                user_1 = user_1_1;
            }
        ],
        execute: function () {
            UserView = (function () {
                function UserView() {
                }
                return UserView;
            }());
            __decorate([
                core_1.Input(),
                __metadata("design:type", typeof (_a = typeof user_1.User !== "undefined" && user_1.User) === "function" && _a || Object)
            ], UserView.prototype, "user", void 0);
            UserView = __decorate([
                core_1.Component({
                    selector: 'user-view',
                    template: "\n        <div>\n            <md-card *ngIf=\"user\">\n                <md-card-title>{{user.name}}</md-card-title>   \n                <label-with-value [label]=\"'ID'\" [value]=\"user.id\"></label-with-value>\n                <label-with-value [label]=\"'Name'\" [value]=\"user.name\"></label-with-value>\n                <label-with-value [label]=\"'Username'\" [value]=\"user.username\"></label-with-value>\n                <label-with-value [label]=\"'Email'\" [value]=\"user.email\"></label-with-value>\n                <label-with-value [label]=\"'Address'\" [value]=\"user.address.street + ', ' + user.address.city\"></label-with-value>\n            </md-card>\n        </div>\n    ",
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush
                }),
                __metadata("design:paramtypes", [])
            ], UserView);
            exports_1("UserView", UserView);
        }
    };
});

$__System.register("3f", ["8"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, LabelWithValue;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            }
        ],
        execute: function () {
            LabelWithValue = (function () {
                function LabelWithValue() {
                }
                return LabelWithValue;
            }());
            __decorate([
                core_1.Input(),
                __metadata("design:type", String)
            ], LabelWithValue.prototype, "label", void 0);
            __decorate([
                core_1.Input(),
                __metadata("design:type", String)
            ], LabelWithValue.prototype, "value", void 0);
            LabelWithValue = __decorate([
                core_1.Component({
                    selector: 'label-with-value',
                    template: "<p><label>{{label}}: </label><span>{{value}}</span></p>",
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush
                }),
                __metadata("design:paramtypes", [])
            ], LabelWithValue);
            exports_1("LabelWithValue", LabelWithValue);
        }
    };
});

$__System.register("40", ["8"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, SimpleList, _a;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            }
        ],
        execute: function () {
            SimpleList = (function () {
                function SimpleList() {
                    this.current = new core_1.EventEmitter();
                    // work around a problem with changing links for items (Angular2-beta doesn't like that)
                    this.linkResultPerItem = {};
                }
                SimpleList.prototype.getContent = function (item) {
                    if (this.content) {
                        return this.content(item);
                    }
                    else {
                        return item;
                    }
                };
                SimpleList.prototype.getLink = function (item) {
                    if (this.link) {
                        return this.link(item);
                    }
                    else {
                        return null;
                    }
                };
                return SimpleList;
            }());
            __decorate([
                core_1.Input(),
                __metadata("design:type", Array)
            ], SimpleList.prototype, "list", void 0);
            __decorate([
                core_1.Input(),
                __metadata("design:type", Function)
            ], SimpleList.prototype, "content", void 0);
            __decorate([
                core_1.Input(),
                __metadata("design:type", Function)
            ], SimpleList.prototype, "link", void 0);
            __decorate([
                core_1.Output(),
                __metadata("design:type", typeof (_a = typeof core_1.EventEmitter !== "undefined" && core_1.EventEmitter) === "function" && _a || Object)
            ], SimpleList.prototype, "current", void 0);
            SimpleList = __decorate([
                core_1.Component({
                    selector: 'simple-list',
                    template: "\n        <div *ngIf=\"!list\">\n            Loading...\n        </div>\n        <div *ngIf=\"list\">\n            <md-list>\n                <md-list-item *ngFor=\"let item of list\" (mouseover)=\"current.emit(item)\" (mouseout)=\"current.emit(null)\">\n                    <div *ngIf=\"!link\">{{getContent(item)}}</div>\n                    <div *ngIf=\"link\"><a [routerLink]=\"getLink(item)\">{{getContent(item)}}</a></div>\n                </md-list-item>\n            </md-list>\n        </div>\n    "
                }),
                __metadata("design:paramtypes", [])
            ], SimpleList);
            exports_1("SimpleList", SimpleList);
        }
    };
});

$__System.register("41", ["40"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (simple_list_1_1) {
                exports_1({
                    "SimpleList": simple_list_1_1["SimpleList"]
                });
            }
        ],
        execute: function () {
        }
    };
});

$__System.register("42", ["8", "44", "43", "45", "46"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, user_service_1, angular2_redux_1, user_actions_1, users_reducer_1, UsersList, _a, _b;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (user_service_1_1) {
                user_service_1 = user_service_1_1;
            },
            function (angular2_redux_1_1) {
                angular2_redux_1 = angular2_redux_1_1;
            },
            function (user_actions_1_1) {
                user_actions_1 = user_actions_1_1;
            },
            function (users_reducer_1_1) {
                users_reducer_1 = users_reducer_1_1;
            }
        ],
        execute: function () {
            UsersList = (function () {
                function UsersList(appStore, userActions) {
                    var _this = this;
                    this.appStore = appStore;
                    this.userActions = userActions;
                    this.getContent = function (_a) {
                        var name = _a.name;
                        return name;
                    };
                    this.getLink = function (_a) {
                        var id = _a.id;
                        return ['/user', id];
                    };
                    appStore.subscribe(function (state) {
                        _this.users = users_reducer_1.getUsers(state);
                    });
                    appStore.dispatch(userActions.fetchUsers());
                }
                return UsersList;
            }());
            UsersList = __decorate([
                core_1.Component({
                    selector: 'users',
                    providers: [user_service_1.UserService],
                    template: "\n        <simple-list\n            [list]=\"users\"\n            [content]=\"getContent\"\n            [link]=\"getLink\">\n        </simple-list>\n    "
                }),
                __metadata("design:paramtypes", [typeof (_a = typeof angular2_redux_1.AppStore !== "undefined" && angular2_redux_1.AppStore) === "function" && _a || Object, typeof (_b = typeof user_actions_1.UserActions !== "undefined" && user_actions_1.UserActions) === "function" && _b || Object])
            ], UsersList);
            exports_1("UsersList", UsersList);
        }
    };
});

$__System.register("47", ["8", "43", "45", "46"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, angular2_redux_1, user_actions_1, users_reducer_1, UsersListWithDetails, _a, _b;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (angular2_redux_1_1) {
                angular2_redux_1 = angular2_redux_1_1;
            },
            function (user_actions_1_1) {
                user_actions_1 = user_actions_1_1;
            },
            function (users_reducer_1_1) {
                users_reducer_1 = users_reducer_1_1;
            }
        ],
        execute: function () {
            UsersListWithDetails = (function () {
                function UsersListWithDetails(appStore, userActions) {
                    var _this = this;
                    this.getContent = function (_a) {
                        var name = _a.name;
                        return name;
                    };
                    this.getLink = function (_a) {
                        var id = _a.id;
                        return ['/user', id];
                    };
                    this.selectCurrentUser = userActions.createDispatcher(userActions.setCurrentUser);
                    appStore.subscribe(function (state) {
                        _this.users = users_reducer_1.getUsers(state);
                        _this.currentUser = users_reducer_1.getCurrentUser(state);
                    });
                    appStore.dispatch(userActions.fetchUsers());
                }
                return UsersListWithDetails;
            }());
            UsersListWithDetails = __decorate([
                core_1.Component({
                    selector: 'users-with-details',
                    template: "\n        <md-grid-list cols=\"2\">\n            <md-grid-tile>\n                <simple-list\n                    [list]=\"users\"\n                    [content]=\"getContent\"\n                    [link]=\"getLink\"\n                    (current)=\"selectCurrentUser($event)\">\n                </simple-list>\n            </md-grid-tile>\n            <md-grid-tile>\n                <user-view *ngIf=\"currentUser\" [user]=\"currentUser\"></user-view>\n            </md-grid-tile>\n        </md-grid-list>          \n    "
                }),
                __metadata("design:paramtypes", [typeof (_a = typeof angular2_redux_1.AppStore !== "undefined" && angular2_redux_1.AppStore) === "function" && _a || Object, typeof (_b = typeof user_actions_1.UserActions !== "undefined" && user_actions_1.UserActions) === "function" && _b || Object])
            ], UsersListWithDetails);
            exports_1("UsersListWithDetails", UsersListWithDetails);
        }
    };
});

$__System.registerDynamic('48', ['10', '49'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('10');
  var ObjectUnsubscribedError_1 = $__require('49');
  var BehaviorSubject = function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
      _super.call(this);
      this._value = _value;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
      get: function () {
        return this.getValue();
      },
      enumerable: true,
      configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
      var subscription = _super.prototype._subscribe.call(this, subscriber);
      if (subscription && !subscription.closed) {
        subscriber.next(this._value);
      }
      return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
      if (this.hasError) {
        throw this.thrownError;
      } else if (this.closed) {
        throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
      } else {
        return this._value;
      }
    };
    BehaviorSubject.prototype.next = function (value) {
      _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
  }(Subject_1.Subject);
  exports.BehaviorSubject = BehaviorSubject;
  return module.exports;
});
$__System.registerDynamic("1c", ["4a"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("4a");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  return module.exports;
});
$__System.registerDynamic("4b", ["4c"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeMap_1 = $__require("4c");
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;
  return module.exports;
});
$__System.registerDynamic("4d", ["20"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require("20");
  function every(predicate, thisArg) {
    return this.lift(new EveryOperator(predicate, thisArg, this));
  }
  exports.every = every;
  var EveryOperator = function () {
    function EveryOperator(predicate, thisArg, source) {
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
      return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
  }();
  var EverySubscriber = function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.source = source;
      this.index = 0;
      this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
      this.destination.next(everyValueMatch);
      this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
      var result = false;
      try {
        result = this.predicate.call(this.thisArg, value, this.index++, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (!result) {
        this.notifyComplete(false);
      }
    };
    EverySubscriber.prototype._complete = function () {
      this.notifyComplete(true);
    };
    return EverySubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('4e', ['20', '4f'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  var EmptyError_1 = $__require('4f');
  function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
  }
  exports.first = first;
  var FirstOperator = function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
      return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
  }();
  var FirstSubscriber = function (_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
      this.index = 0;
      this.hasCompleted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
      var index = this.index++;
      if (this.predicate) {
        this._tryPredicate(value, index);
      } else {
        this._emit(value, index);
      }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index) {
      var result;
      try {
        result = this.predicate(value, index, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        this._emit(value, index);
      }
    };
    FirstSubscriber.prototype._emit = function (value, index) {
      if (this.resultSelector) {
        this._tryResultSelector(value, index);
        return;
      }
      this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
      var result;
      try {
        result = this.resultSelector(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
      var destination = this.destination;
      destination.next(value);
      destination.complete();
      this.hasCompleted = true;
    };
    FirstSubscriber.prototype._complete = function () {
      var destination = this.destination;
      if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
        destination.next(this.defaultValue);
        destination.complete();
      } else if (!this.hasCompleted) {
        destination.error(new EmptyError_1.EmptyError());
      }
    };
    return FirstSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('4c', ['17', '18'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var subscribeToResult_1 = $__require('17');
  var OuterSubscriber_1 = $__require('18');
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'number') {
      concurrent = resultSelector;
      resultSelector = null;
    }
    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
  }
  exports.mergeMap = mergeMap;
  var MergeMapOperator = function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      this.project = project;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
      return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
  }();
  exports.MergeMapOperator = MergeMapOperator;
  var MergeMapSubscriber = function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      _super.call(this, destination);
      this.project = project;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
      this.hasCompleted = false;
      this.buffer = [];
      this.active = 0;
      this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
      if (this.active < this.concurrent) {
        this._tryNext(value);
      } else {
        this.buffer.push(value);
      }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
      var result;
      var index = this.index++;
      try {
        result = this.project(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.active++;
      this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
      this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
      this.hasCompleted = true;
      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      if (this.resultSelector) {
        this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } else {
        this.destination.next(innerValue);
      }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
      var result;
      try {
        result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    };
    return MergeMapSubscriber;
  }(OuterSubscriber_1.OuterSubscriber);
  exports.MergeMapSubscriber = MergeMapSubscriber;
  return module.exports;
});
$__System.registerDynamic('50', ['20'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  function reduce(accumulator, seed) {
    return this.lift(new ReduceOperator(accumulator, seed));
  }
  exports.reduce = reduce;
  var ReduceOperator = function () {
    function ReduceOperator(accumulator, seed) {
      this.accumulator = accumulator;
      this.seed = seed;
    }
    ReduceOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
    };
    return ReduceOperator;
  }();
  exports.ReduceOperator = ReduceOperator;
  var ReduceSubscriber = function (_super) {
    __extends(ReduceSubscriber, _super);
    function ReduceSubscriber(destination, accumulator, seed) {
      _super.call(this, destination);
      this.accumulator = accumulator;
      this.hasValue = false;
      this.acc = seed;
      this.accumulator = accumulator;
      this.hasSeed = typeof seed !== 'undefined';
    }
    ReduceSubscriber.prototype._next = function (value) {
      if (this.hasValue || (this.hasValue = this.hasSeed)) {
        this._tryReduce(value);
      } else {
        this.acc = value;
        this.hasValue = true;
      }
    };
    ReduceSubscriber.prototype._tryReduce = function (value) {
      var result;
      try {
        result = this.accumulator(this.acc, value);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.acc = result;
    };
    ReduceSubscriber.prototype._complete = function () {
      if (this.hasValue || this.hasSeed) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    };
    return ReduceSubscriber;
  }(Subscriber_1.Subscriber);
  exports.ReduceSubscriber = ReduceSubscriber;
  return module.exports;
});
$__System.registerDynamic('2b', ['18', '17'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('18');
  var subscribeToResult_1 = $__require('17');
  function _catch(selector) {
    var operator = new CatchOperator(selector);
    var caught = this.lift(operator);
    return operator.caught = caught;
  }
  exports._catch = _catch;
  var CatchOperator = function () {
    function CatchOperator(selector) {
      this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
  }();
  var CatchSubscriber = function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
      _super.call(this, destination);
      this.selector = selector;
      this.caught = caught;
    }
    CatchSubscriber.prototype.error = function (err) {
      if (!this.isStopped) {
        var result = void 0;
        try {
          result = this.selector(err, this.caught);
        } catch (err) {
          this.destination.error(err);
          return;
        }
        this.unsubscribe();
        this.destination.remove(this);
        subscribeToResult_1.subscribeToResult(this, result);
      }
    };
    return CatchSubscriber;
  }(OuterSubscriber_1.OuterSubscriber);
  return module.exports;
});
$__System.registerDynamic("51", ["52"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("52");
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  return module.exports;
});
$__System.registerDynamic("12", ["53"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("53");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  return module.exports;
});
$__System.registerDynamic('4f', [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
$__System.registerDynamic('54', ['20', '4f'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  var EmptyError_1 = $__require('4f');
  function last(predicate, resultSelector, defaultValue) {
    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
  }
  exports.last = last;
  var LastOperator = function () {
    function LastOperator(predicate, resultSelector, defaultValue, source) {
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
    }
    LastOperator.prototype.call = function (observer, source) {
      return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return LastOperator;
  }();
  var LastSubscriber = function (_super) {
    __extends(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
      this.hasValue = false;
      this.index = 0;
      if (typeof defaultValue !== 'undefined') {
        this.lastValue = defaultValue;
        this.hasValue = true;
      }
    }
    LastSubscriber.prototype._next = function (value) {
      var index = this.index++;
      if (this.predicate) {
        this._tryPredicate(value, index);
      } else {
        if (this.resultSelector) {
          this._tryResultSelector(value, index);
          return;
        }
        this.lastValue = value;
        this.hasValue = true;
      }
    };
    LastSubscriber.prototype._tryPredicate = function (value, index) {
      var result;
      try {
        result = this.predicate(value, index, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        if (this.resultSelector) {
          this._tryResultSelector(value, index);
          return;
        }
        this.lastValue = value;
        this.hasValue = true;
      }
    };
    LastSubscriber.prototype._tryResultSelector = function (value, index) {
      var result;
      try {
        result = this.resultSelector(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.lastValue = result;
      this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function () {
      var destination = this.destination;
      if (this.hasValue) {
        destination.next(this.lastValue);
        destination.complete();
      } else {
        destination.error(new EmptyError_1.EmptyError());
      }
    };
    return LastSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic("18", ["20"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require("20");
  var OuterSubscriber = function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
      _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
      this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
      this.destination.complete();
    };
    return OuterSubscriber;
  }(Subscriber_1.Subscriber);
  exports.OuterSubscriber = OuterSubscriber;
  return module.exports;
});
$__System.registerDynamic("55", ["20"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require("20");
  var InnerSubscriber = function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
      _super.call(this);
      this.parent = parent;
      this.outerValue = outerValue;
      this.outerIndex = outerIndex;
      this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
      this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
      this.parent.notifyError(error, this);
      this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
      this.parent.notifyComplete(this);
      this.unsubscribe();
    };
    return InnerSubscriber;
  }(Subscriber_1.Subscriber);
  exports.InnerSubscriber = InnerSubscriber;
  return module.exports;
});
$__System.registerDynamic('17', ['e', '16', '56', '11', '57', '55', '58'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var isArray_1 = $__require('16');
  var isPromise_1 = $__require('56');
  var Observable_1 = $__require('11');
  var iterator_1 = $__require('57');
  var InnerSubscriber_1 = $__require('55');
  var observable_1 = $__require('58');
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
      return null;
    }
    if (result instanceof Observable_1.Observable) {
      if (result._isScalar) {
        destination.next(result.value);
        destination.complete();
        return null;
      } else {
        return result.subscribe(destination);
      }
    }
    if (isArray_1.isArray(result)) {
      for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
        destination.next(result[i]);
      }
      if (!destination.closed) {
        destination.complete();
      }
    } else if (isPromise_1.isPromise(result)) {
      result.then(function (value) {
        if (!destination.closed) {
          destination.next(value);
          destination.complete();
        }
      }, function (err) {
        return destination.error(err);
      }).then(null, function (err) {
        root_1.root.setTimeout(function () {
          throw err;
        });
      });
      return destination;
    } else if (typeof result[iterator_1.$$iterator] === 'function') {
      var iterator = result[iterator_1.$$iterator]();
      do {
        var item = iterator.next();
        if (item.done) {
          destination.complete();
          break;
        }
        destination.next(item.value);
        if (destination.closed) {
          break;
        }
      } while (true);
    } else if (typeof result[observable_1.$$observable] === 'function') {
      var obs = result[observable_1.$$observable]();
      if (typeof obs.subscribe !== 'function') {
        destination.error(new Error('invalid observable'));
      } else {
        return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
      }
    } else {
      destination.error(new TypeError('unknown type returned'));
    }
    return null;
  }
  exports.subscribeToResult = subscribeToResult;
  return module.exports;
});
$__System.registerDynamic('52', ['18', '17'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('18');
  var subscribeToResult_1 = $__require('17');
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    return this.lift(new MergeAllOperator(concurrent));
  }
  exports.mergeAll = mergeAll;
  var MergeAllOperator = function () {
    function MergeAllOperator(concurrent) {
      this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function (observer, source) {
      return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
  }();
  exports.MergeAllOperator = MergeAllOperator;
  var MergeAllSubscriber = function (_super) {
    __extends(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
      _super.call(this, destination);
      this.concurrent = concurrent;
      this.hasCompleted = false;
      this.buffer = [];
      this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function (observable) {
      if (this.active < this.concurrent) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, observable));
      } else {
        this.buffer.push(observable);
      }
    };
    MergeAllSubscriber.prototype._complete = function () {
      this.hasCompleted = true;
      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }
    };
    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    };
    return MergeAllSubscriber;
  }(OuterSubscriber_1.OuterSubscriber);
  exports.MergeAllSubscriber = MergeAllSubscriber;
  return module.exports;
});
$__System.registerDynamic("1e", ["20"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require("20");
  function filter(predicate, thisArg) {
    return this.lift(new FilterOperator(predicate, thisArg));
  }
  exports.filter = filter;
  var FilterOperator = function () {
    function FilterOperator(predicate, thisArg) {
      this.predicate = predicate;
      this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
  }();
  var FilterSubscriber = function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.count = 0;
      this.predicate = predicate;
    }
    FilterSubscriber.prototype._next = function (value) {
      var result;
      try {
        result = this.predicate.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        this.destination.next(value);
      }
    };
    return FilterSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('59', ['39', '8', '48', '10', '5a', '1c', '4b', '4d', '4e', '5b', '4c', '50', '11', '2b', '51', '4f', '12', '54', '52', 'b', '1e', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('39'), $__require('8'), $__require('48'), $__require('10'), $__require('5a'), $__require('1c'), $__require('4b'), $__require('4d'), $__require('4e'), $__require('5b'), $__require('4c'), $__require('50'), $__require('11'), $__require('2b'), $__require('51'), $__require('4f'), $__require('12'), $__require('54'), $__require('52'), $__require('b'), $__require('1e')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/every', 'rxjs/operator/first', 'rxjs/operator/map', 'rxjs/operator/mergeMap', 'rxjs/operator/reduce', 'rxjs/Observable', 'rxjs/operator/catch', 'rxjs/operator/concatAll', 'rxjs/util/EmptyError', 'rxjs/observable/fromPromise', 'rxjs/operator/last', 'rxjs/operator/mergeAll', '@angular/platform-browser', 'rxjs/operator/filter'], factory) : factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.ng.platformBrowser, global.Rx.Observable.prototype);
    })(this, function (exports, _angular_common, _angular_core, rxjs_BehaviorSubject, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_concatMap, rxjs_operator_every, rxjs_operator_first, rxjs_operator_map, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_util_EmptyError, rxjs_observable_fromPromise, l, rxjs_operator_mergeAll, _angular_platformBrowser, rxjs_operator_filter) {
      'use strict';

      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var PRIMARY_OUTLET = 'primary';
      var NavigationCancelingError = function (_super) {
        __extends(NavigationCancelingError, _super);
        function NavigationCancelingError(message) {
          _super.call(this, message);
          this.message = message;
          this.stack = new Error(message).stack;
        }
        NavigationCancelingError.prototype.toString = function () {
          return this.message;
        };
        return NavigationCancelingError;
      }(Error);
      function defaultUrlMatcher(segments, segmentGroup, route) {
        var path = route.path;
        var parts = path.split('/');
        var posParams = {};
        var consumed = [];
        var currentIndex = 0;
        for (var i = 0; i < parts.length; ++i) {
          if (currentIndex >= segments.length) return null;
          var current = segments[currentIndex];
          var p = parts[i];
          var isPosParam = p.startsWith(':');
          if (!isPosParam && p !== current.path) return null;
          if (isPosParam) {
            posParams[p.substring(1)] = current;
          }
          consumed.push(current);
          currentIndex++;
        }
        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
          return null;
        } else {
          return {
            consumed: consumed,
            posParams: posParams
          };
        }
      }
      function shallowEqualArrays(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
          if (!shallowEqual(a[i], b[i])) return false;
        }
        return true;
      }
      function shallowEqual(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) {
          return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
          key = k1[i];
          if (a[key] !== b[key]) {
            return false;
          }
        }
        return true;
      }
      function flatten(a) {
        var target = [];
        for (var i = 0; i < a.length; ++i) {
          for (var j = 0; j < a[i].length; ++j) {
            target.push(a[i][j]);
          }
        }
        return target;
      }
      function last(a) {
        return a.length > 0 ? a[a.length - 1] : null;
      }
      function merge(m1, m2) {
        var m = {};
        for (var attr in m1) {
          if (m1.hasOwnProperty(attr)) {
            m[attr] = m1[attr];
          }
        }
        for (var attr in m2) {
          if (m2.hasOwnProperty(attr)) {
            m[attr] = m2[attr];
          }
        }
        return m;
      }
      function forEach(map, callback) {
        for (var prop in map) {
          if (map.hasOwnProperty(prop)) {
            callback(map[prop], prop);
          }
        }
      }
      function waitForMap(obj, fn) {
        var waitFor = [];
        var res = {};
        forEach(obj, function (a, k) {
          if (k === PRIMARY_OUTLET) {
            waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {
              res[k] = _;
              return _;
            }));
          }
        });
        forEach(obj, function (a, k) {
          if (k !== PRIMARY_OUTLET) {
            waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {
              res[k] = _;
              return _;
            }));
          }
        });
        if (waitFor.length > 0) {
          var concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));
          var last$ = l.last.call(concatted$);
          return rxjs_operator_map.map.call(last$, function () {
            return res;
          });
        } else {
          return rxjs_observable_of.of(res);
        }
      }
      function andObservables(observables) {
        var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
        return rxjs_operator_every.every.call(merged$, function (result) {
          return result === true;
        });
      }
      function wrapIntoObservable(value) {
        if (value instanceof rxjs_Observable.Observable) {
          return value;
        } else if (value instanceof Promise) {
          return rxjs_observable_fromPromise.fromPromise(value);
        } else {
          return rxjs_observable_of.of(value);
        }
      }
      var ROUTES = new _angular_core.OpaqueToken('ROUTES');
      var LoadedRouterConfig = function () {
        function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {
          this.routes = routes;
          this.injector = injector;
          this.factoryResolver = factoryResolver;
          this.injectorFactory = injectorFactory;
        }
        return LoadedRouterConfig;
      }();
      var RouterConfigLoader = function () {
        function RouterConfigLoader(loader, compiler) {
          this.loader = loader;
          this.compiler = compiler;
        }
        RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {
          return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function (r) {
            var ref = r.create(parentInjector);
            var injectorFactory = function (parent) {
              return r.create(parent).injector;
            };
            return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);
          });
        };
        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
          var _this = this;
          if (typeof loadChildren === 'string') {
            return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
          } else {
            var offlineMode_1 = this.compiler instanceof _angular_core.Compiler;
            return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) {
              return offlineMode_1 ? rxjs_observable_of.of(t) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
            });
          }
        };
        return RouterConfigLoader;
      }();
      function createEmptyUrlTree() {
        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
      }
      function containsTree(container, containee, exact) {
        if (exact) {
          return equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root);
        } else {
          return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);
        }
      }
      function equalQueryParams(container, containee) {
        return shallowEqual(container, containee);
      }
      function equalSegmentGroups(container, containee) {
        if (!equalPath(container.segments, containee.segments)) return false;
        if (container.numberOfChildren !== containee.numberOfChildren) return false;
        for (var c in containee.children) {
          if (!container.children[c]) return false;
          if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;
        }
        return true;
      }
      function containsQueryParams(container, containee) {
        return Object.keys(containee) <= Object.keys(container) && Object.keys(containee).every(function (key) {
          return containee[key] === container[key];
        });
      }
      function containsSegmentGroup(container, containee) {
        return containsSegmentGroupHelper(container, containee, containee.segments);
      }
      function containsSegmentGroupHelper(container, containee, containeePaths) {
        if (container.segments.length > containeePaths.length) {
          var current = container.segments.slice(0, containeePaths.length);
          if (!equalPath(current, containeePaths)) return false;
          if (containee.hasChildren()) return false;
          return true;
        } else if (container.segments.length === containeePaths.length) {
          if (!equalPath(container.segments, containeePaths)) return false;
          for (var c in containee.children) {
            if (!container.children[c]) return false;
            if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;
          }
          return true;
        } else {
          var current = containeePaths.slice(0, container.segments.length);
          var next = containeePaths.slice(container.segments.length);
          if (!equalPath(container.segments, current)) return false;
          if (!container.children[PRIMARY_OUTLET]) return false;
          return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
        }
      }
      var UrlTree = function () {
        function UrlTree(root, queryParams, fragment) {
          this.root = root;
          this.queryParams = queryParams;
          this.fragment = fragment;
        }
        UrlTree.prototype.toString = function () {
          return new DefaultUrlSerializer().serialize(this);
        };
        return UrlTree;
      }();
      var UrlSegmentGroup = function () {
        function UrlSegmentGroup(segments, children) {
          var _this = this;
          this.segments = segments;
          this.children = children;
          this.parent = null;
          forEach(children, function (v, k) {
            return v.parent = _this;
          });
        }
        UrlSegmentGroup.prototype.hasChildren = function () {
          return this.numberOfChildren > 0;
        };
        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
          get: function () {
            return Object.keys(this.children).length;
          },
          enumerable: true,
          configurable: true
        });
        UrlSegmentGroup.prototype.toString = function () {
          return serializePaths(this);
        };
        return UrlSegmentGroup;
      }();
      var UrlSegment = function () {
        function UrlSegment(path, parameters) {
          this.path = path;
          this.parameters = parameters;
        }
        UrlSegment.prototype.toString = function () {
          return serializePath(this);
        };
        return UrlSegment;
      }();
      function equalSegments(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
          if (a[i].path !== b[i].path) return false;
          if (!shallowEqual(a[i].parameters, b[i].parameters)) return false;
        }
        return true;
      }
      function equalPath(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
          if (a[i].path !== b[i].path) return false;
        }
        return true;
      }
      function mapChildrenIntoArray(segment, fn) {
        var res = [];
        forEach(segment.children, function (child, childOutlet) {
          if (childOutlet === PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
          }
        });
        forEach(segment.children, function (child, childOutlet) {
          if (childOutlet !== PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
          }
        });
        return res;
      }
      var UrlSerializer = function () {
        function UrlSerializer() {}
        return UrlSerializer;
      }();
      var DefaultUrlSerializer = function () {
        function DefaultUrlSerializer() {}
        DefaultUrlSerializer.prototype.parse = function (url) {
          var p = new UrlParser(url);
          return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        };
        DefaultUrlSerializer.prototype.serialize = function (tree) {
          var segment = "/" + serializeSegment(tree.root, true);
          var query = serializeQueryParams(tree.queryParams);
          var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
          return "" + segment + query + fragment;
        };
        return DefaultUrlSerializer;
      }();
      function serializePaths(segment) {
        return segment.segments.map(function (p) {
          return serializePath(p);
        }).join('/');
      }
      function serializeSegment(segment, root) {
        if (segment.hasChildren() && root) {
          var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
          var children_1 = [];
          forEach(segment.children, function (v, k) {
            if (k !== PRIMARY_OUTLET) {
              children_1.push(k + ":" + serializeSegment(v, false));
            }
          });
          if (children_1.length > 0) {
            return primary + "(" + children_1.join('//') + ")";
          } else {
            return "" + primary;
          }
        } else if (segment.hasChildren() && !root) {
          var children = mapChildrenIntoArray(segment, function (v, k) {
            if (k === PRIMARY_OUTLET) {
              return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
            } else {
              return [k + ":" + serializeSegment(v, false)];
            }
          });
          return serializePaths(segment) + "/(" + children.join('//') + ")";
        } else {
          return serializePaths(segment);
        }
      }
      function encode(s) {
        return encodeURIComponent(s);
      }
      function decode(s) {
        return decodeURIComponent(s);
      }
      function serializePath(path) {
        return "" + encode(path.path) + serializeParams(path.parameters);
      }
      function serializeParams(params) {
        return pairs(params).map(function (p) {
          return ";" + encode(p.first) + "=" + encode(p.second);
        }).join('');
      }
      function serializeQueryParams(params) {
        var strs = pairs(params).map(function (p) {
          return encode(p.first) + "=" + encode(p.second);
        });
        return strs.length > 0 ? "?" + strs.join("&") : '';
      }
      var Pair = function () {
        function Pair(first, second) {
          this.first = first;
          this.second = second;
        }
        return Pair;
      }();
      function pairs(obj) {
        var res = [];
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) {
            res.push(new Pair(prop, obj[prop]));
          }
        }
        return res;
      }
      var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
      function matchSegments(str) {
        SEGMENT_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
      }
      var QUERY_PARAM_RE = /^[^=\?&#]+/;
      function matchQueryParams(str) {
        QUERY_PARAM_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
      }
      var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
      function matchUrlQueryParamValue(str) {
        QUERY_PARAM_VALUE_RE.lastIndex = 0;
        var match = str.match(QUERY_PARAM_VALUE_RE);
        return match ? match[0] : '';
      }
      var UrlParser = function () {
        function UrlParser(url) {
          this.url = url;
          this.remaining = url;
        }
        UrlParser.prototype.peekStartsWith = function (str) {
          return this.remaining.startsWith(str);
        };
        UrlParser.prototype.capture = function (str) {
          if (!this.remaining.startsWith(str)) {
            throw new Error("Expected \"" + str + "\".");
          }
          this.remaining = this.remaining.substring(str.length);
        };
        UrlParser.prototype.parseRootSegment = function () {
          if (this.remaining.startsWith('/')) {
            this.capture('/');
          }
          if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
            return new UrlSegmentGroup([], {});
          } else {
            return new UrlSegmentGroup([], this.parseChildren());
          }
        };
        UrlParser.prototype.parseChildren = function () {
          if (this.remaining.length == 0) {
            return {};
          }
          if (this.peekStartsWith('/')) {
            this.capture('/');
          }
          var paths = [];
          if (!this.peekStartsWith('(')) {
            paths.push(this.parseSegments());
          }
          while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
            this.capture('/');
            paths.push(this.parseSegments());
          }
          var children = {};
          if (this.peekStartsWith('/(')) {
            this.capture('/');
            children = this.parseParens(true);
          }
          var res = {};
          if (this.peekStartsWith('(')) {
            res = this.parseParens(false);
          }
          if (paths.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
          }
          return res;
        };
        UrlParser.prototype.parseSegments = function () {
          var path = matchSegments(this.remaining);
          if (path === '' && this.peekStartsWith(';')) {
            throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
          }
          this.capture(path);
          var matrixParams = {};
          if (this.peekStartsWith(';')) {
            matrixParams = this.parseMatrixParams();
          }
          return new UrlSegment(decode(path), matrixParams);
        };
        UrlParser.prototype.parseQueryParams = function () {
          var params = {};
          if (this.peekStartsWith('?')) {
            this.capture('?');
            this.parseQueryParam(params);
            while (this.remaining.length > 0 && this.peekStartsWith('&')) {
              this.capture('&');
              this.parseQueryParam(params);
            }
          }
          return params;
        };
        UrlParser.prototype.parseFragment = function () {
          if (this.peekStartsWith('#')) {
            return decodeURI(this.remaining.substring(1));
          } else {
            return null;
          }
        };
        UrlParser.prototype.parseMatrixParams = function () {
          var params = {};
          while (this.remaining.length > 0 && this.peekStartsWith(';')) {
            this.capture(';');
            this.parseParam(params);
          }
          return params;
        };
        UrlParser.prototype.parseParam = function (params) {
          var key = matchSegments(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          var value = '';
          if (this.peekStartsWith('=')) {
            this.capture('=');
            var valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseQueryParam = function (params) {
          var key = matchQueryParams(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          var value = '';
          if (this.peekStartsWith('=')) {
            this.capture('=');
            var valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseParens = function (allowPrimary) {
          var segments = {};
          this.capture('(');
          while (!this.peekStartsWith(')') && this.remaining.length > 0) {
            var path = matchSegments(this.remaining);
            var next = this.remaining[path.length];
            if (next !== '/' && next !== ')' && next !== ';') {
              throw new Error("Cannot parse url '" + this.url + "'");
            }
            var outletName = void 0;
            if (path.indexOf(':') > -1) {
              outletName = path.substr(0, path.indexOf(':'));
              this.capture(outletName);
              this.capture(':');
            } else if (allowPrimary) {
              outletName = PRIMARY_OUTLET;
            }
            var children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
            if (this.peekStartsWith('//')) {
              this.capture('//');
            }
          }
          this.capture(')');
          return segments;
        };
        return UrlParser;
      }();
      var NoMatch = function () {
        function NoMatch(segmentGroup) {
          if (segmentGroup === void 0) {
            segmentGroup = null;
          }
          this.segmentGroup = segmentGroup;
        }
        return NoMatch;
      }();
      var AbsoluteRedirect = function () {
        function AbsoluteRedirect(segments) {
          this.segments = segments;
        }
        return AbsoluteRedirect;
      }();
      function noMatch(segmentGroup) {
        return new rxjs_Observable.Observable(function (obs) {
          return obs.error(new NoMatch(segmentGroup));
        });
      }
      function absoluteRedirect(segments) {
        return new rxjs_Observable.Observable(function (obs) {
          return obs.error(new AbsoluteRedirect(segments));
        });
      }
      function canLoadFails(route) {
        return new rxjs_Observable.Observable(function (obs) {
          return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
        });
      }
      function applyRedirects(injector, configLoader, urlTree, config) {
        return new ApplyRedirects(injector, configLoader, urlTree, config).apply();
      }
      var ApplyRedirects = function () {
        function ApplyRedirects(injector, configLoader, urlTree, config) {
          this.injector = injector;
          this.configLoader = configLoader;
          this.urlTree = urlTree;
          this.config = config;
          this.allowRedirects = true;
        }
        ApplyRedirects.prototype.apply = function () {
          var _this = this;
          var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
          var urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {
            return _this.createUrlTree(rootSegmentGroup);
          });
          return rxjs_operator_catch._catch.call(urlTrees$, function (e) {
            if (e instanceof AbsoluteRedirect) {
              _this.allowRedirects = false;
              var group = new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = new UrlSegmentGroup(e.segments, {}), _a));
              return _this.match(group);
            } else if (e instanceof NoMatch) {
              throw _this.noMatchError(e);
            } else {
              throw e;
            }
            var _a;
          });
        };
        ApplyRedirects.prototype.match = function (segmentGroup) {
          var _this = this;
          var expanded$ = this.expandSegmentGroup(this.injector, this.config, segmentGroup, PRIMARY_OUTLET);
          var mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {
            return _this.createUrlTree(rootSegmentGroup);
          });
          return rxjs_operator_catch._catch.call(mapped$, function (e) {
            if (e instanceof NoMatch) {
              throw _this.noMatchError(e);
            } else {
              throw e;
            }
          });
        };
        ApplyRedirects.prototype.noMatchError = function (e) {
          return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
        };
        ApplyRedirects.prototype.createUrlTree = function (rootCandidate) {
          var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
          return new UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);
          var _a;
        };
        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {
          if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function (children) {
              return new UrlSegmentGroup([], children);
            });
          } else {
            return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
          }
        };
        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {
          var _this = this;
          return waitForMap(segmentGroup.children, function (childOutlet, child) {
            return _this.expandSegmentGroup(injector, routes, child, childOutlet);
          });
        };
        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {
          var _this = this;
          var routes$ = rxjs_observable_of.of.apply(void 0, routes);
          var processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {
            var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
            return rxjs_operator_catch._catch.call(expanded$, function (e) {
              if (e instanceof NoMatch) return rxjs_observable_of.of(null);else throw e;
            });
          });
          var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
          var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) {
            return !!s;
          });
          return rxjs_operator_catch._catch.call(first$, function (e, _) {
            if (e instanceof rxjs_util_EmptyError.EmptyError) {
              if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                return rxjs_observable_of.of(new UrlSegmentGroup([], {}));
              } else {
                throw new NoMatch(segmentGroup);
              }
            } else {
              throw e;
            }
          });
        };
        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
          return segments.length === 0 && !segmentGroup.children[outlet];
        };
        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
          if (getOutlet$1(route) !== outlet) return noMatch(segmentGroup);
          if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) return noMatch(segmentGroup);
          if (route.redirectTo === undefined) {
            return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
          } else {
            return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
          }
        };
        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
          if (route.path === '**') {
            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
          } else {
            return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
          }
        };
        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {
          var newSegments = applyRedirectCommands([], route.redirectTo, {});
          if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newSegments);
          } else {
            var group = new UrlSegmentGroup(newSegments, {});
            return this.expandSegment(injector, group, routes, newSegments, outlet, false);
          }
        };
        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
          var _a = match(segmentGroup, route, segments),
              matched = _a.matched,
              consumedSegments = _a.consumedSegments,
              lastChild = _a.lastChild,
              positionalParamSegments = _a.positionalParamSegments;
          if (!matched) return noMatch(segmentGroup);
          var newSegments = applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
          if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newSegments);
          } else {
            return this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
          }
        };
        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {
          var _this = this;
          if (route.path === '**') {
            if (route.loadChildren) {
              return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function (r) {
                route._loadedConfig = r;
                return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
              });
            } else {
              return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
            }
          } else {
            var _a = match(rawSegmentGroup, route, segments),
                matched = _a.matched,
                consumedSegments_1 = _a.consumedSegments,
                lastChild = _a.lastChild;
            if (!matched) return noMatch(rawSegmentGroup);
            var rawSlicedSegments_1 = segments.slice(lastChild);
            var childConfig$ = this.getChildConfig(injector, route);
            return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {
              var childInjector = routerConfig.injector;
              var childConfig = routerConfig.routes;
              var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig),
                  segmentGroup = _a.segmentGroup,
                  slicedSegments = _a.slicedSegments;
              if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
                return rxjs_operator_map.map.call(expanded$, function (children) {
                  return new UrlSegmentGroup(consumedSegments_1, children);
                });
              } else if (childConfig.length === 0 && slicedSegments.length === 0) {
                return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));
              } else {
                var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
                return rxjs_operator_map.map.call(expanded$, function (cs) {
                  return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
                });
              }
            });
          }
        };
        ApplyRedirects.prototype.getChildConfig = function (injector, route) {
          var _this = this;
          if (route.children) {
            return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));
          } else if (route.loadChildren) {
            return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function (shouldLoad) {
              if (shouldLoad) {
                if (route._loadedConfig) {
                  return rxjs_observable_of.of(route._loadedConfig);
                } else {
                  return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {
                    route._loadedConfig = r;
                    return r;
                  });
                }
              } else {
                return canLoadFails(route);
              }
            });
          } else {
            return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));
          }
        };
        return ApplyRedirects;
      }();
      function runGuards(injector, route) {
        var canLoad = route.canLoad;
        if (!canLoad || canLoad.length === 0) return rxjs_observable_of.of(true);
        var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (c) {
          var guard = injector.get(c);
          if (guard.canLoad) {
            return wrapIntoObservable(guard.canLoad(route));
          } else {
            return wrapIntoObservable(guard(route));
          }
        });
        return andObservables(obs);
      }
      function match(segmentGroup, route, segments) {
        var noMatch = {
          matched: false,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
        if (route.path === '') {
          if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            return {
              matched: false,
              consumedSegments: [],
              lastChild: 0,
              positionalParamSegments: {}
            };
          } else {
            return {
              matched: true,
              consumedSegments: [],
              lastChild: 0,
              positionalParamSegments: {}
            };
          }
        }
        var matcher = route.matcher || defaultUrlMatcher;
        var res = matcher(segments, segmentGroup, route);
        if (!res) return noMatch;
        return {
          matched: true,
          consumedSegments: res.consumed,
          lastChild: res.consumed.length,
          positionalParamSegments: res.posParams
        };
      }
      function applyRedirectCommands(segments, redirectTo, posParams) {
        var r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;
        if (r === '') {
          return [];
        } else {
          return createSegments(redirectTo, r.split('/'), segments, posParams);
        }
      }
      function createSegments(redirectTo, parts, segments, posParams) {
        return parts.map(function (p) {
          return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) : findOrCreateSegment(p, segments);
        });
      }
      function findPosParam(part, posParams, redirectTo) {
        var paramName = part.substring(1);
        var pos = posParams[paramName];
        if (!pos) throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
        return pos;
      }
      function findOrCreateSegment(part, segments) {
        var idx = 0;
        for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
          var s = segments_1[_i];
          if (s.path === part) {
            segments.splice(idx);
            return s;
          }
          idx++;
        }
        return new UrlSegment(part, {});
      }
      function split(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
          var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
          return {
            segmentGroup: mergeTrivialChildren(s),
            slicedSegments: []
          };
        } else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
          var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
          return {
            segmentGroup: mergeTrivialChildren(s),
            slicedSegments: slicedSegments
          };
        } else {
          return {
            segmentGroup: segmentGroup,
            slicedSegments: slicedSegments
          };
        }
      }
      function mergeTrivialChildren(s) {
        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
          var c = s.children[PRIMARY_OUTLET];
          return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
        } else {
          return s;
        }
      }
      function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
          var r = routes_1[_i];
          if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
            res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
          }
        }
        return merge(children, res);
      }
      function createChildrenForEmptySegments(routes, primarySegmentGroup) {
        var res = {};
        res[PRIMARY_OUTLET] = primarySegmentGroup;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
          var r = routes_2[_i];
          if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
            res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
          }
        }
        return res;
      }
      function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
          return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
        }).length > 0;
      }
      function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
          return emptyPathRedirect(segmentGroup, slicedSegments, r);
        }).length > 0;
      }
      function emptyPathRedirect(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') return false;
        return r.path === '' && r.redirectTo !== undefined;
      }
      function getOutlet$1(route) {
        return route.outlet ? route.outlet : PRIMARY_OUTLET;
      }
      function validateConfig(config) {
        for (var i = 0; i < config.length; i++) {
          validateNode(config[i]);
        }
      }
      function validateNode(route) {
        if (!route) {
          throw new Error("\n      Invalid route configuration: Encountered undefined route.\n      The reason might be an extra comma.\n       \n      Example: \n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
        }
        if (Array.isArray(route)) {
          throw new Error("Invalid route configuration: Array cannot be specified");
        }
        if (route.component === undefined && route.outlet && route.outlet !== PRIMARY_OUTLET) {
          throw new Error("Invalid route configuration of route '" + route.path + "': a componentless route cannot have a named outlet set");
        }
        if (!!route.redirectTo && !!route.children) {
          throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
        }
        if (!!route.redirectTo && !!route.loadChildren) {
          throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
        }
        if (!!route.children && !!route.loadChildren) {
          throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
        }
        if (!!route.redirectTo && !!route.component) {
          throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
        }
        if (!!route.path && !!route.matcher) {
          throw new Error("Invalid configuration of route '" + route.path + "': path and matcher cannot be used together");
        }
        if (route.redirectTo === undefined && !route.component && !route.children && !route.loadChildren) {
          throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
        }
        if (route.path === undefined) {
          throw new Error("Invalid route configuration: routes must have path specified");
        }
        if (route.path.startsWith('/')) {
          throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
        }
        if (route.path === '' && route.redirectTo !== undefined && route.pathMatch === undefined) {
          var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
          throw new Error("Invalid route configuration of route '{path: \"" + route.path + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
        }
        if (route.pathMatch !== undefined && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
          throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
        }
      }
      var Tree = function () {
        function Tree(root) {
          this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
          get: function () {
            return this._root.value;
          },
          enumerable: true,
          configurable: true
        });
        Tree.prototype.parent = function (t) {
          var p = this.pathFromRoot(t);
          return p.length > 1 ? p[p.length - 2] : null;
        };
        Tree.prototype.children = function (t) {
          var n = findNode(t, this._root);
          return n ? n.children.map(function (t) {
            return t.value;
          }) : [];
        };
        Tree.prototype.firstChild = function (t) {
          var n = findNode(t, this._root);
          return n && n.children.length > 0 ? n.children[0].value : null;
        };
        Tree.prototype.siblings = function (t) {
          var p = findPath(t, this._root, []);
          if (p.length < 2) return [];
          var c = p[p.length - 2].children.map(function (c) {
            return c.value;
          });
          return c.filter(function (cc) {
            return cc !== t;
          });
        };
        Tree.prototype.pathFromRoot = function (t) {
          return findPath(t, this._root, []).map(function (s) {
            return s.value;
          });
        };
        return Tree;
      }();
      function findNode(expected, c) {
        if (expected === c.value) return c;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
          var cc = _a[_i];
          var r = findNode(expected, cc);
          if (r) return r;
        }
        return null;
      }
      function findPath(expected, c, collected) {
        collected.push(c);
        if (expected === c.value) return collected;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
          var cc = _a[_i];
          var cloned = collected.slice(0);
          var r = findPath(expected, cc, cloned);
          if (r.length > 0) return r;
        }
        return [];
      }
      var TreeNode = function () {
        function TreeNode(value, children) {
          this.value = value;
          this.children = children;
        }
        TreeNode.prototype.toString = function () {
          return "TreeNode(" + this.value + ")";
        };
        return TreeNode;
      }();
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var RouterState = function (_super) {
        __extends$1(RouterState, _super);
        function RouterState(root, snapshot) {
          _super.call(this, root);
          this.snapshot = snapshot;
          setRouterStateSnapshot(this, root);
        }
        RouterState.prototype.toString = function () {
          return this.snapshot.toString();
        };
        return RouterState;
      }(Tree);
      function createEmptyState(urlTree, rootComponent) {
        var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
        var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);
        var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
        var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
        var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
        var fragment = new rxjs_BehaviorSubject.BehaviorSubject('');
        var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
        activated.snapshot = snapshot.root;
        return new RouterState(new TreeNode(activated, []), snapshot);
      }
      function createEmptyStateSnapshot(urlTree, rootComponent) {
        var emptyParams = {};
        var emptyData = {};
        var emptyQueryParams = {};
        var fragment = '';
        var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
        return new RouterStateSnapshot('', new TreeNode(activated, []));
      }
      var ActivatedRoute = function () {
        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this._futureSnapshot = futureSnapshot;
        }
        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
          get: function () {
            return this._futureSnapshot.routeConfig;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "root", {
          get: function () {
            return this._routerState.root;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "parent", {
          get: function () {
            return this._routerState.parent(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
          get: function () {
            return this._routerState.firstChild(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "children", {
          get: function () {
            return this._routerState.children(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
          get: function () {
            return this._routerState.pathFromRoot(this);
          },
          enumerable: true,
          configurable: true
        });
        ActivatedRoute.prototype.toString = function () {
          return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
        };
        return ActivatedRoute;
      }();
      function inheritedParamsDataResolve(route) {
        var pathToRoot = route.pathFromRoot;
        var inhertingStartingFrom = pathToRoot.length - 1;
        while (inhertingStartingFrom >= 1) {
          var current = pathToRoot[inhertingStartingFrom];
          var parent_1 = pathToRoot[inhertingStartingFrom - 1];
          if (current.routeConfig && current.routeConfig.path === '') {
            inhertingStartingFrom--;
          } else if (!parent_1.component) {
            inhertingStartingFrom--;
          } else {
            break;
          }
        }
        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
          var params = merge(res.params, curr.params);
          var data = merge(res.data, curr.data);
          var resolve = merge(res.resolve, curr._resolvedData);
          return {
            params: params,
            data: data,
            resolve: resolve
          };
        }, {
          params: {},
          data: {},
          resolve: {}
        });
      }
      var ActivatedRouteSnapshot = function () {
        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this._routeConfig = routeConfig;
          this._urlSegment = urlSegment;
          this._lastPathIndex = lastPathIndex;
          this._resolve = resolve;
        }
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
          get: function () {
            return this._routeConfig;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
          get: function () {
            return this._routerState.root;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
          get: function () {
            return this._routerState.parent(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
          get: function () {
            return this._routerState.firstChild(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
          get: function () {
            return this._routerState.children(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
          get: function () {
            return this._routerState.pathFromRoot(this);
          },
          enumerable: true,
          configurable: true
        });
        ActivatedRouteSnapshot.prototype.toString = function () {
          var url = this.url.map(function (s) {
            return s.toString();
          }).join('/');
          var matched = this._routeConfig ? this._routeConfig.path : '';
          return "Route(url:'" + url + "', path:'" + matched + "')";
        };
        return ActivatedRouteSnapshot;
      }();
      var RouterStateSnapshot = function (_super) {
        __extends$1(RouterStateSnapshot, _super);
        function RouterStateSnapshot(url, root) {
          _super.call(this, root);
          this.url = url;
          setRouterStateSnapshot(this, root);
        }
        RouterStateSnapshot.prototype.toString = function () {
          return serializeNode(this._root);
        };
        return RouterStateSnapshot;
      }(Tree);
      function setRouterStateSnapshot(state, node) {
        node.value._routerState = state;
        node.children.forEach(function (c) {
          return setRouterStateSnapshot(state, c);
        });
      }
      function serializeNode(node) {
        var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
        return "" + node.value + c;
      }
      function advanceActivatedRoute(route) {
        if (route.snapshot) {
          if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
            route.queryParams.next(route._futureSnapshot.queryParams);
          }
          if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
            route.fragment.next(route._futureSnapshot.fragment);
          }
          if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
            route.params.next(route._futureSnapshot.params);
          }
          if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
            route.url.next(route._futureSnapshot.url);
          }
          if (!equalParamsAndUrlSegments(route.snapshot, route._futureSnapshot)) {
            route.data.next(route._futureSnapshot.data);
          }
          route.snapshot = route._futureSnapshot;
        } else {
          route.snapshot = route._futureSnapshot;
          route.data.next(route._futureSnapshot.data);
        }
      }
      function equalParamsAndUrlSegments(a, b) {
        return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
      }
      function createRouterState(curr, prevState) {
        var root = createNode(curr._root, prevState ? prevState._root : undefined);
        return new RouterState(root, curr);
      }
      function createNode(curr, prevState) {
        if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
          var value = prevState.value;
          value._futureSnapshot = curr.value;
          var children = createOrReuseChildren(curr, prevState);
          return new TreeNode(value, children);
        } else {
          var value = createActivatedRoute(curr.value);
          var children = curr.children.map(function (c) {
            return createNode(c);
          });
          return new TreeNode(value, children);
        }
      }
      function createOrReuseChildren(curr, prevState) {
        return curr.children.map(function (child) {
          for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
            var p = _a[_i];
            if (equalRouteSnapshots(p.value.snapshot, child.value)) {
              return createNode(child, p);
            }
          }
          return createNode(child);
        });
      }
      function createActivatedRoute(c) {
        return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
      }
      function equalRouteSnapshots(a, b) {
        return a._routeConfig === b._routeConfig;
      }
      function createUrlTree(route, urlTree, commands, queryParams, fragment) {
        if (commands.length === 0) {
          return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
        }
        var normalizedCommands = normalizeCommands(commands);
        validateCommands(normalizedCommands);
        if (navigateToRoot(normalizedCommands)) {
          return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
        }
        var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
        var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
      }
      function validateCommands(n) {
        if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
          throw new Error('Root segment cannot have matrix parameters');
        }
        var c = n.commands.filter(function (c) {
          return typeof c === 'object' && c.outlets !== undefined;
        });
        if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
          throw new Error('{outlets:{}} has to be the last command');
        }
      }
      function isMatrixParams(command) {
        return typeof command === 'object' && command.outlets === undefined && command.segmentPath === undefined;
      }
      function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
        if (urlTree.root === oldSegmentGroup) {
          return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
        } else {
          return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
        }
      }
      function replaceSegment(current, oldSegment, newSegment) {
        var children = {};
        forEach(current.children, function (c, outletName) {
          if (c === oldSegment) {
            children[outletName] = newSegment;
          } else {
            children[outletName] = replaceSegment(c, oldSegment, newSegment);
          }
        });
        return new UrlSegmentGroup(current.segments, children);
      }
      function navigateToRoot(normalizedChange) {
        return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == '/';
      }
      var NormalizedNavigationCommands = function () {
        function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
          this.isAbsolute = isAbsolute;
          this.numberOfDoubleDots = numberOfDoubleDots;
          this.commands = commands;
        }
        return NormalizedNavigationCommands;
      }();
      function normalizeCommands(commands) {
        if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] == '/') {
          return new NormalizedNavigationCommands(true, 0, commands);
        }
        var numberOfDoubleDots = 0;
        var isAbsolute = false;
        var res = [];
        var _loop_1 = function (i) {
          var c = commands[i];
          if (typeof c === 'object' && c.outlets !== undefined) {
            var r_1 = {};
            forEach(c.outlets, function (commands, name) {
              if (typeof commands === 'string') {
                r_1[name] = commands.split('/');
              } else {
                r_1[name] = commands;
              }
            });
            res.push({ outlets: r_1 });
            return "continue";
          }
          if (typeof c === 'object' && c.segmentPath !== undefined) {
            res.push(c.segmentPath);
            return "continue";
          }
          if (!(typeof c === 'string')) {
            res.push(c);
            return "continue";
          }
          if (i === 0) {
            var parts = c.split('/');
            for (var j = 0; j < parts.length; ++j) {
              var cc = parts[j];
              if (j == 0 && cc == '.') {} else if (j == 0 && cc == '') {
                isAbsolute = true;
              } else if (cc == '..') {
                numberOfDoubleDots++;
              } else if (cc != '') {
                res.push(cc);
              }
            }
          } else {
            res.push(c);
          }
        };
        for (var i = 0; i < commands.length; ++i) {
          _loop_1(i);
        }
        return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
      }
      var Position = function () {
        function Position(segmentGroup, processChildren, index) {
          this.segmentGroup = segmentGroup;
          this.processChildren = processChildren;
          this.index = index;
        }
        return Position;
      }();
      function findStartingPosition(normalizedChange, urlTree, route) {
        if (normalizedChange.isAbsolute) {
          return new Position(urlTree.root, true, 0);
        } else if (route.snapshot._lastPathIndex === -1) {
          return new Position(route.snapshot._urlSegment, true, 0);
        } else {
          var modifier = isMatrixParams(normalizedChange.commands[0]) ? 0 : 1;
          var index = route.snapshot._lastPathIndex + modifier;
          return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, normalizedChange.numberOfDoubleDots);
        }
      }
      function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
        var g = group;
        var ci = index;
        var dd = numberOfDoubleDots;
        while (dd > ci) {
          dd -= ci;
          g = g.parent;
          if (!g) {
            throw new Error('Invalid number of \'../\'');
          }
          ci = g.segments.length;
        }
        return new Position(g, false, ci - dd);
      }
      function getPath(command) {
        if (typeof command === 'object' && command.outlets) return command.outlets[PRIMARY_OUTLET];
        return "" + command;
      }
      function getOutlets(commands) {
        if (!(typeof commands[0] === 'object')) return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;
        if (commands[0].outlets === undefined) return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;
        return commands[0].outlets;
        var _a, _b;
      }
      function updateSegmentGroup(segmentGroup, startIndex, commands) {
        if (!segmentGroup) {
          segmentGroup = new UrlSegmentGroup([], {});
        }
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
          return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
        }
        var m = prefixedWith(segmentGroup, startIndex, commands);
        var slicedCommands = commands.slice(m.commandIndex);
        if (m.match && m.pathIndex < segmentGroup.segments.length) {
          var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
          g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
          return updateSegmentGroupChildren(g, 0, slicedCommands);
        } else if (m.match && slicedCommands.length === 0) {
          return new UrlSegmentGroup(segmentGroup.segments, {});
        } else if (m.match && !segmentGroup.hasChildren()) {
          return createNewSegmentGroup(segmentGroup, startIndex, commands);
        } else if (m.match) {
          return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
        } else {
          return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
      }
      function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
        if (commands.length === 0) {
          return new UrlSegmentGroup(segmentGroup.segments, {});
        } else {
          var outlets_1 = getOutlets(commands);
          var children_1 = {};
          forEach(outlets_1, function (commands, outlet) {
            if (commands !== null) {
              children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
            }
          });
          forEach(segmentGroup.children, function (child, childOutlet) {
            if (outlets_1[childOutlet] === undefined) {
              children_1[childOutlet] = child;
            }
          });
          return new UrlSegmentGroup(segmentGroup.segments, children_1);
        }
      }
      function prefixedWith(segmentGroup, startIndex, commands) {
        var currentCommandIndex = 0;
        var currentPathIndex = startIndex;
        var noMatch = {
          match: false,
          pathIndex: 0,
          commandIndex: 0
        };
        while (currentPathIndex < segmentGroup.segments.length) {
          if (currentCommandIndex >= commands.length) return noMatch;
          var path = segmentGroup.segments[currentPathIndex];
          var curr = getPath(commands[currentCommandIndex]);
          var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
          if (currentPathIndex > 0 && curr === undefined) break;
          if (curr && next && typeof next === 'object' && next.outlets === undefined) {
            if (!compare(curr, next, path)) return noMatch;
            currentCommandIndex += 2;
          } else {
            if (!compare(curr, {}, path)) return noMatch;
            currentCommandIndex++;
          }
          currentPathIndex++;
        }
        return {
          match: true,
          pathIndex: currentPathIndex,
          commandIndex: currentCommandIndex
        };
      }
      function createNewSegmentGroup(segmentGroup, startIndex, commands) {
        var paths = segmentGroup.segments.slice(0, startIndex);
        var i = 0;
        while (i < commands.length) {
          if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
            var children = createNewSegmentChldren(commands[i].outlets);
            return new UrlSegmentGroup(paths, children);
          }
          if (i === 0 && isMatrixParams(commands[0])) {
            var p = segmentGroup.segments[startIndex];
            paths.push(new UrlSegment(p.path, commands[0]));
            i++;
            continue;
          }
          var curr = getPath(commands[i]);
          var next = i < commands.length - 1 ? commands[i + 1] : null;
          if (curr && next && isMatrixParams(next)) {
            paths.push(new UrlSegment(curr, stringify(next)));
            i += 2;
          } else {
            paths.push(new UrlSegment(curr, {}));
            i++;
          }
        }
        return new UrlSegmentGroup(paths, {});
      }
      function createNewSegmentChldren(outlets) {
        var children = {};
        forEach(outlets, function (commands, outlet) {
          if (commands !== null) {
            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
          }
        });
        return children;
      }
      function stringify(params) {
        var res = {};
        forEach(params, function (v, k) {
          return res[k] = "" + v;
        });
        return res;
      }
      function compare(path, params, segment) {
        return path == segment.path && shallowEqual(params, segment.parameters);
      }
      var NoMatch$1 = function () {
        function NoMatch() {}
        return NoMatch;
      }();
      function recognize(rootComponentType, config, urlTree, url) {
        return new Recognizer(rootComponentType, config, urlTree, url).recognize();
      }
      var Recognizer = function () {
        function Recognizer(rootComponentType, config, urlTree, url) {
          this.rootComponentType = rootComponentType;
          this.config = config;
          this.urlTree = urlTree;
          this.url = url;
        }
        Recognizer.prototype.recognize = function () {
          try {
            var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
            var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
            var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            var rootNode = new TreeNode(root, children);
            var routeState = new RouterStateSnapshot(this.url, rootNode);
            this.inheriteParamsAndData(routeState._root);
            return rxjs_observable_of.of(routeState);
          } catch (e) {
            return new rxjs_Observable.Observable(function (obs) {
              return obs.error(e);
            });
          }
        };
        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {
          var _this = this;
          var route = routeNode.value;
          var i = inheritedParamsDataResolve(route);
          route.params = Object.freeze(i.params);
          route.data = Object.freeze(i.data);
          routeNode.children.forEach(function (n) {
            return _this.inheriteParamsAndData(n);
          });
        };
        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
          if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(config, segmentGroup);
          } else {
            return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, outlet);
          }
        };
        Recognizer.prototype.processChildren = function (config, segmentGroup) {
          var _this = this;
          var children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) {
            return _this.processSegmentGroup(config, child, childOutlet);
          });
          checkOutletNameUniqueness(children);
          sortActivatedRouteSnapshots(children);
          return children;
        };
        Recognizer.prototype.processSegment = function (config, segmentGroup, pathIndex, segments, outlet) {
          for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
            var r = config_1[_i];
            try {
              return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, outlet);
            } catch (e) {
              if (!(e instanceof NoMatch$1)) throw e;
            }
          }
          if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return [];
          } else {
            throw new NoMatch$1();
          }
        };
        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
          return segments.length === 0 && !segmentGroup.children[outlet];
        };
        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, pathIndex, segments, outlet) {
          if (route.redirectTo) throw new NoMatch$1();
          if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch$1();
          if (route.path === '**') {
            var params = segments.length > 0 ? last(segments).parameters : {};
            var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
            return [new TreeNode(snapshot_1, [])];
          }
          var _a = match$1(rawSegment, route, segments),
              consumedSegments = _a.consumedSegments,
              parameters = _a.parameters,
              lastChild = _a.lastChild;
          var rawSlicedSegments = segments.slice(lastChild);
          var childConfig = getChildConfig(route);
          var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
              segmentGroup = _b.segmentGroup,
              slicedSegments = _b.slicedSegments;
          var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
          if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var children = this.processChildren(childConfig, segmentGroup);
            return [new TreeNode(snapshot, children)];
          } else if (childConfig.length === 0 && slicedSegments.length === 0) {
            return [new TreeNode(snapshot, [])];
          } else {
            var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, PRIMARY_OUTLET);
            return [new TreeNode(snapshot, children)];
          }
        };
        return Recognizer;
      }();
      function sortActivatedRouteSnapshots(nodes) {
        nodes.sort(function (a, b) {
          if (a.value.outlet === PRIMARY_OUTLET) return -1;
          if (b.value.outlet === PRIMARY_OUTLET) return 1;
          return a.value.outlet.localeCompare(b.value.outlet);
        });
      }
      function getChildConfig(route) {
        if (route.children) {
          return route.children;
        } else if (route.loadChildren) {
          return route._loadedConfig.routes;
        } else {
          return [];
        }
      }
      function match$1(segmentGroup, route, segments) {
        if (route.path === '') {
          if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            throw new NoMatch$1();
          } else {
            return {
              consumedSegments: [],
              lastChild: 0,
              parameters: {}
            };
          }
        }
        var matcher = route.matcher || defaultUrlMatcher;
        var res = matcher(segments, segmentGroup, route);
        if (!res) throw new NoMatch$1();
        var posParams = {};
        forEach(res.posParams, function (v, k) {
          posParams[k] = v.path;
        });
        var parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);
        return {
          consumedSegments: res.consumed,
          lastChild: res.consumed.length,
          parameters: parameters
        };
      }
      function checkOutletNameUniqueness(nodes) {
        var names = {};
        nodes.forEach(function (n) {
          var routeWithSameOutletName = names[n.value.outlet];
          if (routeWithSameOutletName) {
            var p = routeWithSameOutletName.url.map(function (s) {
              return s.toString();
            }).join('/');
            var c = n.value.url.map(function (s) {
              return s.toString();
            }).join('/');
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
          }
          names[n.value.outlet] = n.value;
        });
      }
      function getSourceSegmentGroup(segmentGroup) {
        var s = segmentGroup;
        while (s._sourceSegment) {
          s = s._sourceSegment;
        }
        return s;
      }
      function getPathIndexShift(segmentGroup) {
        var s = segmentGroup;
        var res = s._segmentIndexShift ? s._segmentIndexShift : 0;
        while (s._sourceSegment) {
          s = s._sourceSegment;
          res += s._segmentIndexShift ? s._segmentIndexShift : 0;
        }
        return res - 1;
      }
      function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
          var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
          s._sourceSegment = segmentGroup;
          s._segmentIndexShift = consumedSegments.length;
          return {
            segmentGroup: s,
            slicedSegments: []
          };
        } else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
          var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
          s._sourceSegment = segmentGroup;
          s._segmentIndexShift = consumedSegments.length;
          return {
            segmentGroup: s,
            slicedSegments: slicedSegments
          };
        } else {
          var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
          s._sourceSegment = segmentGroup;
          s._segmentIndexShift = consumedSegments.length;
          return {
            segmentGroup: s,
            slicedSegments: slicedSegments
          };
        }
      }
      function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
          var r = routes_1[_i];
          if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
            var s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = segmentGroup.segments.length;
            res[getOutlet$2(r)] = s;
          }
        }
        return merge(children, res);
      }
      function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
        var res = {};
        res[PRIMARY_OUTLET] = primarySegment;
        primarySegment._sourceSegment = segmentGroup;
        primarySegment._segmentIndexShift = consumedSegments.length;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
          var r = routes_2[_i];
          if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
            var s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            res[getOutlet$2(r)] = s;
          }
        }
        return res;
      }
      function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
          return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
        }).length > 0;
      }
      function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
          return emptyPathMatch(segmentGroup, slicedSegments, r);
        }).length > 0;
      }
      function emptyPathMatch(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') return false;
        return r.path === '' && r.redirectTo === undefined;
      }
      function getOutlet$2(route) {
        return route.outlet ? route.outlet : PRIMARY_OUTLET;
      }
      function getData(route) {
        return route.data ? route.data : {};
      }
      function getResolve(route) {
        return route.resolve ? route.resolve : {};
      }
      var RouterOutletMap = function () {
        function RouterOutletMap() {
          this._outlets = {};
        }
        RouterOutletMap.prototype.registerOutlet = function (name, outlet) {
          this._outlets[name] = outlet;
        };
        RouterOutletMap.prototype.removeOutlet = function (name) {
          this._outlets[name] = undefined;
        };
        return RouterOutletMap;
      }();
      var UrlHandlingStrategy = function () {
        function UrlHandlingStrategy() {}
        return UrlHandlingStrategy;
      }();
      var DefaultUrlHandlingStrategy = function () {
        function DefaultUrlHandlingStrategy() {}
        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) {
          return true;
        };
        DefaultUrlHandlingStrategy.prototype.extract = function (url) {
          return url;
        };
        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) {
          return newUrlPart;
        };
        return DefaultUrlHandlingStrategy;
      }();
      var NavigationStart = function () {
        function NavigationStart(id, url) {
          this.id = id;
          this.url = url;
        }
        NavigationStart.prototype.toString = function () {
          return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationStart;
      }();
      var NavigationEnd = function () {
        function NavigationEnd(id, url, urlAfterRedirects) {
          this.id = id;
          this.url = url;
          this.urlAfterRedirects = urlAfterRedirects;
        }
        NavigationEnd.prototype.toString = function () {
          return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
      }();
      var NavigationCancel = function () {
        function NavigationCancel(id, url, reason) {
          this.id = id;
          this.url = url;
          this.reason = reason;
        }
        NavigationCancel.prototype.toString = function () {
          return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationCancel;
      }();
      var NavigationError = function () {
        function NavigationError(id, url, error) {
          this.id = id;
          this.url = url;
          this.error = error;
        }
        NavigationError.prototype.toString = function () {
          return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
      }();
      var RoutesRecognized = function () {
        function RoutesRecognized(id, url, urlAfterRedirects, state) {
          this.id = id;
          this.url = url;
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
        }
        RoutesRecognized.prototype.toString = function () {
          return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
      }();
      function defaultErrorHandler(error) {
        throw error;
      }
      var Router = function () {
        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
          this.rootComponentType = rootComponentType;
          this.urlSerializer = urlSerializer;
          this.outletMap = outletMap;
          this.location = location;
          this.injector = injector;
          this.config = config;
          this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);
          this.routerEvents = new rxjs_Subject.Subject();
          this.navigationId = 0;
          this.errorHandler = defaultErrorHandler;
          this.navigated = false;
          this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
          this.resetConfig(config);
          this.currentUrlTree = createEmptyUrlTree();
          this.rawUrlTree = this.currentUrlTree;
          this.configLoader = new RouterConfigLoader(loader, compiler);
          this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
          this.processNavigations();
        }
        Router.prototype.resetRootComponentType = function (rootComponentType) {
          this.rootComponentType = rootComponentType;
          this.currentRouterState.root.component = this.rootComponentType;
        };
        Router.prototype.initialNavigation = function () {
          this.setUpLocationChangeListener();
          this.navigateByUrl(this.location.path(true), { replaceUrl: true });
        };
        Router.prototype.setUpLocationChangeListener = function () {
          var _this = this;
          this.locationSubscription = this.location.subscribe(Zone.current.wrap(function (change) {
            var rawUrlTree = _this.urlSerializer.parse(change['url']);
            setTimeout(function () {
              _this.scheduleNavigation(rawUrlTree, {
                skipLocationChange: change['pop'],
                replaceUrl: true
              });
            }, 0);
          }));
        };
        Object.defineProperty(Router.prototype, "routerState", {
          get: function () {
            return this.currentRouterState;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Router.prototype, "url", {
          get: function () {
            return this.serializeUrl(this.currentUrlTree);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Router.prototype, "events", {
          get: function () {
            return this.routerEvents;
          },
          enumerable: true,
          configurable: true
        });
        Router.prototype.resetConfig = function (config) {
          validateConfig(config);
          this.config = config;
        };
        Router.prototype.ngOnDestroy = function () {
          this.dispose();
        };
        Router.prototype.dispose = function () {
          this.locationSubscription.unsubscribe();
        };
        Router.prototype.createUrlTree = function (commands, _a) {
          var _b = _a === void 0 ? {} : _a,
              relativeTo = _b.relativeTo,
              queryParams = _b.queryParams,
              fragment = _b.fragment,
              preserveQueryParams = _b.preserveQueryParams,
              preserveFragment = _b.preserveFragment;
          var a = relativeTo ? relativeTo : this.routerState.root;
          var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
          var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
          return createUrlTree(a, this.currentUrlTree, commands, q, f);
        };
        Router.prototype.navigateByUrl = function (url, extras) {
          if (extras === void 0) {
            extras = { skipLocationChange: false };
          }
          if (url instanceof UrlTree) {
            return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), extras);
          } else {
            var urlTree = this.urlSerializer.parse(url);
            return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), extras);
          }
        };
        Router.prototype.navigate = function (commands, extras) {
          if (extras === void 0) {
            extras = { skipLocationChange: false };
          }
          if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
            extras.queryParams = this.removeEmptyProps(extras.queryParams);
          }
          return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
        };
        Router.prototype.serializeUrl = function (url) {
          return this.urlSerializer.serialize(url);
        };
        Router.prototype.parseUrl = function (url) {
          return this.urlSerializer.parse(url);
        };
        Router.prototype.isActive = function (url, exact) {
          if (url instanceof UrlTree) {
            return containsTree(this.currentUrlTree, url, exact);
          } else {
            var urlTree = this.urlSerializer.parse(url);
            return containsTree(this.currentUrlTree, urlTree, exact);
          }
        };
        Router.prototype.removeEmptyProps = function (params) {
          return Object.keys(params).reduce(function (result, key) {
            var value = params[key];
            if (value !== null && value !== undefined) {
              result[key] = value;
            }
            return result;
          }, {});
        };
        Router.prototype.processNavigations = function () {
          var _this = this;
          rxjs_operator_concatMap.concatMap.call(this.navigations, function (nav) {
            if (nav) {
              _this.executeScheduledNavigation(nav);
              return nav.promise.catch(function () {});
            } else {
              return rxjs_observable_of.of(null);
            }
          }).subscribe(function () {});
        };
        Router.prototype.scheduleNavigation = function (rawUrl, extras) {
          var prevRawUrl = this.navigations.value ? this.navigations.value.rawUrl : null;
          if (prevRawUrl && prevRawUrl.toString() === rawUrl.toString()) {
            return this.navigations.value.promise;
          }
          var resolve = null;
          var reject = null;
          var promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
          });
          var id = ++this.navigationId;
          this.navigations.next({
            id: id,
            rawUrl: rawUrl,
            prevRawUrl: prevRawUrl,
            extras: extras,
            resolve: resolve,
            reject: reject,
            promise: promise
          });
          return promise.catch(function (e) {
            return Promise.reject(e);
          });
        };
        Router.prototype.executeScheduledNavigation = function (_a) {
          var _this = this;
          var id = _a.id,
              rawUrl = _a.rawUrl,
              prevRawUrl = _a.prevRawUrl,
              extras = _a.extras,
              resolve = _a.resolve,
              reject = _a.reject;
          var url = this.urlHandlingStrategy.extract(rawUrl);
          var prevUrl = prevRawUrl ? this.urlHandlingStrategy.extract(prevRawUrl) : null;
          var urlTransition = !prevUrl || url.toString() !== prevUrl.toString();
          if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve().then(function (_) {
              return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null);
            }).then(resolve, reject);
          } else if (urlTransition && prevRawUrl && this.urlHandlingStrategy.shouldProcessUrl(prevRawUrl)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve().then(function (_) {
              return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot);
            }).then(resolve, reject);
          } else {
            this.rawUrlTree = rawUrl;
            resolve(null);
          }
        };
        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
          var _this = this;
          if (id !== this.navigationId) {
            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
            return Promise.resolve(false);
          }
          return new Promise(function (resolvePromise, rejectPromise) {
            var urlAndSnapshot$;
            if (!precreatedState) {
              var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, url, _this.config);
              urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {
                return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
                  _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
                  return {
                    appliedUrl: appliedUrl,
                    snapshot: snapshot
                  };
                });
              });
            } else {
              urlAndSnapshot$ = rxjs_observable_of.of({
                appliedUrl: url,
                snapshot: precreatedState
              });
            }
            var preActivation;
            var preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function (_a) {
              var appliedUrl = _a.appliedUrl,
                  snapshot = _a.snapshot;
              preActivation = new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);
              preActivation.traverse(_this.outletMap);
              return {
                appliedUrl: appliedUrl,
                snapshot: snapshot
              };
            });
            var preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {
              var appliedUrl = _a.appliedUrl,
                  snapshot = _a.snapshot;
              if (_this.navigationId !== id) return rxjs_observable_of.of(false);
              return rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {
                return {
                  appliedUrl: appliedUrl,
                  snapshot: snapshot,
                  shouldActivate: shouldActivate
                };
              });
            });
            var preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function (p) {
              if (_this.navigationId !== id) return rxjs_observable_of.of(false);
              if (p.shouldActivate) {
                return rxjs_operator_map.map.call(preActivation.resolveData(), function () {
                  return p;
                });
              } else {
                return rxjs_observable_of.of(p);
              }
            });
            var routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function (_a) {
              var appliedUrl = _a.appliedUrl,
                  snapshot = _a.snapshot,
                  shouldActivate = _a.shouldActivate;
              if (shouldActivate) {
                var state = createRouterState(snapshot, _this.currentRouterState);
                return {
                  appliedUrl: appliedUrl,
                  state: state,
                  shouldActivate: shouldActivate
                };
              } else {
                return {
                  appliedUrl: appliedUrl,
                  state: null,
                  shouldActivate: shouldActivate
                };
              }
            });
            var navigationIsSuccessful;
            var storedState = _this.currentRouterState;
            var storedUrl = _this.currentUrlTree;
            routerState$.forEach(function (_a) {
              var appliedUrl = _a.appliedUrl,
                  state = _a.state,
                  shouldActivate = _a.shouldActivate;
              if (!shouldActivate || id !== _this.navigationId) {
                navigationIsSuccessful = false;
                return;
              }
              _this.currentUrlTree = appliedUrl;
              _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
              _this.currentRouterState = state;
              if (!shouldPreventPushState) {
                var path = _this.urlSerializer.serialize(_this.rawUrlTree);
                if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                  _this.location.replaceState(path);
                } else {
                  _this.location.go(path);
                }
              }
              new ActivateRoutes(state, storedState).activate(_this.outletMap);
              navigationIsSuccessful = true;
            }).then(function () {
              _this.navigated = true;
              if (navigationIsSuccessful) {
                _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
                resolvePromise(true);
              } else {
                _this.resetUrlToCurrentUrlTree();
                _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                resolvePromise(false);
              }
            }, function (e) {
              if (e instanceof NavigationCancelingError) {
                _this.resetUrlToCurrentUrlTree();
                _this.navigated = true;
                _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                resolvePromise(false);
              } else {
                _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                try {
                  resolvePromise(_this.errorHandler(e));
                } catch (ee) {
                  rejectPromise(ee);
                }
              }
              _this.currentRouterState = storedState;
              _this.currentUrlTree = storedUrl;
              _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
              _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
            });
          });
        };
        Router.prototype.resetUrlToCurrentUrlTree = function () {
          var path = this.urlSerializer.serialize(this.rawUrlTree);
          this.location.replaceState(path);
        };
        return Router;
      }();
      var CanActivate = function () {
        function CanActivate(path) {
          this.path = path;
        }
        Object.defineProperty(CanActivate.prototype, "route", {
          get: function () {
            return this.path[this.path.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        return CanActivate;
      }();
      var CanDeactivate = function () {
        function CanDeactivate(component, route) {
          this.component = component;
          this.route = route;
        }
        return CanDeactivate;
      }();
      var PreActivation = function () {
        function PreActivation(future, curr, injector) {
          this.future = future;
          this.curr = curr;
          this.injector = injector;
          this.checks = [];
        }
        PreActivation.prototype.traverse = function (parentOutletMap) {
          var futureRoot = this.future._root;
          var currRoot = this.curr ? this.curr._root : null;
          this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
        };
        PreActivation.prototype.checkGuards = function () {
          var _this = this;
          if (this.checks.length === 0) return rxjs_observable_of.of(true);
          var checks$ = rxjs_observable_from.from(this.checks);
          var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (s) {
            if (s instanceof CanActivate) {
              return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
            } else if (s instanceof CanDeactivate) {
              var s2 = s;
              return _this.runCanDeactivate(s2.component, s2.route);
            } else {
              throw new Error('Cannot be reached');
            }
          });
          return rxjs_operator_every.every.call(runningChecks$, function (result) {
            return result === true;
          });
        };
        PreActivation.prototype.resolveData = function () {
          var _this = this;
          if (this.checks.length === 0) return rxjs_observable_of.of(null);
          var checks$ = rxjs_observable_from.from(this.checks);
          var runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (s) {
            if (s instanceof CanActivate) {
              return _this.runResolve(s.route);
            } else {
              return rxjs_observable_of.of(null);
            }
          });
          return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) {
            return _;
          });
        };
        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(currNode);
          futureNode.children.forEach(function (c) {
            _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
            delete prevChildren[c.value.outlet];
          });
          forEach(prevChildren, function (v, k) {
            return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
          });
        };
        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
          var future = futureNode.value;
          var curr = currNode ? currNode.value : null;
          var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
          if (curr && future._routeConfig === curr._routeConfig) {
            if (!equalParamsAndUrlSegments(future, curr)) {
              this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
            } else {
              future.data = curr.data;
              future._resolvedData = curr._resolvedData;
            }
            if (future.component) {
              this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
            } else {
              this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
            }
          } else {
            if (curr) {
              this.deactiveRouteAndItsChildren(currNode, outlet);
            }
            this.checks.push(new CanActivate(futurePath));
            if (future.component) {
              this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
            } else {
              this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
            }
          }
        };
        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(route);
          var r = route.value;
          forEach(prevChildren, function (v, k) {
            if (!r.component) {
              _this.deactiveRouteAndItsChildren(v, outlet);
            } else if (!!outlet) {
              _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
            } else {
              _this.deactiveRouteAndItsChildren(v, null);
            }
          });
          if (!r.component) {
            this.checks.push(new CanDeactivate(null, r));
          } else if (outlet && outlet.isActivated) {
            this.checks.push(new CanDeactivate(outlet.component, r));
          } else {
            this.checks.push(new CanDeactivate(null, r));
          }
        };
        PreActivation.prototype.runCanActivate = function (future) {
          var _this = this;
          var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
          if (!canActivate || canActivate.length === 0) return rxjs_observable_of.of(true);
          var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {
            var guard = _this.getToken(c, future);
            var observable;
            if (guard.canActivate) {
              observable = wrapIntoObservable(guard.canActivate(future, _this.future));
            } else {
              observable = wrapIntoObservable(guard(future, _this.future));
            }
            return rxjs_operator_first.first.call(observable);
          });
          return andObservables(obs);
        };
        PreActivation.prototype.runCanActivateChild = function (path) {
          var _this = this;
          var future = path[path.length - 1];
          var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function (p) {
            return _this.extractCanActivateChild(p);
          }).filter(function (_) {
            return _ !== null;
          });
          return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {
            var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {
              var guard = _this.getToken(c, c.node);
              var observable;
              if (guard.canActivateChild) {
                observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
              } else {
                observable = wrapIntoObservable(guard(future, _this.future));
              }
              return rxjs_operator_first.first.call(observable);
            });
            return andObservables(obs);
          }));
        };
        PreActivation.prototype.extractCanActivateChild = function (p) {
          var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
          if (!canActivateChild || canActivateChild.length === 0) return null;
          return {
            node: p,
            guards: canActivateChild
          };
        };
        PreActivation.prototype.runCanDeactivate = function (component, curr) {
          var _this = this;
          var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
          if (!canDeactivate || canDeactivate.length === 0) return rxjs_observable_of.of(true);
          var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {
            var guard = _this.getToken(c, curr);
            var observable;
            if (guard.canDeactivate) {
              observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
            } else {
              observable = wrapIntoObservable(guard(component, curr, _this.curr));
            }
            return rxjs_operator_first.first.call(observable);
          });
          return rxjs_operator_every.every.call(canDeactivate$, function (result) {
            return result === true;
          });
        };
        PreActivation.prototype.runResolve = function (future) {
          var resolve = future._resolve;
          return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {
            future._resolvedData = resolvedData;
            future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);
            return null;
          });
        };
        PreActivation.prototype.resolveNode = function (resolve, future) {
          var _this = this;
          return waitForMap(resolve, function (k, v) {
            var resolver = _this.getToken(v, future);
            return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
          });
        };
        PreActivation.prototype.getToken = function (token, snapshot) {
          var config = closestLoadedConfig(snapshot);
          var injector = config ? config.injector : this.injector;
          return injector.get(token);
        };
        return PreActivation;
      }();
      var ActivateRoutes = function () {
        function ActivateRoutes(futureState, currState) {
          this.futureState = futureState;
          this.currState = currState;
        }
        ActivateRoutes.prototype.activate = function (parentOutletMap) {
          var futureRoot = this.futureState._root;
          var currRoot = this.currState ? this.currState._root : null;
          this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
          advanceActivatedRoute(this.futureState.root);
          this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
        };
        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(currNode);
          futureNode.children.forEach(function (c) {
            _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
            delete prevChildren[c.value.outlet];
          });
          forEach(prevChildren, function (v, k) {
            return _this.deactiveRouteAndItsChildren(v, outletMap);
          });
        };
        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(currNode);
          futureNode.children.forEach(function (c) {
            _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
          });
        };
        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {
          var future = futureNode.value;
          var curr = currNode ? currNode.value : null;
          if (future === curr) {
            if (future.component) {
              var outlet = getOutlet(parentOutletMap, future);
              this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
            } else {
              this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
            }
          } else {
            if (curr) {
              this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
            }
          }
        };
        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
          var future = futureNode.value;
          var curr = currNode ? currNode.value : null;
          if (future === curr) {
            advanceActivatedRoute(future);
            if (future.component) {
              var outlet = getOutlet(parentOutletMap, future);
              this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
            } else {
              this.activateChildRoutes(futureNode, currNode, parentOutletMap);
            }
          } else {
            if (future.component) {
              advanceActivatedRoute(future);
              var outlet = getOutlet(parentOutletMap, futureNode.value);
              var outletMap = new RouterOutletMap();
              this.placeComponentIntoOutlet(outletMap, future, outlet);
              this.activateChildRoutes(futureNode, null, outletMap);
            } else {
              advanceActivatedRoute(future);
              this.activateChildRoutes(futureNode, null, parentOutletMap);
            }
          }
        };
        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
          var resolved = [{
            provide: ActivatedRoute,
            useValue: future
          }, {
            provide: RouterOutletMap,
            useValue: outletMap
          }];
          var config = parentLoadedConfig(future.snapshot);
          var resolver = null;
          var injector = null;
          if (config) {
            injector = config.injectorFactory(outlet.locationInjector);
            resolver = config.factoryResolver;
            resolved.push({
              provide: _angular_core.ComponentFactoryResolver,
              useValue: resolver
            });
          } else {
            injector = outlet.locationInjector;
            resolver = outlet.locationFactoryResolver;
          }
          outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);
        };
        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(route);
          var outlet = null;
          try {
            outlet = getOutlet(parentOutletMap, route.value);
          } catch (e) {
            return;
          }
          var childOutletMap = outlet.outletMap;
          forEach(prevChildren, function (v, k) {
            if (route.value.component) {
              _this.deactiveRouteAndItsChildren(v, childOutletMap);
            } else {
              _this.deactiveRouteAndItsChildren(v, parentOutletMap);
            }
          });
          if (outlet && outlet.isActivated) {
            outlet.deactivate();
          }
        };
        return ActivateRoutes;
      }();
      function parentLoadedConfig(snapshot) {
        var s = snapshot.parent;
        while (s) {
          var c = s._routeConfig;
          if (c && c._loadedConfig) return c._loadedConfig;
          if (c && c.component) return null;
          s = s.parent;
        }
        return null;
      }
      function closestLoadedConfig(snapshot) {
        if (!snapshot) return null;
        var s = snapshot.parent;
        while (s) {
          var c = s._routeConfig;
          if (c && c._loadedConfig) return c._loadedConfig;
          s = s.parent;
        }
        return null;
      }
      function nodeChildrenAsMap(node) {
        return node ? node.children.reduce(function (m, c) {
          m[c.value.outlet] = c;
          return m;
        }, {}) : {};
      }
      function getOutlet(outletMap, route) {
        var outlet = outletMap._outlets[route.outlet];
        if (!outlet) {
          var componentName = route.component.name;
          if (route.outlet === PRIMARY_OUTLET) {
            throw new Error("Cannot find primary outlet to load '" + componentName + "'");
          } else {
            throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
          }
        }
        return outlet;
      }
      var RouterLink = function () {
        function RouterLink(router, route, locationStrategy) {
          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.commands = [];
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
          set: function (data) {
            if (Array.isArray(data)) {
              this.commands = data;
            } else {
              this.commands = [data];
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLink.prototype.onClick = function () {
          this.router.navigateByUrl(this.urlTree);
          return true;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
          get: function () {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              preserveQueryParams: toBool(this.preserveQueryParams),
              preserveFragment: toBool(this.preserveFragment)
            });
          },
          enumerable: true,
          configurable: true
        });
        RouterLink.decorators = [{
          type: _angular_core.Directive,
          args: [{ selector: ':not(a)[routerLink]' }]
        }];
        RouterLink.ctorParameters = [{ type: Router }, { type: ActivatedRoute }, { type: _angular_common.LocationStrategy }];
        RouterLink.propDecorators = {
          'queryParams': [{ type: _angular_core.Input }],
          'fragment': [{ type: _angular_core.Input }],
          'preserveQueryParams': [{ type: _angular_core.Input }],
          'preserveFragment': [{ type: _angular_core.Input }],
          'routerLink': [{ type: _angular_core.Input }],
          'onClick': [{
            type: _angular_core.HostListener,
            args: ['click', []]
          }]
        };
        return RouterLink;
      }();
      var RouterLinkWithHref = function () {
        function RouterLinkWithHref(router, route, locationStrategy) {
          var _this = this;
          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.commands = [];
          this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
              _this.updateTargetUrlAndHref();
            }
          });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
          set: function (data) {
            if (Array.isArray(data)) {
              this.commands = data;
            } else {
              this.commands = [data];
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkWithHref.prototype.ngOnChanges = function (changes) {
          this.updateTargetUrlAndHref();
        };
        RouterLinkWithHref.prototype.ngOnDestroy = function () {
          this.subscription.unsubscribe();
        };
        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
          if (button !== 0 || ctrlKey || metaKey) {
            return true;
          }
          if (typeof this.target === 'string' && this.target != '_self') {
            return true;
          }
          this.router.navigateByUrl(this.urlTree);
          return false;
        };
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
          this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
        };
        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
          get: function () {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              preserveQueryParams: toBool(this.preserveQueryParams),
              preserveFragment: toBool(this.preserveFragment)
            });
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkWithHref.decorators = [{
          type: _angular_core.Directive,
          args: [{ selector: 'a[routerLink]' }]
        }];
        RouterLinkWithHref.ctorParameters = [{ type: Router }, { type: ActivatedRoute }, { type: _angular_common.LocationStrategy }];
        RouterLinkWithHref.propDecorators = {
          'target': [{ type: _angular_core.Input }],
          'queryParams': [{ type: _angular_core.Input }],
          'fragment': [{ type: _angular_core.Input }],
          'routerLinkOptions': [{ type: _angular_core.Input }],
          'preserveQueryParams': [{ type: _angular_core.Input }],
          'preserveFragment': [{ type: _angular_core.Input }],
          'href': [{ type: _angular_core.HostBinding }],
          'routerLink': [{ type: _angular_core.Input }],
          'onClick': [{
            type: _angular_core.HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
          }]
        };
        return RouterLinkWithHref;
      }();
      function toBool(s) {
        if (s === '') return true;
        return !!s;
      }
      var RouterLinkActive = function () {
        function RouterLinkActive(router, element, renderer) {
          var _this = this;
          this.router = router;
          this.element = element;
          this.renderer = renderer;
          this.classes = [];
          this.routerLinkActiveOptions = { exact: false };
          this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
              _this.update();
            }
          });
        }
        Object.defineProperty(RouterLinkActive.prototype, "isActive", {
          get: function () {
            return this.hasActiveLink();
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkActive.prototype.ngAfterContentInit = function () {
          var _this = this;
          this.links.changes.subscribe(function (s) {
            return _this.update();
          });
          this.linksWithHrefs.changes.subscribe(function (s) {
            return _this.update();
          });
          this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
          set: function (data) {
            if (Array.isArray(data)) {
              this.classes = data;
            } else {
              this.classes = data.split(' ');
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkActive.prototype.ngOnChanges = function (changes) {
          this.update();
        };
        RouterLinkActive.prototype.ngOnDestroy = function () {
          this.subscription.unsubscribe();
        };
        RouterLinkActive.prototype.update = function () {
          var _this = this;
          if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
          var isActive = this.hasActiveLink();
          this.classes.forEach(function (c) {
            if (c) {
              _this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
            }
          });
        };
        RouterLinkActive.prototype.isLinkActive = function (router) {
          var _this = this;
          return function (link) {
            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
          };
        };
        RouterLinkActive.prototype.hasActiveLink = function () {
          return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
        };
        RouterLinkActive.decorators = [{
          type: _angular_core.Directive,
          args: [{
            selector: '[routerLinkActive]',
            exportAs: 'routerLinkActive'
          }]
        }];
        RouterLinkActive.ctorParameters = [{ type: Router }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }];
        RouterLinkActive.propDecorators = {
          'links': [{
            type: _angular_core.ContentChildren,
            args: [RouterLink, { descendants: true }]
          }],
          'linksWithHrefs': [{
            type: _angular_core.ContentChildren,
            args: [RouterLinkWithHref, { descendants: true }]
          }],
          'routerLinkActiveOptions': [{ type: _angular_core.Input }],
          'routerLinkActive': [{ type: _angular_core.Input }]
        };
        return RouterLinkActive;
      }();
      var RouterOutlet = function () {
        function RouterOutlet(parentOutletMap, location, resolver, name) {
          this.parentOutletMap = parentOutletMap;
          this.location = location;
          this.resolver = resolver;
          this.name = name;
          this.activateEvents = new _angular_core.EventEmitter();
          this.deactivateEvents = new _angular_core.EventEmitter();
          parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
        }
        RouterOutlet.prototype.ngOnDestroy = function () {
          this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
        };
        Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
          get: function () {
            return this.location.injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
          get: function () {
            return this.resolver;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
          get: function () {
            return !!this.activated;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "component", {
          get: function () {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this.activated.instance;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
          get: function () {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this._activatedRoute;
          },
          enumerable: true,
          configurable: true
        });
        RouterOutlet.prototype.deactivate = function () {
          if (this.activated) {
            var c = this.component;
            this.activated.destroy();
            this.activated = null;
            this.deactivateEvents.emit(c);
          }
        };
        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {
          if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
          }
          this.outletMap = outletMap;
          this._activatedRoute = activatedRoute;
          var snapshot = activatedRoute._futureSnapshot;
          var component = snapshot._routeConfig.component;
          var factory = resolver.resolveComponentFactory(component);
          var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
          this.activated = this.location.createComponent(factory, this.location.length, inj, []);
          this.activated.changeDetectorRef.detectChanges();
          this.activateEvents.emit(this.activated.instance);
        };
        RouterOutlet.decorators = [{
          type: _angular_core.Directive,
          args: [{ selector: 'router-outlet' }]
        }];
        RouterOutlet.ctorParameters = [{ type: RouterOutletMap }, { type: _angular_core.ViewContainerRef }, { type: _angular_core.ComponentFactoryResolver }, {
          type: undefined,
          decorators: [{
            type: _angular_core.Attribute,
            args: ['name']
          }]
        }];
        RouterOutlet.propDecorators = {
          'activateEvents': [{
            type: _angular_core.Output,
            args: ['activate']
          }],
          'deactivateEvents': [{
            type: _angular_core.Output,
            args: ['deactivate']
          }]
        };
        return RouterOutlet;
      }();
      var getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;
      var PreloadingStrategy = function () {
        function PreloadingStrategy() {}
        return PreloadingStrategy;
      }();
      var PreloadAllModules = function () {
        function PreloadAllModules() {}
        PreloadAllModules.prototype.preload = function (route, fn) {
          return rxjs_operator_catch._catch.call(fn(), function () {
            return rxjs_observable_of.of(null);
          });
        };
        return PreloadAllModules;
      }();
      var NoPreloading = function () {
        function NoPreloading() {}
        NoPreloading.prototype.preload = function (route, fn) {
          return rxjs_observable_of.of(null);
        };
        return NoPreloading;
      }();
      var RouterPreloader = function () {
        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
          this.router = router;
          this.injector = injector;
          this.preloadingStrategy = preloadingStrategy;
          this.loader = new RouterConfigLoader(moduleLoader, compiler);
        }
        ;
        RouterPreloader.prototype.setUpPreloading = function () {
          var _this = this;
          var navigations = rxjs_operator_filter.filter.call(this.router.events, function (e) {
            return e instanceof NavigationEnd;
          });
          this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function () {
            return _this.preload();
          }).subscribe(function (v) {});
        };
        RouterPreloader.prototype.preload = function () {
          return this.processRoutes(this.injector, this.router.config);
        };
        RouterPreloader.prototype.ngOnDestroy = function () {
          this.subscription.unsubscribe();
        };
        RouterPreloader.prototype.processRoutes = function (injector, routes) {
          var res = [];
          for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var c = routes_1[_i];
            if (c.loadChildren && !c.canLoad && c._loadedConfig) {
              var childConfig = c._loadedConfig;
              res.push(this.processRoutes(childConfig.injector, childConfig.routes));
            } else if (c.loadChildren && !c.canLoad) {
              res.push(this.preloadConfig(injector, c));
            } else if (c.children) {
              res.push(this.processRoutes(injector, c.children));
            }
          }
          return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
        };
        RouterPreloader.prototype.preloadConfig = function (injector, route) {
          var _this = this;
          return this.preloadingStrategy.preload(route, function () {
            var loaded = _this.loader.load(injector, route.loadChildren);
            return rxjs_operator_mergeMap.mergeMap.call(loaded, function (config) {
              var c = route;
              c._loadedConfig = config;
              return _this.processRoutes(config.injector, config.routes);
            });
          });
        };
        RouterPreloader.decorators = [{ type: _angular_core.Injectable }];
        RouterPreloader.ctorParameters = [{ type: Router }, { type: _angular_core.NgModuleFactoryLoader }, { type: _angular_core.Compiler }, { type: _angular_core.Injector }, { type: PreloadingStrategy }];
        return RouterPreloader;
      }();
      var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
      var ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');
      var ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');
      var ROUTER_PROVIDERS = [_angular_common.Location, {
        provide: UrlSerializer,
        useClass: DefaultUrlSerializer
      }, {
        provide: Router,
        useFactory: setupRouter,
        deps: [_angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()]]
      }, RouterOutletMap, {
        provide: ActivatedRoute,
        useFactory: rootRoute,
        deps: [Router]
      }, {
        provide: _angular_core.NgModuleFactoryLoader,
        useClass: _angular_core.SystemJsNgModuleLoader
      }, RouterPreloader, NoPreloading, PreloadAllModules, {
        provide: ROUTER_CONFIGURATION,
        useValue: { enableTracing: false }
      }];
      var RouterModule = function () {
        function RouterModule(guard) {}
        RouterModule.forRoot = function (routes, config) {
          return {
            ngModule: RouterModule,
            providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
              provide: ROUTER_FORROOT_GUARD,
              useFactory: provideForRootGuard,
              deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]
            }, {
              provide: ROUTER_CONFIGURATION,
              useValue: config ? config : {}
            }, {
              provide: _angular_common.LocationStrategy,
              useFactory: provideLocationStrategy,
              deps: [_angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION]
            }, {
              provide: PreloadingStrategy,
              useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
            }, provideRouterInitializer()]
          };
        };
        RouterModule.forChild = function (routes) {
          return {
            ngModule: RouterModule,
            providers: [provideRoutes(routes)]
          };
        };
        RouterModule.decorators = [{
          type: _angular_core.NgModule,
          args: [{
            declarations: ROUTER_DIRECTIVES,
            exports: ROUTER_DIRECTIVES
          }]
        }];
        RouterModule.ctorParameters = [{
          type: undefined,
          decorators: [{ type: _angular_core.Optional }, {
            type: _angular_core.Inject,
            args: [ROUTER_FORROOT_GUARD]
          }]
        }];
        return RouterModule;
      }();
      function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
        if (options === void 0) {
          options = {};
        }
        return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
      }
      function provideForRootGuard(router) {
        if (router) {
          throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
        }
        return 'guarded';
      }
      function provideRoutes(routes) {
        return [{
          provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS,
          multi: true,
          useValue: routes
        }, {
          provide: ROUTES,
          multi: true,
          useValue: routes
        }];
      }
      function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy) {
        if (opts === void 0) {
          opts = {};
        }
        var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
        if (urlHandlingStrategy) {
          router.urlHandlingStrategy = urlHandlingStrategy;
        }
        if (opts.errorHandler) {
          router.errorHandler = opts.errorHandler;
        }
        if (opts.enableTracing) {
          var dom_1 = getDOM();
          router.events.subscribe(function (e) {
            dom_1.logGroup("Router Event: " + e.constructor.name);
            dom_1.log(e.toString());
            dom_1.log(e);
            dom_1.logGroupEnd();
          });
        }
        return router;
      }
      function rootRoute(router) {
        return router.routerState.root;
      }
      function initialRouterNavigation(router, ref, preloader, opts) {
        return function (bootstrappedComponentRef) {
          if (bootstrappedComponentRef !== ref.components[0]) {
            return;
          }
          router.resetRootComponentType(ref.componentTypes[0]);
          preloader.setUpPreloading();
          if (opts.initialNavigation === false) {
            router.setUpLocationChangeListener();
          } else {
            router.initialNavigation();
          }
        };
      }
      var ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');
      function provideRouterInitializer() {
        return [{
          provide: ROUTER_INITIALIZER,
          useFactory: initialRouterNavigation,
          deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]
        }, {
          provide: _angular_core.APP_BOOTSTRAP_LISTENER,
          multi: true,
          useExisting: ROUTER_INITIALIZER
        }];
      }
      var __router_private__ = {
        ROUTER_PROVIDERS: ROUTER_PROVIDERS,
        ROUTES: ROUTES,
        flatten: flatten
      };
      exports.RouterLink = RouterLink;
      exports.RouterLinkWithHref = RouterLinkWithHref;
      exports.RouterLinkActive = RouterLinkActive;
      exports.RouterOutlet = RouterOutlet;
      exports.NavigationCancel = NavigationCancel;
      exports.NavigationEnd = NavigationEnd;
      exports.NavigationError = NavigationError;
      exports.NavigationStart = NavigationStart;
      exports.Router = Router;
      exports.RoutesRecognized = RoutesRecognized;
      exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;
      exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;
      exports.RouterModule = RouterModule;
      exports.provideRoutes = provideRoutes;
      exports.RouterOutletMap = RouterOutletMap;
      exports.NoPreloading = NoPreloading;
      exports.PreloadAllModules = PreloadAllModules;
      exports.PreloadingStrategy = PreloadingStrategy;
      exports.RouterPreloader = RouterPreloader;
      exports.ActivatedRoute = ActivatedRoute;
      exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
      exports.RouterState = RouterState;
      exports.RouterStateSnapshot = RouterStateSnapshot;
      exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
      exports.UrlHandlingStrategy = UrlHandlingStrategy;
      exports.DefaultUrlSerializer = DefaultUrlSerializer;
      exports.UrlSegment = UrlSegment;
      exports.UrlSegmentGroup = UrlSegmentGroup;
      exports.UrlSerializer = UrlSerializer;
      exports.UrlTree = UrlTree;
      exports.__router_private__ = __router_private__;
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("3c", ["59"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("59");
  return module.exports;
});
$__System.register("5c", ["8", "3c", "43", "45"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, router_1, angular2_redux_1, user_actions_1, UserComponent, _a, _b, _c;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (angular2_redux_1_1) {
                angular2_redux_1 = angular2_redux_1_1;
            },
            function (user_actions_1_1) {
                user_actions_1 = user_actions_1_1;
            }
        ],
        execute: function () {
            UserComponent = (function () {
                function UserComponent(appStore, userActions, route) {
                    var _this = this;
                    this.appStore = appStore;
                    this.userActions = userActions;
                    appStore.subscribe(function (state) { return _this.user = state.current; });
                    route.params.forEach(function (params) {
                        var userId = params["id"];
                        if (userId) {
                            appStore.dispatch(userActions.fetchUser(userId));
                        }
                    });
                }
                UserComponent.prototype.ngOnDestroy = function () {
                    this.appStore.dispatch(this.userActions.setCurrentUser(null));
                };
                return UserComponent;
            }());
            UserComponent = __decorate([
                core_1.Component({
                    selector: 'user',
                    template: "\n        <div *ngIf=\"!user\">Loading user...</div>\n        <div *ngIf=\"user\">\n            <user-view [user]=\"user\"></user-view>\n            <hr/>\n            <a [routerLink]=\"['/users']\">Show all users</a>\n        </div>\n    "
                }),
                __metadata("design:paramtypes", [typeof (_a = typeof angular2_redux_1.AppStore !== "undefined" && angular2_redux_1.AppStore) === "function" && _a || Object, typeof (_b = typeof user_actions_1.UserActions !== "undefined" && user_actions_1.UserActions) === "function" && _b || Object, typeof (_c = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _c || Object])
            ], UserComponent);
            exports_1("UserComponent", UserComponent);
        }
    };
});

$__System.register("5d", ["42", "47", "5c"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var users_list_component_1, users_list_with_details_component_1, user_component_1, appRoutes;
    return {
        setters: [
            function (users_list_component_1_1) {
                users_list_component_1 = users_list_component_1_1;
            },
            function (users_list_with_details_component_1_1) {
                users_list_with_details_component_1 = users_list_with_details_component_1_1;
            },
            function (user_component_1_1) {
                user_component_1 = user_component_1_1;
            }
        ],
        execute: function () {
            exports_1("appRoutes", appRoutes = [
                { path: '', redirectTo: '/users', pathMatch: 'full' },
                { path: 'users', component: users_list_component_1.UsersList },
                { path: 'usersWithDetails', component: users_list_with_details_component_1.UsersListWithDetails },
                { path: 'user/:id', component: user_component_1.UserComponent }
            ]);
        }
    };
});

$__System.registerDynamic('5e', ['8'], true, function ($__require, exports, module) {
    /* */
    "format cjs";
    /**
     * @license Angular v2.2.1
     * (c) 2010-2016 Google, Inc. https://angular.io/
     * License: MIT
     */

    var define,
        global = this || self,
        GLOBAL = global;
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('8')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) : factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core);
    })(this, function (exports, _angular_core) {
        'use strict';

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        /**
         * This class should not be used directly by an application developer. Instead, use
         * {@link Location}.
         *
         * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
         * agnostic.
         * This means that we can have different implementation of `PlatformLocation` for the different
         * platforms
         * that angular supports. For example, the default `PlatformLocation` is {@link
         * BrowserPlatformLocation},
         * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
         *
         * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
         * when
         * they need to interact with the DOM apis like pushState, popState, etc...
         *
         * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
         * by
         * the {@link Router} in order to navigate between routes. Since all interactions between {@link
         * Router} /
         * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
         * class
         * they are all platform independent.
         *
         * @stable
         */

        var PlatformLocation = function () {
            function PlatformLocation() {}
            Object.defineProperty(PlatformLocation.prototype, "pathname", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PlatformLocation.prototype, "search", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PlatformLocation.prototype, "hash", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            return PlatformLocation;
        }();

        /**
         * `LocationStrategy` is responsible for representing and reading route state
         * from the browser's URL. Angular provides two strategies:
         * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
         *
         * This is used under the hood of the {@link Location} service.
         *
         * Applications should use the {@link Router} or {@link Location} services to
         * interact with application route state.
         *
         * For instance, {@link HashLocationStrategy} produces URLs like
         * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
         * `http://example.com/foo` as an equivalent URL.
         *
         * See these two classes for more.
         *
         * @stable
         */
        var LocationStrategy = function () {
            function LocationStrategy() {}
            return LocationStrategy;
        }();
        /**
         * The `APP_BASE_HREF` token represents the base href to be used with the
         * {@link PathLocationStrategy}.
         *
         * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
         * representing the URL prefix that should be preserved when generating and recognizing
         * URLs.
         *
         * ### Example
         *
         * ```typescript
         * import {Component, NgModule} from '@angular/core';
         * import {APP_BASE_HREF} from '@angular/common';
         *
         * @NgModule({
         *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
         * })
         * class AppModule {}
         * ```
         *
         * @stable
         */
        var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var globalScope;
        if (typeof window === 'undefined') {
            if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
                // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
                globalScope = self;
            } else {
                globalScope = global;
            }
        } else {
            globalScope = window;
        }
        // Need to declare a new variable for global here since TypeScript
        // exports the original value of the symbol.
        var _global = globalScope;
        function getTypeNameForDebugging(type) {
            return type['name'] || typeof type;
        }
        // TODO: remove calls to assert in production environment
        // Note: Can't just export this and import in in other files
        // as `assert` is a reserved keyword in Dart
        _global.assert = function assert(condition) {
            // TODO: to be fixed properly via #2830, noop for now
        };
        function isPresent(obj) {
            return obj != null;
        }
        function isBlank(obj) {
            return obj == null;
        }
        function isDate(obj) {
            return obj instanceof Date && !isNaN(obj.valueOf());
        }
        function stringify(token) {
            if (typeof token === 'string') {
                return token;
            }
            if (token == null) {
                return '' + token;
            }
            if (token.overriddenName) {
                return token.overriddenName;
            }
            if (token.name) {
                return token.name;
            }
            var res = token.toString();
            var newLineIndex = res.indexOf('\n');
            return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
        }
        var NumberWrapper = function () {
            function NumberWrapper() {}
            NumberWrapper.parseIntAutoRadix = function (text) {
                var result = parseInt(text);
                if (isNaN(result)) {
                    throw new Error('Invalid integer literal when parsing ' + text);
                }
                return result;
            };
            NumberWrapper.isNumeric = function (value) {
                return !isNaN(value - parseFloat(value));
            };
            return NumberWrapper;
        }();
        function isJsObject(o) {
            return o !== null && (typeof o === 'function' || typeof o === 'object');
        }
        var _symbolIterator = null;
        function getSymbolIterator() {
            if (!_symbolIterator) {
                if (globalScope.Symbol && Symbol.iterator) {
                    _symbolIterator = Symbol.iterator;
                } else {
                    // es6-shim specific logic
                    var keys = Object.getOwnPropertyNames(Map.prototype);
                    for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                            _symbolIterator = key;
                        }
                    }
                }
            }
            return _symbolIterator;
        }

        /**
         * `Location` is a service that applications can use to interact with a browser's URL.
         * Depending on which {@link LocationStrategy} is used, `Location` will either persist
         * to the URL's path or the URL's hash segment.
         *
         * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
         * `Location` only if you need to interact with or create normalized URLs outside of
         * routing.
         *
         * `Location` is responsible for normalizing the URL against the application's base href.
         * A normalized URL is absolute from the URL host, includes the application's base href, and has no
         * trailing slash:
         * - `/my/app/user/123` is normalized
         * - `my/app/user/123` **is not** normalized
         * - `/my/app/user/123/` **is not** normalized
         *
         * ### Example
         *
         * ```
         * import {Component} from '@angular/core';
         * import {Location} from '@angular/common';
         *
         * @Component({selector: 'app-component'})
         * class AppCmp {
         *   constructor(location: Location) {
         *     location.go('/foo');
         *   }
         * }
         * ```
         *
         * @stable
         */
        var Location = function () {
            function Location(platformStrategy) {
                var _this = this;
                /** @internal */
                this._subject = new _angular_core.EventEmitter();
                this._platformStrategy = platformStrategy;
                var browserBaseHref = this._platformStrategy.getBaseHref();
                this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
                this._platformStrategy.onPopState(function (ev) {
                    _this._subject.emit({
                        'url': _this.path(true),
                        'pop': true,
                        'type': ev.type
                    });
                });
            }
            /**
             * Returns the normalized URL path.
             */
            // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
            // removed.
            Location.prototype.path = function (includeHash) {
                if (includeHash === void 0) {
                    includeHash = false;
                }
                return this.normalize(this._platformStrategy.path(includeHash));
            };
            /**
             * Normalizes the given path and compares to the current normalized path.
             */
            Location.prototype.isCurrentPathEqualTo = function (path, query) {
                if (query === void 0) {
                    query = '';
                }
                return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
            };
            /**
             * Given a string representing a URL, returns the normalized URL path without leading or
             * trailing slashes.
             */
            Location.prototype.normalize = function (url) {
                return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
            };
            /**
             * Given a string representing a URL, returns the platform-specific external URL path.
             * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
             * before normalizing. This method will also add a hash if `HashLocationStrategy` is
             * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
             */
            Location.prototype.prepareExternalUrl = function (url) {
                if (url.length > 0 && !url.startsWith('/')) {
                    url = '/' + url;
                }
                return this._platformStrategy.prepareExternalUrl(url);
            };
            // TODO: rename this method to pushState
            /**
             * Changes the browsers URL to the normalized version of the given URL, and pushes a
             * new item onto the platform's history.
             */
            Location.prototype.go = function (path, query) {
                if (query === void 0) {
                    query = '';
                }
                this._platformStrategy.pushState(null, '', path, query);
            };
            /**
             * Changes the browsers URL to the normalized version of the given URL, and replaces
             * the top item on the platform's history stack.
             */
            Location.prototype.replaceState = function (path, query) {
                if (query === void 0) {
                    query = '';
                }
                this._platformStrategy.replaceState(null, '', path, query);
            };
            /**
             * Navigates forward in the platform's history.
             */
            Location.prototype.forward = function () {
                this._platformStrategy.forward();
            };
            /**
             * Navigates back in the platform's history.
             */
            Location.prototype.back = function () {
                this._platformStrategy.back();
            };
            /**
             * Subscribe to the platform's `popState` events.
             */
            Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
                if (onThrow === void 0) {
                    onThrow = null;
                }
                if (onReturn === void 0) {
                    onReturn = null;
                }
                return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
            };
            /**
             * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
             * is.
             */
            Location.normalizeQueryParams = function (params) {
                return params.length > 0 && params.substring(0, 1) != '?' ? '?' + params : params;
            };
            /**
             * Given 2 parts of a url, join them with a slash if needed.
             */
            Location.joinWithSlash = function (start, end) {
                if (start.length == 0) {
                    return end;
                }
                if (end.length == 0) {
                    return start;
                }
                var slashes = 0;
                if (start.endsWith('/')) {
                    slashes++;
                }
                if (end.startsWith('/')) {
                    slashes++;
                }
                if (slashes == 2) {
                    return start + end.substring(1);
                }
                if (slashes == 1) {
                    return start + end;
                }
                return start + '/' + end;
            };
            /**
             * If url has a trailing slash, remove it, otherwise return url as is.
             */
            Location.stripTrailingSlash = function (url) {
                if (/\/$/g.test(url)) {
                    url = url.substring(0, url.length - 1);
                }
                return url;
            };
            Location.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            Location.ctorParameters = [{ type: LocationStrategy }];
            return Location;
        }();
        function _stripBaseHref(baseHref, url) {
            if (baseHref.length > 0 && url.startsWith(baseHref)) {
                return url.substring(baseHref.length);
            }
            return url;
        }
        function _stripIndexHtml(url) {
            if (/\/index.html$/g.test(url)) {
                // '/index.html'.length == 11
                return url.substring(0, url.length - 11);
            }
            return url;
        }

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
         * {@link Location} service to represent its state in the
         * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
         * of the browser's URL.
         *
         * For instance, if you call `location.go('/foo')`, the browser's URL will become
         * `example.com#/foo`.
         *
         * ### Example
         *
         * ```
         * import {Component, NgModule} from '@angular/core';
         * import {
         *   LocationStrategy,
         *   HashLocationStrategy
         * } from '@angular/common';
         *
         * @NgModule({
         *   providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}]
         * })
         * class AppModule {}
         * ```
         *
         * @stable
         */
        var HashLocationStrategy = function (_super) {
            __extends(HashLocationStrategy, _super);
            function HashLocationStrategy(_platformLocation, _baseHref) {
                _super.call(this);
                this._platformLocation = _platformLocation;
                this._baseHref = '';
                if (isPresent(_baseHref)) {
                    this._baseHref = _baseHref;
                }
            }
            HashLocationStrategy.prototype.onPopState = function (fn) {
                this._platformLocation.onPopState(fn);
                this._platformLocation.onHashChange(fn);
            };
            HashLocationStrategy.prototype.getBaseHref = function () {
                return this._baseHref;
            };
            HashLocationStrategy.prototype.path = function (includeHash) {
                if (includeHash === void 0) {
                    includeHash = false;
                }
                // the hash value is always prefixed with a `#`
                // and if it is empty then it will stay empty
                var path = this._platformLocation.hash;
                if (!isPresent(path)) path = '#';
                return path.length > 0 ? path.substring(1) : path;
            };
            HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
                var url = Location.joinWithSlash(this._baseHref, internal);
                return url.length > 0 ? '#' + url : url;
            };
            HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
                var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
                if (url.length == 0) {
                    url = this._platformLocation.pathname;
                }
                this._platformLocation.pushState(state, title, url);
            };
            HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
                var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
                if (url.length == 0) {
                    url = this._platformLocation.pathname;
                }
                this._platformLocation.replaceState(state, title, url);
            };
            HashLocationStrategy.prototype.forward = function () {
                this._platformLocation.forward();
            };
            HashLocationStrategy.prototype.back = function () {
                this._platformLocation.back();
            };
            HashLocationStrategy.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            HashLocationStrategy.ctorParameters = [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }];
            return HashLocationStrategy;
        }(LocationStrategy);

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$1 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
         * {@link Location} service to represent its state in the
         * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
         * browser's URL.
         *
         * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
         * provided in {@link ROUTER_PROVIDERS}.
         *
         * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
         * or add a base element to the document. This URL prefix that will be preserved
         * when generating and recognizing URLs.
         *
         * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
         * `location.go('/foo')`, the browser's URL will become
         * `example.com/my/app/foo`.
         *
         * Similarly, if you add `<base href='/my/app'/>` to the document and call
         * `location.go('/foo')`, the browser's URL will become
         * `example.com/my/app/foo`.
         *
         * @stable
         */
        var PathLocationStrategy = function (_super) {
            __extends$1(PathLocationStrategy, _super);
            function PathLocationStrategy(_platformLocation, href) {
                _super.call(this);
                this._platformLocation = _platformLocation;
                if (isBlank(href)) {
                    href = this._platformLocation.getBaseHrefFromDOM();
                }
                if (isBlank(href)) {
                    throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
                }
                this._baseHref = href;
            }
            PathLocationStrategy.prototype.onPopState = function (fn) {
                this._platformLocation.onPopState(fn);
                this._platformLocation.onHashChange(fn);
            };
            PathLocationStrategy.prototype.getBaseHref = function () {
                return this._baseHref;
            };
            PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
                return Location.joinWithSlash(this._baseHref, internal);
            };
            PathLocationStrategy.prototype.path = function (includeHash) {
                if (includeHash === void 0) {
                    includeHash = false;
                }
                var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
                var hash = this._platformLocation.hash;
                return hash && includeHash ? "" + pathname + hash : pathname;
            };
            PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
                var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
                this._platformLocation.pushState(state, title, externalUrl);
            };
            PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
                var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
                this._platformLocation.replaceState(state, title, externalUrl);
            };
            PathLocationStrategy.prototype.forward = function () {
                this._platformLocation.forward();
            };
            PathLocationStrategy.prototype.back = function () {
                this._platformLocation.back();
            };
            PathLocationStrategy.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            PathLocationStrategy.ctorParameters = [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }];
            return PathLocationStrategy;
        }(LocationStrategy);

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$2 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * @experimental
         */
        var NgLocalization = function () {
            function NgLocalization() {}
            return NgLocalization;
        }();
        /**
         * Returns the plural category for a given value.
         * - "=value" when the case exists,
         * - the plural category otherwise
         *
         * @internal
         */
        function getPluralCategory(value, cases, ngLocalization) {
            var nbCase = "=" + value;
            return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
        }
        /**
         * Returns the plural case based on the locale
         *
         * @experimental
         */
        var NgLocaleLocalization = function (_super) {
            __extends$2(NgLocaleLocalization, _super);
            function NgLocaleLocalization(_locale) {
                _super.call(this);
                this._locale = _locale;
            }
            NgLocaleLocalization.prototype.getPluralCategory = function (value) {
                var plural = getPluralCase(this._locale, value);
                switch (plural) {
                    case Plural.Zero:
                        return 'zero';
                    case Plural.One:
                        return 'one';
                    case Plural.Two:
                        return 'two';
                    case Plural.Few:
                        return 'few';
                    case Plural.Many:
                        return 'many';
                    default:
                        return 'other';
                }
            };
            NgLocaleLocalization.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            NgLocaleLocalization.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
            return NgLocaleLocalization;
        }(NgLocalization);
        // This is generated code DO NOT MODIFY
        // see angular2/script/cldr/gen_plural_rules.js
        /** @experimental */
        var Plural;
        (function (Plural) {
            Plural[Plural["Zero"] = 0] = "Zero";
            Plural[Plural["One"] = 1] = "One";
            Plural[Plural["Two"] = 2] = "Two";
            Plural[Plural["Few"] = 3] = "Few";
            Plural[Plural["Many"] = 4] = "Many";
            Plural[Plural["Other"] = 5] = "Other";
        })(Plural || (Plural = {}));
        /**
         * Returns the plural case based on the locale
         *
         * @experimental
         */
        function getPluralCase(locale, nLike) {
            // TODO(vicb): lazy compute
            if (typeof nLike === 'string') {
                nLike = parseInt(nLike, 10);
            }
            var n = nLike;
            var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
            var i = Math.floor(Math.abs(n));
            var v = nDecimal.length;
            var f = parseInt(nDecimal, 10);
            var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
            var lang = locale.split('-')[0].toLowerCase();
            switch (lang) {
                case 'af':
                case 'asa':
                case 'az':
                case 'bem':
                case 'bez':
                case 'bg':
                case 'brx':
                case 'ce':
                case 'cgg':
                case 'chr':
                case 'ckb':
                case 'ee':
                case 'el':
                case 'eo':
                case 'es':
                case 'eu':
                case 'fo':
                case 'fur':
                case 'gsw':
                case 'ha':
                case 'haw':
                case 'hu':
                case 'jgo':
                case 'jmc':
                case 'ka':
                case 'kk':
                case 'kkj':
                case 'kl':
                case 'ks':
                case 'ksb':
                case 'ky':
                case 'lb':
                case 'lg':
                case 'mas':
                case 'mgo':
                case 'ml':
                case 'mn':
                case 'nb':
                case 'nd':
                case 'ne':
                case 'nn':
                case 'nnh':
                case 'nyn':
                case 'om':
                case 'or':
                case 'os':
                case 'ps':
                case 'rm':
                case 'rof':
                case 'rwk':
                case 'saq':
                case 'seh':
                case 'sn':
                case 'so':
                case 'sq':
                case 'ta':
                case 'te':
                case 'teo':
                case 'tk':
                case 'tr':
                case 'ug':
                case 'uz':
                case 'vo':
                case 'vun':
                case 'wae':
                case 'xog':
                    if (n === 1) return Plural.One;
                    return Plural.Other;
                case 'agq':
                case 'bas':
                case 'cu':
                case 'dav':
                case 'dje':
                case 'dua':
                case 'dyo':
                case 'ebu':
                case 'ewo':
                case 'guz':
                case 'kam':
                case 'khq':
                case 'ki':
                case 'kln':
                case 'kok':
                case 'ksf':
                case 'lrc':
                case 'lu':
                case 'luo':
                case 'luy':
                case 'mer':
                case 'mfe':
                case 'mgh':
                case 'mua':
                case 'mzn':
                case 'nmg':
                case 'nus':
                case 'qu':
                case 'rn':
                case 'rw':
                case 'sbp':
                case 'twq':
                case 'vai':
                case 'yav':
                case 'yue':
                case 'zgh':
                case 'ak':
                case 'ln':
                case 'mg':
                case 'pa':
                case 'ti':
                    if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;
                    return Plural.Other;
                case 'am':
                case 'as':
                case 'bn':
                case 'fa':
                case 'gu':
                case 'hi':
                case 'kn':
                case 'mr':
                case 'zu':
                    if (i === 0 || n === 1) return Plural.One;
                    return Plural.Other;
                case 'ar':
                    if (n === 0) return Plural.Zero;
                    if (n === 1) return Plural.One;
                    if (n === 2) return Plural.Two;
                    if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;
                    if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;
                    return Plural.Other;
                case 'ast':
                case 'ca':
                case 'de':
                case 'en':
                case 'et':
                case 'fi':
                case 'fy':
                case 'gl':
                case 'it':
                case 'nl':
                case 'sv':
                case 'sw':
                case 'ur':
                case 'yi':
                    if (i === 1 && v === 0) return Plural.One;
                    return Plural.Other;
                case 'be':
                    if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;
                    if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;
                    if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;
                    return Plural.Other;
                case 'br':
                    if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;
                    if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;
                    if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;
                    if (!(n === 0) && n % 1e6 === 0) return Plural.Many;
                    return Plural.Other;
                case 'bs':
                case 'hr':
                case 'sr':
                    if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;
                    if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;
                    return Plural.Other;
                case 'cs':
                case 'sk':
                    if (i === 1 && v === 0) return Plural.One;
                    if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;
                    if (!(v === 0)) return Plural.Many;
                    return Plural.Other;
                case 'cy':
                    if (n === 0) return Plural.Zero;
                    if (n === 1) return Plural.One;
                    if (n === 2) return Plural.Two;
                    if (n === 3) return Plural.Few;
                    if (n === 6) return Plural.Many;
                    return Plural.Other;
                case 'da':
                    if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;
                    return Plural.Other;
                case 'dsb':
                case 'hsb':
                    if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;
                    if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;
                    if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;
                    return Plural.Other;
                case 'ff':
                case 'fr':
                case 'hy':
                case 'kab':
                    if (i === 0 || i === 1) return Plural.One;
                    return Plural.Other;
                case 'fil':
                    if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;
                    return Plural.Other;
                case 'ga':
                    if (n === 1) return Plural.One;
                    if (n === 2) return Plural.Two;
                    if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;
                    if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;
                    return Plural.Other;
                case 'gd':
                    if (n === 1 || n === 11) return Plural.One;
                    if (n === 2 || n === 12) return Plural.Two;
                    if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;
                    return Plural.Other;
                case 'gv':
                    if (v === 0 && i % 10 === 1) return Plural.One;
                    if (v === 0 && i % 10 === 2) return Plural.Two;
                    if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;
                    if (!(v === 0)) return Plural.Many;
                    return Plural.Other;
                case 'he':
                    if (i === 1 && v === 0) return Plural.One;
                    if (i === 2 && v === 0) return Plural.Two;
                    if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;
                    return Plural.Other;
                case 'is':
                    if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;
                    return Plural.Other;
                case 'ksh':
                    if (n === 0) return Plural.Zero;
                    if (n === 1) return Plural.One;
                    return Plural.Other;
                case 'kw':
                case 'naq':
                case 'se':
                case 'smn':
                    if (n === 1) return Plural.One;
                    if (n === 2) return Plural.Two;
                    return Plural.Other;
                case 'lag':
                    if (n === 0) return Plural.Zero;
                    if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;
                    return Plural.Other;
                case 'lt':
                    if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;
                    if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;
                    if (!(f === 0)) return Plural.Many;
                    return Plural.Other;
                case 'lv':
                case 'prg':
                    if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;
                    if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;
                    return Plural.Other;
                case 'mk':
                    if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;
                    return Plural.Other;
                case 'mt':
                    if (n === 1) return Plural.One;
                    if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;
                    if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;
                    return Plural.Other;
                case 'pl':
                    if (i === 1 && v === 0) return Plural.One;
                    if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
                    if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;
                    return Plural.Other;
                case 'pt':
                    if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;
                    return Plural.Other;
                case 'ro':
                    if (i === 1 && v === 0) return Plural.One;
                    if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;
                    return Plural.Other;
                case 'ru':
                case 'uk':
                    if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;
                    if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
                    if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;
                    return Plural.Other;
                case 'shi':
                    if (i === 0 || n === 1) return Plural.One;
                    if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;
                    return Plural.Other;
                case 'si':
                    if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;
                    return Plural.Other;
                case 'sl':
                    if (v === 0 && i % 100 === 1) return Plural.One;
                    if (v === 0 && i % 100 === 2) return Plural.Two;
                    if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;
                    return Plural.Other;
                case 'tzm':
                    if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;
                    return Plural.Other;
                default:
                    return Plural.Other;
            }
        }

        function isListLikeIterable(obj) {
            if (!isJsObject(obj)) return false;
            return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
        }

        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Adds and removes CSS classes on an HTML element.
         *
         * @howToUse
         * ```
         *     <some-element [ngClass]="'first second'">...</some-element>
         *
         *     <some-element [ngClass]="['first', 'second']">...</some-element>
         *
         *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
         *
         *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
         * ```
         *
         * @description
         *
         * The CSS classes are updated as follows, depending on the type of the expression evaluation:
         * - `string` - the CSS classes listed in the string (space delimited) are added,
         * - `Array` - the CSS classes declared as Array elements are added,
         * - `Object` - keys are CSS classes that get added when the expression given in the value
         *              evaluates to a truthy value, otherwise they are removed.
         *
         * @stable
         */
        var NgClass = function () {
            function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
                this._iterableDiffers = _iterableDiffers;
                this._keyValueDiffers = _keyValueDiffers;
                this._ngEl = _ngEl;
                this._renderer = _renderer;
                this._initialClasses = [];
            }
            Object.defineProperty(NgClass.prototype, "klass", {
                set: function (v) {
                    this._applyInitialClasses(true);
                    this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
                    this._applyInitialClasses(false);
                    this._applyClasses(this._rawClass, false);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NgClass.prototype, "ngClass", {
                set: function (v) {
                    this._cleanupClasses(this._rawClass);
                    this._iterableDiffer = null;
                    this._keyValueDiffer = null;
                    this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
                    if (this._rawClass) {
                        if (isListLikeIterable(this._rawClass)) {
                            this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
                        } else {
                            this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            NgClass.prototype.ngDoCheck = function () {
                if (this._iterableDiffer) {
                    var changes = this._iterableDiffer.diff(this._rawClass);
                    if (changes) {
                        this._applyIterableChanges(changes);
                    }
                } else if (this._keyValueDiffer) {
                    var changes = this._keyValueDiffer.diff(this._rawClass);
                    if (changes) {
                        this._applyKeyValueChanges(changes);
                    }
                }
            };
            NgClass.prototype._cleanupClasses = function (rawClassVal) {
                this._applyClasses(rawClassVal, true);
                this._applyInitialClasses(false);
            };
            NgClass.prototype._applyKeyValueChanges = function (changes) {
                var _this = this;
                changes.forEachAddedItem(function (record) {
                    return _this._toggleClass(record.key, record.currentValue);
                });
                changes.forEachChangedItem(function (record) {
                    return _this._toggleClass(record.key, record.currentValue);
                });
                changes.forEachRemovedItem(function (record) {
                    if (record.previousValue) {
                        _this._toggleClass(record.key, false);
                    }
                });
            };
            NgClass.prototype._applyIterableChanges = function (changes) {
                var _this = this;
                changes.forEachAddedItem(function (record) {
                    if (typeof record.item === 'string') {
                        _this._toggleClass(record.item, true);
                    } else {
                        throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
                    }
                });
                changes.forEachRemovedItem(function (record) {
                    return _this._toggleClass(record.item, false);
                });
            };
            NgClass.prototype._applyInitialClasses = function (isCleanup) {
                var _this = this;
                this._initialClasses.forEach(function (klass) {
                    return _this._toggleClass(klass, !isCleanup);
                });
            };
            NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
                var _this = this;
                if (rawClassVal) {
                    if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                        rawClassVal.forEach(function (klass) {
                            return _this._toggleClass(klass, !isCleanup);
                        });
                    } else {
                        Object.keys(rawClassVal).forEach(function (klass) {
                            if (isPresent(rawClassVal[klass])) _this._toggleClass(klass, !isCleanup);
                        });
                    }
                }
            };
            NgClass.prototype._toggleClass = function (klass, enabled) {
                var _this = this;
                klass = klass.trim();
                if (klass) {
                    klass.split(/\s+/g).forEach(function (klass) {
                        _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled);
                    });
                }
            };
            NgClass.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngClass]' }] }];
            /** @nocollapse */
            NgClass.ctorParameters = [{ type: _angular_core.IterableDiffers }, { type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }];
            NgClass.propDecorators = {
                'klass': [{ type: _angular_core.Input, args: ['class'] }],
                'ngClass': [{ type: _angular_core.Input }]
            };
            return NgClass;
        }();

        var NgForRow = function () {
            function NgForRow($implicit, index, count) {
                this.$implicit = $implicit;
                this.index = index;
                this.count = count;
            }
            Object.defineProperty(NgForRow.prototype, "first", {
                get: function () {
                    return this.index === 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NgForRow.prototype, "last", {
                get: function () {
                    return this.index === this.count - 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NgForRow.prototype, "even", {
                get: function () {
                    return this.index % 2 === 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NgForRow.prototype, "odd", {
                get: function () {
                    return !this.even;
                },
                enumerable: true,
                configurable: true
            });
            return NgForRow;
        }();
        /**
         * The `NgFor` directive instantiates a template once per item from an iterable. The context for
         * each instantiated template inherits from the outer context with the given loop variable set
         * to the current item from the iterable.
         *
         * ### Local Variables
         *
         * `NgFor` provides several exported values that can be aliased to local variables:
         *
         * * `index` will be set to the current loop iteration for each template context.
         * * `first` will be set to a boolean value indicating whether the item is the first one in the
         *   iteration.
         * * `last` will be set to a boolean value indicating whether the item is the last one in the
         *   iteration.
         * * `even` will be set to a boolean value indicating whether this item has an even index.
         * * `odd` will be set to a boolean value indicating whether this item has an odd index.
         *
         * ### Change Propagation
         *
         * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
         *
         * * When an item is added, a new instance of the template is added to the DOM.
         * * When an item is removed, its template instance is removed from the DOM.
         * * When items are reordered, their respective templates are reordered in the DOM.
         * * Otherwise, the DOM element for that item will remain the same.
         *
         * Angular uses object identity to track insertions and deletions within the iterator and reproduce
         * those changes in the DOM. This has important implications for animations and any stateful
         * controls
         * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
         * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
         * as user input.
         *
         * It is possible for the identities of elements in the iterator to change while the data does not.
         * This can happen, for example, if the iterator produced from an RPC to the server, and that
         * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
         * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
         * elements were deleted and all new elements inserted). This is an expensive operation and should
         * be avoided if possible.
         *
         * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
         * `trackBy` takes a function which has two arguments: `index` and `item`.
         * If `trackBy` is given, Angular tracks changes by the return value of the function.
         *
         * ### Syntax
         *
         * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
         * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
         *
         * With `<template>` element:
         *
         * ```
         * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
         *   <li>...</li>
         * </template>
         * ```
         *
         * ### Example
         *
         * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
         * example.
         *
         * @stable
         */
        var NgFor = function () {
            function NgFor(_viewContainer, _template, _differs, _cdr) {
                this._viewContainer = _viewContainer;
                this._template = _template;
                this._differs = _differs;
                this._cdr = _cdr;
                this._differ = null;
            }
            Object.defineProperty(NgFor.prototype, "ngForTemplate", {
                set: function (value) {
                    if (value) {
                        this._template = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            NgFor.prototype.ngOnChanges = function (changes) {
                if ('ngForOf' in changes) {
                    // React on ngForOf changes only once all inputs have been initialized
                    var value = changes['ngForOf'].currentValue;
                    if (!this._differ && value) {
                        try {
                            this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
                        } catch (e) {
                            throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                        }
                    }
                }
            };
            NgFor.prototype.ngDoCheck = function () {
                if (this._differ) {
                    var changes = this._differ.diff(this.ngForOf);
                    if (changes) this._applyChanges(changes);
                }
            };
            NgFor.prototype._applyChanges = function (changes) {
                var _this = this;
                var insertTuples = [];
                changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                    if (item.previousIndex == null) {
                        var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
                        var tuple = new RecordViewTuple(item, view);
                        insertTuples.push(tuple);
                    } else if (currentIndex == null) {
                        _this._viewContainer.remove(adjustedPreviousIndex);
                    } else {
                        var view = _this._viewContainer.get(adjustedPreviousIndex);
                        _this._viewContainer.move(view, currentIndex);
                        var tuple = new RecordViewTuple(item, view);
                        insertTuples.push(tuple);
                    }
                });
                for (var i = 0; i < insertTuples.length; i++) {
                    this._perViewChange(insertTuples[i].view, insertTuples[i].record);
                }
                for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
                    var viewRef = this._viewContainer.get(i);
                    viewRef.context.index = i;
                    viewRef.context.count = ilen;
                }
                changes.forEachIdentityChange(function (record) {
                    var viewRef = _this._viewContainer.get(record.currentIndex);
                    viewRef.context.$implicit = record.item;
                });
            };
            NgFor.prototype._perViewChange = function (view, record) {
                view.context.$implicit = record.item;
            };
            NgFor.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' }] }];
            /** @nocollapse */
            NgFor.ctorParameters = [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: _angular_core.IterableDiffers }, { type: _angular_core.ChangeDetectorRef }];
            NgFor.propDecorators = {
                'ngForOf': [{ type: _angular_core.Input }],
                'ngForTrackBy': [{ type: _angular_core.Input }],
                'ngForTemplate': [{ type: _angular_core.Input }]
            };
            return NgFor;
        }();
        var RecordViewTuple = function () {
            function RecordViewTuple(record, view) {
                this.record = record;
                this.view = view;
            }
            return RecordViewTuple;
        }();

        /**
         * Removes or recreates a portion of the DOM tree based on an {expression}.
         *
         * If the expression assigned to `ngIf` evaluates to a falsy value then the element
         * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
         *
         * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
         *
         * ```
         * <div *ngIf="errorCount > 0" class="error">
         *   <!-- Error message displayed when the errorCount property in the current context is greater
         * than 0. -->
         *   {{errorCount}} errors detected
         * </div>
         * ```
         *
         * ### Syntax
         *
         * - `<div *ngIf="condition">...</div>`
         * - `<div template="ngIf condition">...</div>`
         * - `<template [ngIf]="condition"><div>...</div></template>`
         *
         * @stable
         */
        var NgIf = function () {
            function NgIf(_viewContainer, _template) {
                this._viewContainer = _viewContainer;
                this._template = _template;
                this._hasView = false;
            }
            Object.defineProperty(NgIf.prototype, "ngIf", {
                set: function (condition) {
                    if (condition && !this._hasView) {
                        this._hasView = true;
                        this._viewContainer.createEmbeddedView(this._template);
                    } else if (!condition && this._hasView) {
                        this._hasView = false;
                        this._viewContainer.clear();
                    }
                },
                enumerable: true,
                configurable: true
            });
            NgIf.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngIf]' }] }];
            /** @nocollapse */
            NgIf.ctorParameters = [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }];
            NgIf.propDecorators = {
                'ngIf': [{ type: _angular_core.Input }]
            };
            return NgIf;
        }();

        var SwitchView = function () {
            function SwitchView(_viewContainerRef, _templateRef) {
                this._viewContainerRef = _viewContainerRef;
                this._templateRef = _templateRef;
                this._created = false;
            }
            SwitchView.prototype.create = function () {
                this._created = true;
                this._viewContainerRef.createEmbeddedView(this._templateRef);
            };
            SwitchView.prototype.destroy = function () {
                this._created = false;
                this._viewContainerRef.clear();
            };
            SwitchView.prototype.enforceState = function (created) {
                if (created && !this._created) {
                    this.create();
                } else if (!created && this._created) {
                    this.destroy();
                }
            };
            return SwitchView;
        }();
        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
         *             expression.
         *
         * @howToUse
         * ```
         *     <container-element [ngSwitch]="switch_expression">
         *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
         *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
         *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
         *       <ng-container *ngSwitchCase="match_expression_3">
         *         <!-- use a ng-container to group multiple root nodes -->
         *         <inner-element></inner-element>
         *         <inner-other-element></inner-other-element>
         *       </ng-container>
         *       <some-element *ngSwitchDefault>...</some-element>
         *     </container-element>
         * ```
         * @description
         *
         * `NgSwitch` stamps out nested views when their match expression value matches the value of the
         * switch expression.
         *
         * In other words:
         * - you define a container element (where you place the directive with a switch expression on the
         * `[ngSwitch]="..."` attribute)
         * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
         * root elements.
         *
         * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
         * be preserved at the location.
         *
         * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
         * expression is evaluated.
         * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
         * stamped out.
         *
         * @stable
         */
        var NgSwitch = function () {
            function NgSwitch() {
                this._defaultUsed = false;
                this._caseCount = 0;
                this._lastCaseCheckIndex = 0;
                this._lastCasesMatched = false;
            }
            Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
                set: function (newValue) {
                    this._ngSwitch = newValue;
                    if (this._caseCount === 0) {
                        this._updateDefaultCases(true);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /** @internal */
            NgSwitch.prototype._addCase = function () {
                return this._caseCount++;
            };
            /** @internal */
            NgSwitch.prototype._addDefault = function (view) {
                if (!this._defaultViews) {
                    this._defaultViews = [];
                }
                this._defaultViews.push(view);
            };
            /** @internal */
            NgSwitch.prototype._matchCase = function (value) {
                var matched = value == this._ngSwitch;
                this._lastCasesMatched = this._lastCasesMatched || matched;
                this._lastCaseCheckIndex++;
                if (this._lastCaseCheckIndex === this._caseCount) {
                    this._updateDefaultCases(!this._lastCasesMatched);
                    this._lastCaseCheckIndex = 0;
                    this._lastCasesMatched = false;
                }
                return matched;
            };
            NgSwitch.prototype._updateDefaultCases = function (useDefault) {
                if (this._defaultViews && useDefault !== this._defaultUsed) {
                    this._defaultUsed = useDefault;
                    for (var i = 0; i < this._defaultViews.length; i++) {
                        var defaultView = this._defaultViews[i];
                        defaultView.enforceState(useDefault);
                    }
                }
            };
            NgSwitch.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' }] }];
            /** @nocollapse */
            NgSwitch.ctorParameters = [];
            NgSwitch.propDecorators = {
                'ngSwitch': [{ type: _angular_core.Input }]
            };
            return NgSwitch;
        }();
        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Creates a view that will be added/removed from the parent {@link NgSwitch} when the
         *             given expression evaluate to respectively the same/different value as the switch
         *             expression.
         *
         * @howToUse
         * ```
         * <container-element [ngSwitch]="switch_expression">
         *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
         * </container-element>
         *```
         * @description
         *
         * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
         * expression.
         *
         * If multiple match expressions match the switch expression value, all of them are displayed.
         *
         * See {@link NgSwitch} for more details and example.
         *
         * @stable
         */
        var NgSwitchCase = function () {
            function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
                this.ngSwitch = ngSwitch;
                ngSwitch._addCase();
                this._view = new SwitchView(viewContainer, templateRef);
            }
            NgSwitchCase.prototype.ngDoCheck = function () {
                this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
            };
            NgSwitchCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' }] }];
            /** @nocollapse */
            NgSwitchCase.ctorParameters = [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }];
            NgSwitchCase.propDecorators = {
                'ngSwitchCase': [{ type: _angular_core.Input }]
            };
            return NgSwitchCase;
        }();
        /**
         * @ngModule CommonModule
         * @whatItDoes Creates a view that is added to the parent {@link NgSwitch} when no case expressions
         * match the
         *             switch expression.
         *
         * @howToUse
         * ```
         * <container-element [ngSwitch]="switch_expression">
         *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
         *   <some-other-element *ngSwitchDefault>...</some-other-element>
         * </container-element>
         * ```
         *
         * @description
         *
         * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
         * expression.
         *
         * See {@link NgSwitch} for more details and example.
         *
         * @stable
         */
        var NgSwitchDefault = function () {
            function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
                ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
            }
            NgSwitchDefault.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' }] }];
            /** @nocollapse */
            NgSwitchDefault.ctorParameters = [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }];
            return NgSwitchDefault;
        }();

        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
         *
         * @howToUse
         * ```
         * <some-element [ngPlural]="value">
         *   <ng-container *ngPluralCase="'=0'">there is nothing</ng-container>
         *   <ng-container *ngPluralCase="'=1'">there is one</ng-container>
         *   <ng-container *ngPluralCase="'few'">there are a few</ng-container>
         *   <ng-container *ngPluralCase="'other'">there are exactly #</ng-container>
         * </some-element>
         * ```
         *
         * @description
         *
         * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
         * that match the switch expression's pluralization category.
         *
         * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
         * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
         * expression:
         * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
         *   matches the switch expression exactly,
         * - otherwise, the view will be treated as a "category match", and will only display if exact
         *   value matches aren't found and the value maps to its category for the defined locale.
         *
         * See http://cldr.unicode.org/index/cldr-spec/plural-rules
         *
         * @experimental
         */
        var NgPlural = function () {
            function NgPlural(_localization) {
                this._localization = _localization;
                this._caseViews = {};
            }
            Object.defineProperty(NgPlural.prototype, "ngPlural", {
                set: function (value) {
                    this._switchValue = value;
                    this._updateView();
                },
                enumerable: true,
                configurable: true
            });
            NgPlural.prototype.addCase = function (value, switchView) {
                this._caseViews[value] = switchView;
            };
            NgPlural.prototype._updateView = function () {
                this._clearViews();
                var cases = Object.keys(this._caseViews);
                var key = getPluralCategory(this._switchValue, cases, this._localization);
                this._activateView(this._caseViews[key]);
            };
            NgPlural.prototype._clearViews = function () {
                if (this._activeView) this._activeView.destroy();
            };
            NgPlural.prototype._activateView = function (view) {
                if (view) {
                    this._activeView = view;
                    this._activeView.create();
                }
            };
            NgPlural.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngPlural]' }] }];
            /** @nocollapse */
            NgPlural.ctorParameters = [{ type: NgLocalization }];
            NgPlural.propDecorators = {
                'ngPlural': [{ type: _angular_core.Input }]
            };
            return NgPlural;
        }();
        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Creates a view that will be added/removed from the parent {@link NgPlural} when the
         *             given expression matches the plural expression according to CLDR rules.
         *
         * @howToUse
         * ```
         * <some-element [ngPlural]="value">
         *   <ng-container *ngPluralCase="'=0'">...</ng-container>
         *   <ng-container *ngPluralCase="'other'">...</ng-container>
         * </some-element>
         *```
         *
         * See {@link NgPlural} for more details and example.
         *
         * @experimental
         */
        var NgPluralCase = function () {
            function NgPluralCase(value, template, viewContainer, ngPlural) {
                this.value = value;
                ngPlural.addCase(value, new SwitchView(viewContainer, template));
            }
            NgPluralCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' }] }];
            /** @nocollapse */
            NgPluralCase.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase'] }] }, { type: _angular_core.TemplateRef }, { type: _angular_core.ViewContainerRef }, { type: NgPlural, decorators: [{ type: _angular_core.Host }] }];
            return NgPluralCase;
        }();

        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Update an HTML element styles.
         *
         * @howToUse
         * ```
         * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
         *
         * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
         *
         * <some-element [ngStyle]="objExp">...</some-element>
         * ```
         *
         * @description
         *
         * The styles are updated according to the value of the expression evaluation:
         * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
         * - values are the values assigned to those properties (expressed in the given unit).
         *
         * @stable
         */
        var NgStyle = function () {
            function NgStyle(_differs, _ngEl, _renderer) {
                this._differs = _differs;
                this._ngEl = _ngEl;
                this._renderer = _renderer;
            }
            Object.defineProperty(NgStyle.prototype, "ngStyle", {
                set: function (v) {
                    this._ngStyle = v;
                    if (!this._differ && v) {
                        this._differ = this._differs.find(v).create(null);
                    }
                },
                enumerable: true,
                configurable: true
            });
            NgStyle.prototype.ngDoCheck = function () {
                if (this._differ) {
                    var changes = this._differ.diff(this._ngStyle);
                    if (changes) {
                        this._applyChanges(changes);
                    }
                }
            };
            NgStyle.prototype._applyChanges = function (changes) {
                var _this = this;
                changes.forEachRemovedItem(function (record) {
                    return _this._setStyle(record.key, null);
                });
                changes.forEachAddedItem(function (record) {
                    return _this._setStyle(record.key, record.currentValue);
                });
                changes.forEachChangedItem(function (record) {
                    return _this._setStyle(record.key, record.currentValue);
                });
            };
            NgStyle.prototype._setStyle = function (nameAndUnit, value) {
                var _a = nameAndUnit.split('.'),
                    name = _a[0],
                    unit = _a[1];
                value = value && unit ? "" + value + unit : value;
                this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
            };
            NgStyle.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngStyle]' }] }];
            /** @nocollapse */
            NgStyle.ctorParameters = [{ type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }];
            NgStyle.propDecorators = {
                'ngStyle': [{ type: _angular_core.Input }]
            };
            return NgStyle;
        }();

        /**
         * @ngModule CommonModule
         *
         * @whatItDoes Inserts an embedded view from a prepared `TemplateRef`
         *
         * @howToUse
         * ```
         * <template [ngTemplateOutlet]="templateRefExpression"
         *           [ngOutletContext]="objectExpression">
         * </template>
         * ```
         *
         * @description
         *
         * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
         * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
         * available within the `TemplateRef`.
         *
         * Note: using the key `$implicit` in the context object will set it's value as default.
         *
         * @experimental
         */
        var NgTemplateOutlet = function () {
            function NgTemplateOutlet(_viewContainerRef) {
                this._viewContainerRef = _viewContainerRef;
            }
            Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
                set: function (context) {
                    this._context = context;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
                set: function (templateRef) {
                    this._templateRef = templateRef;
                },
                enumerable: true,
                configurable: true
            });
            NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
                if (this._viewRef) {
                    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
                }
                if (this._templateRef) {
                    this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
                }
            };
            NgTemplateOutlet.decorators = [{ type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' }] }];
            /** @nocollapse */
            NgTemplateOutlet.ctorParameters = [{ type: _angular_core.ViewContainerRef }];
            NgTemplateOutlet.propDecorators = {
                'ngOutletContext': [{ type: _angular_core.Input }],
                'ngTemplateOutlet': [{ type: _angular_core.Input }]
            };
            return NgTemplateOutlet;
        }();

        /**
         * A collection of Angular directives that are likely to be used in each and every Angular
         * application.
         */
        var COMMON_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];

        var isPromise = _angular_core.__core_private__.isPromise;

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$4 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * @stable
         */
        var BaseError = function (_super) {
            __extends$4(BaseError, _super);
            function BaseError(message) {
                // Errors don't use current this, instead they create a new instance.
                // We have to do forward all of our api to the nativeInstance.
                var nativeError = _super.call(this, message);
                this._nativeError = nativeError;
            }
            Object.defineProperty(BaseError.prototype, "message", {
                get: function () {
                    return this._nativeError.message;
                },
                set: function (message) {
                    this._nativeError.message = message;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BaseError.prototype, "name", {
                get: function () {
                    return this._nativeError.name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BaseError.prototype, "stack", {
                get: function () {
                    return this._nativeError.stack;
                },
                set: function (value) {
                    this._nativeError.stack = value;
                },
                enumerable: true,
                configurable: true
            });
            BaseError.prototype.toString = function () {
                return this._nativeError.toString();
            };
            return BaseError;
        }(Error);
        /**
         * @stable
         */
        var WrappedError = function (_super) {
            __extends$4(WrappedError, _super);
            function WrappedError(message, error) {
                _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
                this.originalError = error;
            }
            Object.defineProperty(WrappedError.prototype, "stack", {
                get: function () {
                    return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
                },
                enumerable: true,
                configurable: true
            });
            return WrappedError;
        }(BaseError);

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$3 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        var InvalidPipeArgumentError = function (_super) {
            __extends$3(InvalidPipeArgumentError, _super);
            function InvalidPipeArgumentError(type, value) {
                _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
            }
            return InvalidPipeArgumentError;
        }(BaseError);

        var ObservableStrategy = function () {
            function ObservableStrategy() {}
            ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
                return async.subscribe({ next: updateLatestValue, error: function (e) {
                        throw e;
                    } });
            };
            ObservableStrategy.prototype.dispose = function (subscription) {
                subscription.unsubscribe();
            };
            ObservableStrategy.prototype.onDestroy = function (subscription) {
                subscription.unsubscribe();
            };
            return ObservableStrategy;
        }();
        var PromiseStrategy = function () {
            function PromiseStrategy() {}
            PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
                return async.then(updateLatestValue, function (e) {
                    throw e;
                });
            };
            PromiseStrategy.prototype.dispose = function (subscription) {};
            PromiseStrategy.prototype.onDestroy = function (subscription) {};
            return PromiseStrategy;
        }();
        var _promiseStrategy = new PromiseStrategy();
        var _observableStrategy = new ObservableStrategy();
        /**
         * @ngModule CommonModule
         * @whatItDoes Unwraps a value from an asynchronous primitive.
         * @howToUse `observable_or_promise_expression | async`
         * @description
         * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
         * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
         * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
         * potential memory leaks.
         *
         *
         * ## Examples
         *
         * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
         * promise.
         *
         * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
         *
         * It's also possible to use `async` with Observables. The example below binds the `time` Observable
         * to the view. The Observable continuesly updates the view with the current time.
         *
         * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
         *
         * @stable
         */
        var AsyncPipe = function () {
            function AsyncPipe(_ref) {
                this._ref = _ref;
                this._latestValue = null;
                this._latestReturnedValue = null;
                this._subscription = null;
                this._obj = null;
                this._strategy = null;
            }
            AsyncPipe.prototype.ngOnDestroy = function () {
                if (this._subscription) {
                    this._dispose();
                }
            };
            AsyncPipe.prototype.transform = function (obj) {
                if (!this._obj) {
                    if (obj) {
                        this._subscribe(obj);
                    }
                    this._latestReturnedValue = this._latestValue;
                    return this._latestValue;
                }
                if (obj !== this._obj) {
                    this._dispose();
                    return this.transform(obj);
                }
                if (this._latestValue === this._latestReturnedValue) {
                    return this._latestReturnedValue;
                }
                this._latestReturnedValue = this._latestValue;
                return _angular_core.WrappedValue.wrap(this._latestValue);
            };
            AsyncPipe.prototype._subscribe = function (obj) {
                var _this = this;
                this._obj = obj;
                this._strategy = this._selectStrategy(obj);
                this._subscription = this._strategy.createSubscription(obj, function (value) {
                    return _this._updateLatestValue(obj, value);
                });
            };
            AsyncPipe.prototype._selectStrategy = function (obj) {
                if (isPromise(obj)) {
                    return _promiseStrategy;
                }
                if (obj.subscribe) {
                    return _observableStrategy;
                }
                throw new InvalidPipeArgumentError(AsyncPipe, obj);
            };
            AsyncPipe.prototype._dispose = function () {
                this._strategy.dispose(this._subscription);
                this._latestValue = null;
                this._latestReturnedValue = null;
                this._subscription = null;
                this._obj = null;
            };
            AsyncPipe.prototype._updateLatestValue = function (async, value) {
                if (async === this._obj) {
                    this._latestValue = value;
                    this._ref.markForCheck();
                }
            };
            AsyncPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'async', pure: false }] }];
            /** @nocollapse */
            AsyncPipe.ctorParameters = [{ type: _angular_core.ChangeDetectorRef }];
            return AsyncPipe;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var NumberFormatStyle;
        (function (NumberFormatStyle) {
            NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
            NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
            NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
        })(NumberFormatStyle || (NumberFormatStyle = {}));
        var NumberFormatter = function () {
            function NumberFormatter() {}
            NumberFormatter.format = function (num, locale, style, _a) {
                var _b = _a === void 0 ? {} : _a,
                    minimumIntegerDigits = _b.minimumIntegerDigits,
                    minimumFractionDigits = _b.minimumFractionDigits,
                    maximumFractionDigits = _b.maximumFractionDigits,
                    currency = _b.currency,
                    _c = _b.currencyAsSymbol,
                    currencyAsSymbol = _c === void 0 ? false : _c;
                var options = {
                    minimumIntegerDigits: minimumIntegerDigits,
                    minimumFractionDigits: minimumFractionDigits,
                    maximumFractionDigits: maximumFractionDigits,
                    style: NumberFormatStyle[style].toLowerCase()
                };
                if (style == NumberFormatStyle.Currency) {
                    options.currency = currency;
                    options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
                }
                return new Intl.NumberFormat(locale, options).format(num);
            };
            return NumberFormatter;
        }();
        var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
        var PATTERN_ALIASES = {
            yMMMdjms: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
            yMdjm: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
            yMMMMEEEEd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
            yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
            yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
            yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
            jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
            jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
        };
        var DATE_FORMATS = {
            yyyy: datePartGetterFactory(digitCondition('year', 4)),
            yy: datePartGetterFactory(digitCondition('year', 2)),
            y: datePartGetterFactory(digitCondition('year', 1)),
            MMMM: datePartGetterFactory(nameCondition('month', 4)),
            MMM: datePartGetterFactory(nameCondition('month', 3)),
            MM: datePartGetterFactory(digitCondition('month', 2)),
            M: datePartGetterFactory(digitCondition('month', 1)),
            LLLL: datePartGetterFactory(nameCondition('month', 4)),
            L: datePartGetterFactory(nameCondition('month', 1)),
            dd: datePartGetterFactory(digitCondition('day', 2)),
            d: datePartGetterFactory(digitCondition('day', 1)),
            HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
            H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
            hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
            h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
            jj: datePartGetterFactory(digitCondition('hour', 2)),
            j: datePartGetterFactory(digitCondition('hour', 1)),
            mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
            m: datePartGetterFactory(digitCondition('minute', 1)),
            ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
            s: datePartGetterFactory(digitCondition('second', 1)),
            // while ISO 8601 requires fractions to be prefixed with `.` or `,`
            // we can be just safely rely on using `sss` since we currently don't support single or two digit
            // fractions
            sss: datePartGetterFactory(digitCondition('second', 3)),
            EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
            EEE: datePartGetterFactory(nameCondition('weekday', 3)),
            EE: datePartGetterFactory(nameCondition('weekday', 2)),
            E: datePartGetterFactory(nameCondition('weekday', 1)),
            a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
            Z: timeZoneGetter('short'),
            z: timeZoneGetter('long'),
            ww: datePartGetterFactory({}),
            // first Thursday of the year. not support ?
            w: datePartGetterFactory({}),
            // of the year not support ?
            G: datePartGetterFactory(nameCondition('era', 1)),
            GG: datePartGetterFactory(nameCondition('era', 2)),
            GGG: datePartGetterFactory(nameCondition('era', 3)),
            GGGG: datePartGetterFactory(nameCondition('era', 4))
        };
        function digitModifier(inner) {
            return function (date, locale) {
                var result = inner(date, locale);
                return result.length == 1 ? '0' + result : result;
            };
        }
        function hourClockExtractor(inner) {
            return function (date, locale) {
                return inner(date, locale).split(' ')[1];
            };
        }
        function hourExtractor(inner) {
            return function (date, locale) {
                return inner(date, locale).split(' ')[0];
            };
        }
        function intlDateFormat(date, locale, options) {
            return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
        }
        function timeZoneGetter(timezone) {
            // To workaround `Intl` API restriction for single timezone let format with 24 hours
            var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
            return function (date, locale) {
                var result = intlDateFormat(date, locale, options);
                // Then extract first 3 letters that related to hours
                return result ? result.substring(3) : '';
            };
        }
        function hour12Modify(options, value) {
            options.hour12 = value;
            return options;
        }
        function digitCondition(prop, len) {
            var result = {};
            result[prop] = len === 2 ? '2-digit' : 'numeric';
            return result;
        }
        function nameCondition(prop, len) {
            var result = {};
            if (len < 4) {
                result[prop] = len > 1 ? 'short' : 'narrow';
            } else {
                result[prop] = 'long';
            }
            return result;
        }
        function combine(options) {
            return (_a = Object).assign.apply(_a, [{}].concat(options));
            var _a;
        }
        function datePartGetterFactory(ret) {
            return function (date, locale) {
                return intlDateFormat(date, locale, ret);
            };
        }
        var DATE_FORMATTER_CACHE = new Map();
        function dateFormatter(format, date, locale) {
            var fn = PATTERN_ALIASES[format];
            if (fn) return fn(date, locale);
            var parts = DATE_FORMATTER_CACHE.get(format);
            if (!parts) {
                parts = [];
                var match = void 0;
                DATE_FORMATS_SPLIT.exec(format);
                while (format) {
                    match = DATE_FORMATS_SPLIT.exec(format);
                    if (match) {
                        parts = parts.concat(match.slice(1));
                        format = parts.pop();
                    } else {
                        parts.push(format);
                        format = null;
                    }
                }
                DATE_FORMATTER_CACHE.set(format, parts);
            }
            return parts.reduce(function (text, part) {
                var fn = DATE_FORMATS[part];
                return text + (fn ? fn(date, locale) : partToTime(part));
            }, '');
        }
        function partToTime(part) {
            return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
        }
        var DateFormatter = function () {
            function DateFormatter() {}
            DateFormatter.format = function (date, locale, pattern) {
                return dateFormatter(pattern, date, locale);
            };
            return DateFormatter;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Formats a date according to locale rules.
         * @howToUse `date_expression | date[:format]`
         * @description
         *
         * Where:
         * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
         * (https://www.w3.org/TR/NOTE-datetime).
         * - `format` indicates which date/time components to include. The format can be predifined as
         *   shown below or custom as shown in the table.
         *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
         *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
         *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
         *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
         *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
         *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
         *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
         *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
         *
         *
         *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
         *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
         *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
         *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
         *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
         *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
         *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
         *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
         *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
         *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
         *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
         *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
         *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
         *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
         *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
         *
         * In javascript, only the components specified will be respected (not the ordering,
         * punctuations, ...) and details of the formatting will be dependent on the locale.
         *
         * Timezone of the formatted text will be the local system timezone of the end-user's machine.
         *
         * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
         * applied and the formatted text will have the same day, month and year of the expression.
         *
         * WARNINGS:
         * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
         *   Instead users should treat the date as an immutable object and change the reference when the
         *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
         *   which would be an expensive operation).
         * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
         *   browsers.
         *
         * ### Examples
         *
         * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
         * in the _local_ time and locale is 'en-US':
         *
         * ```
         *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
         *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
         *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
         *     {{ dateObj | date:'mmss' }}        // output is '43:11'
         * ```
         *
         * {@example common/pipes/ts/date_pipe.ts region='DatePipe'}
         *
         * @stable
         */
        var DatePipe = function () {
            function DatePipe(_locale) {
                this._locale = _locale;
            }
            DatePipe.prototype.transform = function (value, pattern) {
                if (pattern === void 0) {
                    pattern = 'mediumDate';
                }
                var date;
                if (isBlank$1(value)) return null;
                if (typeof value === 'string') {
                    value = value.trim();
                }
                if (isDate(value)) {
                    date = value;
                } else if (NumberWrapper.isNumeric(value)) {
                    date = new Date(parseFloat(value));
                } else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
                    /**
                    * For ISO Strings without time the day, month and year must be extracted from the ISO String
                    * before Date creation to avoid time offset and errors in the new Date.
                    * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
                    * date, some browsers (e.g. IE 9) will throw an invalid Date error
                    * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
                    * is applied
                    * Note: ISO months are 0 for January, 1 for February, ...
                    */
                    var _a = value.split('-').map(function (val) {
                        return parseInt(val, 10);
                    }),
                        y = _a[0],
                        m = _a[1],
                        d = _a[2];
                    date = new Date(y, m - 1, d);
                } else {
                    date = new Date(value);
                }
                if (!isDate(date)) {
                    throw new InvalidPipeArgumentError(DatePipe, value);
                }
                return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
            };
            /** @internal */
            DatePipe._ALIASES = {
                'medium': 'yMMMdjms',
                'short': 'yMdjm',
                'fullDate': 'yMMMMEEEEd',
                'longDate': 'yMMMMd',
                'mediumDate': 'yMMMd',
                'shortDate': 'yMd',
                'mediumTime': 'jms',
                'shortTime': 'jm'
            };
            DatePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'date', pure: true }] }];
            /** @nocollapse */
            DatePipe.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
            return DatePipe;
        }();
        function isBlank$1(obj) {
            return obj == null || obj === '';
        }

        var _INTERPOLATION_REGEXP = /#/g;
        /**
         * @ngModule CommonModule
         * @whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
         * @howToUse `expression | i18nPlural:mapping`
         * @description
         *
         *  Where:
         *  - `expression` is a number.
         *  - `mapping` is an object that mimics the ICU format, see
         *    http://userguide.icu-project.org/formatparse/messages
         *
         *  ## Example
         *
         * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
         *
         * @experimental
         */
        var I18nPluralPipe = function () {
            function I18nPluralPipe(_localization) {
                this._localization = _localization;
            }
            I18nPluralPipe.prototype.transform = function (value, pluralMap) {
                if (isBlank(value)) return '';
                if (typeof pluralMap !== 'object' || pluralMap === null) {
                    throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
                }
                var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
                return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
            };
            I18nPluralPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true }] }];
            /** @nocollapse */
            I18nPluralPipe.ctorParameters = [{ type: NgLocalization }];
            return I18nPluralPipe;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Generic selector that displays the string that matches the current value.
         * @howToUse `expression | i18nSelect:mapping`
         * @description
         *
         *  Where `mapping` is an object that indicates the text that should be displayed
         *  for different values of the provided `expression`.
         *  If none of the keys of the mapping match the value of the `expression`, then the content
         *  of the `other` key is returned when present, otherwise an empty string is returned.
         *
         *  ## Example
         *
         * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
         *
         *  @experimental
         */
        var I18nSelectPipe = function () {
            function I18nSelectPipe() {}
            I18nSelectPipe.prototype.transform = function (value, mapping) {
                if (value == null) return '';
                if (typeof mapping !== 'object' || typeof value !== 'string') {
                    throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
                }
                if (mapping.hasOwnProperty(value)) {
                    return mapping[value];
                }
                if (mapping.hasOwnProperty('other')) {
                    return mapping['other'];
                }
                return '';
            };
            I18nSelectPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true }] }];
            /** @nocollapse */
            I18nSelectPipe.ctorParameters = [];
            return I18nSelectPipe;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Converts value into JSON string.
         * @howToUse `expression | json`
         * @description
         *
         * Converts value into string using `JSON.stringify`. Useful for debugging.
         *
         * ### Example
         * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
         *
         * @stable
         */
        var JsonPipe = function () {
            function JsonPipe() {}
            JsonPipe.prototype.transform = function (value) {
                return JSON.stringify(value, null, 2);
            };
            JsonPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'json', pure: false }] }];
            /** @nocollapse */
            JsonPipe.ctorParameters = [];
            return JsonPipe;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Transforms string to lowercase.
         * @howToUse `expression | lowercase`
         * @description
         *
         * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
         *
         * ### Example
         *
         * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
         *
         * @stable
         */
        var LowerCasePipe = function () {
            function LowerCasePipe() {}
            LowerCasePipe.prototype.transform = function (value) {
                if (isBlank(value)) return value;
                if (typeof value !== 'string') {
                    throw new InvalidPipeArgumentError(LowerCasePipe, value);
                }
                return value.toLowerCase();
            };
            LowerCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'lowercase' }] }];
            /** @nocollapse */
            LowerCasePipe.ctorParameters = [];
            return LowerCasePipe;
        }();

        var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
        function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
            if (currency === void 0) {
                currency = null;
            }
            if (currencyAsSymbol === void 0) {
                currencyAsSymbol = false;
            }
            if (isBlank(value)) return null;
            // Convert strings to numbers
            value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
            if (typeof value !== 'number') {
                throw new InvalidPipeArgumentError(pipe, value);
            }
            var minInt;
            var minFraction;
            var maxFraction;
            if (style !== NumberFormatStyle.Currency) {
                // rely on Intl default for currency
                minInt = 1;
                minFraction = 0;
                maxFraction = 3;
            }
            if (digits) {
                var parts = digits.match(_NUMBER_FORMAT_REGEXP);
                if (parts === null) {
                    throw new Error(digits + " is not a valid digit info for number pipes");
                }
                if (isPresent(parts[1])) {
                    minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
                }
                if (isPresent(parts[3])) {
                    minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
                }
                if (isPresent(parts[5])) {
                    maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
                }
            }
            return NumberFormatter.format(value, locale, style, {
                minimumIntegerDigits: minInt,
                minimumFractionDigits: minFraction,
                maximumFractionDigits: maxFraction,
                currency: currency,
                currencyAsSymbol: currencyAsSymbol
            });
        }
        /**
         * @ngModule CommonModule
         * @whatItDoes Formats a number according to locale rules.
         * @howToUse `number_expression | number[:digitInfo]`
         *
         * Formats a number as text. Group sizing and separator and other locale-specific
         * configurations are based on the active locale.
         *
         * where `expression` is a number:
         *  - `digitInfo` is a `string` which has a following format: <br>
         *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
         *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
         *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
         *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
         *
         * For more information on the acceptable range for each of these numbers and other
         * details see your native internationalization library.
         *
         * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
         * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
         *
         * ### Example
         *
         * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
         *
         * @stable
         */
        var DecimalPipe = function () {
            function DecimalPipe(_locale) {
                this._locale = _locale;
            }
            DecimalPipe.prototype.transform = function (value, digits) {
                if (digits === void 0) {
                    digits = null;
                }
                return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
            };
            DecimalPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'number' }] }];
            /** @nocollapse */
            DecimalPipe.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
            return DecimalPipe;
        }();
        /**
         * @ngModule CommonModule
         * @whatItDoes Formats a number as a percentage according to locale rules.
         * @howToUse `number_expression | percent[:digitInfo]`
         *
         * @description
         *
         * Formats a number as percentage.
         *
         * - `digitInfo` See {@link DecimalPipe} for detailed description.
         *
         * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
         * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
         *
         * ### Example
         *
         * {@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
         *
         * @stable
         */
        var PercentPipe = function () {
            function PercentPipe(_locale) {
                this._locale = _locale;
            }
            PercentPipe.prototype.transform = function (value, digits) {
                if (digits === void 0) {
                    digits = null;
                }
                return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
            };
            PercentPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'percent' }] }];
            /** @nocollapse */
            PercentPipe.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
            return PercentPipe;
        }();
        /**
         * @ngModule CommonModule
         * @whatItDoes Formats a number as currency using locale rules.
         * @howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
         * @description
         *
         * Use `currency` to format a number as currency.
         *
         * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
         *    as `USD` for the US dollar and `EUR` for the euro.
         * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
         *   - `true`: use symbol (e.g. `$`).
         *   - `false`(default): use code (e.g. `USD`).
         * - `digitInfo` See {@link DecimalPipe} for detailed description.
         *
         * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
         * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
         *
         * ### Example
         *
         * {@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
         *
         * @stable
         */
        var CurrencyPipe = function () {
            function CurrencyPipe(_locale) {
                this._locale = _locale;
            }
            CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
                if (currencyCode === void 0) {
                    currencyCode = 'USD';
                }
                if (symbolDisplay === void 0) {
                    symbolDisplay = false;
                }
                if (digits === void 0) {
                    digits = null;
                }
                return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
            };
            CurrencyPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'currency' }] }];
            /** @nocollapse */
            CurrencyPipe.ctorParameters = [{ type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
            return CurrencyPipe;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Creates a new List or String containing a subset (slice) of the elements.
         * @howToUse `array_or_string_expression | slice:start[:end]`
         * @description
         *
         * Where the input expression is a `List` or `String`, and:
         * - `start`: The starting index of the subset to return.
         *   - **a positive integer**: return the item at `start` index and all items after
         *     in the list or string expression.
         *   - **a negative integer**: return the item at `start` index from the end and all items after
         *     in the list or string expression.
         *   - **if positive and greater than the size of the expression**: return an empty list or string.
         *   - **if negative and greater than the size of the expression**: return entire list or string.
         * - `end`: The ending index of the subset to return.
         *   - **omitted**: return all items until the end.
         *   - **if positive**: return all items before `end` index of the list or string.
         *   - **if negative**: return all items before `end` index from the end of the list or string.
         *
         * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
         * and `String.prototype.slice()`.
         *
         * When operating on a [List], the returned list is always a copy even when all
         * the elements are being returned.
         *
         * When operating on a blank value, the pipe returns the blank value.
         *
         * ## List Example
         *
         * This `ngFor` example:
         *
         * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
         *
         * produces the following:
         *
         *     <li>b</li>
         *     <li>c</li>
         *
         * ## String Examples
         *
         * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
         *
         * @stable
         */
        var SlicePipe = function () {
            function SlicePipe() {}
            SlicePipe.prototype.transform = function (value, start, end) {
                if (isBlank(value)) return value;
                if (!this.supports(value)) {
                    throw new InvalidPipeArgumentError(SlicePipe, value);
                }
                return value.slice(start, end);
            };
            SlicePipe.prototype.supports = function (obj) {
                return typeof obj === 'string' || Array.isArray(obj);
            };
            SlicePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'slice', pure: false }] }];
            /** @nocollapse */
            SlicePipe.ctorParameters = [];
            return SlicePipe;
        }();

        /**
         * @ngModule CommonModule
         * @whatItDoes Transforms string to uppercase.
         * @howToUse `expression | uppercase`
         * @description
         *
         * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
         *
         * ### Example
         *
         * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
         *
         * @stable
         */
        var UpperCasePipe = function () {
            function UpperCasePipe() {}
            UpperCasePipe.prototype.transform = function (value) {
                if (isBlank(value)) return value;
                if (typeof value !== 'string') {
                    throw new InvalidPipeArgumentError(UpperCasePipe, value);
                }
                return value.toUpperCase();
            };
            UpperCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: 'uppercase' }] }];
            /** @nocollapse */
            UpperCasePipe.ctorParameters = [];
            return UpperCasePipe;
        }();

        /**
         * A collection of Angular pipes that are likely to be used in each and every application.
         */
        var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];

        // Note: This does not contain the location providers,
        // as they need some platform specific implementations to work.
        /**
         * The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
         *
         * @stable
         */
        var CommonModule = function () {
            function CommonModule() {}
            CommonModule.decorators = [{ type: _angular_core.NgModule, args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [{ provide: NgLocalization, useClass: NgLocaleLocalization }]
                }] }];
            /** @nocollapse */
            CommonModule.ctorParameters = [];
            return CommonModule;
        }();

        exports.NgLocalization = NgLocalization;
        exports.CommonModule = CommonModule;
        exports.NgClass = NgClass;
        exports.NgFor = NgFor;
        exports.NgIf = NgIf;
        exports.NgPlural = NgPlural;
        exports.NgPluralCase = NgPluralCase;
        exports.NgStyle = NgStyle;
        exports.NgSwitch = NgSwitch;
        exports.NgSwitchCase = NgSwitchCase;
        exports.NgSwitchDefault = NgSwitchDefault;
        exports.NgTemplateOutlet = NgTemplateOutlet;
        exports.AsyncPipe = AsyncPipe;
        exports.DatePipe = DatePipe;
        exports.I18nPluralPipe = I18nPluralPipe;
        exports.I18nSelectPipe = I18nSelectPipe;
        exports.JsonPipe = JsonPipe;
        exports.LowerCasePipe = LowerCasePipe;
        exports.CurrencyPipe = CurrencyPipe;
        exports.DecimalPipe = DecimalPipe;
        exports.PercentPipe = PercentPipe;
        exports.SlicePipe = SlicePipe;
        exports.UpperCasePipe = UpperCasePipe;
        exports.PlatformLocation = PlatformLocation;
        exports.LocationStrategy = LocationStrategy;
        exports.APP_BASE_HREF = APP_BASE_HREF;
        exports.HashLocationStrategy = HashLocationStrategy;
        exports.PathLocationStrategy = PathLocationStrategy;
        exports.Location = Location;
    });
    return module.exports;
});
$__System.registerDynamic("39", ["5e"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("5e");
  return module.exports;
});
$__System.registerDynamic('5f', ['39', '8', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('39'), $__require('8')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core);
    })(this, function (exports, _angular_common, _angular_core) {
      'use strict';

      var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
      var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
      var _NoOpAnimationDriver = function () {
        function _NoOpAnimationDriver() {}
        _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
          if (previousPlayers === void 0) {
            previousPlayers = [];
          }
          return new NoOpAnimationPlayer();
        };
        return _NoOpAnimationDriver;
      }();
      var AnimationDriver = function () {
        function AnimationDriver() {}
        AnimationDriver.NOOP = new _NoOpAnimationDriver();
        return AnimationDriver;
      }();
      var globalScope;
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      var global$1 = globalScope;
      global$1.assert = function assert(condition) {};
      function isPresent(obj) {
        return obj != null;
      }
      function isBlank(obj) {
        return obj == null;
      }
      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }
        if (token == null) {
          return '' + token;
        }
        if (token.overriddenName) {
          return token.overriddenName;
        }
        if (token.name) {
          return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
          var name_1 = parts.shift();
          if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
            obj = obj[name_1];
          } else {
            obj = obj[name_1] = {};
          }
        }
        if (obj === undefined || obj === null) {
          obj = {};
        }
        obj[parts.shift()] = value;
      }
      var _DOM = null;
      function getDOM() {
        return _DOM;
      }
      function setRootDomAdapter(adapter) {
        if (!_DOM) {
          _DOM = adapter;
        }
      }
      var DomAdapter = function () {
        function DomAdapter() {
          this.resourceLoaderType = null;
        }
        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
          get: function () {
            return this._attrToPropMap;
          },
          set: function (value) {
            this._attrToPropMap = value;
          },
          enumerable: true,
          configurable: true
        });
        ;
        ;
        return DomAdapter;
      }();
      var WebAnimationsPlayer = function () {
        function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
          var _this = this;
          if (previousPlayers === void 0) {
            previousPlayers = [];
          }
          this.element = element;
          this.keyframes = keyframes;
          this.options = options;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._initialized = false;
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.parentPlayer = null;
          this._duration = options['duration'];
          this.previousStyles = {};
          previousPlayers.forEach(function (player) {
            var styles = player._captureStyles();
            Object.keys(styles).forEach(function (prop) {
              return _this.previousStyles[prop] = styles[prop];
            });
          });
        }
        WebAnimationsPlayer.prototype._onFinish = function () {
          if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        WebAnimationsPlayer.prototype.init = function () {
          var _this = this;
          if (this._initialized) return;
          this._initialized = true;
          var keyframes = this.keyframes.map(function (styles) {
            var formattedKeyframe = {};
            Object.keys(styles).forEach(function (prop, index) {
              var value = styles[prop];
              if (value == _angular_core.AUTO_STYLE) {
                value = _computeStyle(_this.element, prop);
              }
              if (value != undefined) {
                formattedKeyframe[prop] = value;
              }
            });
            return formattedKeyframe;
          });
          var previousStyleProps = Object.keys(this.previousStyles);
          if (previousStyleProps.length) {
            var startingKeyframe_1 = findStartingKeyframe(keyframes);
            previousStyleProps.forEach(function (prop) {
              if (isPresent(startingKeyframe_1[prop])) {
                startingKeyframe_1[prop] = _this.previousStyles[prop];
              }
            });
          }
          this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
          this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
          this._resetDomPlayerState();
          this._player.addEventListener('finish', function () {
            return _this._onFinish();
          });
        };
        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
          return element.animate(keyframes, options);
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
          get: function () {
            return this._player;
          },
          enumerable: true,
          configurable: true
        });
        WebAnimationsPlayer.prototype.onStart = function (fn) {
          this._onStartFns.push(fn);
        };
        WebAnimationsPlayer.prototype.onDone = function (fn) {
          this._onDoneFns.push(fn);
        };
        WebAnimationsPlayer.prototype.play = function () {
          this.init();
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._player.play();
        };
        WebAnimationsPlayer.prototype.pause = function () {
          this.init();
          this._player.pause();
        };
        WebAnimationsPlayer.prototype.finish = function () {
          this.init();
          this._onFinish();
          this._player.finish();
        };
        WebAnimationsPlayer.prototype.reset = function () {
          this._resetDomPlayerState();
          this._destroyed = false;
          this._finished = false;
          this._started = false;
        };
        WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
          this._player.cancel();
        };
        WebAnimationsPlayer.prototype.restart = function () {
          this.reset();
          this.play();
        };
        WebAnimationsPlayer.prototype.hasStarted = function () {
          return this._started;
        };
        WebAnimationsPlayer.prototype.destroy = function () {
          if (!this._destroyed) {
            this._resetDomPlayerState();
            this._onFinish();
            this._destroyed = true;
          }
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
          get: function () {
            return this._duration;
          },
          enumerable: true,
          configurable: true
        });
        WebAnimationsPlayer.prototype.setPosition = function (p) {
          this._player.currentTime = p * this.totalTime;
        };
        WebAnimationsPlayer.prototype.getPosition = function () {
          return this._player.currentTime / this.totalTime;
        };
        WebAnimationsPlayer.prototype._captureStyles = function () {
          var _this = this;
          var styles = {};
          if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach(function (prop) {
              if (prop != 'offset') {
                styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
              }
            });
          }
          return styles;
        };
        return WebAnimationsPlayer;
      }();
      function _computeStyle(element, prop) {
        return getDOM().getComputedStyle(element)[prop];
      }
      function _copyKeyframeStyles(styles) {
        var newStyles = {};
        Object.keys(styles).forEach(function (prop) {
          if (prop != 'offset') {
            newStyles[prop] = styles[prop];
          }
        });
        return newStyles;
      }
      function findStartingKeyframe(keyframes) {
        var startingKeyframe = keyframes[0];
        for (var i = 1; i < keyframes.length; i++) {
          var kf = keyframes[i];
          var offset = kf['offset'];
          if (offset !== 0) break;
          startingKeyframe = kf;
        }
        return startingKeyframe;
      }
      var WebAnimationsDriver = function () {
        function WebAnimationsDriver() {}
        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
          if (previousPlayers === void 0) {
            previousPlayers = [];
          }
          var formattedSteps = [];
          var startingStyleLookup = {};
          if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
            startingStyleLookup = _populateStyles(startingStyles, {});
            startingStyleLookup['offset'] = 0;
            formattedSteps.push(startingStyleLookup);
          }
          keyframes.forEach(function (keyframe) {
            var data = _populateStyles(keyframe.styles, startingStyleLookup);
            data['offset'] = keyframe.offset;
            formattedSteps.push(data);
          });
          if (formattedSteps.length == 1) {
            var start = formattedSteps[0];
            start['offset'] = null;
            formattedSteps = [start, start];
          }
          var playerOptions = {
            'duration': duration,
            'delay': delay,
            'fill': 'both'
          };
          if (easing) {
            playerOptions['easing'] = easing;
          }
          previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
          return new WebAnimationsPlayer(element, formattedSteps, playerOptions, previousPlayers);
        };
        return WebAnimationsDriver;
      }();
      function _populateStyles(styles, defaultStyles) {
        var data = {};
        styles.styles.forEach(function (entry) {
          Object.keys(entry).forEach(function (prop) {
            data[prop] = entry[prop];
          });
        });
        Object.keys(defaultStyles).forEach(function (prop) {
          if (!isPresent(data[prop])) {
            data[prop] = defaultStyles[prop];
          }
        });
        return data;
      }
      function filterWebAnimationPlayerFn(player) {
        return player instanceof WebAnimationsPlayer;
      }
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var GenericBrowserDomAdapter = function (_super) {
        __extends$1(GenericBrowserDomAdapter, _super);
        function GenericBrowserDomAdapter() {
          var _this = this;
          _super.call(this);
          this._animationPrefix = null;
          this._transitionEnd = null;
          try {
            var element_1 = this.createElement('div', this.defaultDoc());
            if (isPresent(this.getStyle(element_1, 'animationName'))) {
              this._animationPrefix = '';
            } else {
              var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
              for (var i = 0; i < domPrefixes.length; i++) {
                if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
                  this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                  break;
                }
              }
            }
            var transEndEventNames_1 = {
              WebkitTransition: 'webkitTransitionEnd',
              MozTransition: 'transitionend',
              OTransition: 'oTransitionEnd otransitionend',
              transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function (key) {
              if (isPresent(_this.getStyle(element_1, key))) {
                _this._transitionEnd = transEndEventNames_1[key];
              }
            });
          } catch (e) {
            this._animationPrefix = null;
            this._transitionEnd = null;
          }
        }
        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) {
          return el.getDistributedNodes();
        };
        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
          el.href = href == null ? baseUrl : baseUrl + '/../' + href;
        };
        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () {
          return true;
        };
        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
          return typeof this.defaultDoc().body.createShadowRoot === 'function';
        };
        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
          return this._animationPrefix ? this._animationPrefix : '';
        };
        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () {
          return this._transitionEnd ? this._transitionEnd : '';
        };
        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
          return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
        };
        return GenericBrowserDomAdapter;
      }(DomAdapter);
      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _attrToPropMap = {
        'class': 'className',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
      };
      var DOM_KEY_LOCATION_NUMPAD = 3;
      var _keyMap = {
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
      };
      var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
      };
      var BrowserDomAdapter = function (_super) {
        __extends(BrowserDomAdapter, _super);
        function BrowserDomAdapter() {
          _super.apply(this, arguments);
        }
        BrowserDomAdapter.prototype.parse = function (templateHtml) {
          throw new Error('parse not implemented');
        };
        BrowserDomAdapter.makeCurrent = function () {
          setRootDomAdapter(new BrowserDomAdapter());
        };
        BrowserDomAdapter.prototype.hasProperty = function (element, name) {
          return name in element;
        };
        BrowserDomAdapter.prototype.setProperty = function (el, name, value) {
          el[name] = value;
        };
        BrowserDomAdapter.prototype.getProperty = function (el, name) {
          return el[name];
        };
        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
          (_a = el)[methodName].apply(_a, args);
          var _a;
        };
        BrowserDomAdapter.prototype.logError = function (error) {
          if (window.console) {
            (window.console.error || window.console.log)(error);
          }
        };
        BrowserDomAdapter.prototype.log = function (error) {
          if (window.console) {
            window.console.log && window.console.log(error);
          }
        };
        BrowserDomAdapter.prototype.logGroup = function (error) {
          if (window.console) {
            window.console.group && window.console.group(error);
            this.logError(error);
          }
        };
        BrowserDomAdapter.prototype.logGroupEnd = function () {
          if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
          }
        };
        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
          get: function () {
            return _attrToPropMap;
          },
          enumerable: true,
          configurable: true
        });
        BrowserDomAdapter.prototype.query = function (selector) {
          return document.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelector = function (el, selector) {
          return el.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) {
          return el.querySelectorAll(selector);
        };
        BrowserDomAdapter.prototype.on = function (el, evt, listener) {
          el.addEventListener(evt, listener, false);
        };
        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
          el.addEventListener(evt, listener, false);
          return function () {
            el.removeEventListener(evt, listener, false);
          };
        };
        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) {
          el.dispatchEvent(evt);
        };
        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
          var evt = document.createEvent('MouseEvent');
          evt.initEvent(eventType, true, true);
          return evt;
        };
        BrowserDomAdapter.prototype.createEvent = function (eventType) {
          var evt = document.createEvent('Event');
          evt.initEvent(eventType, true, true);
          return evt;
        };
        BrowserDomAdapter.prototype.preventDefault = function (evt) {
          evt.preventDefault();
          evt.returnValue = false;
        };
        BrowserDomAdapter.prototype.isPrevented = function (evt) {
          return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
        };
        BrowserDomAdapter.prototype.getInnerHTML = function (el) {
          return el.innerHTML;
        };
        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
          return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
        };
        BrowserDomAdapter.prototype.getOuterHTML = function (el) {
          return el.outerHTML;
        };
        BrowserDomAdapter.prototype.nodeName = function (node) {
          return node.nodeName;
        };
        BrowserDomAdapter.prototype.nodeValue = function (node) {
          return node.nodeValue;
        };
        BrowserDomAdapter.prototype.type = function (node) {
          return node.type;
        };
        BrowserDomAdapter.prototype.content = function (node) {
          if (this.hasProperty(node, 'content')) {
            return node.content;
          } else {
            return node;
          }
        };
        BrowserDomAdapter.prototype.firstChild = function (el) {
          return el.firstChild;
        };
        BrowserDomAdapter.prototype.nextSibling = function (el) {
          return el.nextSibling;
        };
        BrowserDomAdapter.prototype.parentElement = function (el) {
          return el.parentNode;
        };
        BrowserDomAdapter.prototype.childNodes = function (el) {
          return el.childNodes;
        };
        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
          var childNodes = el.childNodes;
          var res = new Array(childNodes.length);
          for (var i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
          }
          return res;
        };
        BrowserDomAdapter.prototype.clearNodes = function (el) {
          while (el.firstChild) {
            el.removeChild(el.firstChild);
          }
        };
        BrowserDomAdapter.prototype.appendChild = function (el, node) {
          el.appendChild(node);
        };
        BrowserDomAdapter.prototype.removeChild = function (el, node) {
          el.removeChild(node);
        };
        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) {
          el.replaceChild(newChild, oldChild);
        };
        BrowserDomAdapter.prototype.remove = function (node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
          return node;
        };
        BrowserDomAdapter.prototype.insertBefore = function (el, node) {
          el.parentNode.insertBefore(node, el);
        };
        BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
          nodes.forEach(function (n) {
            return el.parentNode.insertBefore(n, el);
          });
        };
        BrowserDomAdapter.prototype.insertAfter = function (el, node) {
          el.parentNode.insertBefore(node, el.nextSibling);
        };
        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) {
          el.innerHTML = value;
        };
        BrowserDomAdapter.prototype.getText = function (el) {
          return el.textContent;
        };
        BrowserDomAdapter.prototype.setText = function (el, value) {
          el.textContent = value;
        };
        BrowserDomAdapter.prototype.getValue = function (el) {
          return el.value;
        };
        BrowserDomAdapter.prototype.setValue = function (el, value) {
          el.value = value;
        };
        BrowserDomAdapter.prototype.getChecked = function (el) {
          return el.checked;
        };
        BrowserDomAdapter.prototype.setChecked = function (el, value) {
          el.checked = value;
        };
        BrowserDomAdapter.prototype.createComment = function (text) {
          return document.createComment(text);
        };
        BrowserDomAdapter.prototype.createTemplate = function (html) {
          var t = document.createElement('template');
          t.innerHTML = html;
          return t;
        };
        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createElement(tagName);
        };
        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createElementNS(ns, tagName);
        };
        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createTextNode(text);
        };
        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
          if (doc === void 0) {
            doc = document;
          }
          var el = doc.createElement('SCRIPT');
          el.setAttribute(attrName, attrValue);
          return el;
        };
        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
          if (doc === void 0) {
            doc = document;
          }
          var style = doc.createElement('style');
          this.appendChild(style, this.createTextNode(css));
          return style;
        };
        BrowserDomAdapter.prototype.createShadowRoot = function (el) {
          return el.createShadowRoot();
        };
        BrowserDomAdapter.prototype.getShadowRoot = function (el) {
          return el.shadowRoot;
        };
        BrowserDomAdapter.prototype.getHost = function (el) {
          return el.host;
        };
        BrowserDomAdapter.prototype.clone = function (node) {
          return node.cloneNode(true);
        };
        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
          return element.getElementsByClassName(name);
        };
        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
          return element.getElementsByTagName(name);
        };
        BrowserDomAdapter.prototype.classList = function (element) {
          return Array.prototype.slice.call(element.classList, 0);
        };
        BrowserDomAdapter.prototype.addClass = function (element, className) {
          element.classList.add(className);
        };
        BrowserDomAdapter.prototype.removeClass = function (element, className) {
          element.classList.remove(className);
        };
        BrowserDomAdapter.prototype.hasClass = function (element, className) {
          return element.classList.contains(className);
        };
        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
          element.style[styleName] = styleValue;
        };
        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
          element.style[stylename] = '';
        };
        BrowserDomAdapter.prototype.getStyle = function (element, stylename) {
          return element.style[stylename];
        };
        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
          if (styleValue === void 0) {
            styleValue = null;
          }
          var value = this.getStyle(element, styleName) || '';
          return styleValue ? value == styleValue : value.length > 0;
        };
        BrowserDomAdapter.prototype.tagName = function (element) {
          return element.tagName;
        };
        BrowserDomAdapter.prototype.attributeMap = function (element) {
          var res = new Map();
          var elAttrs = element.attributes;
          for (var i = 0; i < elAttrs.length; i++) {
            var attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
          }
          return res;
        };
        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
          return element.hasAttribute(attribute);
        };
        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
          return element.hasAttributeNS(ns, attribute);
        };
        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
          return element.getAttribute(attribute);
        };
        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
          return element.getAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) {
          element.setAttribute(name, value);
        };
        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
          element.setAttributeNS(ns, name, value);
        };
        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) {
          element.removeAttribute(attribute);
        };
        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
          element.removeAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.templateAwareRoot = function (el) {
          return this.isTemplateElement(el) ? this.content(el) : el;
        };
        BrowserDomAdapter.prototype.createHtmlDocument = function () {
          return document.implementation.createHTMLDocument('fakeTitle');
        };
        BrowserDomAdapter.prototype.defaultDoc = function () {
          return document;
        };
        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
          try {
            return el.getBoundingClientRect();
          } catch (e) {
            return {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              width: 0,
              height: 0
            };
          }
        };
        BrowserDomAdapter.prototype.getTitle = function () {
          return document.title;
        };
        BrowserDomAdapter.prototype.setTitle = function (newTitle) {
          document.title = newTitle || '';
        };
        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
          if (n instanceof HTMLElement) {
            return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
          }
          return false;
        };
        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
          return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
        };
        BrowserDomAdapter.prototype.isTextNode = function (node) {
          return node.nodeType === Node.TEXT_NODE;
        };
        BrowserDomAdapter.prototype.isCommentNode = function (node) {
          return node.nodeType === Node.COMMENT_NODE;
        };
        BrowserDomAdapter.prototype.isElementNode = function (node) {
          return node.nodeType === Node.ELEMENT_NODE;
        };
        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
          return isPresent(node.shadowRoot) && node instanceof HTMLElement;
        };
        BrowserDomAdapter.prototype.isShadowRoot = function (node) {
          return node instanceof DocumentFragment;
        };
        BrowserDomAdapter.prototype.importIntoDoc = function (node) {
          return document.importNode(this.templateAwareRoot(node), true);
        };
        BrowserDomAdapter.prototype.adoptNode = function (node) {
          return document.adoptNode(node);
        };
        BrowserDomAdapter.prototype.getHref = function (el) {
          return el.href;
        };
        BrowserDomAdapter.prototype.getEventKey = function (event) {
          var key = event.key;
          if (isBlank(key)) {
            key = event.keyIdentifier;
            if (isBlank(key)) {
              return 'Unidentified';
            }
            if (key.startsWith('U+')) {
              key = String.fromCharCode(parseInt(key.substring(2), 16));
              if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                key = _chromeNumKeyPadMap[key];
              }
            }
          }
          return _keyMap[key] || key;
        };
        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
          if (target === 'window') {
            return window;
          }
          if (target === 'document') {
            return document;
          }
          if (target === 'body') {
            return document.body;
          }
        };
        BrowserDomAdapter.prototype.getHistory = function () {
          return window.history;
        };
        BrowserDomAdapter.prototype.getLocation = function () {
          return window.location;
        };
        BrowserDomAdapter.prototype.getBaseHref = function () {
          var href = getBaseElementHref();
          return isBlank(href) ? null : relativePath(href);
        };
        BrowserDomAdapter.prototype.resetBaseElement = function () {
          baseElement = null;
        };
        BrowserDomAdapter.prototype.getUserAgent = function () {
          return window.navigator.userAgent;
        };
        BrowserDomAdapter.prototype.setData = function (element, name, value) {
          this.setAttribute(element, 'data-' + name, value);
        };
        BrowserDomAdapter.prototype.getData = function (element, name) {
          return this.getAttribute(element, 'data-' + name);
        };
        BrowserDomAdapter.prototype.getComputedStyle = function (element) {
          return getComputedStyle(element);
        };
        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) {
          setValueOnPath(global$1, path, value);
        };
        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
          return typeof Element.prototype['animate'] === 'function';
        };
        BrowserDomAdapter.prototype.performanceNow = function () {
          return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
        };
        BrowserDomAdapter.prototype.supportsCookies = function () {
          return true;
        };
        BrowserDomAdapter.prototype.getCookie = function (name) {
          return parseCookieValue(document.cookie, name);
        };
        BrowserDomAdapter.prototype.setCookie = function (name, value) {
          document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        };
        return BrowserDomAdapter;
      }(GenericBrowserDomAdapter);
      var baseElement = null;
      function getBaseElementHref() {
        if (!baseElement) {
          baseElement = document.querySelector('base');
          if (!baseElement) {
            return null;
          }
        }
        return baseElement.getAttribute('href');
      }
      var urlParsingNode;
      function relativePath(url) {
        if (!urlParsingNode) {
          urlParsingNode = document.createElement('a');
        }
        urlParsingNode.setAttribute('href', url);
        return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
      }
      function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);
        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
          var cookie = _a[_i];
          var eqIndex = cookie.indexOf('=');
          var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
              cookieName = _b[0],
              cookieValue = _b[1];
          if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
          }
        }
        return null;
      }
      function supportsState() {
        return !!window.history.pushState;
      }
      var __extends$2 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var BrowserPlatformLocation = function (_super) {
        __extends$2(BrowserPlatformLocation, _super);
        function BrowserPlatformLocation() {
          _super.call(this);
          this._init();
        }
        BrowserPlatformLocation.prototype._init = function () {
          this._location = getDOM().getLocation();
          this._history = getDOM().getHistory();
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
          get: function () {
            return this._location;
          },
          enumerable: true,
          configurable: true
        });
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () {
          return getDOM().getBaseHref();
        };
        BrowserPlatformLocation.prototype.onPopState = function (fn) {
          getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
        };
        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
          getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
          get: function () {
            return this._location.pathname;
          },
          set: function (newPath) {
            this._location.pathname = newPath;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
          get: function () {
            return this._location.search;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
          get: function () {
            return this._location.hash;
          },
          enumerable: true,
          configurable: true
        });
        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
          if (supportsState()) {
            this._history.pushState(state, title, url);
          } else {
            this._location.hash = url;
          }
        };
        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
          if (supportsState()) {
            this._history.replaceState(state, title, url);
          } else {
            this._location.hash = url;
          }
        };
        BrowserPlatformLocation.prototype.forward = function () {
          this._history.forward();
        };
        BrowserPlatformLocation.prototype.back = function () {
          this._history.back();
        };
        BrowserPlatformLocation.decorators = [{ type: _angular_core.Injectable }];
        BrowserPlatformLocation.ctorParameters = [];
        return BrowserPlatformLocation;
      }(_angular_common.PlatformLocation);
      var BrowserGetTestability = function () {
        function BrowserGetTestability() {}
        BrowserGetTestability.init = function () {
          _angular_core.setTestabilityGetter(new BrowserGetTestability());
        };
        BrowserGetTestability.prototype.addToWindow = function (registry) {
          global$1.getAngularTestability = function (elem, findInAncestors) {
            if (findInAncestors === void 0) {
              findInAncestors = true;
            }
            var testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
              throw new Error('Could not find testability for element.');
            }
            return testability;
          };
          global$1.getAllAngularTestabilities = function () {
            return registry.getAllTestabilities();
          };
          global$1.getAllAngularRootElements = function () {
            return registry.getAllRootElements();
          };
          var whenAllStable = function (callback) {
            var testabilities = global$1.getAllAngularTestabilities();
            var count = testabilities.length;
            var didWork = false;
            var decrement = function (didWork_) {
              didWork = didWork || didWork_;
              count--;
              if (count == 0) {
                callback(didWork);
              }
            };
            testabilities.forEach(function (testability) {
              testability.whenStable(decrement);
            });
          };
          if (!global$1['frameworkStabilizers']) {
            global$1['frameworkStabilizers'] = [];
          }
          global$1['frameworkStabilizers'].push(whenAllStable);
        };
        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
          if (elem == null) {
            return null;
          }
          var t = registry.getTestability(elem);
          if (isPresent(t)) {
            return t;
          } else if (!findInAncestors) {
            return null;
          }
          if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
          }
          return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
      }();
      var Title = function () {
        function Title() {}
        Title.prototype.getTitle = function () {
          return getDOM().getTitle();
        };
        Title.prototype.setTitle = function (newTitle) {
          getDOM().setTitle(newTitle);
        };
        return Title;
      }();
      var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function (m1, m2) {
          var m = {};
          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }();
      var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');
      var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');
      var EventManager = function () {
        function EventManager(plugins, _zone) {
          var _this = this;
          this._zone = _zone;
          this._eventNameToPlugin = new Map();
          plugins.forEach(function (p) {
            return p.manager = _this;
          });
          this._plugins = plugins.slice().reverse();
        }
        EventManager.prototype.addEventListener = function (element, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addEventListener(element, eventName, handler);
        };
        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addGlobalEventListener(target, eventName, handler);
        };
        EventManager.prototype.getZone = function () {
          return this._zone;
        };
        EventManager.prototype._findPluginFor = function (eventName) {
          var plugin = this._eventNameToPlugin.get(eventName);
          if (plugin) {
            return plugin;
          }
          var plugins = this._plugins;
          for (var i = 0; i < plugins.length; i++) {
            var plugin_1 = plugins[i];
            if (plugin_1.supports(eventName)) {
              this._eventNameToPlugin.set(eventName, plugin_1);
              return plugin_1;
            }
          }
          throw new Error("No event manager plugin found for event " + eventName);
        };
        EventManager.decorators = [{ type: _angular_core.Injectable }];
        EventManager.ctorParameters = [{
          type: Array,
          decorators: [{
            type: _angular_core.Inject,
            args: [EVENT_MANAGER_PLUGINS]
          }]
        }, { type: _angular_core.NgZone }];
        return EventManager;
      }();
      var EventManagerPlugin = function () {
        function EventManagerPlugin() {}
        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
          var target = getDOM().getGlobalEventTarget(element);
          if (!target) {
            throw new Error("Unsupported event target " + target + " for event " + eventName);
          }
          return this.addEventListener(target, eventName, handler);
        };
        ;
        return EventManagerPlugin;
      }();
      var __extends$4 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var SharedStylesHost = function () {
        function SharedStylesHost() {
          this._styles = [];
          this._stylesSet = new Set();
        }
        SharedStylesHost.prototype.addStyles = function (styles) {
          var _this = this;
          var additions = [];
          styles.forEach(function (style) {
            if (!_this._stylesSet.has(style)) {
              _this._stylesSet.add(style);
              _this._styles.push(style);
              additions.push(style);
            }
          });
          this.onStylesAdded(additions);
        };
        SharedStylesHost.prototype.onStylesAdded = function (additions) {};
        SharedStylesHost.prototype.getAllStyles = function () {
          return this._styles;
        };
        SharedStylesHost.decorators = [{ type: _angular_core.Injectable }];
        SharedStylesHost.ctorParameters = [];
        return SharedStylesHost;
      }();
      var DomSharedStylesHost = function (_super) {
        __extends$4(DomSharedStylesHost, _super);
        function DomSharedStylesHost(doc) {
          _super.call(this);
          this._hostNodes = new Set();
          this._hostNodes.add(doc.head);
        }
        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
          for (var i = 0; i < styles.length; i++) {
            var styleEl = document.createElement('style');
            styleEl.textContent = styles[i];
            host.appendChild(styleEl);
          }
        };
        DomSharedStylesHost.prototype.addHost = function (hostNode) {
          this._addStylesToHost(this._styles, hostNode);
          this._hostNodes.add(hostNode);
        };
        DomSharedStylesHost.prototype.removeHost = function (hostNode) {
          this._hostNodes.delete(hostNode);
        };
        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
          var _this = this;
          this._hostNodes.forEach(function (hostNode) {
            _this._addStylesToHost(additions, hostNode);
          });
        };
        DomSharedStylesHost.decorators = [{ type: _angular_core.Injectable }];
        DomSharedStylesHost.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: _angular_core.Inject,
            args: [DOCUMENT]
          }]
        }];
        return DomSharedStylesHost;
      }(SharedStylesHost);
      var __extends$3 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var NAMESPACE_URIS = {
        'xlink': 'http://www.w3.org/1999/xlink',
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml'
      };
      var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
      var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
      var DomRootRenderer = function () {
        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
          this.document = document;
          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.animationDriver = animationDriver;
          this.appId = appId;
          this.registeredComponents = new Map();
        }
        DomRootRenderer.prototype.renderComponent = function (componentProto) {
          var renderer = this.registeredComponents.get(componentProto.id);
          if (!renderer) {
            renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
            this.registeredComponents.set(componentProto.id, renderer);
          }
          return renderer;
        };
        return DomRootRenderer;
      }();
      var DomRootRenderer_ = function (_super) {
        __extends$3(DomRootRenderer_, _super);
        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
          _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
        }
        DomRootRenderer_.decorators = [{ type: _angular_core.Injectable }];
        DomRootRenderer_.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: _angular_core.Inject,
            args: [DOCUMENT]
          }]
        }, { type: EventManager }, { type: DomSharedStylesHost }, { type: AnimationDriver }, {
          type: undefined,
          decorators: [{
            type: _angular_core.Inject,
            args: [_angular_core.APP_ID]
          }]
        }];
        return DomRootRenderer_;
      }(DomRootRenderer);
      var DIRECT_DOM_RENDERER = {
        remove: function (node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
        },
        appendChild: function (node, parent) {
          parent.appendChild(node);
        },
        insertBefore: function (node, refNode) {
          refNode.parentNode.insertBefore(node, refNode);
        },
        nextSibling: function (node) {
          return node.nextSibling;
        },
        parentElement: function (node) {
          return node.parentNode;
        }
      };
      var DomRenderer = function () {
        function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
          this._rootRenderer = _rootRenderer;
          this.componentProto = componentProto;
          this._animationDriver = _animationDriver;
          this.directRenderer = DIRECT_DOM_RENDERER;
          this._styles = flattenStyles(styleShimId, componentProto.styles, []);
          if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
          }
          if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
            this._contentAttr = shimContentAttribute(styleShimId);
            this._hostAttr = shimHostAttribute(styleShimId);
          } else {
            this._contentAttr = null;
            this._hostAttr = null;
          }
        }
        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
          var el;
          if (typeof selectorOrNode === 'string') {
            el = this._rootRenderer.document.querySelector(selectorOrNode);
            if (!el) {
              throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
          } else {
            el = selectorOrNode;
          }
          while (el.firstChild) {
            el.removeChild(el.firstChild);
          }
          return el;
        };
        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
          var el;
          if (isNamespaced(name)) {
            var nsAndName = splitNamespace(name);
            el = document.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]);
          } else {
            el = document.createElement(name);
          }
          if (this._contentAttr) {
            el.setAttribute(this._contentAttr, '');
          }
          if (parent) {
            parent.appendChild(el);
          }
          return el;
        };
        DomRenderer.prototype.createViewRoot = function (hostElement) {
          var nodesParent;
          if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
            nodesParent = hostElement.createShadowRoot();
            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
            for (var i = 0; i < this._styles.length; i++) {
              var styleEl = document.createElement('style');
              styleEl.textContent = this._styles[i];
              nodesParent.appendChild(styleEl);
            }
          } else {
            if (this._hostAttr) {
              hostElement.setAttribute(this._hostAttr, '');
            }
            nodesParent = hostElement;
          }
          return nodesParent;
        };
        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
          var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
          if (parentElement) {
            parentElement.appendChild(comment);
          }
          return comment;
        };
        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
          var node = document.createTextNode(value);
          if (parentElement) {
            parentElement.appendChild(node);
          }
          return node;
        };
        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
          if (!parentElement) return;
          appendNodes(parentElement, nodes);
        };
        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
          moveNodesAfterSibling(node, viewRootNodes);
        };
        DomRenderer.prototype.detachView = function (viewRootNodes) {
          for (var i = 0; i < viewRootNodes.length; i++) {
            var node = viewRootNodes[i];
            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }
          }
        };
        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
          if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && hostElement) {
            this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);
          }
        };
        DomRenderer.prototype.listen = function (renderElement, name, callback) {
          return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
          return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
          renderElement[propertyName] = propertyValue;
        };
        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
          var attrNs;
          var attrNameWithoutNs = attributeName;
          if (isNamespaced(attributeName)) {
            var nsAndName = splitNamespace(attributeName);
            attrNameWithoutNs = nsAndName[1];
            attributeName = nsAndName[0] + ':' + nsAndName[1];
            attrNs = NAMESPACE_URIS[nsAndName[0]];
          }
          if (isPresent(attributeValue)) {
            if (attrNs) {
              renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
            } else {
              renderElement.setAttribute(attributeName, attributeValue);
            }
          } else {
            if (isPresent(attrNs)) {
              renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
            } else {
              renderElement.removeAttribute(attributeName);
            }
          }
        };
        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
          if (renderElement.nodeType === Node.COMMENT_NODE) {
            var existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
            var parsedBindings = JSON.parse(existingBindings[1]);
            parsedBindings[propertyName] = propertyValue;
            renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
          } else {
            this.setElementAttribute(renderElement, propertyName, propertyValue);
          }
        };
        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
          if (isAdd) {
            renderElement.classList.add(className);
          } else {
            renderElement.classList.remove(className);
          }
        };
        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
          if (isPresent(styleValue)) {
            renderElement.style[styleName] = stringify(styleValue);
          } else {
            renderElement.style[styleName] = '';
          }
        };
        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
          renderElement[methodName].apply(renderElement, args);
        };
        DomRenderer.prototype.setText = function (renderNode, text) {
          renderNode.nodeValue = text;
        };
        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
          if (previousPlayers === void 0) {
            previousPlayers = [];
          }
          return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
        };
        return DomRenderer;
      }();
      function moveNodesAfterSibling(sibling, nodes) {
        var parent = sibling.parentNode;
        if (nodes.length > 0 && parent) {
          var nextSibling = sibling.nextSibling;
          if (nextSibling) {
            for (var i = 0; i < nodes.length; i++) {
              parent.insertBefore(nodes[i], nextSibling);
            }
          } else {
            for (var i = 0; i < nodes.length; i++) {
              parent.appendChild(nodes[i]);
            }
          }
        }
      }
      function appendNodes(parent, nodes) {
        for (var i = 0; i < nodes.length; i++) {
          parent.appendChild(nodes[i]);
        }
      }
      function decoratePreventDefault(eventHandler) {
        return function (event) {
          var allowDefaultBehavior = eventHandler(event);
          if (allowDefaultBehavior === false) {
            event.preventDefault();
            event.returnValue = false;
          }
        };
      }
      var COMPONENT_REGEX = /%COMP%/g;
      var COMPONENT_VARIABLE = '%COMP%';
      var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
      var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
      function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }
      function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }
      function flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
          var style = styles[i];
          if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
          } else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
          }
        }
        return target;
      }
      var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
      function isNamespaced(name) {
        return name[0] === ':';
      }
      function splitNamespace(name) {
        var match = name.match(NS_PREFIX_RE);
        return [match[1], match[2]];
      }
      var CORE_TOKENS = {
        'ApplicationRef': _angular_core.ApplicationRef,
        'NgZone': _angular_core.NgZone
      };
      var INSPECT_GLOBAL_NAME = 'ng.probe';
      var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
      function inspectNativeElement(element) {
        return _angular_core.getDebugNode(element);
      }
      var NgProbeToken = function () {
        function NgProbeToken(name, token) {
          this.name = name;
          this.token = token;
        }
        return NgProbeToken;
      }();
      function _createConditionalRootRenderer(rootRenderer, extraTokens) {
        if (_angular_core.isDevMode()) {
          return _createRootRenderer(rootRenderer, extraTokens);
        }
        return rootRenderer;
      }
      function _createRootRenderer(rootRenderer, extraTokens) {
        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
        return new DebugDomRootRenderer(rootRenderer);
      }
      function _ngProbeTokensToMap(tokens) {
        return tokens.reduce(function (prev, t) {
          return prev[t.name] = t.token, prev;
        }, {});
      }
      var ELEMENT_PROBE_PROVIDERS = [{
        provide: _angular_core.RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
      }];
      var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
        provide: _angular_core.RootRenderer,
        useFactory: _createRootRenderer,
        deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
      }];
      var __extends$5 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var DomEventsPlugin = function (_super) {
        __extends$5(DomEventsPlugin, _super);
        function DomEventsPlugin() {
          _super.apply(this, arguments);
        }
        DomEventsPlugin.prototype.supports = function (eventName) {
          return true;
        };
        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
          element.addEventListener(eventName, handler, false);
          return function () {
            return element.removeEventListener(eventName, handler, false);
          };
        };
        DomEventsPlugin.decorators = [{ type: _angular_core.Injectable }];
        DomEventsPlugin.ctorParameters = [];
        return DomEventsPlugin;
      }(EventManagerPlugin);
      var __extends$6 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var EVENT_NAMES = {
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        'press': true,
        'pressup': true,
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        'tap': true
      };
      var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');
      var HammerGestureConfig = function () {
        function HammerGestureConfig() {
          this.events = [];
          this.overrides = {};
        }
        HammerGestureConfig.prototype.buildHammer = function (element) {
          var mc = new Hammer(element);
          mc.get('pinch').set({ enable: true });
          mc.get('rotate').set({ enable: true });
          for (var eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
          }
          return mc;
        };
        HammerGestureConfig.decorators = [{ type: _angular_core.Injectable }];
        HammerGestureConfig.ctorParameters = [];
        return HammerGestureConfig;
      }();
      var HammerGesturesPlugin = function (_super) {
        __extends$6(HammerGesturesPlugin, _super);
        function HammerGesturesPlugin(_config) {
          _super.call(this);
          this._config = _config;
        }
        HammerGesturesPlugin.prototype.supports = function (eventName) {
          if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
          }
          if (!window.Hammer) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
          }
          return true;
        };
        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
          var _this = this;
          var zone = this.manager.getZone();
          eventName = eventName.toLowerCase();
          return zone.runOutsideAngular(function () {
            var mc = _this._config.buildHammer(element);
            var callback = function (eventObj) {
              zone.runGuarded(function () {
                handler(eventObj);
              });
            };
            mc.on(eventName, callback);
            return function () {
              return mc.off(eventName, callback);
            };
          });
        };
        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) {
          return this._config.events.indexOf(eventName) > -1;
        };
        HammerGesturesPlugin.decorators = [{ type: _angular_core.Injectable }];
        HammerGesturesPlugin.ctorParameters = [{
          type: HammerGestureConfig,
          decorators: [{
            type: _angular_core.Inject,
            args: [HAMMER_GESTURE_CONFIG]
          }]
        }];
        return HammerGesturesPlugin;
      }(EventManagerPlugin);
      var __extends$7 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
      var MODIFIER_KEY_GETTERS = {
        'alt': function (event) {
          return event.altKey;
        },
        'control': function (event) {
          return event.ctrlKey;
        },
        'meta': function (event) {
          return event.metaKey;
        },
        'shift': function (event) {
          return event.shiftKey;
        }
      };
      var KeyEventsPlugin = function (_super) {
        __extends$7(KeyEventsPlugin, _super);
        function KeyEventsPlugin() {
          _super.call(this);
        }
        KeyEventsPlugin.prototype.supports = function (eventName) {
          return KeyEventsPlugin.parseEventName(eventName) != null;
        };
        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
          var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
          var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
          return this.manager.getZone().runOutsideAngular(function () {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
          });
        };
        KeyEventsPlugin.parseEventName = function (eventName) {
          var parts = eventName.toLowerCase().split('.');
          var domEventName = parts.shift();
          if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
          }
          var key = KeyEventsPlugin._normalizeKey(parts.pop());
          var fullKey = '';
          MODIFIER_KEYS.forEach(function (modifierName) {
            var index = parts.indexOf(modifierName);
            if (index > -1) {
              parts.splice(index, 1);
              fullKey += modifierName + '.';
            }
          });
          fullKey += key;
          if (parts.length != 0 || key.length === 0) {
            return null;
          }
          var result = {};
          result['domEventName'] = domEventName;
          result['fullKey'] = fullKey;
          return result;
        };
        KeyEventsPlugin.getEventFullKey = function (event) {
          var fullKey = '';
          var key = getDOM().getEventKey(event);
          key = key.toLowerCase();
          if (key === ' ') {
            key = 'space';
          } else if (key === '.') {
            key = 'dot';
          }
          MODIFIER_KEYS.forEach(function (modifierName) {
            if (modifierName != key) {
              var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
              if (modifierGetter(event)) {
                fullKey += modifierName + '.';
              }
            }
          });
          fullKey += key;
          return fullKey;
        };
        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
          return function (event) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
              zone.runGuarded(function () {
                return handler(event);
              });
            }
          };
        };
        KeyEventsPlugin._normalizeKey = function (keyName) {
          switch (keyName) {
            case 'esc':
              return 'escape';
            default:
              return keyName;
          }
        };
        KeyEventsPlugin.decorators = [{ type: _angular_core.Injectable }];
        KeyEventsPlugin.ctorParameters = [];
        return KeyEventsPlugin;
      }(EventManagerPlugin);
      var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
      var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
      function sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;
        if (_angular_core.isDevMode()) {
          getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
        }
        return 'unsafe:' + url;
      }
      function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) {
          return sanitizeUrl(srcset.trim());
        }).join(', ');
      }
      var inertElement = null;
      var DOM = null;
      function getInertElement() {
        if (inertElement) return inertElement;
        DOM = getDOM();
        var templateEl = DOM.createElement('template');
        if ('content' in templateEl) return templateEl;
        var doc = DOM.createHtmlDocument();
        inertElement = DOM.querySelector(doc, 'body');
        if (inertElement == null) {
          var html = DOM.createElement('html', doc);
          inertElement = DOM.createElement('body', doc);
          DOM.appendChild(html, inertElement);
          DOM.appendChild(doc, html);
        }
        return inertElement;
      }
      function tagSet(tags) {
        var res = {};
        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
          var t = _a[_i];
          res[t] = true;
        }
        return res;
      }
      function merge() {
        var sets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          sets[_i - 0] = arguments[_i];
        }
        var res = {};
        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
          var s = sets_1[_a];
          for (var v in s) {
            if (s.hasOwnProperty(v)) res[v] = true;
          }
        }
        return res;
      }
      var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
      var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
      var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
      var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
      var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
      var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
      var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
      var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
      var SRCSET_ATTRS = tagSet('srcset');
      var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
      var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
      var SanitizingHtmlSerializer = function () {
        function SanitizingHtmlSerializer() {
          this.sanitizedSomething = false;
          this.buf = [];
        }
        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
          var current = el.firstChild;
          while (current) {
            if (DOM.isElementNode(current)) {
              this.startElement(current);
            } else if (DOM.isTextNode(current)) {
              this.chars(DOM.nodeValue(current));
            } else {
              this.sanitizedSomething = true;
            }
            if (DOM.firstChild(current)) {
              current = DOM.firstChild(current);
              continue;
            }
            while (current) {
              if (DOM.isElementNode(current)) {
                this.endElement(current);
              }
              if (DOM.nextSibling(current)) {
                current = DOM.nextSibling(current);
                break;
              }
              current = DOM.parentElement(current);
            }
          }
          return this.buf.join('');
        };
        SanitizingHtmlSerializer.prototype.startElement = function (element) {
          var _this = this;
          var tagName = DOM.nodeName(element).toLowerCase();
          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
          }
          this.buf.push('<');
          this.buf.push(tagName);
          DOM.attributeMap(element).forEach(function (value, attrName) {
            var lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
              _this.sanitizedSomething = true;
              return;
            }
            if (URI_ATTRS[lower]) value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
          });
          this.buf.push('>');
        };
        SanitizingHtmlSerializer.prototype.endElement = function (current) {
          var tagName = DOM.nodeName(current).toLowerCase();
          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
          }
        };
        SanitizingHtmlSerializer.prototype.chars = function (chars) {
          this.buf.push(encodeEntities(chars));
        };
        return SanitizingHtmlSerializer;
      }();
      var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
      function encodeEntities(value) {
        return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
          var hi = match.charCodeAt(0);
          var low = match.charCodeAt(1);
          return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
        }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
          return '&#' + match.charCodeAt(0) + ';';
        }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
      }
      function stripCustomNsAttrs(el) {
        DOM.attributeMap(el).forEach(function (_, attrName) {
          if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
            DOM.removeAttribute(el, attrName);
          }
        });
        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
          var n = _a[_i];
          if (DOM.isElementNode(n)) stripCustomNsAttrs(n);
        }
      }
      function sanitizeHtml(unsafeHtmlInput) {
        try {
          var containerEl = getInertElement();
          var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
          var mXSSAttempts = 5;
          var parsedHtml = unsafeHtml;
          do {
            if (mXSSAttempts === 0) {
              throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            DOM.setInnerHTML(containerEl, unsafeHtml);
            if (DOM.defaultDoc().documentMode) {
              stripCustomNsAttrs(containerEl);
            }
            parsedHtml = DOM.getInnerHTML(containerEl);
          } while (unsafeHtml !== parsedHtml);
          var sanitizer = new SanitizingHtmlSerializer();
          var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
          var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
          for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
            var child = _a[_i];
            DOM.removeChild(parent_1, child);
          }
          if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
          }
          return safeHtml;
        } catch (e) {
          inertElement = null;
          throw e;
        }
      }
      var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
      var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
      var COLOR_FNS = '(?:rgb|hsl)a?';
      var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
      var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
      var URL_RE = /^url\(([^)]+)\)$/;
      function hasBalancedQuotes(value) {
        var outsideSingle = true;
        var outsideDouble = true;
        for (var i = 0; i < value.length; i++) {
          var c = value.charAt(i);
          if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
          } else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
          }
        }
        return outsideSingle && outsideDouble;
      }
      function sanitizeStyle(value) {
        value = String(value).trim();
        if (!value) return '';
        var urlMatch = value.match(URL_RE);
        if (urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
          return value;
        }
        if (_angular_core.isDevMode()) {
          getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
        }
        return 'unsafe';
      }
      var __extends$8 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var DomSanitizer = function () {
        function DomSanitizer() {}
        return DomSanitizer;
      }();
      var DomSanitizerImpl = function (_super) {
        __extends$8(DomSanitizerImpl, _super);
        function DomSanitizerImpl() {
          _super.apply(this, arguments);
        }
        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
          if (value == null) return null;
          switch (ctx) {
            case _angular_core.SecurityContext.NONE:
              return value;
            case _angular_core.SecurityContext.HTML:
              if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'HTML');
              return sanitizeHtml(String(value));
            case _angular_core.SecurityContext.STYLE:
              if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'Style');
              return sanitizeStyle(value);
            case _angular_core.SecurityContext.SCRIPT:
              if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'Script');
              throw new Error('unsafe value used in a script context');
            case _angular_core.SecurityContext.URL:
              if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                return value.changingThisBreaksApplicationSecurity;
              }
              this.checkNotSafeValue(value, 'URL');
              return sanitizeUrl(String(value));
            case _angular_core.SecurityContext.RESOURCE_URL:
              if (value instanceof SafeResourceUrlImpl) {
                return value.changingThisBreaksApplicationSecurity;
              }
              this.checkNotSafeValue(value, 'ResourceURL');
              throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
              throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
          }
        };
        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
          if (value instanceof SafeValueImpl) {
            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " + "(see http://g.co/ng/security#xss)");
          }
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) {
          return new SafeHtmlImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) {
          return new SafeStyleImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) {
          return new SafeScriptImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) {
          return new SafeUrlImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
          return new SafeResourceUrlImpl(value);
        };
        DomSanitizerImpl.decorators = [{ type: _angular_core.Injectable }];
        DomSanitizerImpl.ctorParameters = [];
        return DomSanitizerImpl;
      }(DomSanitizer);
      var SafeValueImpl = function () {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }
        SafeValueImpl.prototype.toString = function () {
          return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
        };
        return SafeValueImpl;
      }();
      var SafeHtmlImpl = function (_super) {
        __extends$8(SafeHtmlImpl, _super);
        function SafeHtmlImpl() {
          _super.apply(this, arguments);
        }
        SafeHtmlImpl.prototype.getTypeName = function () {
          return 'HTML';
        };
        return SafeHtmlImpl;
      }(SafeValueImpl);
      var SafeStyleImpl = function (_super) {
        __extends$8(SafeStyleImpl, _super);
        function SafeStyleImpl() {
          _super.apply(this, arguments);
        }
        SafeStyleImpl.prototype.getTypeName = function () {
          return 'Style';
        };
        return SafeStyleImpl;
      }(SafeValueImpl);
      var SafeScriptImpl = function (_super) {
        __extends$8(SafeScriptImpl, _super);
        function SafeScriptImpl() {
          _super.apply(this, arguments);
        }
        SafeScriptImpl.prototype.getTypeName = function () {
          return 'Script';
        };
        return SafeScriptImpl;
      }(SafeValueImpl);
      var SafeUrlImpl = function (_super) {
        __extends$8(SafeUrlImpl, _super);
        function SafeUrlImpl() {
          _super.apply(this, arguments);
        }
        SafeUrlImpl.prototype.getTypeName = function () {
          return 'URL';
        };
        return SafeUrlImpl;
      }(SafeValueImpl);
      var SafeResourceUrlImpl = function (_super) {
        __extends$8(SafeResourceUrlImpl, _super);
        function SafeResourceUrlImpl() {
          _super.apply(this, arguments);
        }
        SafeResourceUrlImpl.prototype.getTypeName = function () {
          return 'ResourceURL';
        };
        return SafeResourceUrlImpl;
      }(SafeValueImpl);
      var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
        provide: _angular_core.PLATFORM_INITIALIZER,
        useValue: initDomAdapter,
        multi: true
      }, {
        provide: _angular_common.PlatformLocation,
        useClass: BrowserPlatformLocation
      }];
      var BROWSER_SANITIZATION_PROVIDERS = [{
        provide: _angular_core.Sanitizer,
        useExisting: DomSanitizer
      }, {
        provide: DomSanitizer,
        useClass: DomSanitizerImpl
      }];
      var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      function initDomAdapter() {
        BrowserDomAdapter.makeCurrent();
        BrowserGetTestability.init();
      }
      function errorHandler() {
        return new _angular_core.ErrorHandler();
      }
      function _document() {
        return getDOM().defaultDoc();
      }
      function _resolveDefaultAnimationDriver() {
        if (getDOM().supportsWebAnimation()) {
          return new WebAnimationsDriver();
        }
        return AnimationDriver.NOOP;
      }
      var BrowserModule = function () {
        function BrowserModule(parentModule) {
          if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
          }
        }
        BrowserModule.decorators = [{
          type: _angular_core.NgModule,
          args: [{
            providers: [BROWSER_SANITIZATION_PROVIDERS, {
              provide: _angular_core.ErrorHandler,
              useFactory: errorHandler,
              deps: []
            }, {
              provide: DOCUMENT,
              useFactory: _document,
              deps: []
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: DomEventsPlugin,
              multi: true
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: KeyEventsPlugin,
              multi: true
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: HammerGesturesPlugin,
              multi: true
            }, {
              provide: HAMMER_GESTURE_CONFIG,
              useClass: HammerGestureConfig
            }, {
              provide: DomRootRenderer,
              useClass: DomRootRenderer_
            }, {
              provide: _angular_core.RootRenderer,
              useExisting: DomRootRenderer
            }, {
              provide: SharedStylesHost,
              useExisting: DomSharedStylesHost
            }, {
              provide: AnimationDriver,
              useFactory: _resolveDefaultAnimationDriver
            }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title],
            exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
          }]
        }];
        BrowserModule.ctorParameters = [{
          type: BrowserModule,
          decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf }]
        }];
        return BrowserModule;
      }();
      var win = typeof window !== 'undefined' && window || {};
      var ChangeDetectionPerfRecord = function () {
        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
          this.msPerTick = msPerTick;
          this.numTicks = numTicks;
        }
        return ChangeDetectionPerfRecord;
      }();
      var AngularTools = function () {
        function AngularTools(ref) {
          this.profiler = new AngularProfiler(ref);
        }
        return AngularTools;
      }();
      var AngularProfiler = function () {
        function AngularProfiler(ref) {
          this.appRef = ref.injector.get(_angular_core.ApplicationRef);
        }
        AngularProfiler.prototype.timeChangeDetection = function (config) {
          var record = config && config['record'];
          var profileName = 'Change Detection';
          var isProfilerAvailable = isPresent(win.console.profile);
          if (record && isProfilerAvailable) {
            win.console.profile(profileName);
          }
          var start = getDOM().performanceNow();
          var numTicks = 0;
          while (numTicks < 5 || getDOM().performanceNow() - start < 500) {
            this.appRef.tick();
            numTicks++;
          }
          var end = getDOM().performanceNow();
          if (record && isProfilerAvailable) {
            win.console.profileEnd(profileName);
          }
          var msPerTick = (end - start) / numTicks;
          win.console.log("ran " + numTicks + " change detection cycles");
          win.console.log(msPerTick.toFixed(2) + " ms per check");
          return new ChangeDetectionPerfRecord(msPerTick, numTicks);
        };
        return AngularProfiler;
      }();
      var context = global$1;
      function enableDebugTools(ref) {
        Object.assign(context.ng, new AngularTools(ref));
        return ref;
      }
      function disableDebugTools() {
        if (context.ng) {
          delete context.ng.profiler;
        }
      }
      var By = function () {
        function By() {}
        By.all = function () {
          return function (debugElement) {
            return true;
          };
        };
        By.css = function (selector) {
          return function (debugElement) {
            return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
          };
        };
        By.directive = function (type) {
          return function (debugElement) {
            return debugElement.providerTokens.indexOf(type) !== -1;
          };
        };
        return By;
      }();
      var __platform_browser_private__ = {
        BrowserPlatformLocation: BrowserPlatformLocation,
        DomAdapter: DomAdapter,
        BrowserDomAdapter: BrowserDomAdapter,
        BrowserGetTestability: BrowserGetTestability,
        getDOM: getDOM,
        setRootDomAdapter: setRootDomAdapter,
        DomRootRenderer_: DomRootRenderer_,
        DomRootRenderer: DomRootRenderer,
        NAMESPACE_URIS: NAMESPACE_URIS,
        shimContentAttribute: shimContentAttribute,
        shimHostAttribute: shimHostAttribute,
        flattenStyles: flattenStyles,
        splitNamespace: splitNamespace,
        isNamespaced: isNamespaced,
        DomSharedStylesHost: DomSharedStylesHost,
        SharedStylesHost: SharedStylesHost,
        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
        DomEventsPlugin: DomEventsPlugin,
        KeyEventsPlugin: KeyEventsPlugin,
        HammerGesturesPlugin: HammerGesturesPlugin,
        initDomAdapter: initDomAdapter,
        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
        WebAnimationsDriver: WebAnimationsDriver
      };
      exports.BrowserModule = BrowserModule;
      exports.platformBrowser = platformBrowser;
      exports.Title = Title;
      exports.disableDebugTools = disableDebugTools;
      exports.enableDebugTools = enableDebugTools;
      exports.AnimationDriver = AnimationDriver;
      exports.By = By;
      exports.NgProbeToken = NgProbeToken;
      exports.DOCUMENT = DOCUMENT;
      exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
      exports.EventManager = EventManager;
      exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
      exports.HammerGestureConfig = HammerGestureConfig;
      exports.DomSanitizer = DomSanitizer;
      exports.__platform_browser_private__ = __platform_browser_private__;
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("b", ["5f"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("5f");
  return module.exports;
});
$__System.registerDynamic('60', ['8', '11', 'b'], true, function ($__require, exports, module) {
    /* */
    "format cjs";
    /**
     * @license Angular v2.2.1
     * (c) 2010-2016 Google, Inc. https://angular.io/
     * License: MIT
     */

    var define,
        global = this || self,
        GLOBAL = global;
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('8'), $__require('11'), $__require('b')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) : factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser);
    })(this, function (exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
        'use strict';

        /**
         * A backend for http that uses the `XMLHttpRequest` browser API.
         *
         * Take care not to evaluate this in non-browser contexts.
         *
         * @experimental
         */

        var BrowserXhr = function () {
            function BrowserXhr() {}
            BrowserXhr.prototype.build = function () {
                return new XMLHttpRequest();
            };
            BrowserXhr.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            BrowserXhr.ctorParameters = [];
            return BrowserXhr;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        /**
         * Supported http methods.
         * @experimental
         */
        exports.RequestMethod;
        (function (RequestMethod) {
            RequestMethod[RequestMethod["Get"] = 0] = "Get";
            RequestMethod[RequestMethod["Post"] = 1] = "Post";
            RequestMethod[RequestMethod["Put"] = 2] = "Put";
            RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
            RequestMethod[RequestMethod["Options"] = 4] = "Options";
            RequestMethod[RequestMethod["Head"] = 5] = "Head";
            RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
        })(exports.RequestMethod || (exports.RequestMethod = {}));
        /**
         * All possible states in which a connection can be, based on
         * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
         * additional "CANCELLED" state.
         * @experimental
         */
        exports.ReadyState;
        (function (ReadyState) {
            ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
            ReadyState[ReadyState["Open"] = 1] = "Open";
            ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
            ReadyState[ReadyState["Loading"] = 3] = "Loading";
            ReadyState[ReadyState["Done"] = 4] = "Done";
            ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
        })(exports.ReadyState || (exports.ReadyState = {}));
        /**
         * Acceptable response types to be associated with a {@link Response}, based on
         * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
         * @experimental
         */
        exports.ResponseType;
        (function (ResponseType) {
            ResponseType[ResponseType["Basic"] = 0] = "Basic";
            ResponseType[ResponseType["Cors"] = 1] = "Cors";
            ResponseType[ResponseType["Default"] = 2] = "Default";
            ResponseType[ResponseType["Error"] = 3] = "Error";
            ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
        })(exports.ResponseType || (exports.ResponseType = {}));
        /**
         * Supported content type to be automatically associated with a {@link Request}.
         * @experimental
         */
        var ContentType;
        (function (ContentType) {
            ContentType[ContentType["NONE"] = 0] = "NONE";
            ContentType[ContentType["JSON"] = 1] = "JSON";
            ContentType[ContentType["FORM"] = 2] = "FORM";
            ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
            ContentType[ContentType["TEXT"] = 4] = "TEXT";
            ContentType[ContentType["BLOB"] = 5] = "BLOB";
            ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
        })(ContentType || (ContentType = {}));
        /**
         * Define which buffer to use to store the response
         * @experimental
         */
        exports.ResponseContentType;
        (function (ResponseContentType) {
            ResponseContentType[ResponseContentType["Text"] = 0] = "Text";
            ResponseContentType[ResponseContentType["Json"] = 1] = "Json";
            ResponseContentType[ResponseContentType["ArrayBuffer"] = 2] = "ArrayBuffer";
            ResponseContentType[ResponseContentType["Blob"] = 3] = "Blob";
        })(exports.ResponseContentType || (exports.ResponseContentType = {}));

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        /**
         * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
         * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
         *
         * The only known difference between this `Headers` implementation and the spec is the
         * lack of an `entries` method.
         *
         * ### Example
         *
         * ```
         * import {Headers} from '@angular/http';
         *
         * var firstHeaders = new Headers();
         * firstHeaders.append('Content-Type', 'image/jpeg');
         * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
         *
         * // Create headers from Plain Old JavaScript Object
         * var secondHeaders = new Headers({
         *   'X-My-Custom-Header': 'Angular'
         * });
         * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
         *
         * var thirdHeaders = new Headers(secondHeaders);
         * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
         * ```
         *
         * @experimental
         */
        var Headers = function () {
            // TODO(vicb): any -> string|string[]
            function Headers(headers) {
                var _this = this;
                /** @internal header names are lower case */
                this._headers = new Map();
                /** @internal map lower case names to actual names */
                this._normalizedNames = new Map();
                if (!headers) {
                    return;
                }
                if (headers instanceof Headers) {
                    headers.forEach(function (values, name) {
                        values.forEach(function (value) {
                            return _this.append(name, value);
                        });
                    });
                    return;
                }
                Object.keys(headers).forEach(function (name) {
                    var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
                    _this.delete(name);
                    values.forEach(function (value) {
                        return _this.append(name, value);
                    });
                });
            }
            /**
             * Returns a new Headers instance from the given DOMString of Response Headers
             */
            Headers.fromResponseHeaderString = function (headersString) {
                var headers = new Headers();
                headersString.split('\n').forEach(function (line) {
                    var index = line.indexOf(':');
                    if (index > 0) {
                        var name_1 = line.slice(0, index);
                        var value = line.slice(index + 1).trim();
                        headers.set(name_1, value);
                    }
                });
                return headers;
            };
            /**
             * Appends a header to existing list of header values for a given header name.
             */
            Headers.prototype.append = function (name, value) {
                var values = this.getAll(name);
                if (values === null) {
                    this.set(name, value);
                } else {
                    values.push(value);
                }
            };
            /**
             * Deletes all header values for the given name.
             */
            Headers.prototype.delete = function (name) {
                var lcName = name.toLowerCase();
                this._normalizedNames.delete(lcName);
                this._headers.delete(lcName);
            };
            Headers.prototype.forEach = function (fn) {
                var _this = this;
                this._headers.forEach(function (values, lcName) {
                    return fn(values, _this._normalizedNames.get(lcName), _this._headers);
                });
            };
            /**
             * Returns first header that matches given name.
             */
            Headers.prototype.get = function (name) {
                var values = this.getAll(name);
                if (values === null) {
                    return null;
                }
                return values.length > 0 ? values[0] : null;
            };
            /**
             * Checks for existence of header by given name.
             */
            Headers.prototype.has = function (name) {
                return this._headers.has(name.toLowerCase());
            };
            /**
             * Returns the names of the headers
             */
            Headers.prototype.keys = function () {
                return Array.from(this._normalizedNames.values());
            };
            /**
             * Sets or overrides header value for given name.
             */
            Headers.prototype.set = function (name, value) {
                if (Array.isArray(value)) {
                    if (value.length) {
                        this._headers.set(name.toLowerCase(), [value.join(',')]);
                    }
                } else {
                    this._headers.set(name.toLowerCase(), [value]);
                }
                this.mayBeSetNormalizedName(name);
            };
            /**
             * Returns values of all headers.
             */
            Headers.prototype.values = function () {
                return Array.from(this._headers.values());
            };
            /**
             * Returns string of all headers.
             */
            // TODO(vicb): returns {[name: string]: string[]}
            Headers.prototype.toJSON = function () {
                var _this = this;
                var serialized = {};
                this._headers.forEach(function (values, name) {
                    var split = [];
                    values.forEach(function (v) {
                        return split.push.apply(split, v.split(','));
                    });
                    serialized[_this._normalizedNames.get(name)] = split;
                });
                return serialized;
            };
            /**
             * Returns list of header values for a given name.
             */
            Headers.prototype.getAll = function (name) {
                return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
            };
            /**
             * This method is not implemented.
             */
            Headers.prototype.entries = function () {
                throw new Error('"entries" method is not implemented on Headers class');
            };
            Headers.prototype.mayBeSetNormalizedName = function (name) {
                var lcName = name.toLowerCase();
                if (!this._normalizedNames.has(lcName)) {
                    this._normalizedNames.set(lcName, name);
                }
            };
            return Headers;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$1 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * Creates a response options object to be optionally provided when instantiating a
         * {@link Response}.
         *
         * This class is based on the `ResponseInit` description in the [Fetch
         * Spec](https://fetch.spec.whatwg.org/#responseinit).
         *
         * All values are null by default. Typical defaults can be found in the
         * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
         *
         * This class may be used in tests to build {@link Response Responses} for
         * mock responses (see {@link MockBackend}).
         *
         * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
         *
         * ```typescript
         * import {ResponseOptions, Response} from '@angular/http';
         *
         * var options = new ResponseOptions({
         *   body: '{"name":"Jeff"}'
         * });
         * var res = new Response(options);
         *
         * console.log('res.json():', res.json()); // Object {name: "Jeff"}
         * ```
         *
         * @experimental
         */
        var ResponseOptions = function () {
            function ResponseOptions(_a) {
                var _b = _a === void 0 ? {} : _a,
                    body = _b.body,
                    status = _b.status,
                    headers = _b.headers,
                    statusText = _b.statusText,
                    type = _b.type,
                    url = _b.url;
                this.body = body != null ? body : null;
                this.status = status != null ? status : null;
                this.headers = headers != null ? headers : null;
                this.statusText = statusText != null ? statusText : null;
                this.type = type != null ? type : null;
                this.url = url != null ? url : null;
            }
            /**
             * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
             * override
             * existing values. This method will not change the values of the instance on which it is being
             * called.
             *
             * This may be useful when sharing a base `ResponseOptions` object inside tests,
             * where certain properties may change from test to test.
             *
             * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
             *
             * ```typescript
             * import {ResponseOptions, Response} from '@angular/http';
             *
             * var options = new ResponseOptions({
             *   body: {name: 'Jeff'}
             * });
             * var res = new Response(options.merge({
             *   url: 'https://google.com'
             * }));
             * console.log('options.url:', options.url); // null
             * console.log('res.json():', res.json()); // Object {name: "Jeff"}
             * console.log('res.url:', res.url); // https://google.com
             * ```
             */
            ResponseOptions.prototype.merge = function (options) {
                return new ResponseOptions({
                    body: options && options.body != null ? options.body : this.body,
                    status: options && options.status != null ? options.status : this.status,
                    headers: options && options.headers != null ? options.headers : this.headers,
                    statusText: options && options.statusText != null ? options.statusText : this.statusText,
                    type: options && options.type != null ? options.type : this.type,
                    url: options && options.url != null ? options.url : this.url
                });
            };
            return ResponseOptions;
        }();
        /**
         * Subclass of {@link ResponseOptions}, with default values.
         *
         * Default values:
         *  * status: 200
         *  * headers: empty {@link Headers} object
         *
         * This class could be extended and bound to the {@link ResponseOptions} class
         * when configuring an {@link Injector}, in order to override the default options
         * used by {@link Http} to create {@link Response Responses}.
         *
         * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
         *
         * ```typescript
         * import {provide} from '@angular/core';
         * import {bootstrap} from '@angular/platform-browser/browser';
         * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
         * '@angular/http';
         * import {App} from './myapp';
         *
         * class MyOptions extends BaseResponseOptions {
         *   headers:Headers = new Headers({network: 'github'});
         * }
         *
         * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
         * ```
         *
         * The options could also be extended when manually creating a {@link Response}
         * object.
         *
         * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
         *
         * ```
         * import {BaseResponseOptions, Response} from '@angular/http';
         *
         * var options = new BaseResponseOptions();
         * var res = new Response(options.merge({
         *   body: 'Angular',
         *   headers: new Headers({framework: 'angular'})
         * }));
         * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
         * console.log('res.text():', res.text()); // Angular;
         * ```
         *
         * @experimental
         */
        var BaseResponseOptions = function (_super) {
            __extends$1(BaseResponseOptions, _super);
            function BaseResponseOptions() {
                _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() });
            }
            BaseResponseOptions.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            BaseResponseOptions.ctorParameters = [];
            return BaseResponseOptions;
        }(ResponseOptions);

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        /**
         * Abstract class from which real backends are derived.
         *
         * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
         * {@link Request}.
         *
         * @experimental
         */
        var ConnectionBackend = function () {
            function ConnectionBackend() {}
            return ConnectionBackend;
        }();
        /**
         * Abstract class from which real connections are derived.
         *
         * @experimental
         */
        var Connection = function () {
            function Connection() {}
            return Connection;
        }();
        /**
         * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
         *
         * @experimental
         */
        var XSRFStrategy = function () {
            function XSRFStrategy() {}
            return XSRFStrategy;
        }();

        function normalizeMethodName(method) {
            if (typeof method !== 'string') return method;
            switch (method.toUpperCase()) {
                case 'GET':
                    return exports.RequestMethod.Get;
                case 'POST':
                    return exports.RequestMethod.Post;
                case 'PUT':
                    return exports.RequestMethod.Put;
                case 'DELETE':
                    return exports.RequestMethod.Delete;
                case 'OPTIONS':
                    return exports.RequestMethod.Options;
                case 'HEAD':
                    return exports.RequestMethod.Head;
                case 'PATCH':
                    return exports.RequestMethod.Patch;
            }
            throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
        }
        var isSuccess = function (status) {
            return status >= 200 && status < 300;
        };
        function getResponseURL(xhr) {
            if ('responseURL' in xhr) {
                return xhr.responseURL;
            }
            if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
                return xhr.getResponseHeader('X-Request-URL');
            }
            return;
        }
        function stringToArrayBuffer(input) {
            var view = new Uint16Array(input.length);
            for (var i = 0, strLen = input.length; i < strLen; i++) {
                view[i] = input.charCodeAt(i);
            }
            return view.buffer;
        }

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        function paramParser(rawParams) {
            if (rawParams === void 0) {
                rawParams = '';
            }
            var map = new Map();
            if (rawParams.length > 0) {
                var params = rawParams.split('&');
                params.forEach(function (param) {
                    var eqIdx = param.indexOf('=');
                    var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
                        key = _a[0],
                        val = _a[1];
                    var list = map.get(key) || [];
                    list.push(val);
                    map.set(key, list);
                });
            }
            return map;
        }
        /**
         * @experimental
         **/
        var QueryEncoder = function () {
            function QueryEncoder() {}
            QueryEncoder.prototype.encodeKey = function (k) {
                return standardEncoding(k);
            };
            QueryEncoder.prototype.encodeValue = function (v) {
                return standardEncoding(v);
            };
            return QueryEncoder;
        }();
        function standardEncoding(v) {
            return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
        }
        /**
         * Map-like representation of url search parameters, based on
         * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
         * with several extensions for merging URLSearchParams objects:
         *   - setAll()
         *   - appendAll()
         *   - replaceAll()
         *
         * This class accepts an optional second parameter of ${@link QueryEncoder},
         * which is used to serialize parameters before making a request. By default,
         * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
         * and then un-encodes certain characters that are allowed to be part of the query
         * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
         *
         * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
         *
         * If the set of allowed query characters is not acceptable for a particular backend,
         * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
         *
         * ```
         * import {URLSearchParams, QueryEncoder} from '@angular/http';
         * class MyQueryEncoder extends QueryEncoder {
         *   encodeKey(k: string): string {
         *     return myEncodingFunction(k);
         *   }
         *
         *   encodeValue(v: string): string {
         *     return myEncodingFunction(v);
         *   }
         * }
         *
         * let params = new URLSearchParams('', new MyQueryEncoder());
         * ```
         * @experimental
         */
        var URLSearchParams = function () {
            function URLSearchParams(rawParams, queryEncoder) {
                if (rawParams === void 0) {
                    rawParams = '';
                }
                if (queryEncoder === void 0) {
                    queryEncoder = new QueryEncoder();
                }
                this.rawParams = rawParams;
                this.queryEncoder = queryEncoder;
                this.paramsMap = paramParser(rawParams);
            }
            URLSearchParams.prototype.clone = function () {
                var clone = new URLSearchParams('', this.queryEncoder);
                clone.appendAll(this);
                return clone;
            };
            URLSearchParams.prototype.has = function (param) {
                return this.paramsMap.has(param);
            };
            URLSearchParams.prototype.get = function (param) {
                var storedParam = this.paramsMap.get(param);
                return Array.isArray(storedParam) ? storedParam[0] : null;
            };
            URLSearchParams.prototype.getAll = function (param) {
                return this.paramsMap.get(param) || [];
            };
            URLSearchParams.prototype.set = function (param, val) {
                if (val === void 0 || val === null) {
                    this.delete(param);
                    return;
                }
                var list = this.paramsMap.get(param) || [];
                list.length = 0;
                list.push(val);
                this.paramsMap.set(param, list);
            };
            // A merge operation
            // For each name-values pair in `searchParams`, perform `set(name, values[0])`
            //
            // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4], c=[8], b=[7]"
            //
            // TODO(@caitp): document this better
            URLSearchParams.prototype.setAll = function (searchParams) {
                var _this = this;
                searchParams.paramsMap.forEach(function (value, param) {
                    var list = _this.paramsMap.get(param) || [];
                    list.length = 0;
                    list.push(value[0]);
                    _this.paramsMap.set(param, list);
                });
            };
            URLSearchParams.prototype.append = function (param, val) {
                if (val === void 0 || val === null) return;
                var list = this.paramsMap.get(param) || [];
                list.push(val);
                this.paramsMap.set(param, list);
            };
            // A merge operation
            // For each name-values pair in `searchParams`, perform `append(name, value)`
            // for each value in `values`.
            //
            // E.g: "a=[1,2], c=[8]" + "a=[3,4], b=[7]" = "a=[1,2,3,4], c=[8], b=[7]"
            //
            // TODO(@caitp): document this better
            URLSearchParams.prototype.appendAll = function (searchParams) {
                var _this = this;
                searchParams.paramsMap.forEach(function (value, param) {
                    var list = _this.paramsMap.get(param) || [];
                    for (var i = 0; i < value.length; ++i) {
                        list.push(value[i]);
                    }
                    _this.paramsMap.set(param, list);
                });
            };
            // A merge operation
            // For each name-values pair in `searchParams`, perform `delete(name)`,
            // followed by `set(name, values)`
            //
            // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4,5,6], c=[8], b=[7]"
            //
            // TODO(@caitp): document this better
            URLSearchParams.prototype.replaceAll = function (searchParams) {
                var _this = this;
                searchParams.paramsMap.forEach(function (value, param) {
                    var list = _this.paramsMap.get(param) || [];
                    list.length = 0;
                    for (var i = 0; i < value.length; ++i) {
                        list.push(value[i]);
                    }
                    _this.paramsMap.set(param, list);
                });
            };
            URLSearchParams.prototype.toString = function () {
                var _this = this;
                var paramsList = [];
                this.paramsMap.forEach(function (values, k) {
                    values.forEach(function (v) {
                        return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));
                    });
                });
                return paramsList.join('&');
            };
            URLSearchParams.prototype.delete = function (param) {
                this.paramsMap.delete(param);
            };
            return URLSearchParams;
        }();

        /**
         * HTTP request body used by both {@link Request} and {@link Response}
         * https://fetch.spec.whatwg.org/#body
         */
        var Body = function () {
            function Body() {}
            /**
             * Attempts to return body as parsed `JSON` object, or raises an exception.
             */
            Body.prototype.json = function () {
                if (typeof this._body === 'string') {
                    return JSON.parse(this._body);
                }
                if (this._body instanceof ArrayBuffer) {
                    return JSON.parse(this.text());
                }
                return this._body;
            };
            /**
             * Returns the body as a string, presuming `toString()` can be called on the response body.
             */
            Body.prototype.text = function () {
                if (this._body instanceof URLSearchParams) {
                    return this._body.toString();
                }
                if (this._body instanceof ArrayBuffer) {
                    return String.fromCharCode.apply(null, new Uint16Array(this._body));
                }
                if (this._body === null) {
                    return '';
                }
                if (typeof this._body === 'object') {
                    return JSON.stringify(this._body, null, 2);
                }
                return this._body.toString();
            };
            /**
             * Return the body as an ArrayBuffer
             */
            Body.prototype.arrayBuffer = function () {
                if (this._body instanceof ArrayBuffer) {
                    return this._body;
                }
                return stringToArrayBuffer(this.text());
            };
            /**
              * Returns the request's body as a Blob, assuming that body exists.
              */
            Body.prototype.blob = function () {
                if (this._body instanceof Blob) {
                    return this._body;
                }
                if (this._body instanceof ArrayBuffer) {
                    return new Blob([this._body]);
                }
                throw new Error('The request body isn\'t either a blob or an array buffer');
            };
            return Body;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$2 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * Creates `Response` instances from provided values.
         *
         * Though this object isn't
         * usually instantiated by end-users, it is the primary object interacted with when it comes time to
         * add data to a view.
         *
         * ### Example
         *
         * ```
         * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
         * ```
         *
         * The Response's interface is inspired by the Response constructor defined in the [Fetch
         * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
         * can be accessed many times. There are other differences in the implementation, but this is the
         * most significant.
         *
         * @experimental
         */
        var Response = function (_super) {
            __extends$2(Response, _super);
            function Response(responseOptions) {
                _super.call(this);
                this._body = responseOptions.body;
                this.status = responseOptions.status;
                this.ok = this.status >= 200 && this.status <= 299;
                this.statusText = responseOptions.statusText;
                this.headers = responseOptions.headers;
                this.type = responseOptions.type;
                this.url = responseOptions.url;
            }
            Response.prototype.toString = function () {
                return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
            };
            return Response;
        }(Body);

        var _nextRequestId = 0;
        var JSONP_HOME = '__ng_jsonp__';
        var _jsonpConnections = null;
        function _getJsonpConnections() {
            var w = typeof window == 'object' ? window : {};
            if (_jsonpConnections === null) {
                _jsonpConnections = w[JSONP_HOME] = {};
            }
            return _jsonpConnections;
        }
        // Make sure not to evaluate this in a non-browser environment!
        var BrowserJsonp = function () {
            function BrowserJsonp() {}
            // Construct a <script> element with the specified URL
            BrowserJsonp.prototype.build = function (url) {
                var node = document.createElement('script');
                node.src = url;
                return node;
            };
            BrowserJsonp.prototype.nextRequestID = function () {
                return "__req" + _nextRequestId++;
            };
            BrowserJsonp.prototype.requestCallback = function (id) {
                return JSONP_HOME + "." + id + ".finished";
            };
            BrowserJsonp.prototype.exposeConnection = function (id, connection) {
                var connections = _getJsonpConnections();
                connections[id] = connection;
            };
            BrowserJsonp.prototype.removeConnection = function (id) {
                var connections = _getJsonpConnections();
                connections[id] = null;
            };
            // Attach the <script> element to the DOM
            BrowserJsonp.prototype.send = function (node) {
                document.body.appendChild(node);
            };
            // Remove <script> element from the DOM
            BrowserJsonp.prototype.cleanup = function (node) {
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            };
            BrowserJsonp.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            BrowserJsonp.ctorParameters = [];
            return BrowserJsonp;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
        var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
        /**
         * Abstract base class for an in-flight JSONP request.
         *
         * @experimental
         */
        var JSONPConnection = function () {
            function JSONPConnection() {}
            return JSONPConnection;
        }();
        var JSONPConnection_ = function (_super) {
            __extends(JSONPConnection_, _super);
            function JSONPConnection_(req, _dom, baseResponseOptions) {
                var _this = this;
                _super.call(this);
                this._dom = _dom;
                this.baseResponseOptions = baseResponseOptions;
                this._finished = false;
                if (req.method !== exports.RequestMethod.Get) {
                    throw new TypeError(JSONP_ERR_WRONG_METHOD);
                }
                this.request = req;
                this.response = new rxjs_Observable.Observable(function (responseObserver) {
                    _this.readyState = exports.ReadyState.Loading;
                    var id = _this._id = _dom.nextRequestID();
                    _dom.exposeConnection(id, _this);
                    // Workaround Dart
                    // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
                    var callback = _dom.requestCallback(_this._id);
                    var url = req.url;
                    if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                        url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
                    } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
                    }
                    var script = _this._script = _dom.build(url);
                    var onLoad = function (event) {
                        if (_this.readyState === exports.ReadyState.Cancelled) return;
                        _this.readyState = exports.ReadyState.Done;
                        _dom.cleanup(script);
                        if (!_this._finished) {
                            var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });
                            if (baseResponseOptions) {
                                responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                            }
                            responseObserver.error(new Response(responseOptions_1));
                            return;
                        }
                        var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
                        if (_this.baseResponseOptions) {
                            responseOptions = _this.baseResponseOptions.merge(responseOptions);
                        }
                        responseObserver.next(new Response(responseOptions));
                        responseObserver.complete();
                    };
                    var onError = function (error) {
                        if (_this.readyState === exports.ReadyState.Cancelled) return;
                        _this.readyState = exports.ReadyState.Done;
                        _dom.cleanup(script);
                        var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });
                        if (baseResponseOptions) {
                            responseOptions = baseResponseOptions.merge(responseOptions);
                        }
                        responseObserver.error(new Response(responseOptions));
                    };
                    script.addEventListener('load', onLoad);
                    script.addEventListener('error', onError);
                    _dom.send(script);
                    return function () {
                        _this.readyState = exports.ReadyState.Cancelled;
                        script.removeEventListener('load', onLoad);
                        script.removeEventListener('error', onError);
                        _this._dom.cleanup(script);
                    };
                });
            }
            JSONPConnection_.prototype.finished = function (data) {
                // Don't leak connections
                this._finished = true;
                this._dom.removeConnection(this._id);
                if (this.readyState === exports.ReadyState.Cancelled) return;
                this._responseData = data;
            };
            return JSONPConnection_;
        }(JSONPConnection);
        /**
         * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
         *
         * @experimental
         */
        var JSONPBackend = function (_super) {
            __extends(JSONPBackend, _super);
            function JSONPBackend() {
                _super.apply(this, arguments);
            }
            return JSONPBackend;
        }(ConnectionBackend);
        var JSONPBackend_ = function (_super) {
            __extends(JSONPBackend_, _super);
            function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
                _super.call(this);
                this._browserJSONP = _browserJSONP;
                this._baseResponseOptions = _baseResponseOptions;
            }
            JSONPBackend_.prototype.createConnection = function (request) {
                return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
            };
            JSONPBackend_.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            JSONPBackend_.ctorParameters = [{ type: BrowserJsonp }, { type: ResponseOptions }];
            return JSONPBackend_;
        }(JSONPBackend);

        var XSSI_PREFIX = /^\)\]\}',?\n/;
        /**
         * Creates connections using `XMLHttpRequest`. Given a fully-qualified
         * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
         * request.
         *
         * This class would typically not be created or interacted with directly inside applications, though
         * the {@link MockConnection} may be interacted with in tests.
         *
         * @experimental
         */
        var XHRConnection = function () {
            function XHRConnection(req, browserXHR, baseResponseOptions) {
                var _this = this;
                this.request = req;
                this.response = new rxjs_Observable.Observable(function (responseObserver) {
                    var _xhr = browserXHR.build();
                    _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);
                    if (req.withCredentials != null) {
                        _xhr.withCredentials = req.withCredentials;
                    }
                    // load event handler
                    var onLoad = function () {
                        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                        var status = _xhr.status === 1223 ? 204 : _xhr.status;
                        var body = null;
                        // HTTP 204 means no content
                        if (status !== 204) {
                            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                            // response/responseType properties were introduced in ResourceLoader Level2 spec
                            // (supported by IE10)
                            body = _xhr.response == null ? _xhr.responseText : _xhr.response;
                            // Implicitly strip a potential XSSI prefix.
                            if (typeof body === 'string') {
                                body = body.replace(XSSI_PREFIX, '');
                            }
                        }
                        // fix status code when it is 0 (0 status is undocumented).
                        // Occurs when accessing file resources or on Android 4.1 stock browser
                        // while retrieving files from application cache.
                        if (status === 0) {
                            status = body ? 200 : 0;
                        }
                        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
                        // IE 9 does not provide the way to get URL of response
                        var url = getResponseURL(_xhr) || req.url;
                        var statusText = _xhr.statusText || 'OK';
                        var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
                        if (baseResponseOptions != null) {
                            responseOptions = baseResponseOptions.merge(responseOptions);
                        }
                        var response = new Response(responseOptions);
                        response.ok = isSuccess(status);
                        if (response.ok) {
                            responseObserver.next(response);
                            // TODO(gdi2290): defer complete if array buffer until done
                            responseObserver.complete();
                            return;
                        }
                        responseObserver.error(response);
                    };
                    // error event handler
                    var onError = function (err) {
                        var responseOptions = new ResponseOptions({
                            body: err,
                            type: exports.ResponseType.Error,
                            status: _xhr.status,
                            statusText: _xhr.statusText
                        });
                        if (baseResponseOptions != null) {
                            responseOptions = baseResponseOptions.merge(responseOptions);
                        }
                        responseObserver.error(new Response(responseOptions));
                    };
                    _this.setDetectedContentType(req, _xhr);
                    if (req.headers != null) {
                        req.headers.forEach(function (values, name) {
                            return _xhr.setRequestHeader(name, values.join(','));
                        });
                    }
                    // Select the correct buffer type to store the response
                    if (req.responseType != null && _xhr.responseType != null) {
                        switch (req.responseType) {
                            case exports.ResponseContentType.ArrayBuffer:
                                _xhr.responseType = 'arraybuffer';
                                break;
                            case exports.ResponseContentType.Json:
                                _xhr.responseType = 'json';
                                break;
                            case exports.ResponseContentType.Text:
                                _xhr.responseType = 'text';
                                break;
                            case exports.ResponseContentType.Blob:
                                _xhr.responseType = 'blob';
                                break;
                            default:
                                throw new Error('The selected responseType is not supported');
                        }
                    }
                    _xhr.addEventListener('load', onLoad);
                    _xhr.addEventListener('error', onError);
                    _xhr.send(_this.request.getBody());
                    return function () {
                        _xhr.removeEventListener('load', onLoad);
                        _xhr.removeEventListener('error', onError);
                        _xhr.abort();
                    };
                });
            }
            XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
                // Skip if a custom Content-Type header is provided
                if (req.headers != null && req.headers.get('Content-Type') != null) {
                    return;
                }
                // Set the detected content type
                switch (req.contentType) {
                    case ContentType.NONE:
                        break;
                    case ContentType.JSON:
                        _xhr.setRequestHeader('content-type', 'application/json');
                        break;
                    case ContentType.FORM:
                        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                        break;
                    case ContentType.TEXT:
                        _xhr.setRequestHeader('content-type', 'text/plain');
                        break;
                    case ContentType.BLOB:
                        var blob = req.blob();
                        if (blob.type) {
                            _xhr.setRequestHeader('content-type', blob.type);
                        }
                        break;
                }
            };
            return XHRConnection;
        }();
        /**
         * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
         * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}
         * for more information on XSRF.
         *
         * Applications can configure custom cookie and header names by binding an instance of this class
         * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
         * details.
         *
         * @experimental
         */
        var CookieXSRFStrategy = function () {
            function CookieXSRFStrategy(_cookieName, _headerName) {
                if (_cookieName === void 0) {
                    _cookieName = 'XSRF-TOKEN';
                }
                if (_headerName === void 0) {
                    _headerName = 'X-XSRF-TOKEN';
                }
                this._cookieName = _cookieName;
                this._headerName = _headerName;
            }
            CookieXSRFStrategy.prototype.configureRequest = function (req) {
                var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
                if (xsrfToken) {
                    req.headers.set(this._headerName, xsrfToken);
                }
            };
            return CookieXSRFStrategy;
        }();
        /**
         * Creates {@link XHRConnection} instances.
         *
         * This class would typically not be used by end users, but could be
         * overridden if a different backend implementation should be used,
         * such as in a node backend.
         *
         * ### Example
         *
         * ```
         * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';
         * @Component({
         *   viewProviders: [
         *     HTTP_PROVIDERS,
         *     {provide: Http, useFactory: (backend, options) => {
         *       return new Http(backend, options);
         *     }, deps: [MyNodeBackend, BaseRequestOptions]}]
         * })
         * class MyComponent {
         *   constructor(http:Http) {
         *     http.request('people.json').subscribe(res => this.people = res.json());
         *   }
         * }
         * ```
         * @experimental
         */
        var XHRBackend = function () {
            function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
                this._browserXHR = _browserXHR;
                this._baseResponseOptions = _baseResponseOptions;
                this._xsrfStrategy = _xsrfStrategy;
            }
            XHRBackend.prototype.createConnection = function (request) {
                this._xsrfStrategy.configureRequest(request);
                return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
            };
            XHRBackend.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            XHRBackend.ctorParameters = [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }];
            return XHRBackend;
        }();

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$3 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        /**
         * Creates a request options object to be optionally provided when instantiating a
         * {@link Request}.
         *
         * This class is based on the `RequestInit` description in the [Fetch
         * Spec](https://fetch.spec.whatwg.org/#requestinit).
         *
         * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
         * class, which sub-classes `RequestOptions`.
         *
         * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
         *
         * ```typescript
         * import {RequestOptions, Request, RequestMethod} from '@angular/http';
         *
         * var options = new RequestOptions({
         *   method: RequestMethod.Post,
         *   url: 'https://google.com'
         * });
         * var req = new Request(options);
         * console.log('req.method:', RequestMethod[req.method]); // Post
         * console.log('options.url:', options.url); // https://google.com
         * ```
         *
         * @experimental
         */
        var RequestOptions = function () {
            function RequestOptions(_a) {
                var _b = _a === void 0 ? {} : _a,
                    method = _b.method,
                    headers = _b.headers,
                    body = _b.body,
                    url = _b.url,
                    search = _b.search,
                    withCredentials = _b.withCredentials,
                    responseType = _b.responseType;
                this.method = method != null ? normalizeMethodName(method) : null;
                this.headers = headers != null ? headers : null;
                this.body = body != null ? body : null;
                this.url = url != null ? url : null;
                this.search = search != null ? typeof search === 'string' ? new URLSearchParams(search) : search : null;
                this.withCredentials = withCredentials != null ? withCredentials : null;
                this.responseType = responseType != null ? responseType : null;
            }
            /**
             * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
             * existing values. This method will not change the values of the instance on which it is being
             * called.
             *
             * Note that `headers` and `search` will override existing values completely if present in
             * the `options` object. If these values should be merged, it should be done prior to calling
             * `merge` on the `RequestOptions` instance.
             *
             * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
             *
             * ```typescript
             * import {RequestOptions, Request, RequestMethod} from '@angular/http';
             *
             * var options = new RequestOptions({
             *   method: RequestMethod.Post
             * });
             * var req = new Request(options.merge({
             *   url: 'https://google.com'
             * }));
             * console.log('req.method:', RequestMethod[req.method]); // Post
             * console.log('options.url:', options.url); // null
             * console.log('req.url:', req.url); // https://google.com
             * ```
             */
            RequestOptions.prototype.merge = function (options) {
                return new RequestOptions({
                    method: options && options.method != null ? options.method : this.method,
                    headers: options && options.headers != null ? options.headers : this.headers,
                    body: options && options.body != null ? options.body : this.body,
                    url: options && options.url != null ? options.url : this.url,
                    search: options && options.search != null ? typeof options.search === 'string' ? new URLSearchParams(options.search) : options.search.clone() : this.search,
                    withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,
                    responseType: options && options.responseType != null ? options.responseType : this.responseType
                });
            };
            return RequestOptions;
        }();
        /**
         * Subclass of {@link RequestOptions}, with default values.
         *
         * Default values:
         *  * method: {@link RequestMethod RequestMethod.Get}
         *  * headers: empty {@link Headers} object
         *
         * This class could be extended and bound to the {@link RequestOptions} class
         * when configuring an {@link Injector}, in order to override the default options
         * used by {@link Http} to create and send {@link Request Requests}.
         *
         * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
         *
         * ```typescript
         * import {provide} from '@angular/core';
         * import {bootstrap} from '@angular/platform-browser/browser';
         * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';
         * import {App} from './myapp';
         *
         * class MyOptions extends BaseRequestOptions {
         *   search: string = 'coreTeam=true';
         * }
         *
         * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);
         * ```
         *
         * The options could also be extended when manually creating a {@link Request}
         * object.
         *
         * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
         *
         * ```
         * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';
         *
         * var options = new BaseRequestOptions();
         * var req = new Request(options.merge({
         *   method: RequestMethod.Post,
         *   url: 'https://google.com'
         * }));
         * console.log('req.method:', RequestMethod[req.method]); // Post
         * console.log('options.url:', options.url); // null
         * console.log('req.url:', req.url); // https://google.com
         * ```
         *
         * @experimental
         */
        var BaseRequestOptions = function (_super) {
            __extends$3(BaseRequestOptions, _super);
            function BaseRequestOptions() {
                _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() });
            }
            BaseRequestOptions.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            BaseRequestOptions.ctorParameters = [];
            return BaseRequestOptions;
        }(RequestOptions);

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$5 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        // TODO(jeffbcross): properly implement body accessors
        /**
         * Creates `Request` instances from provided values.
         *
         * The Request's interface is inspired by the Request constructor defined in the [Fetch
         * Spec](https://fetch.spec.whatwg.org/#request-class),
         * but is considered a static value whose body can be accessed many times. There are other
         * differences in the implementation, but this is the most significant.
         *
         * `Request` instances are typically created by higher-level classes, like {@link Http} and
         * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
         * One such example is when creating services that wrap higher-level services, like {@link Http},
         * where it may be useful to generate a `Request` with arbitrary headers and search params.
         *
         * ```typescript
         * import {Injectable, Injector} from '@angular/core';
         * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';
         *
         * @Injectable()
         * class AutoAuthenticator {
         *   constructor(public http:Http) {}
         *   request(url:string) {
         *     return this.http.request(new Request({
         *       method: RequestMethod.Get,
         *       url: url,
         *       search: 'password=123'
         *     }));
         *   }
         * }
         *
         * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
         * var authenticator = injector.get(AutoAuthenticator);
         * authenticator.request('people.json').subscribe(res => {
         *   //URL should have included '?password=123'
         *   console.log('people', res.json());
         * });
         * ```
         *
         * @experimental
         */
        var Request = function (_super) {
            __extends$5(Request, _super);
            function Request(requestOptions) {
                _super.call(this);
                // TODO: assert that url is present
                var url = requestOptions.url;
                this.url = requestOptions.url;
                if (requestOptions.search) {
                    var search = requestOptions.search.toString();
                    if (search.length > 0) {
                        var prefix = '?';
                        if (this.url.indexOf('?') != -1) {
                            prefix = this.url[this.url.length - 1] == '&' ? '' : '&';
                        }
                        // TODO: just delete search-query-looking string in url?
                        this.url = url + prefix + search;
                    }
                }
                this._body = requestOptions.body;
                this.method = normalizeMethodName(requestOptions.method);
                // TODO(jeffbcross): implement behavior
                // Defaults to 'omit', consistent with browser
                this.headers = new Headers(requestOptions.headers);
                this.contentType = this.detectContentType();
                this.withCredentials = requestOptions.withCredentials;
                this.responseType = requestOptions.responseType;
            }
            /**
             * Returns the content type enum based on header options.
             */
            Request.prototype.detectContentType = function () {
                switch (this.headers.get('content-type')) {
                    case 'application/json':
                        return ContentType.JSON;
                    case 'application/x-www-form-urlencoded':
                        return ContentType.FORM;
                    case 'multipart/form-data':
                        return ContentType.FORM_DATA;
                    case 'text/plain':
                    case 'text/html':
                        return ContentType.TEXT;
                    case 'application/octet-stream':
                        return ContentType.BLOB;
                    default:
                        return this.detectContentTypeFromBody();
                }
            };
            /**
             * Returns the content type of request's body based on its type.
             */
            Request.prototype.detectContentTypeFromBody = function () {
                if (this._body == null) {
                    return ContentType.NONE;
                } else if (this._body instanceof URLSearchParams) {
                    return ContentType.FORM;
                } else if (this._body instanceof FormData) {
                    return ContentType.FORM_DATA;
                } else if (this._body instanceof Blob$1) {
                    return ContentType.BLOB;
                } else if (this._body instanceof ArrayBuffer$1) {
                    return ContentType.ARRAY_BUFFER;
                } else if (this._body && typeof this._body == 'object') {
                    return ContentType.JSON;
                } else {
                    return ContentType.TEXT;
                }
            };
            /**
             * Returns the request's body according to its type. If body is undefined, return
             * null.
             */
            Request.prototype.getBody = function () {
                switch (this.contentType) {
                    case ContentType.JSON:
                        return this.text();
                    case ContentType.FORM:
                        return this.text();
                    case ContentType.FORM_DATA:
                        return this._body;
                    case ContentType.TEXT:
                        return this.text();
                    case ContentType.BLOB:
                        return this.blob();
                    case ContentType.ARRAY_BUFFER:
                        return this.arrayBuffer();
                    default:
                        return null;
                }
            };
            return Request;
        }(Body);
        var noop = function () {};
        var w = typeof window == 'object' ? window : noop;
        var FormData = w['FormData'] || noop;
        var Blob$1 = w['Blob'] || noop;
        var ArrayBuffer$1 = w['ArrayBuffer'] || noop;

        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var __extends$4 = this && this.__extends || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        function httpRequest(backend, request) {
            return backend.createConnection(request).response;
        }
        function mergeOptions(defaultOpts, providedOpts, method, url) {
            var newOptions = defaultOpts;
            if (providedOpts) {
                // Hack so Dart can used named parameters
                return newOptions.merge(new RequestOptions({
                    method: providedOpts.method || method,
                    url: providedOpts.url || url,
                    search: providedOpts.search,
                    headers: providedOpts.headers,
                    body: providedOpts.body,
                    withCredentials: providedOpts.withCredentials,
                    responseType: providedOpts.responseType
                }));
            }
            return newOptions.merge(new RequestOptions({ method: method, url: url }));
        }
        /**
         * Performs http requests using `XMLHttpRequest` as the default backend.
         *
         * `Http` is available as an injectable class, with methods to perform http requests. Calling
         * `request` returns an `Observable` which will emit a single {@link Response} when a
         * response is received.
         *
         * ### Example
         *
         * ```typescript
         * import {Http, HTTP_PROVIDERS} from '@angular/http';
         * import 'rxjs/add/operator/map'
         * @Component({
         *   selector: 'http-app',
         *   viewProviders: [HTTP_PROVIDERS],
         *   templateUrl: 'people.html'
         * })
         * class PeopleComponent {
         *   constructor(http: Http) {
         *     http.get('people.json')
         *       // Call map on the response observable to get the parsed people object
         *       .map(res => res.json())
         *       // Subscribe to the observable to get the parsed people object and attach it to the
         *       // component
         *       .subscribe(people => this.people = people);
         *   }
         * }
         * ```
         *
         *
         * ### Example
         *
         * ```
         * http.get('people.json').subscribe((res:Response) => this.people = res.json());
         * ```
         *
         * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
         * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
         * the {@link XHRBackend} provider, as in the following example:
         *
         * ### Example
         *
         * ```typescript
         * import {BaseRequestOptions, Http} from '@angular/http';
         * import {MockBackend} from '@angular/http/testing';
         * var injector = Injector.resolveAndCreate([
         *   BaseRequestOptions,
         *   MockBackend,
         *   {provide: Http, useFactory:
         *       function(backend, defaultOptions) {
         *         return new Http(backend, defaultOptions);
         *       },
         *       deps: [MockBackend, BaseRequestOptions]}
         * ]);
         * var http = injector.get(Http);
         * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
         * ```
         *
         * @experimental
         */
        var Http = function () {
            function Http(_backend, _defaultOptions) {
                this._backend = _backend;
                this._defaultOptions = _defaultOptions;
            }
            /**
             * Performs any type of http request. First argument is required, and can either be a url or
             * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
             * object can be provided as the 2nd argument. The options object will be merged with the values
             * of {@link BaseRequestOptions} before performing the request.
             */
            Http.prototype.request = function (url, options) {
                var responseObservable;
                if (typeof url === 'string') {
                    responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
                } else if (url instanceof Request) {
                    responseObservable = httpRequest(this._backend, url);
                } else {
                    throw new Error('First argument must be a url string or Request instance.');
                }
                return responseObservable;
            };
            /**
             * Performs a request with `get` http method.
             */
            Http.prototype.get = function (url, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
            };
            /**
             * Performs a request with `post` http method.
             */
            Http.prototype.post = function (url, body, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));
            };
            /**
             * Performs a request with `put` http method.
             */
            Http.prototype.put = function (url, body, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));
            };
            /**
             * Performs a request with `delete` http method.
             */
            Http.prototype.delete = function (url, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));
            };
            /**
             * Performs a request with `patch` http method.
             */
            Http.prototype.patch = function (url, body, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));
            };
            /**
             * Performs a request with `head` http method.
             */
            Http.prototype.head = function (url, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));
            };
            /**
             * Performs a request with `options` http method.
             */
            Http.prototype.options = function (url, options) {
                return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));
            };
            Http.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            Http.ctorParameters = [{ type: ConnectionBackend }, { type: RequestOptions }];
            return Http;
        }();
        /**
         * @experimental
         */
        var Jsonp = function (_super) {
            __extends$4(Jsonp, _super);
            function Jsonp(backend, defaultOptions) {
                _super.call(this, backend, defaultOptions);
            }
            /**
             * Performs any type of http request. First argument is required, and can either be a url or
             * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
             * object can be provided as the 2nd argument. The options object will be merged with the values
             * of {@link BaseRequestOptions} before performing the request.
             *
             * @security Regular XHR is the safest alternative to JSONP for most applications, and is
             * supported by all current browsers. Because JSONP creates a `<script>` element with
             * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
             * source could expose your application to XSS risks. Data exposed by JSONP may also be
             * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
             * future security issues (e.g. content sniffing).  For more detail, see the
             * [Security Guide](http://g.co/ng/security).
             */
            Jsonp.prototype.request = function (url, options) {
                var responseObservable;
                if (typeof url === 'string') {
                    url = new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));
                }
                if (url instanceof Request) {
                    if (url.method !== exports.RequestMethod.Get) {
                        throw new Error('JSONP requests must use GET request method.');
                    }
                    responseObservable = httpRequest(this._backend, url);
                } else {
                    throw new Error('First argument must be a url string or Request instance.');
                }
                return responseObservable;
            };
            Jsonp.decorators = [{ type: _angular_core.Injectable }];
            /** @nocollapse */
            Jsonp.ctorParameters = [{ type: ConnectionBackend }, { type: RequestOptions }];
            return Jsonp;
        }(Http);

        function _createDefaultCookieXSRFStrategy() {
            return new CookieXSRFStrategy();
        }
        function httpFactory(xhrBackend, requestOptions) {
            return new Http(xhrBackend, requestOptions);
        }
        function jsonpFactory(jsonpBackend, requestOptions) {
            return new Jsonp(jsonpBackend, requestOptions);
        }
        /**
         * The module that includes http's providers
         *
         * @experimental
         */
        var HttpModule = function () {
            function HttpModule() {}
            HttpModule.decorators = [{ type: _angular_core.NgModule, args: [{
                    providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] }, BrowserXhr, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, XHRBackend, { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy }]
                }] }];
            /** @nocollapse */
            HttpModule.ctorParameters = [];
            return HttpModule;
        }();
        /**
         * The module that includes jsonp's providers
         *
         * @experimental
         */
        var JsonpModule = function () {
            function JsonpModule() {}
            JsonpModule.decorators = [{ type: _angular_core.NgModule, args: [{
                    providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] }, BrowserJsonp, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, { provide: JSONPBackend, useClass: JSONPBackend_ }]
                }] }];
            /** @nocollapse */
            JsonpModule.ctorParameters = [];
            return JsonpModule;
        }();

        exports.BrowserXhr = BrowserXhr;
        exports.JSONPBackend = JSONPBackend;
        exports.JSONPConnection = JSONPConnection;
        exports.CookieXSRFStrategy = CookieXSRFStrategy;
        exports.XHRBackend = XHRBackend;
        exports.XHRConnection = XHRConnection;
        exports.BaseRequestOptions = BaseRequestOptions;
        exports.RequestOptions = RequestOptions;
        exports.BaseResponseOptions = BaseResponseOptions;
        exports.ResponseOptions = ResponseOptions;
        exports.Headers = Headers;
        exports.Http = Http;
        exports.Jsonp = Jsonp;
        exports.HttpModule = HttpModule;
        exports.JsonpModule = JsonpModule;
        exports.Connection = Connection;
        exports.ConnectionBackend = ConnectionBackend;
        exports.XSRFStrategy = XSRFStrategy;
        exports.Request = Request;
        exports.Response = Response;
        exports.QueryEncoder = QueryEncoder;
        exports.URLSearchParams = URLSearchParams;
    });
    return module.exports;
});
$__System.registerDynamic("37", ["60"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("60");
  return module.exports;
});
$__System.registerDynamic('49', [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
$__System.registerDynamic("61", ["24"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1 = $__require("24");
  var SubjectSubscription = function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
      _super.call(this);
      this.subject = subject;
      this.subscriber = subscriber;
      this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
      if (this.closed) {
        return;
      }
      this.closed = true;
      var subject = this.subject;
      var observers = subject.observers;
      this.subject = null;
      if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
        return;
      }
      var subscriberIndex = observers.indexOf(this.subscriber);
      if (subscriberIndex !== -1) {
        observers.splice(subscriberIndex, 1);
      }
    };
    return SubjectSubscription;
  }(Subscription_1.Subscription);
  exports.SubjectSubscription = SubjectSubscription;
  return module.exports;
});
$__System.registerDynamic('10', ['11', '20', '24', '49', '61', '62'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('11');
  var Subscriber_1 = $__require('20');
  var Subscription_1 = $__require('24');
  var ObjectUnsubscribedError_1 = $__require('49');
  var SubjectSubscription_1 = $__require('61');
  var rxSubscriber_1 = $__require('62');
  var SubjectSubscriber = function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
      _super.call(this, destination);
      this.destination = destination;
    }
    return SubjectSubscriber;
  }(Subscriber_1.Subscriber);
  exports.SubjectSubscriber = SubjectSubscriber;
  var Subject = function (_super) {
    __extends(Subject, _super);
    function Subject() {
      _super.call(this);
      this.observers = [];
      this.closed = false;
      this.isStopped = false;
      this.hasError = false;
      this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
      return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject.prototype.next = function (value) {
      if (this.closed) {
        throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
      }
      if (!this.isStopped) {
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
          copy[i].next(value);
        }
      }
    };
    Subject.prototype.error = function (err) {
      if (this.closed) {
        throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
      }
      this.hasError = true;
      this.thrownError = err;
      this.isStopped = true;
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();
      for (var i = 0; i < len; i++) {
        copy[i].error(err);
      }
      this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
      if (this.closed) {
        throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
      }
      this.isStopped = true;
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();
      for (var i = 0; i < len; i++) {
        copy[i].complete();
      }
      this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
      this.isStopped = true;
      this.closed = true;
      this.observers = null;
    };
    Subject.prototype._subscribe = function (subscriber) {
      if (this.closed) {
        throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
      } else if (this.hasError) {
        subscriber.error(this.thrownError);
        return Subscription_1.Subscription.EMPTY;
      } else if (this.isStopped) {
        subscriber.complete();
        return Subscription_1.Subscription.EMPTY;
      } else {
        this.observers.push(subscriber);
        return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
      }
    };
    Subject.prototype.asObservable = function () {
      var observable = new Observable_1.Observable();
      observable.source = this;
      return observable;
    };
    Subject.create = function (destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject;
  }(Observable_1.Observable);
  exports.Subject = Subject;
  var AnonymousSubject = function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
      _super.call(this);
      this.destination = destination;
      this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
      var destination = this.destination;
      if (destination && destination.next) {
        destination.next(value);
      }
    };
    AnonymousSubject.prototype.error = function (err) {
      var destination = this.destination;
      if (destination && destination.error) {
        this.destination.error(err);
      }
    };
    AnonymousSubject.prototype.complete = function () {
      var destination = this.destination;
      if (destination && destination.complete) {
        this.destination.complete();
      }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
      var source = this.source;
      if (source) {
        return this.source.subscribe(subscriber);
      } else {
        return Subscription_1.Subscription.EMPTY;
      }
    };
    return AnonymousSubject;
  }(Subject);
  exports.AnonymousSubject = AnonymousSubject;
  return module.exports;
});
$__System.registerDynamic('63', ['10', '11', '3'], true, function ($__require, exports, module) {
  /* */
  "format cjs";

  var define,
      global = this || self,
      GLOBAL = global;
  (function (process) {
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, $__require('10'), $__require('11')) : typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) : factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx);
    })(this, function (exports, rxjs_Subject, rxjs_Observable) {
      'use strict';

      var globalScope;
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
      }
      var global$1 = globalScope;
      function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
      }
      global$1.assert = function assert(condition) {};
      function isPresent(obj) {
        return obj != null;
      }
      function isBlank(obj) {
        return obj == null;
      }
      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }
        if (token == null) {
          return '' + token;
        }
        if (token.overriddenName) {
          return token.overriddenName;
        }
        if (token.name) {
          return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
      }
      function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
      }
      function print(obj) {
        console.log(obj);
      }
      function warn(obj) {
        console.warn(obj);
      }
      var _symbolIterator = null;
      function getSymbolIterator() {
        if (!_symbolIterator) {
          if (globalScope.Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
          } else {
            var keys = Object.getOwnPropertyNames(Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                _symbolIterator = key;
              }
            }
          }
        }
        return _symbolIterator;
      }
      function isPrimitive(obj) {
        return !isJsObject(obj);
      }
      var _nextClassId = 0;
      var Reflect = global$1.Reflect;
      function extractAnnotation(annotation) {
        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
          annotation = annotation.annotation;
        }
        return annotation;
      }
      function applyParams(fnOrArray, key) {
        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
          throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
        }
        if (typeof fnOrArray === 'function') {
          return fnOrArray;
        }
        if (Array.isArray(fnOrArray)) {
          var annotations = fnOrArray;
          var annoLength = annotations.length - 1;
          var fn = fnOrArray[annoLength];
          if (typeof fn !== 'function') {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
          }
          if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
          }
          var paramsAnnotations = [];
          for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
            var paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var annotation = annotations[i];
            if (Array.isArray(annotation)) {
              for (var j = 0; j < annotation.length; j++) {
                paramAnnotations.push(extractAnnotation(annotation[j]));
              }
            } else if (typeof annotation === 'function') {
              paramAnnotations.push(extractAnnotation(annotation));
            } else {
              paramAnnotations.push(annotation);
            }
          }
          Reflect.defineMetadata('parameters', paramsAnnotations, fn);
          return fn;
        }
        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
      }
      function Class(clsDef) {
        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
        var proto = constructor.prototype;
        if (clsDef.hasOwnProperty('extends')) {
          if (typeof clsDef.extends === 'function') {
            constructor.prototype = proto = Object.create(clsDef.extends.prototype);
          } else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
          }
        }
        for (var key in clsDef) {
          if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
          }
        }
        if (this && this.annotations instanceof Array) {
          Reflect.defineMetadata('annotations', this.annotations, constructor);
        }
        var constructorName = constructor['name'];
        if (!constructorName || constructorName === 'constructor') {
          constructor['overriddenName'] = "class" + _nextClassId++;
        }
        return constructor;
      }
      function makeDecorator(name, props, parentClass, chainFn) {
        if (chainFn === void 0) {
          chainFn = null;
        }
        var metaCtor = makeMetadataCtor([props]);
        function DecoratorFactory(objOrType) {
          if (!(Reflect && Reflect.getMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
          }
          if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
          }
          var annotationInstance = new DecoratorFactory(objOrType);
          var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
          chainAnnotation.push(annotationInstance);
          var TypeDecorator = function TypeDecorator(cls) {
            var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
            annotations.push(annotationInstance);
            Reflect.defineMetadata('annotations', annotations, cls);
            return cls;
          };
          TypeDecorator.annotations = chainAnnotation;
          TypeDecorator.Class = Class;
          if (chainFn) chainFn(TypeDecorator);
          return TypeDecorator;
        }
        if (parentClass) {
          DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        DecoratorFactory.prototype.toString = function () {
          return "@" + name;
        };
        DecoratorFactory.annotationCls = DecoratorFactory;
        return DecoratorFactory;
      }
      function makeMetadataCtor(props) {
        return function ctor() {
          var _this = this;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          props.forEach(function (prop, i) {
            var argVal = args[i];
            if (Array.isArray(prop)) {
              _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
            } else {
              for (var propName in prop) {
                _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
              }
            }
          });
        };
      }
      function makeParamDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function ParamDecoratorFactory() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
          }
          var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
          ParamDecorator.annotation = annotationInstance;
          return ParamDecorator;
          function ParamDecorator(cls, unusedKey, index) {
            var parameters = Reflect.getMetadata('parameters', cls) || [];
            while (parameters.length <= index) {
              parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            parameters[index].push(annotationInstance);
            Reflect.defineMetadata('parameters', parameters, cls);
            return cls;
          }
          var _a;
        }
        if (parentClass) {
          ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        ParamDecoratorFactory.prototype.toString = function () {
          return "@" + name;
        };
        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
      }
      function makePropDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function PropDecoratorFactory() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
          }
          var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
          return function PropDecorator(target, name) {
            var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            Reflect.defineMetadata('propMetadata', meta, target.constructor);
          };
          var _a;
        }
        if (parentClass) {
          PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        PropDecoratorFactory.prototype.toString = function () {
          return "@" + name;
        };
        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
      }
      var Inject = makeParamDecorator('Inject', [['token', undefined]]);
      var Optional = makeParamDecorator('Optional', []);
      var Injectable = makeParamDecorator('Injectable', []);
      var Self = makeParamDecorator('Self', []);
      var SkipSelf = makeParamDecorator('SkipSelf', []);
      var Host = makeParamDecorator('Host', []);
      var OpaqueToken = function () {
        function OpaqueToken(_desc) {
          this._desc = _desc;
        }
        OpaqueToken.prototype.toString = function () {
          return "Token " + this._desc;
        };
        OpaqueToken.decorators = [{ type: Injectable }];
        OpaqueToken.ctorParameters = [null];
        return OpaqueToken;
      }();
      var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
      var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
      var Query = function () {
        function Query() {}
        return Query;
      }();
      var ContentChildren = makePropDecorator('ContentChildren', [['selector', undefined], {
        first: false,
        isViewQuery: false,
        descendants: false,
        read: undefined
      }], Query);
      var ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {
        first: true,
        isViewQuery: false,
        descendants: true,
        read: undefined
      }], Query);
      var ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {
        first: false,
        isViewQuery: true,
        descendants: true,
        read: undefined
      }], Query);
      var ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {
        first: true,
        isViewQuery: true,
        descendants: true,
        read: undefined
      }], Query);
      exports.ChangeDetectionStrategy;
      (function (ChangeDetectionStrategy) {
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
      var ChangeDetectorStatus;
      (function (ChangeDetectorStatus) {
        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
      })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
      function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
        return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
      }
      var Directive = makeDecorator('Directive', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        providers: undefined,
        exportAs: undefined,
        queries: undefined
      });
      var Component = makeDecorator('Component', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        exportAs: undefined,
        moduleId: undefined,
        providers: undefined,
        viewProviders: undefined,
        changeDetection: exports.ChangeDetectionStrategy.Default,
        queries: undefined,
        templateUrl: undefined,
        template: undefined,
        styleUrls: undefined,
        styles: undefined,
        animations: undefined,
        encapsulation: undefined,
        interpolation: undefined,
        entryComponents: undefined
      }, Directive);
      var Pipe = makeDecorator('Pipe', {
        name: undefined,
        pure: true
      });
      var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
      var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
      var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
      var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
      var LifecycleHooks;
      (function (LifecycleHooks) {
        LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
        LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
        LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
        LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
        LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
        LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
        LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
        LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
      })(LifecycleHooks || (LifecycleHooks = {}));
      var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
      var OnChanges = function () {
        function OnChanges() {}
        return OnChanges;
      }();
      var OnInit = function () {
        function OnInit() {}
        return OnInit;
      }();
      var DoCheck = function () {
        function DoCheck() {}
        return DoCheck;
      }();
      var OnDestroy = function () {
        function OnDestroy() {}
        return OnDestroy;
      }();
      var AfterContentInit = function () {
        function AfterContentInit() {}
        return AfterContentInit;
      }();
      var AfterContentChecked = function () {
        function AfterContentChecked() {}
        return AfterContentChecked;
      }();
      var AfterViewInit = function () {
        function AfterViewInit() {}
        return AfterViewInit;
      }();
      var AfterViewChecked = function () {
        function AfterViewChecked() {}
        return AfterViewChecked;
      }();
      var CUSTOM_ELEMENTS_SCHEMA = { name: 'custom-elements' };
      var NO_ERRORS_SCHEMA = { name: 'no-errors-schema' };
      var NgModule = makeDecorator('NgModule', {
        providers: undefined,
        declarations: undefined,
        imports: undefined,
        exports: undefined,
        entryComponents: undefined,
        bootstrap: undefined,
        schemas: undefined,
        id: undefined
      });
      exports.ViewEncapsulation;
      (function (ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
        ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
      var ViewMetadata = function () {
        function ViewMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              templateUrl = _b.templateUrl,
              template = _b.template,
              encapsulation = _b.encapsulation,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              animations = _b.animations,
              interpolation = _b.interpolation;
          this.templateUrl = templateUrl;
          this.template = template;
          this.styleUrls = styleUrls;
          this.styles = styles;
          this.encapsulation = encapsulation;
          this.animations = animations;
          this.interpolation = interpolation;
        }
        return ViewMetadata;
      }();
      function forwardRef(forwardRefFn) {
        forwardRefFn.__forward_ref__ = forwardRef;
        forwardRefFn.toString = function () {
          return stringify(this());
        };
        return forwardRefFn;
      }
      function resolveForwardRef(type) {
        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
          return type();
        } else {
          return type;
        }
      }
      var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function unimplemented() {
        throw new Error('unimplemented');
      }
      var BaseError = function (_super) {
        __extends(BaseError, _super);
        function BaseError(message) {
          var nativeError = _super.call(this, message);
          this._nativeError = nativeError;
        }
        Object.defineProperty(BaseError.prototype, "message", {
          get: function () {
            return this._nativeError.message;
          },
          set: function (message) {
            this._nativeError.message = message;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "name", {
          get: function () {
            return this._nativeError.name;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "stack", {
          get: function () {
            return this._nativeError.stack;
          },
          set: function (value) {
            this._nativeError.stack = value;
          },
          enumerable: true,
          configurable: true
        });
        BaseError.prototype.toString = function () {
          return this._nativeError.toString();
        };
        return BaseError;
      }(Error);
      var WrappedError = function (_super) {
        __extends(WrappedError, _super);
        function WrappedError(message, error) {
          _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
          this.originalError = error;
        }
        Object.defineProperty(WrappedError.prototype, "stack", {
          get: function () {
            return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
          },
          enumerable: true,
          configurable: true
        });
        return WrappedError;
      }(BaseError);
      var _THROW_IF_NOT_FOUND = new Object();
      var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
      var _NullInjector = function () {
        function _NullInjector() {}
        _NullInjector.prototype.get = function (token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = _THROW_IF_NOT_FOUND;
          }
          if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("No provider for " + stringify(token) + "!");
          }
          return notFoundValue;
        };
        return _NullInjector;
      }();
      var Injector = function () {
        function Injector() {}
        Injector.prototype.get = function (token, notFoundValue) {
          return unimplemented();
        };
        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
        Injector.NULL = new _NullInjector();
        return Injector;
      }();
      var __extends$1 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      function findFirstClosedCycle(keys) {
        var res = [];
        for (var i = 0; i < keys.length; ++i) {
          if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
          }
          res.push(keys[i]);
        }
        return res;
      }
      function constructResolvingPath(keys) {
        if (keys.length > 1) {
          var reversed = findFirstClosedCycle(keys.slice().reverse());
          var tokenStrs = reversed.map(function (k) {
            return stringify(k.token);
          });
          return ' (' + tokenStrs.join(' -> ') + ')';
        }
        return '';
      }
      var AbstractProviderError = function (_super) {
        __extends$1(AbstractProviderError, _super);
        function AbstractProviderError(injector, key, constructResolvingMessage) {
          _super.call(this, 'DI Error');
          this.keys = [key];
          this.injectors = [injector];
          this.constructResolvingMessage = constructResolvingMessage;
          this.message = this.constructResolvingMessage(this.keys);
        }
        AbstractProviderError.prototype.addKey = function (injector, key) {
          this.injectors.push(injector);
          this.keys.push(key);
          this.message = this.constructResolvingMessage(this.keys);
        };
        return AbstractProviderError;
      }(BaseError);
      var NoProviderError = function (_super) {
        __extends$1(NoProviderError, _super);
        function NoProviderError(injector, key) {
          _super.call(this, injector, key, function (keys) {
            var first = stringify(keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
          });
        }
        return NoProviderError;
      }(AbstractProviderError);
      var CyclicDependencyError = function (_super) {
        __extends$1(CyclicDependencyError, _super);
        function CyclicDependencyError(injector, key) {
          _super.call(this, injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
          });
        }
        return CyclicDependencyError;
      }(AbstractProviderError);
      var InstantiationError = function (_super) {
        __extends$1(InstantiationError, _super);
        function InstantiationError(injector, originalException, originalStack, key) {
          _super.call(this, 'DI Error', originalException);
          this.keys = [key];
          this.injectors = [injector];
        }
        InstantiationError.prototype.addKey = function (injector, key) {
          this.injectors.push(injector);
          this.keys.push(key);
        };
        Object.defineProperty(InstantiationError.prototype, "message", {
          get: function () {
            var first = stringify(this.keys[0].token);
            return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(InstantiationError.prototype, "causeKey", {
          get: function () {
            return this.keys[0];
          },
          enumerable: true,
          configurable: true
        });
        return InstantiationError;
      }(WrappedError);
      var InvalidProviderError = function (_super) {
        __extends$1(InvalidProviderError, _super);
        function InvalidProviderError(provider) {
          _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
        }
        return InvalidProviderError;
      }(BaseError);
      var NoAnnotationError = function (_super) {
        __extends$1(NoAnnotationError, _super);
        function NoAnnotationError(typeOrFunc, params) {
          _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
        }
        NoAnnotationError._genMessage = function (typeOrFunc, params) {
          var signature = [];
          for (var i = 0, ii = params.length; i < ii; i++) {
            var parameter = params[i];
            if (!parameter || parameter.length == 0) {
              signature.push('?');
            } else {
              signature.push(parameter.map(stringify).join(' '));
            }
          }
          return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.';
        };
        return NoAnnotationError;
      }(BaseError);
      var OutOfBoundsError = function (_super) {
        __extends$1(OutOfBoundsError, _super);
        function OutOfBoundsError(index) {
          _super.call(this, "Index " + index + " is out-of-bounds.");
        }
        return OutOfBoundsError;
      }(BaseError);
      var MixingMultiProvidersWithRegularProvidersError = function (_super) {
        __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
          _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
        }
        return MixingMultiProvidersWithRegularProvidersError;
      }(BaseError);
      var ReflectiveKey = function () {
        function ReflectiveKey(token, id) {
          this.token = token;
          this.id = id;
          if (!token) {
            throw new Error('Token must be defined!');
          }
        }
        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
          get: function () {
            return stringify(this.token);
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveKey.get = function (token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
        };
        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
          get: function () {
            return _globalKeyRegistry.numberOfKeys;
          },
          enumerable: true,
          configurable: true
        });
        return ReflectiveKey;
      }();
      var KeyRegistry = function () {
        function KeyRegistry() {
          this._allKeys = new Map();
        }
        KeyRegistry.prototype.get = function (token) {
          if (token instanceof ReflectiveKey) return token;
          if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
          }
          var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          this._allKeys.set(token, newKey);
          return newKey;
        };
        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
          get: function () {
            return this._allKeys.size;
          },
          enumerable: true,
          configurable: true
        });
        return KeyRegistry;
      }();
      var _globalKeyRegistry = new KeyRegistry();
      var Type = Function;
      var ReflectionCapabilities = function () {
        function ReflectionCapabilities(reflect) {
          this._reflect = reflect || global$1.Reflect;
        }
        ReflectionCapabilities.prototype.isReflectionEnabled = function () {
          return true;
        };
        ReflectionCapabilities.prototype.factory = function (t) {
          return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i - 0] = arguments[_i];
            }
            return new (t.bind.apply(t, [void 0].concat(args)))();
          };
        };
        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
          var result;
          if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
          } else {
            result = new Array(paramTypes.length);
          }
          for (var i = 0; i < result.length; i++) {
            if (typeof paramTypes === 'undefined') {
              result[i] = [];
            } else if (paramTypes[i] != Object) {
              result[i] = [paramTypes[i]];
            } else {
              result[i] = [];
            }
            if (paramAnnotations && isPresent(paramAnnotations[i])) {
              result[i] = result[i].concat(paramAnnotations[i]);
            }
          }
          return result;
        };
        ReflectionCapabilities.prototype.parameters = function (type) {
          if (type.parameters) {
            return type.parameters;
          }
          var tsickleCtorParams = type.ctorParameters;
          if (tsickleCtorParams) {
            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            var paramTypes = ctorParameters.map(function (ctorParam) {
              return ctorParam && ctorParam.type;
            });
            var paramAnnotations = ctorParameters.map(function (ctorParam) {
              return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata('parameters', type);
            var paramTypes = this._reflect.getMetadata('design:paramtypes', type);
            if (paramTypes || paramAnnotations) {
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
          }
          return new Array(type.length).fill(undefined);
        };
        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
          if (typeOrFunc.annotations) {
            var annotations = typeOrFunc.annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
              annotations = annotations.annotations;
            }
            return annotations;
          }
          if (typeOrFunc.decorators) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          }
          if (this._reflect && this._reflect.getMetadata) {
            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
            if (annotations) return annotations;
          }
          return [];
        };
        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
          if (typeOrFunc.propMetadata) {
            var propMetadata = typeOrFunc.propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
              propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
          }
          if (typeOrFunc.propDecorators) {
            var propDecorators_1 = typeOrFunc.propDecorators;
            var propMetadata_1 = {};
            Object.keys(propDecorators_1).forEach(function (prop) {
              propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
          }
          if (this._reflect && this._reflect.getMetadata) {
            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
            if (propMetadata) return propMetadata;
          }
          return {};
        };
        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
        };
        ReflectionCapabilities.prototype.getter = function (name) {
          return new Function('o', 'return o.' + name + ';');
        };
        ReflectionCapabilities.prototype.setter = function (name) {
          return new Function('o', 'v', 'return o.' + name + ' = v;');
        };
        ReflectionCapabilities.prototype.method = function (name) {
          var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
          return new Function('o', 'args', functionBody);
        };
        ReflectionCapabilities.prototype.importUri = function (type) {
          if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
          }
          return "./" + stringify(type);
        };
        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
          return runtime;
        };
        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
          return enumIdentifier[name];
        };
        return ReflectionCapabilities;
      }();
      function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
          return [];
        }
        return decoratorInvocations.map(function (decoratorInvocation) {
          var decoratorType = decoratorInvocation.type;
          var annotationCls = decoratorType.annotationCls;
          var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
          return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
        });
      }
      var ReflectorReader = function () {
        function ReflectorReader() {}
        return ReflectorReader;
      }();
      var __extends$2 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var Reflector = function (_super) {
        __extends$2(Reflector, _super);
        function Reflector(reflectionCapabilities) {
          _super.call(this);
          this.reflectionCapabilities = reflectionCapabilities;
        }
        Reflector.prototype.updateCapabilities = function (caps) {
          this.reflectionCapabilities = caps;
        };
        Reflector.prototype.factory = function (type) {
          return this.reflectionCapabilities.factory(type);
        };
        Reflector.prototype.parameters = function (typeOrFunc) {
          return this.reflectionCapabilities.parameters(typeOrFunc);
        };
        Reflector.prototype.annotations = function (typeOrFunc) {
          return this.reflectionCapabilities.annotations(typeOrFunc);
        };
        Reflector.prototype.propMetadata = function (typeOrFunc) {
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
        };
        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
          return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        };
        Reflector.prototype.getter = function (name) {
          return this.reflectionCapabilities.getter(name);
        };
        Reflector.prototype.setter = function (name) {
          return this.reflectionCapabilities.setter(name);
        };
        Reflector.prototype.method = function (name) {
          return this.reflectionCapabilities.method(name);
        };
        Reflector.prototype.importUri = function (type) {
          return this.reflectionCapabilities.importUri(type);
        };
        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
          return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
        };
        Reflector.prototype.resolveEnum = function (identifier, name) {
          return this.reflectionCapabilities.resolveEnum(identifier, name);
        };
        return Reflector;
      }(ReflectorReader);
      var reflector = new Reflector(new ReflectionCapabilities());
      var ReflectiveDependency = function () {
        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
          this.key = key;
          this.optional = optional;
          this.lowerBoundVisibility = lowerBoundVisibility;
          this.upperBoundVisibility = upperBoundVisibility;
          this.properties = properties;
        }
        ReflectiveDependency.fromKey = function (key) {
          return new ReflectiveDependency(key, false, null, null, []);
        };
        return ReflectiveDependency;
      }();
      var _EMPTY_LIST = [];
      var ResolvedReflectiveProvider_ = function () {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
          this.key = key;
          this.resolvedFactories = resolvedFactories;
          this.multiProvider = multiProvider;
        }
        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
          get: function () {
            return this.resolvedFactories[0];
          },
          enumerable: true,
          configurable: true
        });
        return ResolvedReflectiveProvider_;
      }();
      var ResolvedReflectiveFactory = function () {
        function ResolvedReflectiveFactory(factory, dependencies) {
          this.factory = factory;
          this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
      }();
      function resolveReflectiveFactory(provider) {
        var factoryFn;
        var resolvedDeps;
        if (provider.useClass) {
          var useClass = resolveForwardRef(provider.useClass);
          factoryFn = reflector.factory(useClass);
          resolvedDeps = _dependenciesFor(useClass);
        } else if (provider.useExisting) {
          factoryFn = function (aliasInstance) {
            return aliasInstance;
          };
          resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
        } else if (provider.useFactory) {
          factoryFn = provider.useFactory;
          resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
        } else {
          factoryFn = function () {
            return provider.useValue;
          };
          resolvedDeps = _EMPTY_LIST;
        }
        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
      }
      function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
      }
      function resolveReflectiveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);
        var resolved = normalized.map(resolveReflectiveProvider);
        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
        return Array.from(resolvedProviderMap.values());
      }
      function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
          var provider = providers[i];
          var existing = normalizedProvidersMap.get(provider.key.id);
          if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
              throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
              for (var j = 0; j < provider.resolvedFactories.length; j++) {
                existing.resolvedFactories.push(provider.resolvedFactories[j]);
              }
            } else {
              normalizedProvidersMap.set(provider.key.id, provider);
            }
          } else {
            var resolvedProvider = void 0;
            if (provider.multiProvider) {
              resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            } else {
              resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
          }
        }
        return normalizedProvidersMap;
      }
      function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
          if (b instanceof Type) {
            res.push({
              provide: b,
              useClass: b
            });
          } else if (b && typeof b == 'object' && b.provide !== undefined) {
            res.push(b);
          } else if (b instanceof Array) {
            _normalizeProviders(b, res);
          } else {
            throw new InvalidProviderError(b);
          }
        });
        return res;
      }
      function constructDependencies(typeOrFunc, dependencies) {
        if (!dependencies) {
          return _dependenciesFor(typeOrFunc);
        } else {
          var params_1 = dependencies.map(function (t) {
            return [t];
          });
          return dependencies.map(function (t) {
            return _extractToken(typeOrFunc, t, params_1);
          });
        }
      }
      function _dependenciesFor(typeOrFunc) {
        var params = reflector.parameters(typeOrFunc);
        if (!params) return [];
        if (params.some(function (p) {
          return p == null;
        })) {
          throw new NoAnnotationError(typeOrFunc, params);
        }
        return params.map(function (p) {
          return _extractToken(typeOrFunc, p, params);
        });
      }
      function _extractToken(typeOrFunc, metadata, params) {
        var depProps = [];
        var token = null;
        var optional = false;
        if (!Array.isArray(metadata)) {
          if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null, null, depProps);
          } else {
            return _createDependency(metadata, optional, null, null, depProps);
          }
        }
        var lowerBoundVisibility = null;
        var upperBoundVisibility = null;
        for (var i = 0; i < metadata.length; ++i) {
          var paramMetadata = metadata[i];
          if (paramMetadata instanceof Type) {
            token = paramMetadata;
          } else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
          } else if (paramMetadata instanceof Optional) {
            optional = true;
          } else if (paramMetadata instanceof Self) {
            upperBoundVisibility = paramMetadata;
          } else if (paramMetadata instanceof Host) {
            upperBoundVisibility = paramMetadata;
          } else if (paramMetadata instanceof SkipSelf) {
            lowerBoundVisibility = paramMetadata;
          }
        }
        token = resolveForwardRef(token);
        if (token != null) {
          return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
        } else {
          throw new NoAnnotationError(typeOrFunc, params);
        }
      }
      function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
      }
      var _MAX_CONSTRUCTION_COUNTER = 10;
      var UNDEFINED = new Object();
      var ReflectiveProtoInjectorInlineStrategy = function () {
        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
          this.provider0 = null;
          this.provider1 = null;
          this.provider2 = null;
          this.provider3 = null;
          this.provider4 = null;
          this.provider5 = null;
          this.provider6 = null;
          this.provider7 = null;
          this.provider8 = null;
          this.provider9 = null;
          this.keyId0 = null;
          this.keyId1 = null;
          this.keyId2 = null;
          this.keyId3 = null;
          this.keyId4 = null;
          this.keyId5 = null;
          this.keyId6 = null;
          this.keyId7 = null;
          this.keyId8 = null;
          this.keyId9 = null;
          var length = providers.length;
          if (length > 0) {
            this.provider0 = providers[0];
            this.keyId0 = providers[0].key.id;
          }
          if (length > 1) {
            this.provider1 = providers[1];
            this.keyId1 = providers[1].key.id;
          }
          if (length > 2) {
            this.provider2 = providers[2];
            this.keyId2 = providers[2].key.id;
          }
          if (length > 3) {
            this.provider3 = providers[3];
            this.keyId3 = providers[3].key.id;
          }
          if (length > 4) {
            this.provider4 = providers[4];
            this.keyId4 = providers[4].key.id;
          }
          if (length > 5) {
            this.provider5 = providers[5];
            this.keyId5 = providers[5].key.id;
          }
          if (length > 6) {
            this.provider6 = providers[6];
            this.keyId6 = providers[6].key.id;
          }
          if (length > 7) {
            this.provider7 = providers[7];
            this.keyId7 = providers[7].key.id;
          }
          if (length > 8) {
            this.provider8 = providers[8];
            this.keyId8 = providers[8].key.id;
          }
          if (length > 9) {
            this.provider9 = providers[9];
            this.keyId9 = providers[9].key.id;
          }
        }
        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
          if (index == 0) return this.provider0;
          if (index == 1) return this.provider1;
          if (index == 2) return this.provider2;
          if (index == 3) return this.provider3;
          if (index == 4) return this.provider4;
          if (index == 5) return this.provider5;
          if (index == 6) return this.provider6;
          if (index == 7) return this.provider7;
          if (index == 8) return this.provider8;
          if (index == 9) return this.provider9;
          throw new OutOfBoundsError(index);
        };
        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
          return new ReflectiveInjectorInlineStrategy(injector, this);
        };
        return ReflectiveProtoInjectorInlineStrategy;
      }();
      var ReflectiveProtoInjectorDynamicStrategy = function () {
        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
          this.providers = providers;
          var len = providers.length;
          this.keyIds = new Array(len);
          for (var i = 0; i < len; i++) {
            this.keyIds[i] = providers[i].key.id;
          }
        }
        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
          if (index < 0 || index >= this.providers.length) {
            throw new OutOfBoundsError(index);
          }
          return this.providers[index];
        };
        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
          return new ReflectiveInjectorDynamicStrategy(this, ei);
        };
        return ReflectiveProtoInjectorDynamicStrategy;
      }();
      var ReflectiveProtoInjector = function () {
        function ReflectiveProtoInjector(providers) {
          this.numberOfProviders = providers.length;
          this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
        }
        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
          return new ReflectiveProtoInjector(providers);
        };
        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
          return this._strategy.getProviderAtIndex(index);
        };
        return ReflectiveProtoInjector;
      }();
      var ReflectiveInjectorInlineStrategy = function () {
        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
          this.injector = injector;
          this.protoStrategy = protoStrategy;
          this.obj0 = UNDEFINED;
          this.obj1 = UNDEFINED;
          this.obj2 = UNDEFINED;
          this.obj3 = UNDEFINED;
          this.obj4 = UNDEFINED;
          this.obj5 = UNDEFINED;
          this.obj6 = UNDEFINED;
          this.obj7 = UNDEFINED;
          this.obj8 = UNDEFINED;
          this.obj9 = UNDEFINED;
        }
        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () {
          this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
          return this.injector._new(provider);
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
          var p = this.protoStrategy;
          var inj = this.injector;
          if (p.keyId0 === keyId) {
            if (this.obj0 === UNDEFINED) {
              this.obj0 = inj._new(p.provider0);
            }
            return this.obj0;
          }
          if (p.keyId1 === keyId) {
            if (this.obj1 === UNDEFINED) {
              this.obj1 = inj._new(p.provider1);
            }
            return this.obj1;
          }
          if (p.keyId2 === keyId) {
            if (this.obj2 === UNDEFINED) {
              this.obj2 = inj._new(p.provider2);
            }
            return this.obj2;
          }
          if (p.keyId3 === keyId) {
            if (this.obj3 === UNDEFINED) {
              this.obj3 = inj._new(p.provider3);
            }
            return this.obj3;
          }
          if (p.keyId4 === keyId) {
            if (this.obj4 === UNDEFINED) {
              this.obj4 = inj._new(p.provider4);
            }
            return this.obj4;
          }
          if (p.keyId5 === keyId) {
            if (this.obj5 === UNDEFINED) {
              this.obj5 = inj._new(p.provider5);
            }
            return this.obj5;
          }
          if (p.keyId6 === keyId) {
            if (this.obj6 === UNDEFINED) {
              this.obj6 = inj._new(p.provider6);
            }
            return this.obj6;
          }
          if (p.keyId7 === keyId) {
            if (this.obj7 === UNDEFINED) {
              this.obj7 = inj._new(p.provider7);
            }
            return this.obj7;
          }
          if (p.keyId8 === keyId) {
            if (this.obj8 === UNDEFINED) {
              this.obj8 = inj._new(p.provider8);
            }
            return this.obj8;
          }
          if (p.keyId9 === keyId) {
            if (this.obj9 === UNDEFINED) {
              this.obj9 = inj._new(p.provider9);
            }
            return this.obj9;
          }
          return UNDEFINED;
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
          if (index == 0) return this.obj0;
          if (index == 1) return this.obj1;
          if (index == 2) return this.obj2;
          if (index == 3) return this.obj3;
          if (index == 4) return this.obj4;
          if (index == 5) return this.obj5;
          if (index == 6) return this.obj6;
          if (index == 7) return this.obj7;
          if (index == 8) return this.obj8;
          if (index == 9) return this.obj9;
          throw new OutOfBoundsError(index);
        };
        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () {
          return _MAX_CONSTRUCTION_COUNTER;
        };
        return ReflectiveInjectorInlineStrategy;
      }();
      var ReflectiveInjectorDynamicStrategy = function () {
        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
          this.protoStrategy = protoStrategy;
          this.injector = injector;
          this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
        }
        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () {
          this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
          return this.injector._new(provider);
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
          var p = this.protoStrategy;
          for (var i = 0; i < p.keyIds.length; i++) {
            if (p.keyIds[i] === keyId) {
              if (this.objs[i] === UNDEFINED) {
                this.objs[i] = this.injector._new(p.providers[i]);
              }
              return this.objs[i];
            }
          }
          return UNDEFINED;
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
          if (index < 0 || index >= this.objs.length) {
            throw new OutOfBoundsError(index);
          }
          return this.objs[index];
        };
        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () {
          return this.objs.length;
        };
        return ReflectiveInjectorDynamicStrategy;
      }();
      var ReflectiveInjector = function () {
        function ReflectiveInjector() {}
        ReflectiveInjector.resolve = function (providers) {
          return resolveReflectiveProviders(providers);
        };
        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
          if (parent === void 0) {
            parent = null;
          }
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        };
        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
          if (parent === void 0) {
            parent = null;
          }
          return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
        };
        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.instantiateResolved = function (provider) {
          return unimplemented();
        };
        return ReflectiveInjector;
      }();
      var ReflectiveInjector_ = function () {
        function ReflectiveInjector_(_proto, _parent) {
          if (_parent === void 0) {
            _parent = null;
          }
          this._constructionCounter = 0;
          this._proto = _proto;
          this._parent = _parent;
          this._strategy = _proto._strategy.createInjectorStrategy(this);
        }
        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
        };
        ReflectiveInjector_.prototype.getAt = function (index) {
          return this._strategy.getObjAtIndex(index);
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
          get: function () {
            return this._parent;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
          get: function () {
            return this._strategy;
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
        };
        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
          var proto = new ReflectiveProtoInjector(providers);
          var inj = new ReflectiveInjector_(proto);
          inj._parent = this;
          return inj;
        };
        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        };
        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
          return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._new = function (provider) {
          if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
            throw new CyclicDependencyError(this, provider.key);
          }
          return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
          if (provider.multiProvider) {
            var res = new Array(provider.resolvedFactories.length);
            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
              res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
          } else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
          }
        };
        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
          var factory = ResolvedReflectiveFactory.factory;
          var deps = ResolvedReflectiveFactory.dependencies;
          var length = deps.length;
          var d0;
          var d1;
          var d2;
          var d3;
          var d4;
          var d5;
          var d6;
          var d7;
          var d8;
          var d9;
          var d10;
          var d11;
          var d12;
          var d13;
          var d14;
          var d15;
          var d16;
          var d17;
          var d18;
          var d19;
          try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
            d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
            d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
            d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
            d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
            d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
            d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
            d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
            d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
            d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
            d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
            d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
            d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
            d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
            d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
            d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
            d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
            d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
            d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
            d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
          } catch (e) {
            if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
              e.addKey(this, provider.key);
            }
            throw e;
          }
          var obj;
          try {
            switch (length) {
              case 0:
                obj = factory();
                break;
              case 1:
                obj = factory(d0);
                break;
              case 2:
                obj = factory(d0, d1);
                break;
              case 3:
                obj = factory(d0, d1, d2);
                break;
              case 4:
                obj = factory(d0, d1, d2, d3);
                break;
              case 5:
                obj = factory(d0, d1, d2, d3, d4);
                break;
              case 6:
                obj = factory(d0, d1, d2, d3, d4, d5);
                break;
              case 7:
                obj = factory(d0, d1, d2, d3, d4, d5, d6);
                break;
              case 8:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                break;
              case 9:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                break;
              case 10:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                break;
              case 11:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                break;
              case 12:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                break;
              case 13:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                break;
              case 14:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                break;
              case 15:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                break;
              case 16:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                break;
              case 17:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                break;
              case 18:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                break;
              case 19:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                break;
              case 20:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                break;
              default:
                throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
          } catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
          }
          return obj;
        };
        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
          return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        };
        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
          if (key === INJECTOR_KEY) {
            return this;
          }
          if (upperBoundVisibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
          } else {
            return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
          }
        };
        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
          } else {
            throw new NoProviderError(this, key);
          }
        };
        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
          var obj = this._strategy.getObjByKeyId(key.id);
          return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
        };
        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
          var inj;
          if (lowerBoundVisibility instanceof SkipSelf) {
            inj = this._parent;
          } else {
            inj = this;
          }
          while (inj instanceof ReflectiveInjector_) {
            var inj_ = inj;
            var obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED) return obj;
            inj = inj_._parent;
          }
          if (inj !== null) {
            return inj.get(key.token, notFoundValue);
          } else {
            return this._throwOrNull(key, notFoundValue);
          }
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
          get: function () {
            var providers = _mapProviders(this, function (b) {
              return ' "' + b.key.displayName + '" ';
            }).join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector_.prototype.toString = function () {
          return this.displayName;
        };
        return ReflectiveInjector_;
      }();
      var INJECTOR_KEY = ReflectiveKey.get(Injector);
      function _mapProviders(injector, fn) {
        var res = new Array(injector._proto.numberOfProviders);
        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
          res[i] = fn(injector._proto.getProviderAtIndex(i));
        }
        return res;
      }
      var ErrorHandler = function () {
        function ErrorHandler(rethrowError) {
          if (rethrowError === void 0) {
            rethrowError = true;
          }
          this._console = console;
          this.rethrowError = rethrowError;
        }
        ErrorHandler.prototype.handleError = function (error) {
          var originalError = this._findOriginalError(error);
          var originalStack = this._findOriginalStack(error);
          var context = this._findContext(error);
          this._console.error("EXCEPTION: " + this._extractMessage(error));
          if (originalError) {
            this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
          }
          if (originalStack) {
            this._console.error('ORIGINAL STACKTRACE:');
            this._console.error(originalStack);
          }
          if (context) {
            this._console.error('ERROR CONTEXT:');
            this._console.error(context);
          }
          if (this.rethrowError) throw error;
        };
        ErrorHandler.prototype._extractMessage = function (error) {
          return error instanceof Error ? error.message : error.toString();
        };
        ErrorHandler.prototype._findContext = function (error) {
          if (error) {
            return error.context ? error.context : this._findContext(error.originalError);
          }
          return null;
        };
        ErrorHandler.prototype._findOriginalError = function (error) {
          var e = error.originalError;
          while (e && e.originalError) {
            e = e.originalError;
          }
          return e;
        };
        ErrorHandler.prototype._findOriginalStack = function (error) {
          if (!(error instanceof Error)) return null;
          var e = error;
          var stack = e.stack;
          while (e instanceof Error && e.originalError) {
            e = e.originalError;
            if (e instanceof Error && e.stack) {
              stack = e.stack;
            }
          }
          return stack;
        };
        return ErrorHandler;
      }();
      var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function (m1, m2) {
          var m = {};
          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }();
      var ListWrapper = function () {
        function ListWrapper() {}
        ListWrapper.removeAll = function (list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            if (index > -1) {
              list.splice(index, 1);
            }
          }
        };
        ListWrapper.remove = function (list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function (a, b) {
          if (a.length != b.length) return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return false;
          }
          return true;
        };
        ListWrapper.flatten = function (list) {
          return list.reduce(function (flat, item) {
            var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return flat.concat(flatItem);
          }, []);
        };
        return ListWrapper;
      }();
      function isListLikeIterable(obj) {
        if (!isJsObject(obj)) return false;
        return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj;
      }
      function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[getSymbolIterator()]();
        var iterator2 = b[getSymbolIterator()]();
        while (true) {
          var item1 = iterator1.next();
          var item2 = iterator2.next();
          if (item1.done && item2.done) return true;
          if (item1.done || item2.done) return false;
          if (!comparator(item1.value, item2.value)) return false;
        }
      }
      function iterateListLike(obj, fn) {
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
          }
        } else {
          var iterator = obj[getSymbolIterator()]();
          var item = void 0;
          while (!(item = iterator.next()).done) {
            fn(item.value);
          }
        }
      }
      function isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
      }
      var APP_INITIALIZER = new OpaqueToken('Application Initializer');
      var ApplicationInitStatus = function () {
        function ApplicationInitStatus(appInits) {
          var _this = this;
          this._done = false;
          var asyncInitPromises = [];
          if (appInits) {
            for (var i = 0; i < appInits.length; i++) {
              var initResult = appInits[i]();
              if (isPromise(initResult)) {
                asyncInitPromises.push(initResult);
              }
            }
          }
          this._donePromise = Promise.all(asyncInitPromises).then(function () {
            _this._done = true;
          });
          if (asyncInitPromises.length === 0) {
            this._done = true;
          }
        }
        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
          get: function () {
            return this._done;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
          get: function () {
            return this._donePromise;
          },
          enumerable: true,
          configurable: true
        });
        ApplicationInitStatus.decorators = [{ type: Injectable }];
        ApplicationInitStatus.ctorParameters = [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [APP_INITIALIZER]
          }, { type: Optional }]
        }];
        return ApplicationInitStatus;
      }();
      var APP_ID = new OpaqueToken('AppId');
      function _appIdRandomProviderFactory() {
        return "" + _randomChar() + _randomChar() + _randomChar();
      }
      var APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      };
      function _randomChar() {
        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
      }
      var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
      var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
      var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
      var Console = function () {
        function Console() {}
        Console.prototype.log = function (message) {
          print(message);
        };
        Console.prototype.warn = function (message) {
          warn(message);
        };
        Console.decorators = [{ type: Injectable }];
        Console.ctorParameters = [];
        return Console;
      }();
      var __extends$4 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ComponentStillLoadingError = function (_super) {
        __extends$4(ComponentStillLoadingError, _super);
        function ComponentStillLoadingError(compType) {
          _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
          this.compType = compType;
        }
        return ComponentStillLoadingError;
      }(BaseError);
      var ModuleWithComponentFactories = function () {
        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory;
          this.componentFactories = componentFactories;
        }
        return ModuleWithComponentFactories;
      }();
      function _throwError() {
        throw new Error("Runtime compiler is not loaded");
      }
      var Compiler = function () {
        function Compiler() {}
        Compiler.prototype.compileModuleSync = function (moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAsync = function (moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
          throw _throwError();
        };
        Compiler.prototype.clearCache = function () {};
        Compiler.prototype.clearCacheFor = function (type) {};
        return Compiler;
      }();
      var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
      var CompilerFactory = function () {
        function CompilerFactory() {}
        return CompilerFactory;
      }();
      var ElementRef = function () {
        function ElementRef(nativeElement) {
          this.nativeElement = nativeElement;
        }
        return ElementRef;
      }();
      var DefaultIterableDifferFactory = function () {
        function DefaultIterableDifferFactory() {}
        DefaultIterableDifferFactory.prototype.supports = function (obj) {
          return isListLikeIterable(obj);
        };
        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        };
        return DefaultIterableDifferFactory;
      }();
      var trackByIdentity = function (index, item) {
        return item;
      };
      var DefaultIterableDiffer = function () {
        function DefaultIterableDiffer(_trackByFn) {
          this._trackByFn = _trackByFn;
          this._length = null;
          this._collection = null;
          this._linkedRecords = null;
          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = this._trackByFn || trackByIdentity;
        }
        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
          get: function () {
            return this._collection;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
          get: function () {
            return this._length;
          },
          enumerable: true,
          configurable: true
        });
        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
          var record;
          for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
          var nextIt = this._itHead;
          var nextRemove = this._removalsHead;
          var addRemoveOffset = 0;
          var moveOffsets = null;
          while (nextIt || nextRemove) {
            var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var currentIndex = record.currentIndex;
            if (record === nextRemove) {
              addRemoveOffset--;
              nextRemove = nextRemove._nextRemoved;
            } else {
              nextIt = nextIt._next;
              if (record.previousIndex == null) {
                addRemoveOffset++;
              } else {
                if (!moveOffsets) moveOffsets = [];
                var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                var localCurrentIndex = currentIndex - addRemoveOffset;
                if (localMovePreviousIndex != localCurrentIndex) {
                  for (var i = 0; i < localMovePreviousIndex; i++) {
                    var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                    var index = offset + i;
                    if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                      moveOffsets[i] = offset + 1;
                    }
                  }
                  var previousIndex = record.previousIndex;
                  moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                }
              }
            }
            if (adjPreviousIndex !== currentIndex) {
              fn(record, adjPreviousIndex, currentIndex);
            }
          }
        };
        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
          var record;
          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
          var record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
          var record;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
          var record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
          var record;
          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.diff = function (collection) {
          if (isBlank(collection)) collection = [];
          if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + collection + "'");
          }
          if (this.check(collection)) {
            return this;
          } else {
            return null;
          }
        };
        DefaultIterableDiffer.prototype.onDestroy = function () {};
        DefaultIterableDiffer.prototype.check = function (collection) {
          var _this = this;
          this._reset();
          var record = this._itHead;
          var mayBeDirty = false;
          var index;
          var item;
          var itemTrackBy;
          if (Array.isArray(collection)) {
            var list = collection;
            this._length = collection.length;
            for (var index_1 = 0; index_1 < this._length; index_1++) {
              item = list[index_1];
              itemTrackBy = this._trackByFn(index_1, item);
              if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                record = this._mismatch(record, item, itemTrackBy, index_1);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                }
                if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
              }
              record = record._next;
            }
          } else {
            index = 0;
            iterateListLike(collection, function (item) {
              itemTrackBy = _this._trackByFn(index, item);
              if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                record = _this._mismatch(record, item, itemTrackBy, index);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                }
                if (!looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
              }
              record = record._next;
              index++;
            });
            this._length = index;
          }
          this._truncate(record);
          this._collection = collection;
          return this.isDirty;
        };
        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
          get: function () {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
          },
          enumerable: true,
          configurable: true
        });
        DefaultIterableDiffer.prototype._reset = function () {
          if (this.isDirty) {
            var record = void 0;
            var nextRecord = void 0;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
              record.previousIndex = record.currentIndex;
              nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
          }
        };
        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
          var previousRecord;
          if (record === null) {
            previousRecord = this._itTail;
          } else {
            previousRecord = record._prev;
            this._remove(record);
          }
          record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
          if (record !== null) {
            if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
          } else {
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (record !== null) {
              if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
              this._reinsertAfter(record, previousRecord, index);
            } else {
              record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
            }
          }
          return record;
        };
        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
          var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
          if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
          } else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
          }
          return record;
        };
        DefaultIterableDiffer.prototype._truncate = function (record) {
          while (record !== null) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
          }
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
          }
          if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
          }
          if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
          }
          if (this._itTail !== null) {
            this._itTail._next = null;
          }
          if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
          }
          if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
          }
        };
        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
          }
          var prev = record._prevRemoved;
          var next = record._nextRemoved;
          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }
          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        };
        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
          this._unlink(record);
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        };
        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);
          if (this._additionsTail === null) {
            this._additionsTail = this._additionsHead = record;
          } else {
            this._additionsTail = this._additionsTail._nextAdded = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
          var next = prevRecord === null ? this._itHead : prevRecord._next;
          record._next = next;
          record._prev = prevRecord;
          if (next === null) {
            this._itTail = record;
          } else {
            next._prev = record;
          }
          if (prevRecord === null) {
            this._itHead = record;
          } else {
            prevRecord._next = record;
          }
          if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
          }
          this._linkedRecords.put(record);
          record.currentIndex = index;
          return record;
        };
        DefaultIterableDiffer.prototype._remove = function (record) {
          return this._addToRemovals(this._unlink(record));
        };
        DefaultIterableDiffer.prototype._unlink = function (record) {
          if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
          }
          var prev = record._prev;
          var next = record._next;
          if (prev === null) {
            this._itHead = next;
          } else {
            prev._next = next;
          }
          if (next === null) {
            this._itTail = prev;
          } else {
            next._prev = prev;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
          if (record.previousIndex === toIndex) {
            return record;
          }
          if (this._movesTail === null) {
            this._movesTail = this._movesHead = record;
          } else {
            this._movesTail = this._movesTail._nextMoved = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
          if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
          }
          this._unlinkedRecords.put(record);
          record.currentIndex = null;
          record._nextRemoved = null;
          if (this._removalsTail === null) {
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
          } else {
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
          record.item = item;
          if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
          } else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype.toString = function () {
          var list = [];
          this.forEachItem(function (record) {
            return list.push(record);
          });
          var previous = [];
          this.forEachPreviousItem(function (record) {
            return previous.push(record);
          });
          var additions = [];
          this.forEachAddedItem(function (record) {
            return additions.push(record);
          });
          var moves = [];
          this.forEachMovedItem(function (record) {
            return moves.push(record);
          });
          var removals = [];
          this.forEachRemovedItem(function (record) {
            return removals.push(record);
          });
          var identityChanges = [];
          this.forEachIdentityChange(function (record) {
            return identityChanges.push(record);
          });
          return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
        };
        return DefaultIterableDiffer;
      }();
      var CollectionChangeRecord = function () {
        function CollectionChangeRecord(item, trackById) {
          this.item = item;
          this.trackById = trackById;
          this.currentIndex = null;
          this.previousIndex = null;
          this._nextPrevious = null;
          this._prev = null;
          this._next = null;
          this._prevDup = null;
          this._nextDup = null;
          this._prevRemoved = null;
          this._nextRemoved = null;
          this._nextAdded = null;
          this._nextMoved = null;
          this._nextIdentityChange = null;
        }
        CollectionChangeRecord.prototype.toString = function () {
          return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
        };
        return CollectionChangeRecord;
      }();
      var _DuplicateItemRecordList = function () {
        function _DuplicateItemRecordList() {
          this._head = null;
          this._tail = null;
        }
        _DuplicateItemRecordList.prototype.add = function (record) {
          if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
          } else {
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
          }
        };
        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
          var record;
          for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
              return record;
            }
          }
          return null;
        };
        _DuplicateItemRecordList.prototype.remove = function (record) {
          var prev = record._prevDup;
          var next = record._nextDup;
          if (prev === null) {
            this._head = next;
          } else {
            prev._nextDup = next;
          }
          if (next === null) {
            this._tail = prev;
          } else {
            next._prevDup = prev;
          }
          return this._head === null;
        };
        return _DuplicateItemRecordList;
      }();
      var _DuplicateMap = function () {
        function _DuplicateMap() {
          this.map = new Map();
        }
        _DuplicateMap.prototype.put = function (record) {
          var key = record.trackById;
          var duplicates = this.map.get(key);
          if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
          }
          duplicates.add(record);
        };
        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
          if (afterIndex === void 0) {
            afterIndex = null;
          }
          var key = trackById;
          var recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, afterIndex) : null;
        };
        _DuplicateMap.prototype.remove = function (record) {
          var key = record.trackById;
          var recordList = this.map.get(key);
          if (recordList.remove(record)) {
            this.map.delete(key);
          }
          return record;
        };
        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
          get: function () {
            return this.map.size === 0;
          },
          enumerable: true,
          configurable: true
        });
        _DuplicateMap.prototype.clear = function () {
          this.map.clear();
        };
        _DuplicateMap.prototype.toString = function () {
          return '_DuplicateMap(' + stringify(this.map) + ')';
        };
        return _DuplicateMap;
      }();
      function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var previousIndex = item.previousIndex;
        if (previousIndex === null) return previousIndex;
        var moveOffset = 0;
        if (moveOffsets && previousIndex < moveOffsets.length) {
          moveOffset = moveOffsets[previousIndex];
        }
        return previousIndex + addRemoveOffset + moveOffset;
      }
      var DefaultKeyValueDifferFactory = function () {
        function DefaultKeyValueDifferFactory() {}
        DefaultKeyValueDifferFactory.prototype.supports = function (obj) {
          return obj instanceof Map || isJsObject(obj);
        };
        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) {
          return new DefaultKeyValueDiffer();
        };
        return DefaultKeyValueDifferFactory;
      }();
      var DefaultKeyValueDiffer = function () {
        function DefaultKeyValueDiffer() {
          this._records = new Map();
          this._mapHead = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
        }
        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
          get: function () {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
          },
          enumerable: true,
          configurable: true
        });
        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
          var record;
          for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
          var record;
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
          var record;
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
          var record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
          var record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.diff = function (map) {
          if (!map) {
            map = new Map();
          } else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + map + "'");
          }
          return this.check(map) ? this : null;
        };
        DefaultKeyValueDiffer.prototype.onDestroy = function () {};
        DefaultKeyValueDiffer.prototype.check = function (map) {
          var _this = this;
          this._reset();
          var records = this._records;
          var oldSeqRecord = this._mapHead;
          var lastOldSeqRecord = null;
          var lastNewSeqRecord = null;
          var seqChanged = false;
          this._forEach(map, function (value, key) {
            var newSeqRecord;
            if (oldSeqRecord && key === oldSeqRecord.key) {
              newSeqRecord = oldSeqRecord;
              _this._maybeAddToChanges(newSeqRecord, value);
            } else {
              seqChanged = true;
              if (oldSeqRecord !== null) {
                _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                _this._addToRemovals(oldSeqRecord);
              }
              if (records.has(key)) {
                newSeqRecord = records.get(key);
                _this._maybeAddToChanges(newSeqRecord, value);
              } else {
                newSeqRecord = new KeyValueChangeRecord(key);
                records.set(key, newSeqRecord);
                newSeqRecord.currentValue = value;
                _this._addToAdditions(newSeqRecord);
              }
            }
            if (seqChanged) {
              if (_this._isInRemovals(newSeqRecord)) {
                _this._removeFromRemovals(newSeqRecord);
              }
              if (lastNewSeqRecord == null) {
                _this._mapHead = newSeqRecord;
              } else {
                lastNewSeqRecord._next = newSeqRecord;
              }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
          });
          this._truncate(lastOldSeqRecord, oldSeqRecord);
          return this.isDirty;
        };
        DefaultKeyValueDiffer.prototype._reset = function () {
          if (this.isDirty) {
            var record = void 0;
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
              record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
          }
        };
        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
          while (record !== null) {
            if (lastRecord === null) {
              this._mapHead = null;
            } else {
              lastRecord._next = null;
            }
            var nextRecord = record._next;
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
          }
          for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
          }
        };
        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
          if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
          }
        };
        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
          return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
        };
        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
          if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
          } else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
          var next = record._next;
          if (prev === null) {
            this._mapHead = next;
          } else {
            prev._next = next;
          }
          record._next = null;
        };
        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
          var prev = record._prevRemoved;
          var next = record._nextRemoved;
          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }
          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }
          record._prevRemoved = record._nextRemoved = null;
        };
        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
          if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
          } else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
          if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
          } else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype.toString = function () {
          var items = [];
          var previous = [];
          var changes = [];
          var additions = [];
          var removals = [];
          var record;
          for (record = this._mapHead; record !== null; record = record._next) {
            items.push(stringify(record));
          }
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(stringify(record));
          }
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(stringify(record));
          }
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(stringify(record));
          }
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(stringify(record));
          }
          return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
        };
        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
          if (obj instanceof Map) {
            obj.forEach(fn);
          } else {
            Object.keys(obj).forEach(function (k) {
              return fn(obj[k], k);
            });
          }
        };
        return DefaultKeyValueDiffer;
      }();
      var KeyValueChangeRecord = function () {
        function KeyValueChangeRecord(key) {
          this.key = key;
          this.previousValue = null;
          this.currentValue = null;
          this._nextPrevious = null;
          this._next = null;
          this._nextAdded = null;
          this._nextRemoved = null;
          this._prevRemoved = null;
          this._nextChanged = null;
        }
        KeyValueChangeRecord.prototype.toString = function () {
          return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']';
        };
        return KeyValueChangeRecord;
      }();
      var IterableDiffers = function () {
        function IterableDiffers(factories) {
          this.factories = factories;
        }
        IterableDiffers.create = function (factories, parent) {
          if (isPresent(parent)) {
            var copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
          } else {
            return new IterableDiffers(factories);
          }
        };
        IterableDiffers.extend = function (factories) {
          return {
            provide: IterableDiffers,
            useFactory: function (parent) {
              if (!parent) {
                throw new Error('Cannot extend IterableDiffers without a parent injector');
              }
              return IterableDiffers.create(factories, parent);
            },
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
          };
        };
        IterableDiffers.prototype.find = function (iterable) {
          var factory = this.factories.find(function (f) {
            return f.supports(iterable);
          });
          if (isPresent(factory)) {
            return factory;
          } else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
          }
        };
        return IterableDiffers;
      }();
      var KeyValueDiffers = function () {
        function KeyValueDiffers(factories) {
          this.factories = factories;
        }
        KeyValueDiffers.create = function (factories, parent) {
          if (isPresent(parent)) {
            var copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new KeyValueDiffers(factories);
          } else {
            return new KeyValueDiffers(factories);
          }
        };
        KeyValueDiffers.extend = function (factories) {
          return {
            provide: KeyValueDiffers,
            useFactory: function (parent) {
              if (!parent) {
                throw new Error('Cannot extend KeyValueDiffers without a parent injector');
              }
              return KeyValueDiffers.create(factories, parent);
            },
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
          };
        };
        KeyValueDiffers.prototype.find = function (kv) {
          var factory = this.factories.find(function (f) {
            return f.supports(kv);
          });
          if (isPresent(factory)) {
            return factory;
          } else {
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
          }
        };
        return KeyValueDiffers;
      }();
      var UNINITIALIZED = { toString: function () {
          return 'CD_INIT_VALUE';
        } };
      function devModeEqual(a, b) {
        if (isListLikeIterable(a) && isListLikeIterable(b)) {
          return areIterablesEqual(a, b, devModeEqual);
        } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
          return true;
        } else {
          return looseIdentical(a, b);
        }
      }
      var WrappedValue = function () {
        function WrappedValue(wrapped) {
          this.wrapped = wrapped;
        }
        WrappedValue.wrap = function (value) {
          return new WrappedValue(value);
        };
        return WrappedValue;
      }();
      var ValueUnwrapper = function () {
        function ValueUnwrapper() {
          this.hasWrappedValue = false;
        }
        ValueUnwrapper.prototype.unwrap = function (value) {
          if (value instanceof WrappedValue) {
            this.hasWrappedValue = true;
            return value.wrapped;
          }
          return value;
        };
        ValueUnwrapper.prototype.reset = function () {
          this.hasWrappedValue = false;
        };
        return ValueUnwrapper;
      }();
      var SimpleChange = function () {
        function SimpleChange(previousValue, currentValue) {
          this.previousValue = previousValue;
          this.currentValue = currentValue;
        }
        SimpleChange.prototype.isFirstChange = function () {
          return this.previousValue === UNINITIALIZED;
        };
        return SimpleChange;
      }();
      var ChangeDetectorRef = function () {
        function ChangeDetectorRef() {}
        return ChangeDetectorRef;
      }();
      var keyValDiff = [new DefaultKeyValueDifferFactory()];
      var iterableDiff = [new DefaultIterableDifferFactory()];
      var defaultIterableDiffers = new IterableDiffers(iterableDiff);
      var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
      var RenderComponentType = function () {
        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
          this.id = id;
          this.templateUrl = templateUrl;
          this.slotCount = slotCount;
          this.encapsulation = encapsulation;
          this.styles = styles;
          this.animations = animations;
        }
        return RenderComponentType;
      }();
      var RenderDebugInfo = function () {
        function RenderDebugInfo() {}
        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "component", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "references", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "context", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "source", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return RenderDebugInfo;
      }();
      var Renderer = function () {
        function Renderer() {}
        return Renderer;
      }();
      var RootRenderer = function () {
        function RootRenderer() {}
        return RootRenderer;
      }();
      exports.SecurityContext;
      (function (SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(exports.SecurityContext || (exports.SecurityContext = {}));
      var Sanitizer = function () {
        function Sanitizer() {}
        return Sanitizer;
      }();
      var __extends$6 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ExpressionChangedAfterItHasBeenCheckedError = function (_super) {
        __extends$6(ExpressionChangedAfterItHasBeenCheckedError, _super);
        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
          var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
          if (oldValue === UNINITIALIZED) {
            msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
          }
          _super.call(this, msg);
        }
        return ExpressionChangedAfterItHasBeenCheckedError;
      }(BaseError);
      var ViewWrappedError = function (_super) {
        __extends$6(ViewWrappedError, _super);
        function ViewWrappedError(originalError, context) {
          _super.call(this, "Error in " + context.source, originalError);
          this.context = context;
        }
        return ViewWrappedError;
      }(WrappedError);
      var ViewDestroyedError = function (_super) {
        __extends$6(ViewDestroyedError, _super);
        function ViewDestroyedError(details) {
          _super.call(this, "Attempt to use a destroyed view: " + details);
        }
        return ViewDestroyedError;
      }(BaseError);
      var ViewUtils = function () {
        function ViewUtils(_renderer, sanitizer) {
          this._renderer = _renderer;
          this._nextCompTypeId = 0;
          this.sanitizer = sanitizer;
        }
        ViewUtils.prototype.renderComponent = function (renderComponentType) {
          return this._renderer.renderComponent(renderComponentType);
        };
        ViewUtils.decorators = [{ type: Injectable }];
        ViewUtils.ctorParameters = [{ type: RootRenderer }, { type: Sanitizer }];
        return ViewUtils;
      }();
      var nextRenderComponentTypeId = 0;
      function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
        return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
      }
      function addToArray(e, array) {
        array.push(e);
      }
      function interpolate(valueCount, constAndInterp) {
        var result = '';
        for (var i = 0; i < valueCount * 2; i = i + 2) {
          result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
        }
        return result + constAndInterp[valueCount * 2];
      }
      function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
        switch (valueCount) {
          case 1:
            return c0 + _toStringWithNull(a1) + c1;
          case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
          case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
          case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
          case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
          case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
          case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
          case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
          case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
          default:
            throw new Error("Does not support more than 9 expressions");
        }
      }
      function _toStringWithNull(v) {
        return v != null ? v.toString() : '';
      }
      function checkBinding(throwOnChange, oldValue, newValue) {
        if (throwOnChange) {
          if (!devModeEqual(oldValue, newValue)) {
            throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
          }
          return false;
        } else {
          return !looseIdentical(oldValue, newValue);
        }
      }
      function castByValue(input, value) {
        return input;
      }
      var EMPTY_ARRAY = [];
      var EMPTY_MAP = {};
      function pureProxy1(fn) {
        var result;
        var v0 = UNINITIALIZED;
        return function (p0) {
          if (!looseIdentical(v0, p0)) {
            v0 = p0;
            result = fn(p0);
          }
          return result;
        };
      }
      function pureProxy2(fn) {
        var result;
        var v0 = UNINITIALIZED;
        var v1 = UNINITIALIZED;
        return function (p0, p1) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
            v0 = p0;
            v1 = p1;
            result = fn(p0, p1);
          }
          return result;
        };
      }
      function pureProxy3(fn) {
        var result;
        var v0 = UNINITIALIZED;
        var v1 = UNINITIALIZED;
        var v2 = UNINITIALIZED;
        return function (p0, p1, p2) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            result = fn(p0, p1, p2);
          }
          return result;
        };
      }
      function pureProxy4(fn) {
        var result;
        var v0, v1, v2, v3;
        v0 = v1 = v2 = v3 = UNINITIALIZED;
        return function (p0, p1, p2, p3) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            result = fn(p0, p1, p2, p3);
          }
          return result;
        };
      }
      function pureProxy5(fn) {
        var result;
        var v0, v1, v2, v3, v4;
        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            result = fn(p0, p1, p2, p3, p4);
          }
          return result;
        };
      }
      function pureProxy6(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5;
        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            result = fn(p0, p1, p2, p3, p4, p5);
          }
          return result;
        };
      }
      function pureProxy7(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            result = fn(p0, p1, p2, p3, p4, p5, p6);
          }
          return result;
        };
      }
      function pureProxy8(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
          }
          return result;
        };
      }
      function pureProxy9(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7, v8;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
          }
          return result;
        };
      }
      function pureProxy10(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
          if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            v9 = p9;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
          }
          return result;
        };
      }
      function setBindingDebugInfoForChanges(renderer, el, changes) {
        Object.keys(changes).forEach(function (propName) {
          setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
        });
      }
      function setBindingDebugInfo(renderer, el, propName, value) {
        try {
          renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
        } catch (e) {
          renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
        }
      }
      var CAMEL_CASE_REGEXP = /([A-Z])/g;
      function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
          var m = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
          }
          return '-' + m[1].toLowerCase();
        });
      }
      function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
        var el = renderer.createElement(parentElement, name, debugInfo);
        for (var i = 0; i < attrs.length; i += 2) {
          renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
        }
        return el;
      }
      function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
        var hostElement;
        if (isPresent(rootSelectorOrNode)) {
          hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
          for (var i = 0; i < attrs.length; i += 2) {
            renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
          }
        } else {
          hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
        }
        return hostElement;
      }
      function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
        var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
        for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
          var eventName = eventNamesAndTargets.get(i);
          var eventTarget = eventNamesAndTargets.get(i + 1);
          var disposable = void 0;
          if (eventTarget) {
            disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
          } else {
            disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
          }
          disposables.set(i / 2, disposable);
        }
        return disposeInlineArray.bind(null, disposables);
      }
      function disposeInlineArray(disposables) {
        for (var i = 0; i < disposables.length; i++) {
          disposables.get(i)();
        }
      }
      function noop() {}
      function createEmptyInlineArray(length) {
        var ctor;
        if (length <= 2) {
          ctor = InlineArray2;
        } else if (length <= 4) {
          ctor = InlineArray4;
        } else if (length <= 8) {
          ctor = InlineArray8;
        } else if (length <= 16) {
          ctor = InlineArray16;
        } else {
          ctor = InlineArrayDynamic;
        }
        return new ctor(length);
      }
      var InlineArray0 = function () {
        function InlineArray0() {
          this.length = 0;
        }
        InlineArray0.prototype.get = function (index) {
          return undefined;
        };
        InlineArray0.prototype.set = function (index, value) {};
        return InlineArray0;
      }();
      var InlineArray2 = function () {
        function InlineArray2(length, _v0, _v1) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
        }
        InlineArray2.prototype.get = function (index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            default:
              return undefined;
          }
        };
        InlineArray2.prototype.set = function (index, value) {
          switch (index) {
            case 0:
              this._v0 = value;
              break;
            case 1:
              this._v1 = value;
              break;
          }
        };
        return InlineArray2;
      }();
      var InlineArray4 = function () {
        function InlineArray4(length, _v0, _v1, _v2, _v3) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
        }
        InlineArray4.prototype.get = function (index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            default:
              return undefined;
          }
        };
        InlineArray4.prototype.set = function (index, value) {
          switch (index) {
            case 0:
              this._v0 = value;
              break;
            case 1:
              this._v1 = value;
              break;
            case 2:
              this._v2 = value;
              break;
            case 3:
              this._v3 = value;
              break;
          }
        };
        return InlineArray4;
      }();
      var InlineArray8 = function () {
        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
        }
        InlineArray8.prototype.get = function (index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            case 4:
              return this._v4;
            case 5:
              return this._v5;
            case 6:
              return this._v6;
            case 7:
              return this._v7;
            default:
              return undefined;
          }
        };
        InlineArray8.prototype.set = function (index, value) {
          switch (index) {
            case 0:
              this._v0 = value;
              break;
            case 1:
              this._v1 = value;
              break;
            case 2:
              this._v2 = value;
              break;
            case 3:
              this._v3 = value;
              break;
            case 4:
              this._v4 = value;
              break;
            case 5:
              this._v5 = value;
              break;
            case 6:
              this._v6 = value;
              break;
            case 7:
              this._v7 = value;
              break;
          }
        };
        return InlineArray8;
      }();
      var InlineArray16 = function () {
        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
          this._v8 = _v8;
          this._v9 = _v9;
          this._v10 = _v10;
          this._v11 = _v11;
          this._v12 = _v12;
          this._v13 = _v13;
          this._v14 = _v14;
          this._v15 = _v15;
        }
        InlineArray16.prototype.get = function (index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            case 4:
              return this._v4;
            case 5:
              return this._v5;
            case 6:
              return this._v6;
            case 7:
              return this._v7;
            case 8:
              return this._v8;
            case 9:
              return this._v9;
            case 10:
              return this._v10;
            case 11:
              return this._v11;
            case 12:
              return this._v12;
            case 13:
              return this._v13;
            case 14:
              return this._v14;
            case 15:
              return this._v15;
            default:
              return undefined;
          }
        };
        InlineArray16.prototype.set = function (index, value) {
          switch (index) {
            case 0:
              this._v0 = value;
              break;
            case 1:
              this._v1 = value;
              break;
            case 2:
              this._v2 = value;
              break;
            case 3:
              this._v3 = value;
              break;
            case 4:
              this._v4 = value;
              break;
            case 5:
              this._v5 = value;
              break;
            case 6:
              this._v6 = value;
              break;
            case 7:
              this._v7 = value;
              break;
            case 8:
              this._v8 = value;
              break;
            case 9:
              this._v9 = value;
              break;
            case 10:
              this._v10 = value;
              break;
            case 11:
              this._v11 = value;
              break;
            case 12:
              this._v12 = value;
              break;
            case 13:
              this._v13 = value;
              break;
            case 14:
              this._v14 = value;
              break;
            case 15:
              this._v15 = value;
              break;
          }
        };
        return InlineArray16;
      }();
      var InlineArrayDynamic = function () {
        function InlineArrayDynamic(length) {
          var values = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }
          this.length = length;
          this._values = values;
        }
        InlineArrayDynamic.prototype.get = function (index) {
          return this._values[index];
        };
        InlineArrayDynamic.prototype.set = function (index, value) {
          this._values[index] = value;
        };
        return InlineArrayDynamic;
      }();
      var EMPTY_INLINE_ARRAY = new InlineArray0();
      var view_utils = Object.freeze({
        ViewUtils: ViewUtils,
        createRenderComponentType: createRenderComponentType,
        addToArray: addToArray,
        interpolate: interpolate,
        inlineInterpolate: inlineInterpolate,
        checkBinding: checkBinding,
        castByValue: castByValue,
        EMPTY_ARRAY: EMPTY_ARRAY,
        EMPTY_MAP: EMPTY_MAP,
        pureProxy1: pureProxy1,
        pureProxy2: pureProxy2,
        pureProxy3: pureProxy3,
        pureProxy4: pureProxy4,
        pureProxy5: pureProxy5,
        pureProxy6: pureProxy6,
        pureProxy7: pureProxy7,
        pureProxy8: pureProxy8,
        pureProxy9: pureProxy9,
        pureProxy10: pureProxy10,
        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
        setBindingDebugInfo: setBindingDebugInfo,
        createRenderElement: createRenderElement,
        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
        subscribeToRenderElement: subscribeToRenderElement,
        noop: noop,
        InlineArray2: InlineArray2,
        InlineArray4: InlineArray4,
        InlineArray8: InlineArray8,
        InlineArray16: InlineArray16,
        InlineArrayDynamic: InlineArrayDynamic,
        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
      });
      var __extends$5 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ComponentRef = function () {
        function ComponentRef() {}
        Object.defineProperty(ComponentRef.prototype, "location", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "injector", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "instance", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "hostView", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "componentType", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return ComponentRef;
      }();
      var ComponentRef_ = function (_super) {
        __extends$5(ComponentRef_, _super);
        function ComponentRef_(_index, _parentView, _nativeElement, _component) {
          _super.call(this);
          this._index = _index;
          this._parentView = _parentView;
          this._nativeElement = _nativeElement;
          this._component = _component;
        }
        Object.defineProperty(ComponentRef_.prototype, "location", {
          get: function () {
            return new ElementRef(this._nativeElement);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "injector", {
          get: function () {
            return this._parentView.injector(this._index);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "instance", {
          get: function () {
            return this._component;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "hostView", {
          get: function () {
            return this._parentView.ref;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
          get: function () {
            return this._parentView.ref;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "componentType", {
          get: function () {
            return this._component.constructor;
          },
          enumerable: true,
          configurable: true
        });
        ComponentRef_.prototype.destroy = function () {
          this._parentView.detachAndDestroy();
        };
        ComponentRef_.prototype.onDestroy = function (callback) {
          this.hostView.onDestroy(callback);
        };
        return ComponentRef_;
      }(ComponentRef);
      var ComponentFactory = function () {
        function ComponentFactory(selector, _viewClass, _componentType) {
          this.selector = selector;
          this._viewClass = _viewClass;
          this._componentType = _componentType;
        }
        Object.defineProperty(ComponentFactory.prototype, "componentType", {
          get: function () {
            return this._componentType;
          },
          enumerable: true,
          configurable: true
        });
        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
          if (projectableNodes === void 0) {
            projectableNodes = null;
          }
          if (rootSelectorOrNode === void 0) {
            rootSelectorOrNode = null;
          }
          var vu = injector.get(ViewUtils);
          if (!projectableNodes) {
            projectableNodes = [];
          }
          var hostView = new this._viewClass(vu, null, null, null);
          return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
        };
        return ComponentFactory;
      }();
      var __extends$7 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var NoComponentFactoryError = function (_super) {
        __extends$7(NoComponentFactoryError, _super);
        function NoComponentFactoryError(component) {
          _super.call(this, "No component factory found for " + stringify(component));
          this.component = component;
        }
        return NoComponentFactoryError;
      }(BaseError);
      var _NullComponentFactoryResolver = function () {
        function _NullComponentFactoryResolver() {}
        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
          throw new NoComponentFactoryError(component);
        };
        return _NullComponentFactoryResolver;
      }();
      var ComponentFactoryResolver = function () {
        function ComponentFactoryResolver() {}
        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
        return ComponentFactoryResolver;
      }();
      var CodegenComponentFactoryResolver = function () {
        function CodegenComponentFactoryResolver(factories, _parent) {
          this._parent = _parent;
          this._factories = new Map();
          for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
          }
        }
        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
          var result = this._factories.get(component);
          if (!result) {
            result = this._parent.resolveComponentFactory(component);
          }
          return result;
        };
        return CodegenComponentFactoryResolver;
      }();
      var trace;
      var events;
      function detectWTF() {
        var wtf = global$1['wtf'];
        if (wtf) {
          trace = wtf['trace'];
          if (trace) {
            events = trace['events'];
            return true;
          }
        }
        return false;
      }
      function createScope(signature, flags) {
        if (flags === void 0) {
          flags = null;
        }
        return events.createScope(signature, flags);
      }
      function leave(scope, returnValue) {
        trace.leaveScope(scope, returnValue);
        return returnValue;
      }
      function startTimeRange(rangeType, action) {
        return trace.beginTimeRange(rangeType, action);
      }
      function endTimeRange(range) {
        trace.endTimeRange(range);
      }
      var wtfEnabled = detectWTF();
      function noopScope(arg0, arg1) {
        return null;
      }
      var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) {
        return noopScope;
      };
      var wtfLeave = wtfEnabled ? leave : function (s, r) {
        return r;
      };
      var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) {
        return null;
      };
      var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) {
        return null;
      };
      var __extends$8 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var EventEmitter = function (_super) {
        __extends$8(EventEmitter, _super);
        function EventEmitter(isAsync) {
          if (isAsync === void 0) {
            isAsync = false;
          }
          _super.call(this);
          this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function (value) {
          _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
          var schedulerFn;
          var errorFn = function (err) {
            return null;
          };
          var completeFn = function () {
            return null;
          };
          if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext.next(value);
              });
            } : function (value) {
              generatorOrNext.next(value);
            };
            if (generatorOrNext.error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return generatorOrNext.error(err);
                });
              } : function (err) {
                generatorOrNext.error(err);
              };
            }
            if (generatorOrNext.complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return generatorOrNext.complete();
                });
              } : function () {
                generatorOrNext.complete();
              };
            }
          } else {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext(value);
              });
            } : function (value) {
              generatorOrNext(value);
            };
            if (error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return error(err);
                });
              } : function (err) {
                error(err);
              };
            }
            if (complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return complete();
                });
              } : function () {
                complete();
              };
            }
          }
          return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
      }(rxjs_Subject.Subject);
      var NgZone = function () {
        function NgZone(_a) {
          var _b = _a.enableLongStackTrace,
              enableLongStackTrace = _b === void 0 ? false : _b;
          this._hasPendingMicrotasks = false;
          this._hasPendingMacrotasks = false;
          this._isStable = true;
          this._nesting = 0;
          this._onUnstable = new EventEmitter(false);
          this._onMicrotaskEmpty = new EventEmitter(false);
          this._onStable = new EventEmitter(false);
          this._onErrorEvents = new EventEmitter(false);
          if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
          }
          Zone.assertZonePatched();
          this.outer = this.inner = Zone.current;
          if (Zone['wtfZoneSpec']) {
            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
          }
          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
          }
          this.forkInnerZoneWithAngularBehavior();
        }
        NgZone.isInAngularZone = function () {
          return Zone.current.get('isAngularZone') === true;
        };
        NgZone.assertInAngularZone = function () {
          if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
          }
        };
        NgZone.assertNotInAngularZone = function () {
          if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
          }
        };
        NgZone.prototype.run = function (fn) {
          return this.inner.run(fn);
        };
        NgZone.prototype.runGuarded = function (fn) {
          return this.inner.runGuarded(fn);
        };
        NgZone.prototype.runOutsideAngular = function (fn) {
          return this.outer.run(fn);
        };
        Object.defineProperty(NgZone.prototype, "onUnstable", {
          get: function () {
            return this._onUnstable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
          get: function () {
            return this._onMicrotaskEmpty;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onStable", {
          get: function () {
            return this._onStable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onError", {
          get: function () {
            return this._onErrorEvents;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "isStable", {
          get: function () {
            return this._isStable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
          get: function () {
            return this._hasPendingMicrotasks;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
          get: function () {
            return this._hasPendingMacrotasks;
          },
          enumerable: true,
          configurable: true
        });
        NgZone.prototype.checkStable = function () {
          var _this = this;
          if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
            try {
              this._nesting++;
              this._onMicrotaskEmpty.emit(null);
            } finally {
              this._nesting--;
              if (!this._hasPendingMicrotasks) {
                try {
                  this.runOutsideAngular(function () {
                    return _this._onStable.emit(null);
                  });
                } finally {
                  this._isStable = true;
                }
              }
            }
          }
        };
        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
          var _this = this;
          this.inner = this.inner.fork({
            name: 'angular',
            properties: { 'isAngularZone': true },
            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
              try {
                _this.onEnter();
                return delegate.invokeTask(target, task, applyThis, applyArgs);
              } finally {
                _this.onLeave();
              }
            },
            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
              try {
                _this.onEnter();
                return delegate.invoke(target, callback, applyThis, applyArgs, source);
              } finally {
                _this.onLeave();
              }
            },
            onHasTask: function (delegate, current, target, hasTaskState) {
              delegate.hasTask(target, hasTaskState);
              if (current === target) {
                if (hasTaskState.change == 'microTask') {
                  _this.setHasMicrotask(hasTaskState.microTask);
                } else if (hasTaskState.change == 'macroTask') {
                  _this.setHasMacrotask(hasTaskState.macroTask);
                }
              }
            },
            onHandleError: function (delegate, current, target, error) {
              delegate.handleError(target, error);
              _this.triggerError(error);
              return false;
            }
          });
        };
        NgZone.prototype.onEnter = function () {
          this._nesting++;
          if (this._isStable) {
            this._isStable = false;
            this._onUnstable.emit(null);
          }
        };
        NgZone.prototype.onLeave = function () {
          this._nesting--;
          this.checkStable();
        };
        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
          this._hasPendingMicrotasks = hasMicrotasks;
          this.checkStable();
        };
        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) {
          this._hasPendingMacrotasks = hasMacrotasks;
        };
        NgZone.prototype.triggerError = function (error) {
          this._onErrorEvents.emit(error);
        };
        return NgZone;
      }();
      var Testability = function () {
        function Testability(_ngZone) {
          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          this._didWork = false;
          this._callbacks = [];
          this._watchAngularEvents();
        }
        Testability.prototype._watchAngularEvents = function () {
          var _this = this;
          this._ngZone.onUnstable.subscribe({ next: function () {
              _this._didWork = true;
              _this._isZoneStable = false;
            } });
          this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.subscribe({ next: function () {
                NgZone.assertNotInAngularZone();
                scheduleMicroTask(function () {
                  _this._isZoneStable = true;
                  _this._runCallbacksIfReady();
                });
              } });
          });
        };
        Testability.prototype.increasePendingRequestCount = function () {
          this._pendingCount += 1;
          this._didWork = true;
          return this._pendingCount;
        };
        Testability.prototype.decreasePendingRequestCount = function () {
          this._pendingCount -= 1;
          if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
          }
          this._runCallbacksIfReady();
          return this._pendingCount;
        };
        Testability.prototype.isStable = function () {
          return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        };
        Testability.prototype._runCallbacksIfReady = function () {
          var _this = this;
          if (this.isStable()) {
            scheduleMicroTask(function () {
              while (_this._callbacks.length !== 0) {
                _this._callbacks.pop()(_this._didWork);
              }
              _this._didWork = false;
            });
          } else {
            this._didWork = true;
          }
        };
        Testability.prototype.whenStable = function (callback) {
          this._callbacks.push(callback);
          this._runCallbacksIfReady();
        };
        Testability.prototype.getPendingRequestCount = function () {
          return this._pendingCount;
        };
        Testability.prototype.findBindings = function (using, provider, exactMatch) {
          return [];
        };
        Testability.prototype.findProviders = function (using, provider, exactMatch) {
          return [];
        };
        Testability.decorators = [{ type: Injectable }];
        Testability.ctorParameters = [{ type: NgZone }];
        return Testability;
      }();
      var TestabilityRegistry = function () {
        function TestabilityRegistry() {
          this._applications = new Map();
          _testabilityGetter.addToWindow(this);
        }
        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
          this._applications.set(token, testability);
        };
        TestabilityRegistry.prototype.getTestability = function (elem) {
          return this._applications.get(elem);
        };
        TestabilityRegistry.prototype.getAllTestabilities = function () {
          return Array.from(this._applications.values());
        };
        TestabilityRegistry.prototype.getAllRootElements = function () {
          return Array.from(this._applications.keys());
        };
        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
          if (findInAncestors === void 0) {
            findInAncestors = true;
          }
          return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        };
        TestabilityRegistry.decorators = [{ type: Injectable }];
        TestabilityRegistry.ctorParameters = [];
        return TestabilityRegistry;
      }();
      var _NoopGetTestability = function () {
        function _NoopGetTestability() {}
        _NoopGetTestability.prototype.addToWindow = function (registry) {};
        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
          return null;
        };
        return _NoopGetTestability;
      }();
      function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
      }
      var _testabilityGetter = new _NoopGetTestability();
      var __extends$3 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _devMode = true;
      var _runModeLocked = false;
      var _platform;
      function enableProdMode() {
        if (_runModeLocked) {
          throw new Error('Cannot enable prod mode after platform setup.');
        }
        _devMode = false;
      }
      function isDevMode() {
        _runModeLocked = true;
        return _devMode;
      }
      function createPlatform(injector) {
        if (_platform && !_platform.destroyed) {
          throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
        }
        _platform = injector.get(PlatformRef);
        var inits = injector.get(PLATFORM_INITIALIZER, null);
        if (inits) inits.forEach(function (init) {
          return init();
        });
        return _platform;
      }
      function createPlatformFactory(parentPlaformFactory, name, providers) {
        if (providers === void 0) {
          providers = [];
        }
        var marker = new OpaqueToken("Platform: " + name);
        return function (extraProviders) {
          if (extraProviders === void 0) {
            extraProviders = [];
          }
          if (!getPlatform()) {
            if (parentPlaformFactory) {
              parentPlaformFactory(providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              }));
            } else {
              createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              })));
            }
          }
          return assertPlatform(marker);
        };
      }
      function assertPlatform(requiredToken) {
        var platform = getPlatform();
        if (!platform) {
          throw new Error('No platform exists!');
        }
        if (!platform.injector.get(requiredToken, null)) {
          throw new Error('A platform with a different configuration has been created. Please destroy it first.');
        }
        return platform;
      }
      function destroyPlatform() {
        if (_platform && !_platform.destroyed) {
          _platform.destroy();
        }
      }
      function getPlatform() {
        return _platform && !_platform.destroyed ? _platform : null;
      }
      var PlatformRef = function () {
        function PlatformRef() {}
        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
          throw unimplemented();
        };
        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          throw unimplemented();
        };
        Object.defineProperty(PlatformRef.prototype, "injector", {
          get: function () {
            throw unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(PlatformRef.prototype, "destroyed", {
          get: function () {
            throw unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return PlatformRef;
      }();
      function _callAndReportToErrorHandler(errorHandler, callback) {
        try {
          var result = callback();
          if (isPromise(result)) {
            return result.catch(function (e) {
              errorHandler.handleError(e);
              throw e;
            });
          }
          return result;
        } catch (e) {
          errorHandler.handleError(e);
          throw e;
        }
      }
      var PlatformRef_ = function (_super) {
        __extends$3(PlatformRef_, _super);
        function PlatformRef_(_injector) {
          _super.call(this);
          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        PlatformRef_.prototype.onDestroy = function (callback) {
          this._destroyListeners.push(callback);
        };
        Object.defineProperty(PlatformRef_.prototype, "injector", {
          get: function () {
            return this._injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
          get: function () {
            return this._destroyed;
          },
          enumerable: true,
          configurable: true
        });
        PlatformRef_.prototype.destroy = function () {
          if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
          }
          this._modules.slice().forEach(function (module) {
            return module.destroy();
          });
          this._destroyListeners.forEach(function (listener) {
            return listener();
          });
          this._destroyed = true;
        };
        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
          return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
        };
        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
          var _this = this;
          if (!ngZone) ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
          return ngZone.run(function () {
            var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
              provide: NgZone,
              useValue: ngZone
            }], _this.injector);
            var moduleRef = moduleFactory.create(ngZoneInjector);
            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
              throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function () {
              return ListWrapper.remove(_this._modules, moduleRef);
            });
            ngZone.onError.subscribe({ next: function (error) {
                exceptionHandler.handleError(error);
              } });
            return _callAndReportToErrorHandler(exceptionHandler, function () {
              var initStatus = moduleRef.injector.get(ApplicationInitStatus);
              return initStatus.donePromise.then(function () {
                _this._moduleDoBootstrap(moduleRef);
                return moduleRef;
              });
            });
          });
        };
        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
        };
        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
          var _this = this;
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          var compilerFactory = this.injector.get(CompilerFactory);
          var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
          if (componentFactoryCallback) {
            return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function (_a) {
              var ngModuleFactory = _a.ngModuleFactory,
                  componentFactories = _a.componentFactories;
              componentFactoryCallback(componentFactories);
              return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
            });
          }
          return compiler.compileModuleAsync(moduleType).then(function (moduleFactory) {
            return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
          });
        };
        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
          var appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef.bootstrapFactories.length > 0) {
            moduleRef.bootstrapFactories.forEach(function (compFactory) {
              return appRef.bootstrap(compFactory);
            });
          } else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
          } else {
            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " + "Please define one of these.");
          }
        };
        PlatformRef_.decorators = [{ type: Injectable }];
        PlatformRef_.ctorParameters = [{ type: Injector }];
        return PlatformRef_;
      }(PlatformRef);
      var ApplicationRef = function () {
        function ApplicationRef() {}
        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ApplicationRef.prototype, "components", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return ApplicationRef;
      }();
      var ApplicationRef_ = function (_super) {
        __extends$3(ApplicationRef_, _super);
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
          var _this = this;
          _super.call(this);
          this._zone = _zone;
          this._console = _console;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          this._testabilityRegistry = _testabilityRegistry;
          this._testability = _testability;
          this._bootstrapListeners = [];
          this._rootComponents = [];
          this._rootComponentTypes = [];
          this._changeDetectorRefs = [];
          this._runningTick = false;
          this._enforceNoNewChanges = false;
          this._enforceNoNewChanges = isDevMode();
          this._zone.onMicrotaskEmpty.subscribe({ next: function () {
              _this._zone.run(function () {
                _this.tick();
              });
            } });
        }
        ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
          this._changeDetectorRefs.push(changeDetector);
        };
        ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
          ListWrapper.remove(this._changeDetectorRefs, changeDetector);
        };
        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
          var _this = this;
          if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
          }
          var componentFactory;
          if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
          } else {
            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
          }
          this._rootComponentTypes.push(componentFactory.componentType);
          var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
          compRef.onDestroy(function () {
            _this._unloadComponent(compRef);
          });
          var testability = compRef.injector.get(Testability, null);
          if (testability) {
            compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
          }
          this._loadComponent(compRef);
          if (isDevMode()) {
            this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
          }
          return compRef;
        };
        ApplicationRef_.prototype._loadComponent = function (componentRef) {
          this._changeDetectorRefs.push(componentRef.changeDetectorRef);
          this.tick();
          this._rootComponents.push(componentRef);
          var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
          listeners.forEach(function (listener) {
            return listener(componentRef);
          });
        };
        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
          if (this._rootComponents.indexOf(componentRef) == -1) {
            return;
          }
          this.unregisterChangeDetector(componentRef.changeDetectorRef);
          ListWrapper.remove(this._rootComponents, componentRef);
        };
        ApplicationRef_.prototype.tick = function () {
          if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
          }
          var scope = ApplicationRef_._tickScope();
          try {
            this._runningTick = true;
            this._changeDetectorRefs.forEach(function (detector) {
              return detector.detectChanges();
            });
            if (this._enforceNoNewChanges) {
              this._changeDetectorRefs.forEach(function (detector) {
                return detector.checkNoChanges();
              });
            }
          } finally {
            this._runningTick = false;
            wtfLeave(scope);
          }
        };
        ApplicationRef_.prototype.ngOnDestroy = function () {
          this._rootComponents.slice().forEach(function (component) {
            return component.destroy();
          });
        };
        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
          get: function () {
            return this._rootComponentTypes;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "components", {
          get: function () {
            return this._rootComponents;
          },
          enumerable: true,
          configurable: true
        });
        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
        ApplicationRef_.decorators = [{ type: Injectable }];
        ApplicationRef_.ctorParameters = [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }, {
          type: TestabilityRegistry,
          decorators: [{ type: Optional }]
        }, {
          type: Testability,
          decorators: [{ type: Optional }]
        }];
        return ApplicationRef_;
      }(ApplicationRef);
      var __extends$9 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var NgModuleRef = function () {
        function NgModuleRef() {}
        Object.defineProperty(NgModuleRef.prototype, "injector", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "instance", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return NgModuleRef;
      }();
      var NgModuleFactory = function () {
        function NgModuleFactory(_injectorClass, _moduleType) {
          this._injectorClass = _injectorClass;
          this._moduleType = _moduleType;
        }
        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
          get: function () {
            return this._moduleType;
          },
          enumerable: true,
          configurable: true
        });
        NgModuleFactory.prototype.create = function (parentInjector) {
          if (!parentInjector) {
            parentInjector = Injector.NULL;
          }
          var instance = new this._injectorClass(parentInjector);
          instance.create();
          return instance;
        };
        return NgModuleFactory;
      }();
      var _UNDEFINED = new Object();
      var NgModuleInjector = function (_super) {
        __extends$9(NgModuleInjector, _super);
        function NgModuleInjector(parent, factories, bootstrapFactories) {
          _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
          this.parent = parent;
          this.bootstrapFactories = bootstrapFactories;
          this._destroyListeners = [];
          this._destroyed = false;
        }
        NgModuleInjector.prototype.create = function () {
          this.instance = this.createInternal();
        };
        NgModuleInjector.prototype.get = function (token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          if (token === Injector || token === ComponentFactoryResolver) {
            return this;
          }
          var result = this.getInternal(token, _UNDEFINED);
          return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        };
        Object.defineProperty(NgModuleInjector.prototype, "injector", {
          get: function () {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
          get: function () {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        NgModuleInjector.prototype.destroy = function () {
          if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
          }
          this._destroyed = true;
          this.destroyInternal();
          this._destroyListeners.forEach(function (listener) {
            return listener();
          });
        };
        NgModuleInjector.prototype.onDestroy = function (callback) {
          this._destroyListeners.push(callback);
        };
        return NgModuleInjector;
      }(CodegenComponentFactoryResolver);
      var NgModuleFactoryLoader = function () {
        function NgModuleFactoryLoader() {}
        return NgModuleFactoryLoader;
      }();
      var moduleFactories = new Map();
      function registerModuleFactory(id, factory) {
        var existing = moduleFactories.get(id);
        if (existing) {
          throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
        }
        moduleFactories.set(id, factory);
      }
      function getModuleFactory(id) {
        var factory = moduleFactories.get(id);
        if (!factory) throw new Error("No module with ID " + id + " loaded");
        return factory;
      }
      var QueryList = function () {
        function QueryList() {
          this._dirty = true;
          this._results = [];
          this._emitter = new EventEmitter();
        }
        Object.defineProperty(QueryList.prototype, "changes", {
          get: function () {
            return this._emitter;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "length", {
          get: function () {
            return this._results.length;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "first", {
          get: function () {
            return this._results[0];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "last", {
          get: function () {
            return this._results[this.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        QueryList.prototype.map = function (fn) {
          return this._results.map(fn);
        };
        QueryList.prototype.filter = function (fn) {
          return this._results.filter(fn);
        };
        QueryList.prototype.find = function (fn) {
          return this._results.find(fn);
        };
        QueryList.prototype.reduce = function (fn, init) {
          return this._results.reduce(fn, init);
        };
        QueryList.prototype.forEach = function (fn) {
          this._results.forEach(fn);
        };
        QueryList.prototype.some = function (fn) {
          return this._results.some(fn);
        };
        QueryList.prototype.toArray = function () {
          return this._results.slice();
        };
        QueryList.prototype[getSymbolIterator()] = function () {
          return this._results[getSymbolIterator()]();
        };
        QueryList.prototype.toString = function () {
          return this._results.toString();
        };
        QueryList.prototype.reset = function (res) {
          this._results = ListWrapper.flatten(res);
          this._dirty = false;
        };
        QueryList.prototype.notifyOnChanges = function () {
          this._emitter.emit(this);
        };
        QueryList.prototype.setDirty = function () {
          this._dirty = true;
        };
        Object.defineProperty(QueryList.prototype, "dirty", {
          get: function () {
            return this._dirty;
          },
          enumerable: true,
          configurable: true
        });
        return QueryList;
      }();
      var _SEPARATOR = '#';
      var FACTORY_CLASS_SUFFIX = 'NgFactory';
      var SystemJsNgModuleLoaderConfig = function () {
        function SystemJsNgModuleLoaderConfig() {}
        return SystemJsNgModuleLoaderConfig;
      }();
      var DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory'
      };
      var SystemJsNgModuleLoader = function () {
        function SystemJsNgModuleLoader(_compiler, config) {
          this._compiler = _compiler;
          this._config = config || DEFAULT_CONFIG;
        }
        SystemJsNgModuleLoader.prototype.load = function (path) {
          var offlineMode = this._compiler instanceof Compiler;
          return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        };
        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
          var _this = this;
          var _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          if (exportName === undefined) {
            exportName = 'default';
          }
          return System.import(module).then(function (module) {
            return module[exportName];
          }).then(function (type) {
            return checkNotEmpty(type, module, exportName);
          }).then(function (type) {
            return _this._compiler.compileModuleAsync(type);
          });
        };
        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
          var _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
          if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
          }
          return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
            return module[exportName + factoryClassSuffix];
          }).then(function (factory) {
            return checkNotEmpty(factory, module, exportName);
          });
        };
        SystemJsNgModuleLoader.decorators = [{ type: Injectable }];
        SystemJsNgModuleLoader.ctorParameters = [{ type: Compiler }, {
          type: SystemJsNgModuleLoaderConfig,
          decorators: [{ type: Optional }]
        }];
        return SystemJsNgModuleLoader;
      }();
      function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
          throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
        }
        return value;
      }
      var __extends$10 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var TemplateRef = function () {
        function TemplateRef() {}
        Object.defineProperty(TemplateRef.prototype, "elementRef", {
          get: function () {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        return TemplateRef;
      }();
      var TemplateRef_ = function (_super) {
        __extends$10(TemplateRef_, _super);
        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
          _super.call(this);
          this._parentView = _parentView;
          this._nodeIndex = _nodeIndex;
          this._nativeElement = _nativeElement;
        }
        TemplateRef_.prototype.createEmbeddedView = function (context) {
          var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
          view.create(context || {});
          return view.ref;
        };
        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
          get: function () {
            return new ElementRef(this._nativeElement);
          },
          enumerable: true,
          configurable: true
        });
        return TemplateRef_;
      }(TemplateRef);
      var ViewContainerRef = function () {
        function ViewContainerRef() {}
        Object.defineProperty(ViewContainerRef.prototype, "element", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "injector", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "length", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return ViewContainerRef;
      }();
      var ViewContainerRef_ = function () {
        function ViewContainerRef_(_element) {
          this._element = _element;
          this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
          this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
          this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
          this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
        }
        ViewContainerRef_.prototype.get = function (index) {
          return this._element.nestedViews[index].ref;
        };
        Object.defineProperty(ViewContainerRef_.prototype, "length", {
          get: function () {
            var views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "element", {
          get: function () {
            return this._element.elementRef;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
          get: function () {
            return this._element.injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
          get: function () {
            return this._element.parentInjector;
          },
          enumerable: true,
          configurable: true
        });
        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
          if (context === void 0) {
            context = null;
          }
          if (index === void 0) {
            index = -1;
          }
          var viewRef = templateRef.createEmbeddedView(context);
          this.insert(viewRef, index);
          return viewRef;
        };
        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
          if (index === void 0) {
            index = -1;
          }
          if (injector === void 0) {
            injector = null;
          }
          if (projectableNodes === void 0) {
            projectableNodes = null;
          }
          var s = this._createComponentInContainerScope();
          var contextInjector = injector || this._element.parentInjector;
          var componentRef = componentFactory.create(contextInjector, projectableNodes);
          this.insert(componentRef.hostView, index);
          return wtfLeave(s, componentRef);
        };
        ViewContainerRef_.prototype.insert = function (viewRef, index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._insertScope();
          if (index == -1) index = this.length;
          var viewRef_ = viewRef;
          this._element.attachView(viewRef_.internalView, index);
          return wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
          var s = this._insertScope();
          if (currentIndex == -1) return;
          var viewRef_ = viewRef;
          this._element.moveView(viewRef_.internalView, currentIndex);
          return wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.indexOf = function (viewRef) {
          return this._element.nestedViews.indexOf(viewRef.internalView);
        };
        ViewContainerRef_.prototype.remove = function (index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._removeScope();
          if (index == -1) index = this.length - 1;
          var view = this._element.detachView(index);
          view.destroy();
          wtfLeave(s);
        };
        ViewContainerRef_.prototype.detach = function (index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._detachScope();
          if (index == -1) index = this.length - 1;
          var view = this._element.detachView(index);
          return wtfLeave(s, view.ref);
        };
        ViewContainerRef_.prototype.clear = function () {
          for (var i = this.length - 1; i >= 0; i--) {
            this.remove(i);
          }
        };
        return ViewContainerRef_;
      }();
      var _queuedAnimations = [];
      function queueAnimationGlobally(player) {
        _queuedAnimations.push(player);
      }
      function triggerQueuedAnimations() {
        if (_queuedAnimations.length) {
          Promise.resolve(null).then(_triggerAnimations);
        }
      }
      function _triggerAnimations() {
        for (var i = 0; i < _queuedAnimations.length; i++) {
          var player = _queuedAnimations[i];
          player.play();
        }
        _queuedAnimations = [];
      }
      var __extends$11 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ViewRef = function () {
        function ViewRef() {}
        Object.defineProperty(ViewRef.prototype, "destroyed", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return ViewRef;
      }();
      var EmbeddedViewRef = function (_super) {
        __extends$11(EmbeddedViewRef, _super);
        function EmbeddedViewRef() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
          get: function () {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return EmbeddedViewRef;
      }(ViewRef);
      var ViewRef_ = function () {
        function ViewRef_(_view) {
          this._view = _view;
          this._view = _view;
          this._originalMode = this._view.cdMode;
        }
        Object.defineProperty(ViewRef_.prototype, "internalView", {
          get: function () {
            return this._view;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
          get: function () {
            return this._view.flatRootNodes;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "context", {
          get: function () {
            return this._view.context;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "destroyed", {
          get: function () {
            return this._view.destroyed;
          },
          enumerable: true,
          configurable: true
        });
        ViewRef_.prototype.markForCheck = function () {
          this._view.markPathToRootAsCheckOnce();
        };
        ViewRef_.prototype.detach = function () {
          this._view.cdMode = ChangeDetectorStatus.Detached;
        };
        ViewRef_.prototype.detectChanges = function () {
          this._view.detectChanges(false);
          triggerQueuedAnimations();
        };
        ViewRef_.prototype.checkNoChanges = function () {
          this._view.detectChanges(true);
        };
        ViewRef_.prototype.reattach = function () {
          this._view.cdMode = this._originalMode;
          this.markForCheck();
        };
        ViewRef_.prototype.onDestroy = function (callback) {
          if (!this._view.disposables) {
            this._view.disposables = [];
          }
          this._view.disposables.push(callback);
        };
        ViewRef_.prototype.destroy = function () {
          this._view.detachAndDestroy();
        };
        return ViewRef_;
      }();
      var __extends$12 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var EventListener = function () {
        function EventListener(name, callback) {
          this.name = name;
          this.callback = callback;
        }
        ;
        return EventListener;
      }();
      var DebugNode = function () {
        function DebugNode(nativeNode, parent, _debugInfo) {
          this._debugInfo = _debugInfo;
          this.nativeNode = nativeNode;
          if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
          } else {
            this.parent = null;
          }
          this.listeners = [];
        }
        Object.defineProperty(DebugNode.prototype, "injector", {
          get: function () {
            return this._debugInfo ? this._debugInfo.injector : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "componentInstance", {
          get: function () {
            return this._debugInfo ? this._debugInfo.component : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "context", {
          get: function () {
            return this._debugInfo ? this._debugInfo.context : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "references", {
          get: function () {
            return this._debugInfo ? this._debugInfo.references : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "providerTokens", {
          get: function () {
            return this._debugInfo ? this._debugInfo.providerTokens : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "source", {
          get: function () {
            return this._debugInfo ? this._debugInfo.source : null;
          },
          enumerable: true,
          configurable: true
        });
        return DebugNode;
      }();
      var DebugElement = function (_super) {
        __extends$12(DebugElement, _super);
        function DebugElement(nativeNode, parent, _debugInfo) {
          _super.call(this, nativeNode, parent, _debugInfo);
          this.properties = {};
          this.attributes = {};
          this.classes = {};
          this.styles = {};
          this.childNodes = [];
          this.nativeElement = nativeNode;
        }
        DebugElement.prototype.addChild = function (child) {
          if (child) {
            this.childNodes.push(child);
            child.parent = this;
          }
        };
        DebugElement.prototype.removeChild = function (child) {
          var childIndex = this.childNodes.indexOf(child);
          if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
          }
        };
        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
          var siblingIndex = this.childNodes.indexOf(child);
          if (siblingIndex !== -1) {
            var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
            var nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = previousChildren.concat(newChildren, nextChildren);
            for (var i = 0; i < newChildren.length; ++i) {
              var newChild = newChildren[i];
              if (newChild.parent) {
                newChild.parent.removeChild(newChild);
              }
              newChild.parent = this;
            }
          }
        };
        DebugElement.prototype.query = function (predicate) {
          var results = this.queryAll(predicate);
          return results[0] || null;
        };
        DebugElement.prototype.queryAll = function (predicate) {
          var matches = [];
          _queryElementChildren(this, predicate, matches);
          return matches;
        };
        DebugElement.prototype.queryAllNodes = function (predicate) {
          var matches = [];
          _queryNodeChildren(this, predicate, matches);
          return matches;
        };
        Object.defineProperty(DebugElement.prototype, "children", {
          get: function () {
            return this.childNodes.filter(function (node) {
              return node instanceof DebugElement;
            });
          },
          enumerable: true,
          configurable: true
        });
        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
          this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
              listener.callback(eventObj);
            }
          });
        };
        return DebugElement;
      }(DebugNode);
      function asNativeElements(debugEls) {
        return debugEls.map(function (el) {
          return el.nativeElement;
        });
      }
      function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
          if (node instanceof DebugElement) {
            if (predicate(node)) {
              matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
          }
        });
      }
      function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement) {
          parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
              matches.push(node);
            }
            if (node instanceof DebugElement) {
              _queryNodeChildren(node, predicate, matches);
            }
          });
        }
      }
      var _nativeNodeToDebugNode = new Map();
      function getDebugNode(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode);
      }
      function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
      }
      function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode.delete(node.nativeNode);
      }
      function _reflector() {
        return reflector;
      }
      var _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
        provide: PlatformRef,
        useExisting: PlatformRef_
      }, {
        provide: Reflector,
        useFactory: _reflector,
        deps: []
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, TestabilityRegistry, Console];
      var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
      var LOCALE_ID = new OpaqueToken('LocaleId');
      var TRANSLATIONS = new OpaqueToken('Translations');
      var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
      function _iterableDiffersFactory() {
        return defaultIterableDiffers;
      }
      function _keyValueDiffersFactory() {
        return defaultKeyValueDiffers;
      }
      var ApplicationModule = function () {
        function ApplicationModule() {}
        ApplicationModule.decorators = [{
          type: NgModule,
          args: [{ providers: [ApplicationRef_, {
              provide: ApplicationRef,
              useExisting: ApplicationRef_
            }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, {
              provide: IterableDiffers,
              useFactory: _iterableDiffersFactory
            }, {
              provide: KeyValueDiffers,
              useFactory: _keyValueDiffersFactory
            }, {
              provide: LOCALE_ID,
              useValue: 'en-US'
            }] }]
        }];
        ApplicationModule.ctorParameters = [];
        return ApplicationModule;
      }();
      var FILL_STYLE_FLAG = 'true';
      var ANY_STATE = '*';
      var DEFAULT_STATE = '*';
      var EMPTY_STATE = 'void';
      var AnimationGroupPlayer = function () {
        function AnimationGroupPlayer(_players) {
          var _this = this;
          this._players = _players;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.parentPlayer = null;
          var count = 0;
          var total = this._players.length;
          if (total == 0) {
            scheduleMicroTask(function () {
              return _this._onFinish();
            });
          } else {
            this._players.forEach(function (player) {
              player.parentPlayer = _this;
              player.onDone(function () {
                if (++count >= total) {
                  _this._onFinish();
                }
              });
            });
          }
        }
        AnimationGroupPlayer.prototype._onFinish = function () {
          if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        AnimationGroupPlayer.prototype.init = function () {
          this._players.forEach(function (player) {
            return player.init();
          });
        };
        AnimationGroupPlayer.prototype.onStart = function (fn) {
          this._onStartFns.push(fn);
        };
        AnimationGroupPlayer.prototype.onDone = function (fn) {
          this._onDoneFns.push(fn);
        };
        AnimationGroupPlayer.prototype.hasStarted = function () {
          return this._started;
        };
        AnimationGroupPlayer.prototype.play = function () {
          if (!isPresent(this.parentPlayer)) {
            this.init();
          }
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._players.forEach(function (player) {
            return player.play();
          });
        };
        AnimationGroupPlayer.prototype.pause = function () {
          this._players.forEach(function (player) {
            return player.pause();
          });
        };
        AnimationGroupPlayer.prototype.restart = function () {
          this._players.forEach(function (player) {
            return player.restart();
          });
        };
        AnimationGroupPlayer.prototype.finish = function () {
          this._onFinish();
          this._players.forEach(function (player) {
            return player.finish();
          });
        };
        AnimationGroupPlayer.prototype.destroy = function () {
          if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) {
              return player.destroy();
            });
            this._destroyed = true;
          }
        };
        AnimationGroupPlayer.prototype.reset = function () {
          this._players.forEach(function (player) {
            return player.reset();
          });
          this._destroyed = false;
          this._finished = false;
          this._started = false;
        };
        AnimationGroupPlayer.prototype.setPosition = function (p) {
          this._players.forEach(function (player) {
            player.setPosition(p);
          });
        };
        AnimationGroupPlayer.prototype.getPosition = function () {
          var min = 0;
          this._players.forEach(function (player) {
            var p = player.getPosition();
            min = Math.min(p, min);
          });
          return min;
        };
        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
          get: function () {
            return this._players;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationGroupPlayer;
      }();
      var AnimationKeyframe = function () {
        function AnimationKeyframe(offset, styles) {
          this.offset = offset;
          this.styles = styles;
        }
        return AnimationKeyframe;
      }();
      var AnimationPlayer = function () {
        function AnimationPlayer() {}
        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
          get: function () {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          set: function (player) {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          enumerable: true,
          configurable: true
        });
        return AnimationPlayer;
      }();
      var NoOpAnimationPlayer = function () {
        function NoOpAnimationPlayer() {
          var _this = this;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._started = false;
          this.parentPlayer = null;
          scheduleMicroTask(function () {
            return _this._onFinish();
          });
        }
        NoOpAnimationPlayer.prototype._onFinish = function () {
          this._onDoneFns.forEach(function (fn) {
            return fn();
          });
          this._onDoneFns = [];
        };
        NoOpAnimationPlayer.prototype.onStart = function (fn) {
          this._onStartFns.push(fn);
        };
        NoOpAnimationPlayer.prototype.onDone = function (fn) {
          this._onDoneFns.push(fn);
        };
        NoOpAnimationPlayer.prototype.hasStarted = function () {
          return this._started;
        };
        NoOpAnimationPlayer.prototype.init = function () {};
        NoOpAnimationPlayer.prototype.play = function () {
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });
            this._onStartFns = [];
          }
          this._started = true;
        };
        NoOpAnimationPlayer.prototype.pause = function () {};
        NoOpAnimationPlayer.prototype.restart = function () {};
        NoOpAnimationPlayer.prototype.finish = function () {
          this._onFinish();
        };
        NoOpAnimationPlayer.prototype.destroy = function () {};
        NoOpAnimationPlayer.prototype.reset = function () {};
        NoOpAnimationPlayer.prototype.setPosition = function (p) {};
        NoOpAnimationPlayer.prototype.getPosition = function () {
          return 0;
        };
        return NoOpAnimationPlayer;
      }();
      var AnimationSequencePlayer = function () {
        function AnimationSequencePlayer(_players) {
          var _this = this;
          this._players = _players;
          this._currentIndex = 0;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.parentPlayer = null;
          this._players.forEach(function (player) {
            player.parentPlayer = _this;
          });
          this._onNext(false);
        }
        AnimationSequencePlayer.prototype._onNext = function (start) {
          var _this = this;
          if (this._finished) return;
          if (this._players.length == 0) {
            this._activePlayer = new NoOpAnimationPlayer();
            scheduleMicroTask(function () {
              return _this._onFinish();
            });
          } else if (this._currentIndex >= this._players.length) {
            this._activePlayer = new NoOpAnimationPlayer();
            this._onFinish();
          } else {
            var player = this._players[this._currentIndex++];
            player.onDone(function () {
              return _this._onNext(true);
            });
            this._activePlayer = player;
            if (start) {
              player.play();
            }
          }
        };
        AnimationSequencePlayer.prototype._onFinish = function () {
          if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        AnimationSequencePlayer.prototype.init = function () {
          this._players.forEach(function (player) {
            return player.init();
          });
        };
        AnimationSequencePlayer.prototype.onStart = function (fn) {
          this._onStartFns.push(fn);
        };
        AnimationSequencePlayer.prototype.onDone = function (fn) {
          this._onDoneFns.push(fn);
        };
        AnimationSequencePlayer.prototype.hasStarted = function () {
          return this._started;
        };
        AnimationSequencePlayer.prototype.play = function () {
          if (!isPresent(this.parentPlayer)) {
            this.init();
          }
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._activePlayer.play();
        };
        AnimationSequencePlayer.prototype.pause = function () {
          this._activePlayer.pause();
        };
        AnimationSequencePlayer.prototype.restart = function () {
          this.reset();
          if (this._players.length > 0) {
            this._players[0].restart();
          }
        };
        AnimationSequencePlayer.prototype.reset = function () {
          this._players.forEach(function (player) {
            return player.reset();
          });
          this._destroyed = false;
          this._finished = false;
          this._started = false;
        };
        AnimationSequencePlayer.prototype.finish = function () {
          this._onFinish();
          this._players.forEach(function (player) {
            return player.finish();
          });
        };
        AnimationSequencePlayer.prototype.destroy = function () {
          if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) {
              return player.destroy();
            });
            this._destroyed = true;
            this._activePlayer = new NoOpAnimationPlayer();
          }
        };
        AnimationSequencePlayer.prototype.setPosition = function (p) {
          this._players[0].setPosition(p);
        };
        AnimationSequencePlayer.prototype.getPosition = function () {
          return this._players[0].getPosition();
        };
        Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
          get: function () {
            return this._players;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationSequencePlayer;
      }();
      var __extends$13 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var AUTO_STYLE = '*';
      var AnimationEntryMetadata = function () {
        function AnimationEntryMetadata(name, definitions) {
          this.name = name;
          this.definitions = definitions;
        }
        return AnimationEntryMetadata;
      }();
      var AnimationStateMetadata = function () {
        function AnimationStateMetadata() {}
        return AnimationStateMetadata;
      }();
      var AnimationStateDeclarationMetadata = function (_super) {
        __extends$13(AnimationStateDeclarationMetadata, _super);
        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this);
          this.stateNameExpr = stateNameExpr;
          this.styles = styles;
        }
        return AnimationStateDeclarationMetadata;
      }(AnimationStateMetadata);
      var AnimationStateTransitionMetadata = function (_super) {
        __extends$13(AnimationStateTransitionMetadata, _super);
        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this);
          this.stateChangeExpr = stateChangeExpr;
          this.steps = steps;
        }
        return AnimationStateTransitionMetadata;
      }(AnimationStateMetadata);
      var AnimationMetadata = function () {
        function AnimationMetadata() {}
        return AnimationMetadata;
      }();
      var AnimationKeyframesSequenceMetadata = function (_super) {
        __extends$13(AnimationKeyframesSequenceMetadata, _super);
        function AnimationKeyframesSequenceMetadata(steps) {
          _super.call(this);
          this.steps = steps;
        }
        return AnimationKeyframesSequenceMetadata;
      }(AnimationMetadata);
      var AnimationStyleMetadata = function (_super) {
        __extends$13(AnimationStyleMetadata, _super);
        function AnimationStyleMetadata(styles, offset) {
          if (offset === void 0) {
            offset = null;
          }
          _super.call(this);
          this.styles = styles;
          this.offset = offset;
        }
        return AnimationStyleMetadata;
      }(AnimationMetadata);
      var AnimationAnimateMetadata = function (_super) {
        __extends$13(AnimationAnimateMetadata, _super);
        function AnimationAnimateMetadata(timings, styles) {
          _super.call(this);
          this.timings = timings;
          this.styles = styles;
        }
        return AnimationAnimateMetadata;
      }(AnimationMetadata);
      var AnimationWithStepsMetadata = function (_super) {
        __extends$13(AnimationWithStepsMetadata, _super);
        function AnimationWithStepsMetadata() {
          _super.call(this);
        }
        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
          get: function () {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          enumerable: true,
          configurable: true
        });
        return AnimationWithStepsMetadata;
      }(AnimationMetadata);
      var AnimationSequenceMetadata = function (_super) {
        __extends$13(AnimationSequenceMetadata, _super);
        function AnimationSequenceMetadata(_steps) {
          _super.call(this);
          this._steps = _steps;
        }
        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
          get: function () {
            return this._steps;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationSequenceMetadata;
      }(AnimationWithStepsMetadata);
      var AnimationGroupMetadata = function (_super) {
        __extends$13(AnimationGroupMetadata, _super);
        function AnimationGroupMetadata(_steps) {
          _super.call(this);
          this._steps = _steps;
        }
        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
          get: function () {
            return this._steps;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationGroupMetadata;
      }(AnimationWithStepsMetadata);
      function animate(timing, styles) {
        if (styles === void 0) {
          styles = null;
        }
        var stylesEntry = styles;
        if (!isPresent(stylesEntry)) {
          var EMPTY_STYLE = {};
          stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
        }
        return new AnimationAnimateMetadata(timing, stylesEntry);
      }
      function group(steps) {
        return new AnimationGroupMetadata(steps);
      }
      function sequence(steps) {
        return new AnimationSequenceMetadata(steps);
      }
      function style(tokens) {
        var input;
        var offset = null;
        if (typeof tokens === 'string') {
          input = [tokens];
        } else {
          if (Array.isArray(tokens)) {
            input = tokens;
          } else {
            input = [tokens];
          }
          input.forEach(function (entry) {
            var entryOffset = entry['offset'];
            if (isPresent(entryOffset)) {
              offset = offset == null ? parseFloat(entryOffset) : offset;
            }
          });
        }
        return new AnimationStyleMetadata(input, offset);
      }
      function state(stateNameExpr, styles) {
        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
      }
      function keyframes(steps) {
        return new AnimationKeyframesSequenceMetadata(steps);
      }
      function transition(stateChangeExpr, steps) {
        var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
      }
      function trigger(name, animation) {
        return new AnimationEntryMetadata(name, animation);
      }
      function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
        if (nullValue === void 0) {
          nullValue = null;
        }
        var finalStyles = {};
        Object.keys(newStyles).forEach(function (prop) {
          var value = newStyles[prop];
          finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
        });
        Object.keys(previousStyles).forEach(function (prop) {
          if (!isPresent(finalStyles[prop])) {
            finalStyles[prop] = nullValue;
          }
        });
        return finalStyles;
      }
      function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
        var limit = keyframes.length - 1;
        var firstKeyframe = keyframes[0];
        var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
        var extraFirstKeyframeStyles = {};
        var hasExtraFirstStyles = false;
        Object.keys(collectedStyles).forEach(function (prop) {
          var value = collectedStyles[prop];
          if (!flatenedFirstKeyframeStyles[prop]) {
            flatenedFirstKeyframeStyles[prop] = value;
            extraFirstKeyframeStyles[prop] = value;
            hasExtraFirstStyles = true;
          }
        });
        var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
        var finalKeyframe = keyframes[limit];
        finalKeyframe.styles.styles.unshift(finalStateStyles);
        var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
        var extraFinalKeyframeStyles = {};
        var hasExtraFinalStyles = false;
        Object.keys(keyframeCollectedStyles).forEach(function (prop) {
          if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
            extraFinalKeyframeStyles[prop] = AUTO_STYLE;
            hasExtraFinalStyles = true;
          }
        });
        if (hasExtraFinalStyles) {
          finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
        }
        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
          if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
            extraFirstKeyframeStyles[prop] = AUTO_STYLE;
            hasExtraFirstStyles = true;
          }
        });
        if (hasExtraFirstStyles) {
          firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
        }
        collectAndResolveStyles(collectedStyles, [finalStateStyles]);
        return keyframes;
      }
      function clearStyles(styles) {
        var finalStyles = {};
        Object.keys(styles).forEach(function (key) {
          finalStyles[key] = null;
        });
        return finalStyles;
      }
      function collectAndResolveStyles(collection, styles) {
        return styles.map(function (entry) {
          var stylesObj = {};
          Object.keys(entry).forEach(function (prop) {
            var value = entry[prop];
            if (value == FILL_STYLE_FLAG) {
              value = collection[prop];
              if (!isPresent(value)) {
                value = AUTO_STYLE;
              }
            }
            collection[prop] = value;
            stylesObj[prop] = value;
          });
          return stylesObj;
        });
      }
      function renderStyles(element, renderer, styles) {
        Object.keys(styles).forEach(function (prop) {
          renderer.setElementStyle(element, prop, styles[prop]);
        });
      }
      function flattenStyles(styles) {
        var finalStyles = {};
        styles.forEach(function (entry) {
          Object.keys(entry).forEach(function (prop) {
            finalStyles[prop] = entry[prop];
          });
        });
        return finalStyles;
      }
      var AnimationStyles = function () {
        function AnimationStyles(styles) {
          this.styles = styles;
        }
        return AnimationStyles;
      }();
      var AnimationTransitionEvent = function () {
        function AnimationTransitionEvent(_a) {
          var fromState = _a.fromState,
              toState = _a.toState,
              totalTime = _a.totalTime,
              phaseName = _a.phaseName;
          this.fromState = fromState;
          this.toState = toState;
          this.totalTime = totalTime;
          this.phaseName = phaseName;
        }
        return AnimationTransitionEvent;
      }();
      var AnimationTransition = function () {
        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
          this._player = _player;
          this._fromState = _fromState;
          this._toState = _toState;
          this._totalTime = _totalTime;
        }
        AnimationTransition.prototype._createEvent = function (phaseName) {
          return new AnimationTransitionEvent({
            fromState: this._fromState,
            toState: this._toState,
            totalTime: this._totalTime,
            phaseName: phaseName
          });
        };
        AnimationTransition.prototype.onStart = function (callback) {
          var event = this._createEvent('start');
          this._player.onStart(function () {
            return callback(event);
          });
        };
        AnimationTransition.prototype.onDone = function (callback) {
          var event = this._createEvent('done');
          this._player.onDone(function () {
            return callback(event);
          });
        };
        return AnimationTransition;
      }();
      var DebugDomRootRenderer = function () {
        function DebugDomRootRenderer(_delegate) {
          this._delegate = _delegate;
        }
        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
          return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
        };
        return DebugDomRootRenderer;
      }();
      var DebugDomRenderer = function () {
        function DebugDomRenderer(_delegate) {
          this._delegate = _delegate;
        }
        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
          var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
          var debugEl = new DebugElement(nativeEl, null, debugInfo);
          indexDebugNode(debugEl);
          return nativeEl;
        };
        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
          var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
          var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
          debugEl.name = name;
          indexDebugNode(debugEl);
          return nativeEl;
        };
        DebugDomRenderer.prototype.createViewRoot = function (hostElement) {
          return this._delegate.createViewRoot(hostElement);
        };
        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
          var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
          var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
          indexDebugNode(debugEl);
          return comment;
        };
        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
          var text = this._delegate.createText(parentElement, value, debugInfo);
          var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
          indexDebugNode(debugEl);
          return text;
        };
        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
          var debugParent = getDebugNode(parentElement);
          if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var debugElement_1 = debugParent;
            nodes.forEach(function (node) {
              debugElement_1.addChild(getDebugNode(node));
            });
          }
          this._delegate.projectNodes(parentElement, nodes);
        };
        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
          var debugNode = getDebugNode(node);
          if (isPresent(debugNode)) {
            var debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
              var debugViewRootNodes_1 = [];
              viewRootNodes.forEach(function (rootNode) {
                return debugViewRootNodes_1.push(getDebugNode(rootNode));
              });
              debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
            }
          }
          this._delegate.attachViewAfter(node, viewRootNodes);
        };
        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
          viewRootNodes.forEach(function (node) {
            var debugNode = getDebugNode(node);
            if (isPresent(debugNode) && isPresent(debugNode.parent)) {
              debugNode.parent.removeChild(debugNode);
            }
          });
          this._delegate.detachView(viewRootNodes);
        };
        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
          viewAllNodes = viewAllNodes || [];
          viewAllNodes.forEach(function (node) {
            removeDebugNodeFromIndex(getDebugNode(node));
          });
          this._delegate.destroyView(hostElement, viewAllNodes);
        };
        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl)) {
            debugEl.listeners.push(new EventListener(name, callback));
          }
          return this._delegate.listen(renderElement, name, callback);
        };
        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
          return this._delegate.listenGlobal(target, name, callback);
        };
        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.properties[propertyName] = propertyValue;
          }
          this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.attributes[attributeName] = attributeValue;
          }
          this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
        };
        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
          this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.classes[className] = isAdd;
          }
          this._delegate.setElementClass(renderElement, className, isAdd);
        };
        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.styles[styleName] = styleValue;
          }
          this._delegate.setElementStyle(renderElement, styleName, styleValue);
        };
        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
          this._delegate.invokeElementMethod(renderElement, methodName, args);
        };
        DebugDomRenderer.prototype.setText = function (renderNode, text) {
          this._delegate.setText(renderNode, text);
        };
        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
          if (previousPlayers === void 0) {
            previousPlayers = [];
          }
          return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
        };
        return DebugDomRenderer;
      }();
      var ViewType;
      (function (ViewType) {
        ViewType[ViewType["HOST"] = 0] = "HOST";
        ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
        ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
      })(ViewType || (ViewType = {}));
      var StaticNodeDebugInfo = function () {
        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
          this.providerTokens = providerTokens;
          this.componentToken = componentToken;
          this.refTokens = refTokens;
        }
        return StaticNodeDebugInfo;
      }();
      var DebugContext = function () {
        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
          this._view = _view;
          this._nodeIndex = _nodeIndex;
          this._tplRow = _tplRow;
          this._tplCol = _tplCol;
        }
        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
          get: function () {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "context", {
          get: function () {
            return this._view.context;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "component", {
          get: function () {
            var staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
              return this.injector.get(staticNodeInfo.componentToken);
            }
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
          get: function () {
            var componentView = this._view;
            while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
              componentView = componentView.parentView;
            }
            return componentView.parentElement;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "injector", {
          get: function () {
            return this._view.injector(this._nodeIndex);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "renderNode", {
          get: function () {
            if (isPresent(this._nodeIndex) && this._view.allNodes) {
              return this._view.allNodes[this._nodeIndex];
            } else {
              return null;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "providerTokens", {
          get: function () {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "source", {
          get: function () {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "references", {
          get: function () {
            var _this = this;
            var varValues = {};
            var staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
              var refs_1 = staticNodeInfo.refTokens;
              Object.keys(refs_1).forEach(function (refName) {
                var refToken = refs_1[refName];
                var varValue;
                if (isBlank(refToken)) {
                  varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
                } else {
                  varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                }
                varValues[refName] = varValue;
              });
            }
            return varValues;
          },
          enumerable: true,
          configurable: true
        });
        return DebugContext;
      }();
      var ViewAnimationMap = function () {
        function ViewAnimationMap() {
          this._map = new Map();
          this._allPlayers = [];
        }
        ViewAnimationMap.prototype.find = function (element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation)) {
            return playersByAnimation[animationName];
          }
        };
        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
          var el = this._map.get(element);
          return el ? Object.keys(el).map(function (k) {
            return el[k];
          }) : [];
        };
        ViewAnimationMap.prototype.set = function (element, animationName, player) {
          var playersByAnimation = this._map.get(element);
          if (!isPresent(playersByAnimation)) {
            playersByAnimation = {};
          }
          var existingEntry = playersByAnimation[animationName];
          if (isPresent(existingEntry)) {
            this.remove(element, animationName);
          }
          playersByAnimation[animationName] = player;
          this._allPlayers.push(player);
          this._map.set(element, playersByAnimation);
        };
        ViewAnimationMap.prototype.getAllPlayers = function () {
          return this._allPlayers;
        };
        ViewAnimationMap.prototype.remove = function (element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (playersByAnimation) {
            var player = playersByAnimation[animationName];
            delete playersByAnimation[animationName];
            var index = this._allPlayers.indexOf(player);
            this._allPlayers.splice(index, 1);
            if (Object.keys(playersByAnimation).length === 0) {
              this._map.delete(element);
            }
          }
        };
        return ViewAnimationMap;
      }();
      var AnimationViewContext = function () {
        function AnimationViewContext() {
          this._players = new ViewAnimationMap();
        }
        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
          var activeAnimationPlayers = this._players.getAllPlayers();
          if (activeAnimationPlayers.length) {
            new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () {
              return callback();
            });
          } else {
            callback();
          }
        };
        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
          queueAnimationGlobally(player);
          this._players.set(element, animationName, player);
        };
        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName, removeAllAnimations) {
          if (removeAllAnimations === void 0) {
            removeAllAnimations = false;
          }
          var players = [];
          if (removeAllAnimations) {
            this._players.findAllPlayersByElement(element).forEach(function (player) {
              _recursePlayers(player, players);
            });
          } else {
            var currentPlayer = this._players.find(element, animationName);
            if (currentPlayer) {
              _recursePlayers(currentPlayer, players);
            }
          }
          return players;
        };
        return AnimationViewContext;
      }();
      function _recursePlayers(player, collectedPlayers) {
        if (player instanceof AnimationGroupPlayer || player instanceof AnimationSequencePlayer) {
          player.players.forEach(function (player) {
            return _recursePlayers(player, collectedPlayers);
          });
        } else {
          collectedPlayers.push(player);
        }
      }
      var __extends$15 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var ElementInjector = function (_super) {
        __extends$15(ElementInjector, _super);
        function ElementInjector(_view, _nodeIndex) {
          _super.call(this);
          this._view = _view;
          this._nodeIndex = _nodeIndex;
        }
        ElementInjector.prototype.get = function (token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
        };
        return ElementInjector;
      }(Injector);
      var __extends$14 = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      var _scope_check = wtfCreateScope("AppView#check(ascii id)");
      var EMPTY_CONTEXT$1 = new Object();
      var UNDEFINED$1 = new Object();
      var AppView = function () {
        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
          if (declaredViewContainer === void 0) {
            declaredViewContainer = null;
          }
          this.clazz = clazz;
          this.componentType = componentType;
          this.type = type;
          this.viewUtils = viewUtils;
          this.parentView = parentView;
          this.parentIndex = parentIndex;
          this.parentElement = parentElement;
          this.cdMode = cdMode;
          this.declaredViewContainer = declaredViewContainer;
          this.viewContainer = null;
          this.numberOfChecks = 0;
          this.ref = new ViewRef_(this);
          if (type === ViewType.COMPONENT || type === ViewType.HOST) {
            this.renderer = viewUtils.renderComponent(componentType);
          } else {
            this.renderer = parentView.renderer;
          }
          this._directRenderer = this.renderer.directRenderer;
        }
        Object.defineProperty(AppView.prototype, "animationContext", {
          get: function () {
            if (!this._animationContext) {
              this._animationContext = new AnimationViewContext();
            }
            return this._animationContext;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "destroyed", {
          get: function () {
            return this.cdMode === ChangeDetectorStatus.Destroyed;
          },
          enumerable: true,
          configurable: true
        });
        AppView.prototype.create = function (context) {
          this.context = context;
          return this.createInternal(null);
        };
        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
          this.context = EMPTY_CONTEXT$1;
          this._hasExternalHostElement = isPresent(rootSelectorOrNode);
          this._hostInjector = hostInjector;
          this._hostProjectableNodes = projectableNodes;
          return this.createInternal(rootSelectorOrNode);
        };
        AppView.prototype.createInternal = function (rootSelectorOrNode) {
          return null;
        };
        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) {
          return null;
        };
        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
          this.lastRootNode = lastRootNode;
          this.allNodes = allNodes;
          this.disposables = disposables;
          if (this.type === ViewType.COMPONENT) {
            this.dirtyParentQueriesInternal();
          }
        };
        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          var result = UNDEFINED$1;
          var view = this;
          while (result === UNDEFINED$1) {
            if (isPresent(nodeIndex)) {
              result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
            }
            if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
              result = view._hostInjector.get(token, notFoundValue);
            }
            nodeIndex = view.parentIndex;
            view = view.parentView;
          }
          return result;
        };
        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
          return notFoundResult;
        };
        AppView.prototype.injector = function (nodeIndex) {
          return new ElementInjector(this, nodeIndex);
        };
        AppView.prototype.detachAndDestroy = function () {
          if (this._hasExternalHostElement) {
            this.detach();
          } else if (isPresent(this.viewContainer)) {
            this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
          }
          this.destroy();
        };
        AppView.prototype.destroy = function () {
          var _this = this;
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            return;
          }
          var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
          if (this.disposables) {
            for (var i = 0; i < this.disposables.length; i++) {
              this.disposables[i]();
            }
          }
          this.destroyInternal();
          this.dirtyParentQueriesInternal();
          if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () {
              return _this.renderer.destroyView(hostElement, _this.allNodes);
            });
          } else {
            this.renderer.destroyView(hostElement, this.allNodes);
          }
          this.cdMode = ChangeDetectorStatus.Destroyed;
        };
        AppView.prototype.destroyInternal = function () {};
        AppView.prototype.detachInternal = function () {};
        AppView.prototype.detach = function () {
          var _this = this;
          this.detachInternal();
          if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () {
              return _this._renderDetach();
            });
          } else {
            this._renderDetach();
          }
          if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer) {
            var projectedViews = this.declaredViewContainer.projectedViews;
            var index = projectedViews.indexOf(this);
            if (index >= projectedViews.length - 1) {
              projectedViews.pop();
            } else {
              projectedViews.splice(index, 1);
            }
          }
          this.viewContainer = null;
          this.dirtyParentQueriesInternal();
        };
        AppView.prototype._renderDetach = function () {
          if (this._directRenderer) {
            this.visitRootNodesInternal(this._directRenderer.remove, null);
          } else {
            this.renderer.detachView(this.flatRootNodes);
          }
        };
        AppView.prototype.attachAfter = function (viewContainer, prevView) {
          this._renderAttach(viewContainer, prevView);
          this.viewContainer = viewContainer;
          if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
            if (!this.declaredViewContainer.projectedViews) {
              this.declaredViewContainer.projectedViews = [];
            }
            this.declaredViewContainer.projectedViews.push(this);
          }
          this.dirtyParentQueriesInternal();
        };
        AppView.prototype.moveAfter = function (viewContainer, prevView) {
          this._renderAttach(viewContainer, prevView);
          this.dirtyParentQueriesInternal();
        };
        AppView.prototype._renderAttach = function (viewContainer, prevView) {
          var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
          if (this._directRenderer) {
            var nextSibling = this._directRenderer.nextSibling(prevNode);
            if (nextSibling) {
              this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
            } else {
              var parentElement = this._directRenderer.parentElement(prevNode);
              if (parentElement) {
                this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
              }
            }
          } else {
            this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
          }
        };
        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
          get: function () {
            return this.ref;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "flatRootNodes", {
          get: function () {
            var nodes = [];
            this.visitRootNodesInternal(addToArray, nodes);
            return nodes;
          },
          enumerable: true,
          configurable: true
        });
        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
          if (this._directRenderer) {
            this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
          } else {
            var nodes = [];
            this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
            this.renderer.projectNodes(parentElement, nodes);
          }
        };
        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
          switch (this.type) {
            case ViewType.EMBEDDED:
              this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
              break;
            case ViewType.COMPONENT:
              if (this.parentView.type === ViewType.HOST) {
                var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
                for (var i = 0; i < nodes.length; i++) {
                  cb(nodes[i], c);
                }
              } else {
                this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
              }
              break;
          }
        };
        AppView.prototype.visitRootNodesInternal = function (cb, c) {};
        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) {};
        AppView.prototype.dirtyParentQueriesInternal = function () {};
        AppView.prototype.detectChanges = function (throwOnChange) {
          var s = _scope_check(this.clazz);
          if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored || this.cdMode === ChangeDetectorStatus.Detached) return;
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            this.throwDestroyedError('detectChanges');
          }
          this.detectChangesInternal(throwOnChange);
          if (this.cdMode === ChangeDetectorStatus.CheckOnce) this.cdMode = ChangeDetectorStatus.Checked;
          this.numberOfChecks++;
          wtfLeave(s);
        };
        AppView.prototype.detectChangesInternal = function (throwOnChange) {};
        AppView.prototype.markAsCheckOnce = function () {
          this.cdMode = ChangeDetectorStatus.CheckOnce;
        };
        AppView.prototype.markPathToRootAsCheckOnce = function () {
          var c = this;
          while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
            if (c.cdMode === ChangeDetectorStatus.Checked) {
              c.cdMode = ChangeDetectorStatus.CheckOnce;
            }
            if (c.type === ViewType.COMPONENT) {
              c = c.parentView;
            } else {
              c = c.viewContainer ? c.viewContainer.parentView : null;
            }
          }
        };
        AppView.prototype.eventHandler = function (cb) {
          return cb;
        };
        AppView.prototype.throwDestroyedError = function (details) {
          throw new ViewDestroyedError(details);
        };
        return AppView;
      }();
      var DebugAppView = function (_super) {
        __extends$14(DebugAppView, _super);
        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
          if (declaredViewContainer === void 0) {
            declaredViewContainer = null;
          }
          _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
          this.staticNodeDebugInfos = staticNodeDebugInfos;
          this._currentDebugContext = null;
        }
        DebugAppView.prototype.create = function (context) {
          this._resetDebug();
          try {
            return _super.prototype.create.call(this, context);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
          if (projectableNodes === void 0) {
            projectableNodes = null;
          }
          this._resetDebug();
          try {
            return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
          this._resetDebug();
          try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.detach = function () {
          this._resetDebug();
          try {
            _super.prototype.detach.call(this);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.destroy = function () {
          this._resetDebug();
          try {
            _super.prototype.destroy.call(this);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.detectChanges = function (throwOnChange) {
          this._resetDebug();
          try {
            _super.prototype.detectChanges.call(this, throwOnChange);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype._resetDebug = function () {
          this._currentDebugContext = null;
        };
        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
          return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
        };
        DebugAppView.prototype._rethrowWithContext = function (e) {
          if (!(e instanceof ViewWrappedError)) {
            if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
              this.cdMode = ChangeDetectorStatus.Errored;
            }
            if (isPresent(this._currentDebugContext)) {
              throw new ViewWrappedError(e, this._currentDebugContext);
            }
          }
        };
        DebugAppView.prototype.eventHandler = function (cb) {
          var _this = this;
          var superHandler = _super.prototype.eventHandler.call(this, cb);
          return function (eventName, event) {
            _this._resetDebug();
            try {
              return superHandler.call(_this, eventName, event);
            } catch (e) {
              _this._rethrowWithContext(e);
              throw e;
            }
          };
        };
        return DebugAppView;
      }(AppView);
      var ViewContainer = function () {
        function ViewContainer(index, parentIndex, parentView, nativeElement) {
          this.index = index;
          this.parentIndex = parentIndex;
          this.parentView = parentView;
          this.nativeElement = nativeElement;
        }
        Object.defineProperty(ViewContainer.prototype, "elementRef", {
          get: function () {
            return new ElementRef(this.nativeElement);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainer.prototype, "vcRef", {
          get: function () {
            return new ViewContainerRef_(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainer.prototype, "parentInjector", {
          get: function () {
            return this.parentView.injector(this.parentIndex);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainer.prototype, "injector", {
          get: function () {
            return this.parentView.injector(this.index);
          },
          enumerable: true,
          configurable: true
        });
        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
          if (this.nestedViews) {
            for (var i = 0; i < this.nestedViews.length; i++) {
              this.nestedViews[i].detectChanges(throwOnChange);
            }
          }
        };
        ViewContainer.prototype.destroyNestedViews = function () {
          if (this.nestedViews) {
            for (var i = 0; i < this.nestedViews.length; i++) {
              this.nestedViews[i].destroy();
            }
          }
        };
        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
          if (this.nestedViews) {
            for (var i = 0; i < this.nestedViews.length; i++) {
              this.nestedViews[i].visitRootNodesInternal(cb, c);
            }
          }
        };
        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
          var result = [];
          if (this.nestedViews) {
            for (var i = 0; i < this.nestedViews.length; i++) {
              var nestedView = this.nestedViews[i];
              if (nestedView.clazz === nestedViewClass) {
                result.push(callback(nestedView));
              }
            }
          }
          if (this.projectedViews) {
            for (var i = 0; i < this.projectedViews.length; i++) {
              var projectedView = this.projectedViews[i];
              if (projectedView.clazz === nestedViewClass) {
                result.push(callback(projectedView));
              }
            }
          }
          return result;
        };
        ViewContainer.prototype.moveView = function (view, currentIndex) {
          var previousIndex = this.nestedViews.indexOf(view);
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          var nestedViews = this.nestedViews;
          if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
          }
          nestedViews.splice(previousIndex, 1);
          nestedViews.splice(currentIndex, 0, view);
          var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
          view.moveAfter(this, prevView);
        };
        ViewContainer.prototype.attachView = function (view, viewIndex) {
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          var nestedViews = this.nestedViews;
          if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
          }
          if (viewIndex >= nestedViews.length) {
            nestedViews.push(view);
          } else {
            nestedViews.splice(viewIndex, 0, view);
          }
          var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
          view.attachAfter(this, prevView);
        };
        ViewContainer.prototype.detachView = function (viewIndex) {
          var view = this.nestedViews[viewIndex];
          if (viewIndex >= this.nestedViews.length - 1) {
            this.nestedViews.pop();
          } else {
            this.nestedViews.splice(viewIndex, 1);
          }
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          view.detach();
          return view;
        };
        return ViewContainer;
      }();
      var __core_private__ = {
        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
        ChangeDetectorStatus: ChangeDetectorStatus,
        constructDependencies: constructDependencies,
        LifecycleHooks: LifecycleHooks,
        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
        ReflectorReader: ReflectorReader,
        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
        ComponentRef_: ComponentRef_,
        ViewContainer: ViewContainer,
        AppView: AppView,
        DebugAppView: DebugAppView,
        NgModuleInjector: NgModuleInjector,
        registerModuleFactory: registerModuleFactory,
        ViewType: ViewType,
        view_utils: view_utils,
        ViewMetadata: ViewMetadata,
        DebugContext: DebugContext,
        StaticNodeDebugInfo: StaticNodeDebugInfo,
        devModeEqual: devModeEqual,
        UNINITIALIZED: UNINITIALIZED,
        ValueUnwrapper: ValueUnwrapper,
        RenderDebugInfo: RenderDebugInfo,
        TemplateRef_: TemplateRef_,
        ReflectionCapabilities: ReflectionCapabilities,
        makeDecorator: makeDecorator,
        DebugDomRootRenderer: DebugDomRootRenderer,
        Console: Console,
        reflector: reflector,
        Reflector: Reflector,
        NoOpAnimationPlayer: NoOpAnimationPlayer,
        AnimationPlayer: AnimationPlayer,
        AnimationSequencePlayer: AnimationSequencePlayer,
        AnimationGroupPlayer: AnimationGroupPlayer,
        AnimationKeyframe: AnimationKeyframe,
        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
        balanceAnimationKeyframes: balanceAnimationKeyframes,
        flattenStyles: flattenStyles,
        clearStyles: clearStyles,
        renderStyles: renderStyles,
        collectAndResolveStyles: collectAndResolveStyles,
        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
        AnimationStyles: AnimationStyles,
        ANY_STATE: ANY_STATE,
        DEFAULT_STATE: DEFAULT_STATE,
        EMPTY_STATE: EMPTY_STATE,
        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
        ComponentStillLoadingError: ComponentStillLoadingError,
        isPromise: isPromise,
        AnimationTransition: AnimationTransition
      };
      exports.createPlatform = createPlatform;
      exports.assertPlatform = assertPlatform;
      exports.destroyPlatform = destroyPlatform;
      exports.getPlatform = getPlatform;
      exports.PlatformRef = PlatformRef;
      exports.ApplicationRef = ApplicationRef;
      exports.enableProdMode = enableProdMode;
      exports.isDevMode = isDevMode;
      exports.createPlatformFactory = createPlatformFactory;
      exports.APP_ID = APP_ID;
      exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
      exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
      exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
      exports.APP_INITIALIZER = APP_INITIALIZER;
      exports.ApplicationInitStatus = ApplicationInitStatus;
      exports.DebugElement = DebugElement;
      exports.DebugNode = DebugNode;
      exports.asNativeElements = asNativeElements;
      exports.getDebugNode = getDebugNode;
      exports.Testability = Testability;
      exports.TestabilityRegistry = TestabilityRegistry;
      exports.setTestabilityGetter = setTestabilityGetter;
      exports.TRANSLATIONS = TRANSLATIONS;
      exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
      exports.LOCALE_ID = LOCALE_ID;
      exports.ApplicationModule = ApplicationModule;
      exports.wtfCreateScope = wtfCreateScope;
      exports.wtfLeave = wtfLeave;
      exports.wtfStartTimeRange = wtfStartTimeRange;
      exports.wtfEndTimeRange = wtfEndTimeRange;
      exports.Type = Type;
      exports.EventEmitter = EventEmitter;
      exports.ErrorHandler = ErrorHandler;
      exports.AnimationTransitionEvent = AnimationTransitionEvent;
      exports.AnimationPlayer = AnimationPlayer;
      exports.Sanitizer = Sanitizer;
      exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
      exports.Attribute = Attribute;
      exports.ContentChild = ContentChild;
      exports.ContentChildren = ContentChildren;
      exports.Query = Query;
      exports.ViewChild = ViewChild;
      exports.ViewChildren = ViewChildren;
      exports.Component = Component;
      exports.Directive = Directive;
      exports.HostBinding = HostBinding;
      exports.HostListener = HostListener;
      exports.Input = Input;
      exports.Output = Output;
      exports.Pipe = Pipe;
      exports.AfterContentChecked = AfterContentChecked;
      exports.AfterContentInit = AfterContentInit;
      exports.AfterViewChecked = AfterViewChecked;
      exports.AfterViewInit = AfterViewInit;
      exports.DoCheck = DoCheck;
      exports.OnChanges = OnChanges;
      exports.OnDestroy = OnDestroy;
      exports.OnInit = OnInit;
      exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
      exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
      exports.NgModule = NgModule;
      exports.Class = Class;
      exports.forwardRef = forwardRef;
      exports.resolveForwardRef = resolveForwardRef;
      exports.Injector = Injector;
      exports.ReflectiveInjector = ReflectiveInjector;
      exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
      exports.ReflectiveKey = ReflectiveKey;
      exports.OpaqueToken = OpaqueToken;
      exports.Inject = Inject;
      exports.Optional = Optional;
      exports.Injectable = Injectable;
      exports.Self = Self;
      exports.SkipSelf = SkipSelf;
      exports.Host = Host;
      exports.NgZone = NgZone;
      exports.RenderComponentType = RenderComponentType;
      exports.Renderer = Renderer;
      exports.RootRenderer = RootRenderer;
      exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
      exports.Compiler = Compiler;
      exports.CompilerFactory = CompilerFactory;
      exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
      exports.ComponentFactory = ComponentFactory;
      exports.ComponentRef = ComponentRef;
      exports.ComponentFactoryResolver = ComponentFactoryResolver;
      exports.ElementRef = ElementRef;
      exports.NgModuleFactory = NgModuleFactory;
      exports.NgModuleRef = NgModuleRef;
      exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
      exports.getModuleFactory = getModuleFactory;
      exports.QueryList = QueryList;
      exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
      exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
      exports.TemplateRef = TemplateRef;
      exports.ViewContainerRef = ViewContainerRef;
      exports.EmbeddedViewRef = EmbeddedViewRef;
      exports.ViewRef = ViewRef;
      exports.ChangeDetectorRef = ChangeDetectorRef;
      exports.CollectionChangeRecord = CollectionChangeRecord;
      exports.DefaultIterableDiffer = DefaultIterableDiffer;
      exports.IterableDiffers = IterableDiffers;
      exports.KeyValueChangeRecord = KeyValueChangeRecord;
      exports.KeyValueDiffers = KeyValueDiffers;
      exports.SimpleChange = SimpleChange;
      exports.WrappedValue = WrappedValue;
      exports.platformCore = platformCore;
      exports.__core_private__ = __core_private__;
      exports.AUTO_STYLE = AUTO_STYLE;
      exports.AnimationEntryMetadata = AnimationEntryMetadata;
      exports.AnimationStateMetadata = AnimationStateMetadata;
      exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
      exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
      exports.AnimationMetadata = AnimationMetadata;
      exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
      exports.AnimationStyleMetadata = AnimationStyleMetadata;
      exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
      exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
      exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
      exports.AnimationGroupMetadata = AnimationGroupMetadata;
      exports.animate = animate;
      exports.group = group;
      exports.sequence = sequence;
      exports.style = style;
      exports.state = state;
      exports.keyframes = keyframes;
      exports.transition = transition;
      exports.trigger = trigger;
    });
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("8", ["63"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("63");
  return module.exports;
});
$__System.register("44", ["37", "8", "38"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var http_1, core_1, UserService, _a;
    return {
        setters: [
            function (http_1_1) {
                http_1 = http_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (_1) {
            }
        ],
        execute: function () {
            UserService = (function () {
                function UserService(_http) {
                    this._http = _http;
                    this.BASE_URL = "http://jsonplaceholder.typicode.com/users";
                }
                UserService.prototype.list = function () {
                    return this._http.get("" + this.BASE_URL)
                        .map(function (result) { return result.json(); });
                };
                UserService.prototype.get = function (userId) {
                    return this._http.get(this.BASE_URL + "/" + userId)
                        .map(function (result) { return result.json(); });
                };
                return UserService;
            }());
            UserService = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
            ], UserService);
            exports_1("UserService", UserService);
        }
    };
});

$__System.registerDynamic("64", [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * Abstract class to provide utility methods for action creators
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var Actions = function () {
        function Actions(appStore) {
            this.appStore = null;
            this.appStore = appStore;
        }
        Actions.prototype.createDispatcher = function (action) {
            var _this = this;
            return function () {
                var n = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    n[_i - 0] = arguments[_i];
                }
                return _this.appStore.dispatch(action.call.apply(action, [_this].concat(n)));
            };
        };
        return Actions;
    }();
    exports.Actions = Actions;
    return module.exports;
});
$__System.registerDynamic('5b', ['20'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  function map(project, thisArg) {
    if (typeof project !== 'function') {
      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
  }
  exports.map = map;
  var MapOperator = function () {
    function MapOperator(project, thisArg) {
      this.project = project;
      this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
  }();
  exports.MapOperator = MapOperator;
  var MapSubscriber = function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
      _super.call(this, destination);
      this.project = project;
      this.count = 0;
      this.thisArg = thisArg || this;
    }
    MapSubscriber.prototype._next = function (value) {
      var result;
      try {
        result = this.project.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return MapSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('38', ['11', '5b'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var map_1 = $__require('5b');
  Observable_1.Observable.prototype.map = map_1.map;
  return module.exports;
});
$__System.registerDynamic('65', ['20', '66', '67'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  var tryCatch_1 = $__require('66');
  var errorObject_1 = $__require('67');
  function distinctUntilChanged(compare, keySelector) {
    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
  }
  exports.distinctUntilChanged = distinctUntilChanged;
  var DistinctUntilChangedOperator = function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
      this.compare = compare;
      this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
  }();
  var DistinctUntilChangedSubscriber = function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
      _super.call(this, destination);
      this.keySelector = keySelector;
      this.hasKey = false;
      if (typeof compare === 'function') {
        this.compare = compare;
      }
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
      return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
      var keySelector = this.keySelector;
      var key = value;
      if (keySelector) {
        key = tryCatch_1.tryCatch(this.keySelector)(value);
        if (key === errorObject_1.errorObject) {
          return this.destination.error(errorObject_1.errorObject.e);
        }
      }
      var result = false;
      if (this.hasKey) {
        result = tryCatch_1.tryCatch(this.compare)(this.key, key);
        if (result === errorObject_1.errorObject) {
          return this.destination.error(errorObject_1.errorObject.e);
        }
      } else {
        this.hasKey = true;
      }
      if (Boolean(result) === false) {
        this.key = key;
        this.destination.next(value);
      }
    };
    return DistinctUntilChangedSubscriber;
  }(Subscriber_1.Subscriber);
  return module.exports;
});
$__System.registerDynamic('68', ['11', '65'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var distinctUntilChanged_1 = $__require('65');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
  return module.exports;
});
$__System.registerDynamic('56', [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
$__System.registerDynamic('53', ['e', '11'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('e');
  var Observable_1 = $__require('11');
  var PromiseObservable = function (_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
      _super.call(this);
      this.promise = promise;
      this.scheduler = scheduler;
    }
    PromiseObservable.create = function (promise, scheduler) {
      return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function (subscriber) {
      var _this = this;
      var promise = this.promise;
      var scheduler = this.scheduler;
      if (scheduler == null) {
        if (this._isScalar) {
          if (!subscriber.closed) {
            subscriber.next(this.value);
            subscriber.complete();
          }
        } else {
          promise.then(function (value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.closed) {
              subscriber.next(value);
              subscriber.complete();
            }
          }, function (err) {
            if (!subscriber.closed) {
              subscriber.error(err);
            }
          }).then(null, function (err) {
            root_1.root.setTimeout(function () {
              throw err;
            });
          });
        }
      } else {
        if (this._isScalar) {
          if (!subscriber.closed) {
            return scheduler.schedule(dispatchNext, 0, {
              value: this.value,
              subscriber: subscriber
            });
          }
        } else {
          promise.then(function (value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.closed) {
              subscriber.add(scheduler.schedule(dispatchNext, 0, {
                value: value,
                subscriber: subscriber
              }));
            }
          }, function (err) {
            if (!subscriber.closed) {
              subscriber.add(scheduler.schedule(dispatchError, 0, {
                err: err,
                subscriber: subscriber
              }));
            }
          }).then(null, function (err) {
            root_1.root.setTimeout(function () {
              throw err;
            });
          });
        }
      }
    };
    return PromiseObservable;
  }(Observable_1.Observable);
  exports.PromiseObservable = PromiseObservable;
  function dispatchNext(arg) {
    var value = arg.value,
        subscriber = arg.subscriber;
    if (!subscriber.closed) {
      subscriber.next(value);
      subscriber.complete();
    }
  }
  function dispatchError(arg) {
    var err = arg.err,
        subscriber = arg.subscriber;
    if (!subscriber.closed) {
      subscriber.error(err);
    }
  }
  return module.exports;
});
$__System.registerDynamic('69', ['e', '11', '57'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('e');
  var Observable_1 = $__require('11');
  var iterator_1 = $__require('57');
  var IteratorObservable = function (_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, scheduler) {
      _super.call(this);
      this.scheduler = scheduler;
      if (iterator == null) {
        throw new Error('iterator cannot be null.');
      }
      this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function (iterator, scheduler) {
      return new IteratorObservable(iterator, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
      var index = state.index,
          hasError = state.hasError,
          iterator = state.iterator,
          subscriber = state.subscriber;
      if (hasError) {
        subscriber.error(state.error);
        return;
      }
      var result = iterator.next();
      if (result.done) {
        subscriber.complete();
        return;
      }
      subscriber.next(result.value);
      state.index = index + 1;
      if (subscriber.closed) {
        return;
      }
      this.schedule(state);
    };
    IteratorObservable.prototype._subscribe = function (subscriber) {
      var index = 0;
      var _a = this,
          iterator = _a.iterator,
          scheduler = _a.scheduler;
      if (scheduler) {
        return scheduler.schedule(IteratorObservable.dispatch, 0, {
          index: index,
          iterator: iterator,
          subscriber: subscriber
        });
      } else {
        do {
          var result = iterator.next();
          if (result.done) {
            subscriber.complete();
            break;
          } else {
            subscriber.next(result.value);
          }
          if (subscriber.closed) {
            break;
          }
        } while (true);
      }
    };
    return IteratorObservable;
  }(Observable_1.Observable);
  exports.IteratorObservable = IteratorObservable;
  var StringIterator = function () {
    function StringIterator(str, idx, len) {
      if (idx === void 0) {
        idx = 0;
      }
      if (len === void 0) {
        len = str.length;
      }
      this.str = str;
      this.idx = idx;
      this.len = len;
    }
    StringIterator.prototype[iterator_1.$$iterator] = function () {
      return this;
    };
    StringIterator.prototype.next = function () {
      return this.idx < this.len ? {
        done: false,
        value: this.str.charAt(this.idx++)
      } : {
        done: true,
        value: undefined
      };
    };
    return StringIterator;
  }();
  var ArrayIterator = function () {
    function ArrayIterator(arr, idx, len) {
      if (idx === void 0) {
        idx = 0;
      }
      if (len === void 0) {
        len = toLength(arr);
      }
      this.arr = arr;
      this.idx = idx;
      this.len = len;
    }
    ArrayIterator.prototype[iterator_1.$$iterator] = function () {
      return this;
    };
    ArrayIterator.prototype.next = function () {
      return this.idx < this.len ? {
        done: false,
        value: this.arr[this.idx++]
      } : {
        done: true,
        value: undefined
      };
    };
    return ArrayIterator;
  }();
  function getIterator(obj) {
    var i = obj[iterator_1.$$iterator];
    if (!i && typeof obj === 'string') {
      return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
      return new ArrayIterator(obj);
    }
    if (!i) {
      throw new TypeError('object is not iterable');
    }
    return obj[iterator_1.$$iterator]();
  }
  var maxSafeInteger = Math.pow(2, 53) - 1;
  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
      return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
      return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
      return 0;
    }
    if (len > maxSafeInteger) {
      return maxSafeInteger;
    }
    return len;
  }
  function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
  }
  function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
      return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
      return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
  }
  return module.exports;
});
$__System.registerDynamic("6a", [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
$__System.registerDynamic('4a', ['11', '6b', '15', '6a'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('11');
  var ScalarObservable_1 = $__require('6b');
  var EmptyObservable_1 = $__require('15');
  var isScheduler_1 = $__require('6a');
  var ArrayObservable = function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
      _super.call(this);
      this.array = array;
      this.scheduler = scheduler;
      if (!scheduler && array.length === 1) {
        this._isScalar = true;
        this.value = array[0];
      }
    }
    ArrayObservable.create = function (array, scheduler) {
      return new ArrayObservable(array, scheduler);
    };
    ArrayObservable.of = function () {
      var array = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
      }
      var scheduler = array[array.length - 1];
      if (isScheduler_1.isScheduler(scheduler)) {
        array.pop();
      } else {
        scheduler = null;
      }
      var len = array.length;
      if (len > 1) {
        return new ArrayObservable(array, scheduler);
      } else if (len === 1) {
        return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
      } else {
        return new EmptyObservable_1.EmptyObservable(scheduler);
      }
    };
    ArrayObservable.dispatch = function (state) {
      var array = state.array,
          index = state.index,
          count = state.count,
          subscriber = state.subscriber;
      if (index >= count) {
        subscriber.complete();
        return;
      }
      subscriber.next(array[index]);
      if (subscriber.closed) {
        return;
      }
      state.index = index + 1;
      this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
      var index = 0;
      var array = this.array;
      var count = array.length;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(ArrayObservable.dispatch, 0, {
          array: array,
          index: index,
          count: count,
          subscriber: subscriber
        });
      } else {
        for (var i = 0; i < count && !subscriber.closed; i++) {
          subscriber.next(array[i]);
        }
        subscriber.complete();
      }
    };
    return ArrayObservable;
  }(Observable_1.Observable);
  exports.ArrayObservable = ArrayObservable;
  return module.exports;
});
$__System.registerDynamic("6b", ["11"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require("11");
  var ScalarObservable = function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
      _super.call(this);
      this.value = value;
      this.scheduler = scheduler;
      this._isScalar = true;
      if (scheduler) {
        this._isScalar = false;
      }
    }
    ScalarObservable.create = function (value, scheduler) {
      return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
      var done = state.done,
          value = state.value,
          subscriber = state.subscriber;
      if (done) {
        subscriber.complete();
        return;
      }
      subscriber.next(value);
      if (subscriber.closed) {
        return;
      }
      state.done = true;
      this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
      var value = this.value;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(ScalarObservable.dispatch, 0, {
          done: false,
          value: value,
          subscriber: subscriber
        });
      } else {
        subscriber.next(value);
        if (!subscriber.closed) {
          subscriber.complete();
        }
      }
    };
    return ScalarObservable;
  }(Observable_1.Observable);
  exports.ScalarObservable = ScalarObservable;
  return module.exports;
});
$__System.registerDynamic("15", ["11"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require("11");
  var EmptyObservable = function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
      _super.call(this);
      this.scheduler = scheduler;
    }
    EmptyObservable.create = function (scheduler) {
      return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
      var subscriber = arg.subscriber;
      subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
      } else {
        subscriber.complete();
      }
    };
    return EmptyObservable;
  }(Observable_1.Observable);
  exports.EmptyObservable = EmptyObservable;
  return module.exports;
});
$__System.registerDynamic('6c', ['11', '6b', '15'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('11');
  var ScalarObservable_1 = $__require('6b');
  var EmptyObservable_1 = $__require('15');
  var ArrayLikeObservable = function (_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
      _super.call(this);
      this.arrayLike = arrayLike;
      this.scheduler = scheduler;
      if (!scheduler && arrayLike.length === 1) {
        this._isScalar = true;
        this.value = arrayLike[0];
      }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
      var length = arrayLike.length;
      if (length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      } else if (length === 1) {
        return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
      } else {
        return new ArrayLikeObservable(arrayLike, scheduler);
      }
    };
    ArrayLikeObservable.dispatch = function (state) {
      var arrayLike = state.arrayLike,
          index = state.index,
          length = state.length,
          subscriber = state.subscriber;
      if (subscriber.closed) {
        return;
      }
      if (index >= length) {
        subscriber.complete();
        return;
      }
      subscriber.next(arrayLike[index]);
      state.index = index + 1;
      this.schedule(state);
    };
    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
      var index = 0;
      var _a = this,
          arrayLike = _a.arrayLike,
          scheduler = _a.scheduler;
      var length = arrayLike.length;
      if (scheduler) {
        return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
          arrayLike: arrayLike,
          index: index,
          length: length,
          subscriber: subscriber
        });
      } else {
        for (var i = 0; i < length && !subscriber.closed; i++) {
          subscriber.next(arrayLike[i]);
        }
        subscriber.complete();
      }
    };
    return ArrayLikeObservable;
  }(Observable_1.Observable);
  exports.ArrayLikeObservable = ArrayLikeObservable;
  return module.exports;
});
$__System.registerDynamic('57', ['e'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var Symbol = root_1.root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.iterator) {
      exports.$$iterator = Symbol.iterator;
    } else if (typeof Symbol.for === 'function') {
      exports.$$iterator = Symbol.for('iterator');
    }
  } else {
    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
      exports.$$iterator = '@@iterator';
    } else if (root_1.root.Map) {
      var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
          exports.$$iterator = key;
          break;
        }
      }
    } else {
      exports.$$iterator = '@@iterator';
    }
  }
  return module.exports;
});
$__System.registerDynamic("16", [], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
$__System.registerDynamic("6d", [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
$__System.registerDynamic("6e", [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
$__System.registerDynamic("66", ["67"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var errorObject_1 = $__require("67");
  var tryCatchTarget;
  function tryCatcher() {
    try {
      return tryCatchTarget.apply(this, arguments);
    } catch (e) {
      errorObject_1.errorObject.e = e;
      return errorObject_1.errorObject;
    }
  }
  function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
  }
  exports.tryCatch = tryCatch;
  ;
  return module.exports;
});
$__System.registerDynamic("67", [], true, function ($__require, exports, module) {
  /* */
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
$__System.registerDynamic("6f", [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
$__System.registerDynamic('24', ['16', '6d', '6e', '66', '67', '6f', '3'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  (function (process) {
    "use strict";

    var isArray_1 = $__require('16');
    var isObject_1 = $__require('6d');
    var isFunction_1 = $__require('6e');
    var tryCatch_1 = $__require('66');
    var errorObject_1 = $__require('67');
    var UnsubscriptionError_1 = $__require('6f');
    var Subscription = function () {
      function Subscription(unsubscribe) {
        this.closed = false;
        if (unsubscribe) {
          this._unsubscribe = unsubscribe;
        }
      }
      Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
          return;
        }
        this.closed = true;
        var _a = this,
            _unsubscribe = _a._unsubscribe,
            _subscriptions = _a._subscriptions;
        this._subscriptions = null;
        if (isFunction_1.isFunction(_unsubscribe)) {
          var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
          if (trial === errorObject_1.errorObject) {
            hasErrors = true;
            (errors = errors || []).push(errorObject_1.errorObject.e);
          }
        }
        if (isArray_1.isArray(_subscriptions)) {
          var index = -1;
          var len = _subscriptions.length;
          while (++index < len) {
            var sub = _subscriptions[index];
            if (isObject_1.isObject(sub)) {
              var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
              if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || [];
                var err = errorObject_1.errorObject.e;
                if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                  errors = errors.concat(err.errors);
                } else {
                  errors.push(err);
                }
              }
            }
          }
        }
        if (hasErrors) {
          throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
      };
      Subscription.prototype.add = function (teardown) {
        if (!teardown || teardown === Subscription.EMPTY) {
          return Subscription.EMPTY;
        }
        if (teardown === this) {
          return this;
        }
        var sub = teardown;
        switch (typeof teardown) {
          case 'function':
            sub = new Subscription(teardown);
          case 'object':
            if (sub.closed || typeof sub.unsubscribe !== 'function') {
              break;
            } else if (this.closed) {
              sub.unsubscribe();
            } else {
              (this._subscriptions || (this._subscriptions = [])).push(sub);
            }
            break;
          default:
            throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        return sub;
      };
      Subscription.prototype.remove = function (subscription) {
        if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
          return;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions) {
          var subscriptionIndex = subscriptions.indexOf(subscription);
          if (subscriptionIndex !== -1) {
            subscriptions.splice(subscriptionIndex, 1);
          }
        }
      };
      Subscription.EMPTY = function (empty) {
        empty.closed = true;
        return empty;
      }(new Subscription());
      return Subscription;
    }();
    exports.Subscription = Subscription;
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("70", [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
$__System.registerDynamic('20', ['6e', '24', '70', '62'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isFunction_1 = $__require('6e');
  var Subscription_1 = $__require('24');
  var Observer_1 = $__require('70');
  var rxSubscriber_1 = $__require('62');
  var Subscriber = function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
      _super.call(this);
      this.syncErrorValue = null;
      this.syncErrorThrown = false;
      this.syncErrorThrowable = false;
      this.isStopped = false;
      switch (arguments.length) {
        case 0:
          this.destination = Observer_1.empty;
          break;
        case 1:
          if (!destinationOrNext) {
            this.destination = Observer_1.empty;
            break;
          }
          if (typeof destinationOrNext === 'object') {
            if (destinationOrNext instanceof Subscriber) {
              this.destination = destinationOrNext;
              this.destination.add(this);
            } else {
              this.syncErrorThrowable = true;
              this.destination = new SafeSubscriber(this, destinationOrNext);
            }
            break;
          }
        default:
          this.syncErrorThrowable = true;
          this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
          break;
      }
    }
    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
      return this;
    };
    Subscriber.create = function (next, error, complete) {
      var subscriber = new Subscriber(next, error, complete);
      subscriber.syncErrorThrowable = false;
      return subscriber;
    };
    Subscriber.prototype.next = function (value) {
      if (!this.isStopped) {
        this._next(value);
      }
    };
    Subscriber.prototype.error = function (err) {
      if (!this.isStopped) {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber.prototype.complete = function () {
      if (!this.isStopped) {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber.prototype.unsubscribe = function () {
      if (this.closed) {
        return;
      }
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
      this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
      this.destination.error(err);
      this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
      this.destination.complete();
      this.unsubscribe();
    };
    return Subscriber;
  }(Subscription_1.Subscription);
  exports.Subscriber = Subscriber;
  var SafeSubscriber = function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parent, observerOrNext, error, complete) {
      _super.call(this);
      this._parent = _parent;
      var next;
      var context = this;
      if (isFunction_1.isFunction(observerOrNext)) {
        next = observerOrNext;
      } else if (observerOrNext) {
        context = observerOrNext;
        next = observerOrNext.next;
        error = observerOrNext.error;
        complete = observerOrNext.complete;
        if (isFunction_1.isFunction(context.unsubscribe)) {
          this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = this.unsubscribe.bind(this);
      }
      this._context = context;
      this._next = next;
      this._error = error;
      this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
      if (!this.isStopped && this._next) {
        var _parent = this._parent;
        if (!_parent.syncErrorThrowable) {
          this.__tryOrUnsub(this._next, value);
        } else if (this.__tryOrSetError(_parent, this._next, value)) {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.error = function (err) {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._error) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._error, err);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._error, err);
            this.unsubscribe();
          }
        } else if (!_parent.syncErrorThrowable) {
          this.unsubscribe();
          throw err;
        } else {
          _parent.syncErrorValue = err;
          _parent.syncErrorThrown = true;
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.complete = function () {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._complete) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._complete);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._complete);
            this.unsubscribe();
          }
        } else {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        this.unsubscribe();
        throw err;
      }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        parent.syncErrorValue = err;
        parent.syncErrorThrown = true;
        return true;
      }
      return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
      var _parent = this._parent;
      this._context = null;
      this._parent = null;
      _parent.unsubscribe();
    };
    return SafeSubscriber;
  }(Subscriber);
  return module.exports;
});
$__System.registerDynamic('62', ['e'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var Symbol = root_1.root.Symbol;
  exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
  return module.exports;
});
$__System.registerDynamic('71', ['20', '62'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Subscriber_1 = $__require('20');
  var rxSubscriber_1 = $__require('62');
  function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
      if (nextOrObserver instanceof Subscriber_1.Subscriber) {
        return nextOrObserver;
      }
      if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
        return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
      }
    }
    if (!nextOrObserver && !error && !complete) {
      return new Subscriber_1.Subscriber();
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
  }
  exports.toSubscriber = toSubscriber;
  return module.exports;
});
$__System.registerDynamic('11', ['e', '71', '58'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var toSubscriber_1 = $__require('71');
  var observable_1 = $__require('58');
  var Observable = function () {
    function Observable(subscribe) {
      this._isScalar = false;
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable.prototype.lift = function (operator) {
      var observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
      var operator = this.operator;
      var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
      if (operator) {
        operator.call(sink, this);
      } else {
        sink.add(this._subscribe(sink));
      }
      if (sink.syncErrorThrowable) {
        sink.syncErrorThrowable = false;
        if (sink.syncErrorThrown) {
          throw sink.syncErrorValue;
        }
      }
      return sink;
    };
    Observable.prototype.forEach = function (next, PromiseCtor) {
      var _this = this;
      if (!PromiseCtor) {
        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
          PromiseCtor = root_1.root.Rx.config.Promise;
        } else if (root_1.root.Promise) {
          PromiseCtor = root_1.root.Promise;
        }
      }
      if (!PromiseCtor) {
        throw new Error('no Promise impl found');
      }
      return new PromiseCtor(function (resolve, reject) {
        var subscription = _this.subscribe(function (value) {
          if (subscription) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscription.unsubscribe();
            }
          } else {
            next(value);
          }
        }, reject, resolve);
      });
    };
    Observable.prototype._subscribe = function (subscriber) {
      return this.source.subscribe(subscriber);
    };
    Observable.prototype[observable_1.$$observable] = function () {
      return this;
    };
    Observable.create = function (subscribe) {
      return new Observable(subscribe);
    };
    return Observable;
  }();
  exports.Observable = Observable;
  return module.exports;
});
$__System.registerDynamic('72', ['11'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var Notification = function () {
    function Notification(kind, value, exception) {
      this.kind = kind;
      this.value = value;
      this.exception = exception;
      this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
      switch (this.kind) {
        case 'N':
          return observer.next && observer.next(this.value);
        case 'E':
          return observer.error && observer.error(this.exception);
        case 'C':
          return observer.complete && observer.complete();
      }
    };
    Notification.prototype.do = function (next, error, complete) {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return next && next(this.value);
        case 'E':
          return error && error(this.exception);
        case 'C':
          return complete && complete();
      }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
      if (nextOrObserver && typeof nextOrObserver.next === 'function') {
        return this.observe(nextOrObserver);
      } else {
        return this.do(nextOrObserver, error, complete);
      }
    };
    Notification.prototype.toObservable = function () {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return Observable_1.Observable.of(this.value);
        case 'E':
          return Observable_1.Observable.throw(this.exception);
        case 'C':
          return Observable_1.Observable.empty();
      }
      throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
      if (typeof value !== 'undefined') {
        return new Notification('N', value);
      }
      return this.undefinedValueNotification;
    };
    Notification.createError = function (err) {
      return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
      return this.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
  }();
  exports.Notification = Notification;
  return module.exports;
});
$__System.registerDynamic('73', ['20', '72'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('20');
  var Notification_1 = $__require('72');
  function observeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this.lift(new ObserveOnOperator(scheduler, delay));
  }
  exports.observeOn = observeOn;
  var ObserveOnOperator = function () {
    function ObserveOnOperator(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      this.scheduler = scheduler;
      this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
      return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
  }();
  exports.ObserveOnOperator = ObserveOnOperator;
  var ObserveOnSubscriber = function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      _super.call(this, destination);
      this.scheduler = scheduler;
      this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
      var notification = arg.notification,
          destination = arg.destination;
      notification.observe(destination);
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
      this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
      this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
      this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
      this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
  }(Subscriber_1.Subscriber);
  exports.ObserveOnSubscriber = ObserveOnSubscriber;
  var ObserveOnMessage = function () {
    function ObserveOnMessage(notification, destination) {
      this.notification = notification;
      this.destination = destination;
    }
    return ObserveOnMessage;
  }();
  exports.ObserveOnMessage = ObserveOnMessage;
  return module.exports;
});
$__System.registerDynamic('e', [], true, function ($__require, exports, module) {
    /* */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    };
    exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        exports.root = freeGlobal;
    }
    

    return module.exports;
});
$__System.registerDynamic('58', ['e'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
      if (Symbol.observable) {
        $$observable = Symbol.observable;
      } else {
        $$observable = Symbol('observable');
        Symbol.observable = $$observable;
      }
    } else {
      $$observable = '@@observable';
    }
    return $$observable;
  }
  exports.getSymbolObservable = getSymbolObservable;
  exports.$$observable = getSymbolObservable(root_1.root);
  return module.exports;
});
$__System.registerDynamic('74', ['16', '56', '53', '69', '4a', '6c', '57', '11', '73', '58'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isArray_1 = $__require('16');
  var isPromise_1 = $__require('56');
  var PromiseObservable_1 = $__require('53');
  var IteratorObservable_1 = $__require('69');
  var ArrayObservable_1 = $__require('4a');
  var ArrayLikeObservable_1 = $__require('6c');
  var iterator_1 = $__require('57');
  var Observable_1 = $__require('11');
  var observeOn_1 = $__require('73');
  var observable_1 = $__require('58');
  var isArrayLike = function (x) {
    return x && typeof x.length === 'number';
  };
  var FromObservable = function (_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
      _super.call(this, null);
      this.ish = ish;
      this.scheduler = scheduler;
    }
    FromObservable.create = function (ish, scheduler) {
      if (ish != null) {
        if (typeof ish[observable_1.$$observable] === 'function') {
          if (ish instanceof Observable_1.Observable && !scheduler) {
            return ish;
          }
          return new FromObservable(ish, scheduler);
        } else if (isArray_1.isArray(ish)) {
          return new ArrayObservable_1.ArrayObservable(ish, scheduler);
        } else if (isPromise_1.isPromise(ish)) {
          return new PromiseObservable_1.PromiseObservable(ish, scheduler);
        } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
          return new IteratorObservable_1.IteratorObservable(ish, scheduler);
        } else if (isArrayLike(ish)) {
          return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
        }
      }
      throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    FromObservable.prototype._subscribe = function (subscriber) {
      var ish = this.ish;
      var scheduler = this.scheduler;
      if (scheduler == null) {
        return ish[observable_1.$$observable]().subscribe(subscriber);
      } else {
        return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
      }
    };
    return FromObservable;
  }(Observable_1.Observable);
  exports.FromObservable = FromObservable;
  return module.exports;
});
$__System.registerDynamic("5a", ["74"], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("74");
  exports.from = FromObservable_1.FromObservable.create;
  return module.exports;
});
$__System.registerDynamic('75', ['11', '5a'], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('11');
  var from_1 = $__require('5a');
  Observable_1.Observable.from = from_1.from;
  return module.exports;
});
$__System.registerDynamic("76", ["11", "38", "68", "75"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require("11");
    // ensure required operators are enabled
    $__require("38");
    $__require("68");
    $__require("75");
    /**
     * Wrapper for app store
     */
    var AppStore = function () {
        function AppStore(store) {
            this.store$ = Observable_1.Observable.from(store);
            this.getState = function () {
                return store.getState();
            };
            this.subscribe = function (subscriber) {
                // decorate the subscriber with the state passed in as a parameter
                return store.subscribe(function () {
                    return subscriber(store.getState());
                });
            };
            this.dispatch = function (action) {
                return store.dispatch(action);
            };
            this.createDispatcher = function (actionCreator, context) {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    return store.dispatch(actionCreator.call.apply(actionCreator, [context].concat(args)));
                };
            };
        }
        AppStore.prototype.select = function (keyOrSelector) {
            if (typeof keyOrSelector === "string" || typeof keyOrSelector === "number" || typeof keyOrSelector === "symbol") {
                return this.store$.map(function (state) {
                    return state[keyOrSelector];
                }).distinctUntilChanged();
            } else if (typeof keyOrSelector === "function") {
                return this.store$.map(keyOrSelector).distinctUntilChanged();
            } else {
                throw new TypeError("Unknown Parameter Type: " + ("Expected type of function or valid key type, got " + typeof keyOrSelector));
            }
        };
        return AppStore;
    }();
    exports.AppStore = AppStore;
    return module.exports;
});
$__System.registerDynamic('77', [], true, function ($__require, exports, module) {
	/* */
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};
	return module.exports;
});
$__System.registerDynamic('78', ['77'], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var _ponyfill = $__require('77');
  var _ponyfill2 = _interopRequireDefault(_ponyfill);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }
  var root;
  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }
  var result = (0, _ponyfill2['default'])(root);
  exports['default'] = result;
  return module.exports;
});
$__System.registerDynamic('79', ['78'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  module.exports = $__require('78');
  return module.exports;
});
$__System.registerDynamic("7a", ["79"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("79");
  return module.exports;
});
$__System.registerDynamic('7b', ['7c', '7a'], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  exports.ActionTypes = undefined;
  exports['default'] = createStore;

  var _isPlainObject = $__require('7c');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _symbolObservable = $__require('7a');

  var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  /**
   * These are private action types reserved by Redux.
   * For any unknown actions, you must return the current state.
   * If the current state is undefined, you must return the initial state.
   * Do not reference these action types directly in your code.
   */
  var ActionTypes = exports.ActionTypes = {
    INIT: '@@redux/INIT'
  };

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} enhancer The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */
  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }

    if (typeof enhancer !== 'undefined') {
      if (typeof enhancer !== 'function') {
        throw new Error('Expected the enhancer to be a function.');
      }

      return enhancer(createStore)(reducer, preloadedState);
    }

    if (typeof reducer !== 'function') {
      throw new Error('Expected the reducer to be a function.');
    }

    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }

    /**
     * Reads the state tree managed by the store.
     *
     * @returns {any} The current state tree of your application.
     */
    function getState() {
      return currentState;
    }

    /**
     * Adds a change listener. It will be called any time an action is dispatched,
     * and some part of the state tree may potentially have changed. You may then
     * call `getState()` to read the current state tree inside the callback.
     *
     * You may call `dispatch()` from a change listener, with the following
     * caveats:
     *
     * 1. The subscriptions are snapshotted just before every `dispatch()` call.
     * If you subscribe or unsubscribe while the listeners are being invoked, this
     * will not have any effect on the `dispatch()` that is currently in progress.
     * However, the next `dispatch()` call, whether nested or not, will use a more
     * recent snapshot of the subscription list.
     *
     * 2. The listener should not expect to see all state changes, as the state
     * might have been updated multiple times during a nested `dispatch()` before
     * the listener is called. It is, however, guaranteed that all subscribers
     * registered before the `dispatch()` started will be called with the latest
     * state by the time it exits.
     *
     * @param {Function} listener A callback to be invoked on every dispatch.
     * @returns {Function} A function to remove this change listener.
     */
    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Expected listener to be a function.');
      }

      var isSubscribed = true;

      ensureCanMutateNextListeners();
      nextListeners.push(listener);

      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }

        isSubscribed = false;

        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
      };
    }

    /**
     * Dispatches an action. It is the only way to trigger a state change.
     *
     * The `reducer` function, used to create the store, will be called with the
     * current state tree and the given `action`. Its return value will
     * be considered the **next** state of the tree, and the change listeners
     * will be notified.
     *
     * The base implementation only supports plain object actions. If you want to
     * dispatch a Promise, an Observable, a thunk, or something else, you need to
     * wrap your store creating function into the corresponding middleware. For
     * example, see the documentation for the `redux-thunk` package. Even the
     * middleware will eventually dispatch plain object actions using this method.
     *
     * @param {Object} action A plain object representing “what changed”. It is
     * a good idea to keep actions serializable so you can record and replay user
     * sessions, or use the time travelling `redux-devtools`. An action must have
     * a `type` property which may not be `undefined`. It is a good idea to use
     * string constants for action types.
     *
     * @returns {Object} For convenience, the same action object you dispatched.
     *
     * Note that, if you use a custom middleware, it may wrap `dispatch()` to
     * return something else (for example, a Promise you can await).
     */
    function dispatch(action) {
      if (!(0, _isPlainObject2['default'])(action)) {
        throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
      }

      if (typeof action.type === 'undefined') {
        throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
      }

      if (isDispatching) {
        throw new Error('Reducers may not dispatch actions.');
      }

      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }

      var listeners = currentListeners = nextListeners;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }

      return action;
    }

    /**
     * Replaces the reducer currently used by the store to calculate the state.
     *
     * You might need this if your app implements code splitting and you want to
     * load some of the reducers dynamically. You might also need this if you
     * implement a hot reloading mechanism for Redux.
     *
     * @param {Function} nextReducer The reducer for the store to use instead.
     * @returns {void}
     */
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== 'function') {
        throw new Error('Expected the nextReducer to be a function.');
      }

      currentReducer = nextReducer;
      dispatch({ type: ActionTypes.INIT });
    }

    /**
     * Interoperability point for observable/reactive libraries.
     * @returns {observable} A minimal observable of state changes.
     * For more information, see the observable proposal:
     * https://github.com/zenparsing/es-observable
     */
    function observable() {
      var _ref;

      var outerSubscribe = subscribe;
      return _ref = {
        /**
         * The minimal observable subscription method.
         * @param {Object} observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns {subscription} An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe: function subscribe(observer) {
          if (typeof observer !== 'object') {
            throw new TypeError('Expected the observer to be an object.');
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return { unsubscribe: unsubscribe };
        }
      }, _ref[_symbolObservable2['default']] = function () {
        return this;
      }, _ref;
    }

    // When a store is created, an "INIT" action is dispatched so that every
    // reducer returns their initial state. This effectively populates
    // the initial state tree.
    dispatch({ type: ActionTypes.INIT });

    return _ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: replaceReducer
    }, _ref2[_symbolObservable2['default']] = observable, _ref2;
  }
  return module.exports;
});
$__System.registerDynamic('7d', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  module.exports = freeGlobal;
  return module.exports;
});
$__System.registerDynamic('7e', ['7d'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var freeGlobal = $__require('7d');
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
  return module.exports;
});
$__System.registerDynamic('7f', ['7e'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var root = $__require('7e');
  var Symbol = root.Symbol;
  module.exports = Symbol;
  return module.exports;
});
$__System.registerDynamic('80', ['7f'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var Symbol = $__require('7f');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];
    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  module.exports = getRawTag;
  return module.exports;
});
$__System.registerDynamic("81", [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
  return module.exports;
});
$__System.registerDynamic('82', ['7f', '80', '81'], true, function ($__require, exports, module) {
    var define,
        global = this || self,
        GLOBAL = global;
    /* */
    var Symbol = $__require('7f'),
        getRawTag = $__require('80'),
        objectToString = $__require('81');
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }
        value = Object(value);
        return symToStringTag && symToStringTag in value ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
    return module.exports;
});
$__System.registerDynamic("83", [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
  return module.exports;
});
$__System.registerDynamic('84', ['83'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var overArg = $__require('83');
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
  return module.exports;
});
$__System.registerDynamic('85', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
  return module.exports;
});
$__System.registerDynamic('7c', ['82', '84', '85'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  var baseGetTag = $__require('82'),
      getPrototype = $__require('84'),
      isObjectLike = $__require('85');
  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  module.exports = isPlainObject;
  return module.exports;
});
$__System.registerDynamic('86', ['7b', '7c', '87', '3'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  (function (process) {
    'use strict';

    exports.__esModule = true;
    exports['default'] = combineReducers;
    var _createStore = $__require('7b');
    var _isPlainObject = $__require('7c');
    var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
    var _warning = $__require('87');
    var _warning2 = _interopRequireDefault(_warning);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { 'default': obj };
    }
    function getUndefinedStateErrorMessage(key, action) {
      var actionType = action && action.type;
      var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
      return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
    }
    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
      var reducerKeys = Object.keys(reducers);
      var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
      if (reducerKeys.length === 0) {
        return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
      }
      if (!(0, _isPlainObject2['default'])(inputState)) {
        return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
      }
      var unexpectedKeys = Object.keys(inputState).filter(function (key) {
        return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
      });
      unexpectedKeys.forEach(function (key) {
        unexpectedKeyCache[key] = true;
      });
      if (unexpectedKeys.length > 0) {
        return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
      }
    }
    function assertReducerSanity(reducers) {
      Object.keys(reducers).forEach(function (key) {
        var reducer = reducers[key];
        var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
        if (typeof initialState === 'undefined') {
          throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
        }
        var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
        if (typeof reducer(undefined, { type: type }) === 'undefined') {
          throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
        }
      });
    }
    function combineReducers(reducers) {
      var reducerKeys = Object.keys(reducers);
      var finalReducers = {};
      for (var i = 0; i < reducerKeys.length; i++) {
        var key = reducerKeys[i];
        if ('production' !== 'production') {
          if (typeof reducers[key] === 'undefined') {
            (0, _warning2['default'])('No reducer provided for key "' + key + '"');
          }
        }
        if (typeof reducers[key] === 'function') {
          finalReducers[key] = reducers[key];
        }
      }
      var finalReducerKeys = Object.keys(finalReducers);
      if ('production' !== 'production') {
        var unexpectedKeyCache = {};
      }
      var sanityError;
      try {
        assertReducerSanity(finalReducers);
      } catch (e) {
        sanityError = e;
      }
      return function combination() {
        var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var action = arguments[1];
        if (sanityError) {
          throw sanityError;
        }
        if ('production' !== 'production') {
          var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
          if (warningMessage) {
            (0, _warning2['default'])(warningMessage);
          }
        }
        var hasChanged = false;
        var nextState = {};
        for (var i = 0; i < finalReducerKeys.length; i++) {
          var key = finalReducerKeys[i];
          var reducer = finalReducers[key];
          var previousStateForKey = state[key];
          var nextStateForKey = reducer(previousStateForKey, action);
          if (typeof nextStateForKey === 'undefined') {
            var errorMessage = getUndefinedStateErrorMessage(key, action);
            throw new Error(errorMessage);
          }
          nextState[key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        return hasChanged ? nextState : state;
      };
    }
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic('88', [], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  exports['default'] = bindActionCreators;
  function bindActionCreator(actionCreator, dispatch) {
    return function () {
      return dispatch(actionCreator.apply(undefined, arguments));
    };
  }

  /**
   * Turns an object whose values are action creators, into an object with the
   * same keys, but with every function wrapped into a `dispatch` call so they
   * may be invoked directly. This is just a convenience method, as you can call
   * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
   *
   * For convenience, you can also pass a single function as the first argument,
   * and get a function in return.
   *
   * @param {Function|Object} actionCreators An object whose values are action
   * creator functions. One handy way to obtain it is to use ES6 `import * as`
   * syntax. You may also pass a single function.
   *
   * @param {Function} dispatch The `dispatch` function available on your Redux
   * store.
   *
   * @returns {Function|Object} The object mimicking the original object, but with
   * every action creator wrapped into the `dispatch` call. If you passed a
   * function as `actionCreators`, the return value will also be a single
   * function.
   */
  function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') {
      return bindActionCreator(actionCreators, dispatch);
    }

    if (typeof actionCreators !== 'object' || actionCreators === null) {
      throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    }

    var keys = Object.keys(actionCreators);
    var boundActionCreators = {};
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var actionCreator = actionCreators[key];
      if (typeof actionCreator === 'function') {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
      }
    }
    return boundActionCreators;
  }
  return module.exports;
});
$__System.registerDynamic('89', ['8a'], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  exports['default'] = applyMiddleware;
  var _compose = $__require('8a');
  var _compose2 = _interopRequireDefault(_compose);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function (createStore) {
      return function (reducer, preloadedState, enhancer) {
        var store = createStore(reducer, preloadedState, enhancer);
        var _dispatch = store.dispatch;
        var chain = [];
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch(action) {
            return _dispatch(action);
          }
        };
        chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
        return _extends({}, store, { dispatch: _dispatch });
      };
    };
  }
  return module.exports;
});
$__System.registerDynamic("8a", [], true, function ($__require, exports, module) {
  /* */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  exports["default"] = compose;
  /**
   * Composes single-argument functions from right to left. The rightmost
   * function can take multiple arguments as it provides the signature for
   * the resulting composite function.
   *
   * @param {...Function} funcs The functions to compose.
   * @returns {Function} A function obtained by composing the argument functions
   * from right to left. For example, compose(f, g, h) is identical to doing
   * (...args) => f(g(h(...args))).
   */

  function compose() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
      return function (arg) {
        return arg;
      };
    }

    if (funcs.length === 1) {
      return funcs[0];
    }

    var last = funcs[funcs.length - 1];
    var rest = funcs.slice(0, -1);
    return function () {
      return rest.reduceRight(function (composed, f) {
        return f(composed);
      }, last.apply(undefined, arguments));
    };
  }
  return module.exports;
});
$__System.registerDynamic('87', [], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  exports['default'] = warning;
  /**
   * Prints a warning in the console if it exists.
   *
   * @param {String} message The warning message.
   * @returns {void}
   */
  function warning(message) {
    /* eslint-disable no-console */
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }
    /* eslint-enable no-console */
    try {
      // This error was thrown as a convenience so that if you enable
      // "break on all exceptions" in your console,
      // it would pause the execution at this line.
      throw new Error(message);
      /* eslint-disable no-empty */
    } catch (e) {}
    /* eslint-enable no-empty */
  }
  return module.exports;
});
$__System.registerDynamic('8b', [], true, function ($__require, exports, module) {
    var define,
        global = this || self,
        GLOBAL = global;
    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    })();
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch (e) {
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e) {
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
        return '/';
    };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
        return 0;
    };
    return module.exports;
});
$__System.registerDynamic("8c", ["8b"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("8b");
  return module.exports;
});
$__System.registerDynamic('8d', ['8c'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__System._nodeRequire ? process : $__require('8c');
  return module.exports;
});
$__System.registerDynamic("3", ["8d"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("8d");
  return module.exports;
});
$__System.registerDynamic('8e', ['7b', '86', '88', '89', '8a', '87', '3'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /* */
  (function (process) {
    'use strict';

    exports.__esModule = true;
    exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
    var _createStore = $__require('7b');
    var _createStore2 = _interopRequireDefault(_createStore);
    var _combineReducers = $__require('86');
    var _combineReducers2 = _interopRequireDefault(_combineReducers);
    var _bindActionCreators = $__require('88');
    var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
    var _applyMiddleware = $__require('89');
    var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
    var _compose = $__require('8a');
    var _compose2 = _interopRequireDefault(_compose);
    var _warning = $__require('87');
    var _warning2 = _interopRequireDefault(_warning);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { 'default': obj };
    }
    function isCrushed() {}
    if ('production' !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
      (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
    }
    exports.createStore = _createStore2['default'];
    exports.combineReducers = _combineReducers2['default'];
    exports.bindActionCreators = _bindActionCreators2['default'];
    exports.applyMiddleware = _applyMiddleware2['default'];
    exports.compose = _compose2['default'];
  })($__require('3'));
  return module.exports;
});
$__System.registerDynamic("8f", ["8e"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("8e");
  return module.exports;
});
$__System.registerDynamic('90', [], true, function ($__require, exports, module) {
  /* */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  exports.__esModule = true;
  function createThunkMiddleware(extraArgument) {
    return function (_ref) {
      var dispatch = _ref.dispatch;
      var getState = _ref.getState;
      return function (next) {
        return function (action) {
          if (typeof action === 'function') {
            return action(dispatch, getState, extraArgument);
          }

          return next(action);
        };
      };
    };
  }

  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;

  exports['default'] = thunk;
  return module.exports;
});
$__System.registerDynamic("91", ["90"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("90");
  return module.exports;
});
$__System.registerDynamic("92", ["76", "8f", "91"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var app_store_1 = $__require("76");
    var redux_1 = $__require("8f");
    var thunkMiddleware = $__require("91");
    /* tslint:disable */
    function applyDevTools(debug) {
        // default to window query param
        var isDebug = false;
        // allow overriding with a boolean or function
        if (debug == undefined) {
            isDebug = window && !!window.location.href.match(/[?&]debug=([^&]+)\b/);
        } else {
            if (debug instanceof Function) {
                isDebug = debug();
            } else {
                isDebug = debug;
            }
        }
        // config the dev tools extension is installed
        isDebug = isDebug && window && window["devToolsExtension"];
        // only apply is dev tools is installed
        return isDebug ? window["devToolsExtension"]() : function (f) {
            return f;
        };
    }
    exports.applyDevTools = applyDevTools;
    /* tslint:enable */
    /**
     * Factory for app store
     */
    function createAppStoreFactory(reducers, additionalMiddlewares) {
        return createAppStoreFactoryWithOptions({
            reducers: reducers,
            additionalMiddlewares: additionalMiddlewares
        });
    }
    exports.createAppStoreFactory = createAppStoreFactory;
    function createAppStoreFactoryWithOptions(_a) {
        var reducers = _a.reducers,
            _b = _a.additionalMiddlewares,
            additionalMiddlewares = _b === void 0 ? [] : _b,
            _c = _a.debug,
            debug = _c === void 0 ? undefined : _c;
        return function () {
            // Figure out reducers
            var reducersToUse = reducers;
            if (typeof reducersToUse === "object") {
                // it's not a single reducer so we need to combine the reducers on the object properties
                reducersToUse = redux_1.combineReducers(reducersToUse);
            }
            var thunkMiddlewareToUse = thunkMiddleware;
            // Fix for import issues
            if (thunkMiddlewareToUse && thunkMiddlewareToUse["default"]) {
                thunkMiddlewareToUse = thunkMiddlewareToUse["default"];
            }
            var middlewareEnhancer = redux_1.applyMiddleware.apply(void 0, [thunkMiddlewareToUse].concat(additionalMiddlewares));
            var enhancers = redux_1.compose(middlewareEnhancer, applyDevTools(debug));
            var createStoreWithEnhancers = enhancers(redux_1.createStore);
            var reduxAppStore = createStoreWithEnhancers(reducersToUse);
            // const reduxAppStore = createStore(reducers, undefined, enhancers); // new API (not typed yet)
            return new app_store_1.AppStore(reduxAppStore);
        };
    }
    exports.createAppStoreFactoryWithOptions = createAppStoreFactoryWithOptions;
    ;
    return module.exports;
});
$__System.registerDynamic("93", ["76", "64", "92"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var app_store_1 = $__require("76");
  exports.AppStore = app_store_1.AppStore;
  var actions_1 = $__require("64");
  exports.Actions = actions_1.Actions;
  var app_store_factory_1 = $__require("92");
  exports.createAppStoreFactory = app_store_factory_1.createAppStoreFactory;
  exports.createAppStoreFactoryWithOptions = app_store_factory_1.createAppStoreFactoryWithOptions;
  return module.exports;
});
$__System.registerDynamic("43", ["93"], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require("93");
  return module.exports;
});
$__System.register("45", ["8", "38", "44", "43"], function (exports_1, context_1) {
    "use strict";
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, user_service_1, angular2_redux_1, REQUEST_USERS, RECEIVE_USERS, CURRENT_USER, UserActions, _a, _b;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (_1) {
            },
            function (user_service_1_1) {
                user_service_1 = user_service_1_1;
            },
            function (angular2_redux_1_1) {
                angular2_redux_1 = angular2_redux_1_1;
            }
        ],
        execute: function () {
            exports_1("REQUEST_USERS", REQUEST_USERS = 'REQUEST_USERS');
            exports_1("RECEIVE_USERS", RECEIVE_USERS = 'RECEIVE_USERS');
            exports_1("CURRENT_USER", CURRENT_USER = 'CURRENT_USER');
            UserActions = (function (_super) {
                __extends(UserActions, _super);
                function UserActions(appStore, userService) {
                    var _this = _super.call(this, appStore) || this;
                    _this.userService = userService;
                    return _this;
                }
                UserActions.prototype.fetchUsers = function () {
                    var _this = this;
                    return function (dispatch) {
                        dispatch(_this.requestUsers());
                        _this.userService.list()
                            .map(function (user) { return dispatch(_this.receiveUsers(user)); })
                            .subscribe();
                    };
                };
                UserActions.prototype.fetchUser = function (userId) {
                    var _this = this;
                    return function (dispatch) {
                        dispatch(_this.setCurrentUser(null));
                        _this.userService.get(userId)
                            .map(function (user) { return dispatch(_this.setCurrentUser(user)); })
                            .subscribe();
                    };
                };
                UserActions.prototype.requestUsers = function () { return { type: REQUEST_USERS }; };
                UserActions.prototype.receiveUsers = function (users) { return { type: RECEIVE_USERS, users: users }; };
                UserActions.prototype.setCurrentUser = function (current) { return { type: CURRENT_USER, current: current }; };
                return UserActions;
            }(angular2_redux_1.Actions));
            UserActions = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [typeof (_a = typeof angular2_redux_1.AppStore !== "undefined" && angular2_redux_1.AppStore) === "function" && _a || Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" && _b || Object])
            ], UserActions);
            exports_1("UserActions", UserActions);
        }
    };
});

$__System.register("46", ["45"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    function getUsers(state) { return state.users; }
    function getCurrentUser(state) { return state.current; }
    var UserActions;
    exports_1("getUsers", getUsers);
    exports_1("getCurrentUser", getCurrentUser);
    return {
        setters: [
            function (UserActions_1) {
                UserActions = UserActions_1;
            }
        ],
        execute: function () {
            exports_1("default", function (state, action) {
                if (state === void 0) { state = {}; }
                if (action === void 0) { action = {}; }
                switch (action.type) {
                    case UserActions.REQUEST_USERS:
                        return Object.assign({}, state, { isFetching: true });
                    case UserActions.RECEIVE_USERS:
                        return Object.assign({}, state, { isFetching: false, users: action.users });
                    case UserActions.CURRENT_USER:
                        return Object.assign({}, state, { current: action.current });
                    default:
                        return state;
                }
            });
        }
    };
});

$__System.register("94", ["8", "b", "3c", "37", "13", "3a", "3b", "42", "47", "3e", "5c", "3f", "41", "44", "5d", "45", "43", "46"], function (exports_1, context_1) {
    "use strict";
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var core_1, platform_browser_1, router_1, http_1, forms_1, material_1, app_component_1, users_list_component_1, users_list_with_details_component_1, user_view_1, user_component_1, label_with_value_view_1, angular2_simple_list_1, user_service_1, app_routes_1, user_actions_1, angular2_redux_1, users_reducer_1, appStoreFactory, AppModule;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (platform_browser_1_1) {
                platform_browser_1 = platform_browser_1_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
            },
            function (material_1_1) {
                material_1 = material_1_1;
            },
            function (app_component_1_1) {
                app_component_1 = app_component_1_1;
            },
            function (users_list_component_1_1) {
                users_list_component_1 = users_list_component_1_1;
            },
            function (users_list_with_details_component_1_1) {
                users_list_with_details_component_1 = users_list_with_details_component_1_1;
            },
            function (user_view_1_1) {
                user_view_1 = user_view_1_1;
            },
            function (user_component_1_1) {
                user_component_1 = user_component_1_1;
            },
            function (label_with_value_view_1_1) {
                label_with_value_view_1 = label_with_value_view_1_1;
            },
            function (angular2_simple_list_1_1) {
                angular2_simple_list_1 = angular2_simple_list_1_1;
            },
            function (user_service_1_1) {
                user_service_1 = user_service_1_1;
            },
            function (app_routes_1_1) {
                app_routes_1 = app_routes_1_1;
            },
            function (user_actions_1_1) {
                user_actions_1 = user_actions_1_1;
            },
            function (angular2_redux_1_1) {
                angular2_redux_1 = angular2_redux_1_1;
            },
            function (users_reducer_1_1) {
                users_reducer_1 = users_reducer_1_1;
            }
        ],
        execute: function () {
            appStoreFactory = angular2_redux_1.createAppStoreFactory(users_reducer_1.default);
            AppModule = (function () {
                function AppModule() {
                }
                return AppModule;
            }());
            AppModule = __decorate([
                core_1.NgModule({
                    imports: [
                        platform_browser_1.BrowserModule,
                        http_1.HttpModule,
                        forms_1.FormsModule,
                        material_1.MaterialModule.forRoot(),
                        router_1.RouterModule.forRoot(app_routes_1.appRoutes, { useHash: true })
                    ],
                    declarations: [app_component_1.AppComponent, users_list_component_1.UsersList, user_view_1.UserView, angular2_simple_list_1.SimpleList, users_list_with_details_component_1.UsersListWithDetails, user_component_1.UserComponent, label_with_value_view_1.LabelWithValue],
                    providers: [user_service_1.UserService, user_actions_1.UserActions, { provide: angular2_redux_1.AppStore, useFactory: appStoreFactory }],
                    bootstrap: [app_component_1.AppComponent]
                }),
                __metadata("design:paramtypes", [])
            ], AppModule);
            exports_1("AppModule", AppModule);
        }
    };
});

$__System.registerDynamic("95", [], false, function ($__require, $__exports, $__module) {
  var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

  (function ($__global) {})(this);

  return _retrieveGlobal();
});
$__System.register("1", ["4", "6", "c", "94", "95"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var platform_browser_dynamic_1, app_module_1;
    return {
        setters: [
            function (_1) {
            },
            function (_2) {
            },
            function (platform_browser_dynamic_1_1) {
                platform_browser_dynamic_1 = platform_browser_dynamic_1_1;
            },
            function (app_module_1_1) {
                app_module_1 = app_module_1_1;
            },
            function (_3) {
            }
        ],
        execute: function () {
            platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);
        }
    };
});

(function(c){if (typeof document == 'undefined') return; var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[a](d.createTextNode(c));})
(".md-elevation-z0{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.md-elevation-z1{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.md-elevation-z2{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.md-elevation-z3{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.md-elevation-z4{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.md-elevation-z5{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 5px 8px 0 rgba(0,0,0,.14),0 1px 14px 0 rgba(0,0,0,.12)}.md-elevation-z6{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.md-elevation-z7{box-shadow:0 4px 5px -2px rgba(0,0,0,.2),0 7px 10px 1px rgba(0,0,0,.14),0 2px 16px 1px rgba(0,0,0,.12)}.md-elevation-z8{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.md-elevation-z9{box-shadow:0 5px 6px -3px rgba(0,0,0,.2),0 9px 12px 1px rgba(0,0,0,.14),0 3px 16px 2px rgba(0,0,0,.12)}.md-elevation-z10{box-shadow:0 6px 6px -3px rgba(0,0,0,.2),0 10px 14px 1px rgba(0,0,0,.14),0 4px 18px 3px rgba(0,0,0,.12)}.md-elevation-z11{box-shadow:0 6px 7px -4px rgba(0,0,0,.2),0 11px 15px 1px rgba(0,0,0,.14),0 4px 20px 3px rgba(0,0,0,.12)}.md-elevation-z12{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.md-elevation-z13{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 13px 19px 2px rgba(0,0,0,.14),0 5px 24px 4px rgba(0,0,0,.12)}.md-elevation-z14{box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}.md-elevation-z15{box-shadow:0 8px 9px -5px rgba(0,0,0,.2),0 15px 22px 2px rgba(0,0,0,.14),0 6px 28px 5px rgba(0,0,0,.12)}.md-elevation-z16{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.md-elevation-z17{box-shadow:0 8px 11px -5px rgba(0,0,0,.2),0 17px 26px 2px rgba(0,0,0,.14),0 6px 32px 5px rgba(0,0,0,.12)}.md-elevation-z18{box-shadow:0 9px 11px -5px rgba(0,0,0,.2),0 18px 28px 2px rgba(0,0,0,.14),0 7px 34px 6px rgba(0,0,0,.12)}.md-elevation-z19{box-shadow:0 9px 12px -6px rgba(0,0,0,.2),0 19px 29px 2px rgba(0,0,0,.14),0 7px 36px 6px rgba(0,0,0,.12)}.md-elevation-z20{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 20px 31px 3px rgba(0,0,0,.14),0 8px 38px 7px rgba(0,0,0,.12)}.md-elevation-z21{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 21px 33px 3px rgba(0,0,0,.14),0 8px 40px 7px rgba(0,0,0,.12)}.md-elevation-z22{box-shadow:0 10px 14px -6px rgba(0,0,0,.2),0 22px 35px 3px rgba(0,0,0,.14),0 8px 42px 7px rgba(0,0,0,.12)}.md-elevation-z23{box-shadow:0 11px 14px -7px rgba(0,0,0,.2),0 23px 36px 3px rgba(0,0,0,.14),0 9px 44px 8px rgba(0,0,0,.12)}.md-elevation-z24{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}[md-ripple]{overflow:hidden}[md-ripple].md-ripple-unbounded{overflow:visible}.md-ripple-background{background-color:rgba(0,0,0,.0588);opacity:0;-webkit-transition:opacity .3s linear;transition:opacity .3s linear;position:absolute;left:0;top:0;right:0;bottom:0}.md-ripple-unbounded .md-ripple-background{display:none}.md-ripple-background.md-ripple-active,.md-ripple-focused .md-ripple-background{opacity:1}.md-ripple-foreground{background-color:rgba(0,0,0,.0588);border-radius:50%;pointer-events:none;opacity:.25;position:absolute;-webkit-transition:opacity,-webkit-transform 0ms cubic-bezier(0,0,.2,1);transition:opacity,-webkit-transform 0ms cubic-bezier(0,0,.2,1);transition:opacity,transform 0ms cubic-bezier(0,0,.2,1);transition:opacity,transform 0ms cubic-bezier(0,0,.2,1),-webkit-transform 0ms cubic-bezier(0,0,.2,1)}.md-ripple-foreground.md-ripple-fade-in{opacity:1}.md-ripple-foreground.md-ripple-fade-out{opacity:0}.md-visually-hidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;text-transform:none;width:1px}.md-overlay-container{position:absolute;pointer-events:none;top:0;left:0;height:100%;width:100%;z-index:1}.md-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000}.md-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1;pointer-events:auto;-webkit-transition:opacity .4s cubic-bezier(.25,.8,.25,1);transition:opacity .4s cubic-bezier(.25,.8,.25,1);background:#212121;opacity:0}.md-overlay-backdrop.md-overlay-backdrop-showing{opacity:.48}.md-ripple-focused .md-ripple-background{background-color:rgba(255,215,64,.1)}[md-button].md-button-focus.md-primary:after,[md-fab].md-button-focus.md-primary:after,[md-icon-button].md-button-focus.md-primary:after,[md-mini-fab].md-button-focus.md-primary:after,[md-raised-button].md-button-focus.md-primary:after{background-color:rgba(103,58,183,.12)}[md-button].md-button-focus.md-accent:after,[md-fab].md-button-focus.md-accent:after,[md-icon-button].md-button-focus.md-accent:after,[md-mini-fab].md-button-focus.md-accent:after,[md-raised-button].md-button-focus.md-accent:after{background-color:rgba(255,215,64,.12)}[md-button].md-button-focus.md-warn:after,[md-fab].md-button-focus.md-warn:after,[md-icon-button].md-button-focus.md-warn:after,[md-mini-fab].md-button-focus.md-warn:after,[md-raised-button].md-button-focus.md-warn:after{background-color:rgba(244,67,54,.12)}[md-button],[md-icon-button]{background:transparent}[md-button].md-primary,[md-icon-button].md-primary{color:#673ab7}[md-button].md-accent,[md-icon-button].md-accent{color:#ffd740}[md-button].md-warn,[md-icon-button].md-warn{color:#f44336}[md-button].md-accent[disabled],[md-button].md-primary[disabled],[md-button].md-warn[disabled],[md-button][disabled][disabled],[md-icon-button].md-accent[disabled],[md-icon-button].md-primary[disabled],[md-icon-button].md-warn[disabled],[md-icon-button][disabled][disabled]{color:rgba(0,0,0,.38)}[md-button]:hover.md-primary:after,[md-icon-button]:hover.md-primary:after{background-color:rgba(103,58,183,.12)}[md-button]:hover.md-accent:after,[md-icon-button]:hover.md-accent:after{background-color:rgba(255,215,64,.12)}[md-button]:hover.md-warn:after,[md-icon-button]:hover.md-warn:after{background-color:rgba(244,67,54,.12)}[md-fab],[md-mini-fab],[md-raised-button]{background-color:#fafafa}[md-fab].md-primary,[md-mini-fab].md-primary,[md-raised-button].md-primary{color:hsla(0,0%,100%,.87)}[md-fab].md-accent,[md-mini-fab].md-accent,[md-raised-button].md-accent{color:rgba(0,0,0,.87)}[md-fab].md-warn,[md-mini-fab].md-warn,[md-raised-button].md-warn{color:#fff}[md-fab].md-accent[disabled],[md-fab].md-primary[disabled],[md-fab].md-warn[disabled],[md-fab][disabled][disabled],[md-mini-fab].md-accent[disabled],[md-mini-fab].md-primary[disabled],[md-mini-fab].md-warn[disabled],[md-mini-fab][disabled][disabled],[md-raised-button].md-accent[disabled],[md-raised-button].md-primary[disabled],[md-raised-button].md-warn[disabled],[md-raised-button][disabled][disabled]{color:rgba(0,0,0,.38)}[md-fab].md-primary,[md-mini-fab].md-primary,[md-raised-button].md-primary{background-color:#673ab7}[md-fab].md-accent,[md-mini-fab].md-accent,[md-raised-button].md-accent{background-color:#ffd740}[md-fab].md-warn,[md-mini-fab].md-warn,[md-raised-button].md-warn{background-color:#f44336}[md-fab].md-accent[disabled],[md-fab].md-primary[disabled],[md-fab].md-warn[disabled],[md-fab][disabled][disabled],[md-mini-fab].md-accent[disabled],[md-mini-fab].md-primary[disabled],[md-mini-fab].md-warn[disabled],[md-mini-fab][disabled][disabled],[md-raised-button].md-accent[disabled],[md-raised-button].md-primary[disabled],[md-raised-button].md-warn[disabled],[md-raised-button][disabled][disabled]{background-color:rgba(0,0,0,.12)}[md-fab],[md-mini-fab]{background-color:#ffd740;color:rgba(0,0,0,.87)}.md-button-toggle-checked .md-button-toggle-label-content{background-color:#e0e0e0}.md-button-toggle-disabled .md-button-toggle-label-content{background-color:rgba(0,0,0,.38)}md-card{background:#fff;color:#000}md-card-subtitle{color:rgba(0,0,0,.54)}.md-checkbox-frame{border-color:rgba(0,0,0,.54)}.md-checkbox-checkmark{fill:#fafafa}.md-checkbox-checkmark-path{stroke:#fafafa!important}.md-checkbox-mixedmark{background-color:#fafafa}.md-checkbox-checked .md-checkbox-background,.md-checkbox-indeterminate .md-checkbox-background{background-color:#ffc107}.md-checkbox-disabled.md-checkbox-checked .md-checkbox-background,.md-checkbox-disabled.md-checkbox-indeterminate .md-checkbox-background{background-color:#b0b0b0}.md-checkbox-disabled:not(.md-checkbox-checked) .md-checkbox-frame{border-color:#b0b0b0}.md-checkbox-focused .md-ink-ripple{background-color:rgba(255,215,64,.26)}md-dialog-container{background:#fff}.md-input-placeholder{color:rgba(0,0,0,.38)}.md-input-placeholder.md-focused{color:#673ab7}.md-input-placeholder.md-focused.md-accent{color:#ffd740}.md-input-placeholder.md-focused.md-warn{color:#f44336}.md-input-placeholder.md-float.md-focused .md-placeholder-required,.md-input-placeholder.md-float:not(.md-empty) .md-placeholder-required,md-input input:-webkit-autofill+.md-input-placeholder .md-placeholder-required{color:#ffd740}.md-input-underline{border-color:rgba(0,0,0,.38)}.md-input-underline .md-input-ripple{background-color:#673ab7}.md-input-underline .md-input-ripple.md-accent{background-color:#ffd740}.md-input-underline .md-input-ripple.md-warn{background-color:#f44336}md-list a[md-list-item],md-list md-list-item,md-nav-list a[md-list-item],md-nav-list md-list-item{color:#000}md-list [md-subheader],md-nav-list [md-subheader]{color:rgba(0,0,0,.54)}md-divider{border-top-color:rgba(0,0,0,.12)}md-nav-list .md-list-item.md-list-item-focus,md-nav-list .md-list-item:hover{background:rgba(0,0,0,.04)}.md-menu{background:#fff}[md-menu-item]{background:transparent;color:rgba(0,0,0,.87)}[md-menu-item][disabled]{color:rgba(0,0,0,.38)}[md-menu-item]:focus:not([disabled]),[md-menu-item]:hover:not([disabled]){background:rgba(0,0,0,.04)}.md-progress-bar-background{background:url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%271.1%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20xmlns%3Axlink%3D%27http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%27%20x%3D%270px%27%20y%3D%270px%27%20enable-background%3D%27new%200%200%205%202%27%20xml%3Aspace%3D%27preserve%27%20viewBox%3D%270%200%205%202%27%20preserveAspectRatio%3D%27none%20slice%27%3E%3Ccircle%20cx%3D%271%27%20cy%3D%271%27%20r%3D%271%27%20fill%3D%27#d1c4e9%27%2F%3E%3C%2Fsvg%3E\")}.md-progress-bar-buffer{background-color:#d1c4e9}md-progress-bar[color=accent] .md-progress-bar-background{background:url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%271.1%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20xmlns%3Axlink%3D%27http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%27%20x%3D%270px%27%20y%3D%270px%27%20enable-background%3D%27new%200%200%205%202%27%20xml%3Aspace%3D%27preserve%27%20viewBox%3D%270%200%205%202%27%20preserveAspectRatio%3D%27none%20slice%27%3E%3Ccircle%20cx%3D%271%27%20cy%3D%271%27%20r%3D%271%27%20fill%3D%27#ffecb3%27%2F%3E%3C%2Fsvg%3E\")}md-progress-bar[color=accent] .md-progress-bar-buffer{background-color:#ffecb3}md-progress-bar[color=accent] .md-progress-bar-fill:after{background-color:#ffb300}md-progress-bar[color=warn] .md-progress-bar-background{background:url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%271.1%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20xmlns%3Axlink%3D%27http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%27%20x%3D%270px%27%20y%3D%270px%27%20enable-background%3D%27new%200%200%205%202%27%20xml%3Aspace%3D%27preserve%27%20viewBox%3D%270%200%205%202%27%20preserveAspectRatio%3D%27none%20slice%27%3E%3Ccircle%20cx%3D%271%27%20cy%3D%271%27%20r%3D%271%27%20fill%3D%27#ffcdd2%27%2F%3E%3C%2Fsvg%3E\")}md-progress-bar[color=warn] .md-progress-bar-buffer{background-color:#ffcdd2}md-progress-bar[color=warn] .md-progress-bar-fill:after{background-color:#e53935}.md-progress-bar-fill:after{background-color:#5e35b1}md-progress-circle path,md-spinner path{stroke:#5e35b1}md-progress-circle[color=accent] path,md-spinner[color=accent] path{stroke:#ffb300}md-progress-circle[color=warn] path,md-spinner[color=warn] path{stroke:#e53935}.md-radio-outer-circle{border-color:rgba(0,0,0,.54)}.md-radio-checked .md-radio-outer-circle{border-color:#ffd740}.md-radio-disabled .md-radio-outer-circle{border-color:rgba(0,0,0,.38)}.md-radio-inner-circle{background-color:#ffd740}.md-radio-disabled .md-radio-inner-circle{background-color:rgba(0,0,0,.38)}.md-radio-focused .md-ink-ripple{background-color:rgba(255,215,64,.26)}md-sidenav-layout{background-color:#fafafa;color:rgba(0,0,0,.87)}md-sidenav{color:rgba(0,0,0,.87)}md-sidenav,md-sidenav.md-sidenav-push{background-color:#fff}.md-sidenav-backdrop.md-sidenav-shown{background-color:rgba(0,0,0,.6)}md-slide-toggle.md-checked .md-slide-toggle-thumb{background-color:#ffd740}md-slide-toggle.md-checked .md-slide-toggle-bar{background-color:rgba(255,215,64,.5)}md-slide-toggle.md-slide-toggle-focused:not(.md-checked) .md-ink-ripple{background-color:rgba(0,0,0,.12)}md-slide-toggle.md-slide-toggle-focused .md-ink-ripple{background-color:rgba(255,215,64,.26)}md-slide-toggle.md-primary.md-checked .md-slide-toggle-thumb{background-color:#673ab7}md-slide-toggle.md-primary.md-checked .md-slide-toggle-bar{background-color:rgba(103,58,183,.5)}md-slide-toggle.md-primary.md-slide-toggle-focused:not(.md-checked) .md-ink-ripple{background-color:rgba(0,0,0,.12)}md-slide-toggle.md-primary.md-slide-toggle-focused .md-ink-ripple{background-color:rgba(103,58,183,.26)}md-slide-toggle.md-warn.md-checked .md-slide-toggle-thumb{background-color:#f44336}md-slide-toggle.md-warn.md-checked .md-slide-toggle-bar{background-color:rgba(244,67,54,.5)}md-slide-toggle.md-warn.md-slide-toggle-focused:not(.md-checked) .md-ink-ripple{background-color:rgba(0,0,0,.12)}md-slide-toggle.md-warn.md-slide-toggle-focused .md-ink-ripple{background-color:rgba(244,67,54,.26)}.md-disabled .md-slide-toggle-thumb{background-color:#bdbdbd}.md-disabled .md-slide-toggle-bar{background-color:rgba(0,0,0,.12)}.md-slide-toggle-thumb{background-color:#fafafa}.md-slide-toggle-bar{background-color:#9e9e9e}.md-slider-track{background-color:rgba(0,0,0,.26)}.md-slider-thumb:after,.md-slider-track-fill{background-color:#ffd740}.md-slider-thumb:after{border-color:#ffd740}.md-slider-thumb-label{background-color:#ffd740}.md-slider-thumb-label-text{color:rgba(0,0,0,.87)}.md-tab-header{border-bottom:1px solid #e0e0e0}.md-tab-label:focus{background-color:rgba(209,196,233,.3)}md-ink-bar{background-color:#673ab7}md-toolbar{background:#f5f5f5;color:rgba(0,0,0,.87)}md-toolbar.md-primary{background:#673ab7;color:hsla(0,0%,100%,.87)}md-toolbar.md-accent{background:#ffd740;color:rgba(0,0,0,.87)}md-toolbar.md-warn{background:#f44336;color:#fff}.md-tooltip{background:rgba(97,97,97,.9)}\n/*# sourceMappingURL=__.css.map */");
})
(function(factory) {
  factory();
});
//# sourceMappingURL=index.js.map